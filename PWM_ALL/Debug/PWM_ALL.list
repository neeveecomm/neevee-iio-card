
PWM_ALL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000300c  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  080031d0  080031d0  000131d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080031e0  080031e0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080031e0  080031e0  000131e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080031e8  080031e8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080031e8  080031e8  000131e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080031ec  080031ec  000131ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080031f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000260  2000000c  080031fc  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000026c  080031fc  0002026c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000099f5  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001645  00000000  00000000  00029a31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009f8  00000000  00000000  0002b078  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000940  00000000  00000000  0002ba70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020a4e  00000000  00000000  0002c3b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b548  00000000  00000000  0004cdfe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ca596  00000000  00000000  00058346  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001228dc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002994  00000000  00000000  0012292c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080031b8 	.word	0x080031b8

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	080031b8 	.word	0x080031b8

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b974 	b.w	8000504 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	468e      	mov	lr, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	d14d      	bne.n	80002de <__udivmoddi4+0xaa>
 8000242:	428a      	cmp	r2, r1
 8000244:	4694      	mov	ip, r2
 8000246:	d969      	bls.n	800031c <__udivmoddi4+0xe8>
 8000248:	fab2 f282 	clz	r2, r2
 800024c:	b152      	cbz	r2, 8000264 <__udivmoddi4+0x30>
 800024e:	fa01 f302 	lsl.w	r3, r1, r2
 8000252:	f1c2 0120 	rsb	r1, r2, #32
 8000256:	fa20 f101 	lsr.w	r1, r0, r1
 800025a:	fa0c fc02 	lsl.w	ip, ip, r2
 800025e:	ea41 0e03 	orr.w	lr, r1, r3
 8000262:	4094      	lsls	r4, r2
 8000264:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000268:	0c21      	lsrs	r1, r4, #16
 800026a:	fbbe f6f8 	udiv	r6, lr, r8
 800026e:	fa1f f78c 	uxth.w	r7, ip
 8000272:	fb08 e316 	mls	r3, r8, r6, lr
 8000276:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800027a:	fb06 f107 	mul.w	r1, r6, r7
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f106 30ff 	add.w	r0, r6, #4294967295
 800028a:	f080 811f 	bcs.w	80004cc <__udivmoddi4+0x298>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 811c 	bls.w	80004cc <__udivmoddi4+0x298>
 8000294:	3e02      	subs	r6, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a5b      	subs	r3, r3, r1
 800029a:	b2a4      	uxth	r4, r4
 800029c:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a0:	fb08 3310 	mls	r3, r8, r0, r3
 80002a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a8:	fb00 f707 	mul.w	r7, r0, r7
 80002ac:	42a7      	cmp	r7, r4
 80002ae:	d90a      	bls.n	80002c6 <__udivmoddi4+0x92>
 80002b0:	eb1c 0404 	adds.w	r4, ip, r4
 80002b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b8:	f080 810a 	bcs.w	80004d0 <__udivmoddi4+0x29c>
 80002bc:	42a7      	cmp	r7, r4
 80002be:	f240 8107 	bls.w	80004d0 <__udivmoddi4+0x29c>
 80002c2:	4464      	add	r4, ip
 80002c4:	3802      	subs	r0, #2
 80002c6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ca:	1be4      	subs	r4, r4, r7
 80002cc:	2600      	movs	r6, #0
 80002ce:	b11d      	cbz	r5, 80002d8 <__udivmoddi4+0xa4>
 80002d0:	40d4      	lsrs	r4, r2
 80002d2:	2300      	movs	r3, #0
 80002d4:	e9c5 4300 	strd	r4, r3, [r5]
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d909      	bls.n	80002f6 <__udivmoddi4+0xc2>
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	f000 80ef 	beq.w	80004c6 <__udivmoddi4+0x292>
 80002e8:	2600      	movs	r6, #0
 80002ea:	e9c5 0100 	strd	r0, r1, [r5]
 80002ee:	4630      	mov	r0, r6
 80002f0:	4631      	mov	r1, r6
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	fab3 f683 	clz	r6, r3
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	d14a      	bne.n	8000394 <__udivmoddi4+0x160>
 80002fe:	428b      	cmp	r3, r1
 8000300:	d302      	bcc.n	8000308 <__udivmoddi4+0xd4>
 8000302:	4282      	cmp	r2, r0
 8000304:	f200 80f9 	bhi.w	80004fa <__udivmoddi4+0x2c6>
 8000308:	1a84      	subs	r4, r0, r2
 800030a:	eb61 0303 	sbc.w	r3, r1, r3
 800030e:	2001      	movs	r0, #1
 8000310:	469e      	mov	lr, r3
 8000312:	2d00      	cmp	r5, #0
 8000314:	d0e0      	beq.n	80002d8 <__udivmoddi4+0xa4>
 8000316:	e9c5 4e00 	strd	r4, lr, [r5]
 800031a:	e7dd      	b.n	80002d8 <__udivmoddi4+0xa4>
 800031c:	b902      	cbnz	r2, 8000320 <__udivmoddi4+0xec>
 800031e:	deff      	udf	#255	; 0xff
 8000320:	fab2 f282 	clz	r2, r2
 8000324:	2a00      	cmp	r2, #0
 8000326:	f040 8092 	bne.w	800044e <__udivmoddi4+0x21a>
 800032a:	eba1 010c 	sub.w	r1, r1, ip
 800032e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000332:	fa1f fe8c 	uxth.w	lr, ip
 8000336:	2601      	movs	r6, #1
 8000338:	0c20      	lsrs	r0, r4, #16
 800033a:	fbb1 f3f7 	udiv	r3, r1, r7
 800033e:	fb07 1113 	mls	r1, r7, r3, r1
 8000342:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000346:	fb0e f003 	mul.w	r0, lr, r3
 800034a:	4288      	cmp	r0, r1
 800034c:	d908      	bls.n	8000360 <__udivmoddi4+0x12c>
 800034e:	eb1c 0101 	adds.w	r1, ip, r1
 8000352:	f103 38ff 	add.w	r8, r3, #4294967295
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x12a>
 8000358:	4288      	cmp	r0, r1
 800035a:	f200 80cb 	bhi.w	80004f4 <__udivmoddi4+0x2c0>
 800035e:	4643      	mov	r3, r8
 8000360:	1a09      	subs	r1, r1, r0
 8000362:	b2a4      	uxth	r4, r4
 8000364:	fbb1 f0f7 	udiv	r0, r1, r7
 8000368:	fb07 1110 	mls	r1, r7, r0, r1
 800036c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000370:	fb0e fe00 	mul.w	lr, lr, r0
 8000374:	45a6      	cmp	lr, r4
 8000376:	d908      	bls.n	800038a <__udivmoddi4+0x156>
 8000378:	eb1c 0404 	adds.w	r4, ip, r4
 800037c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000380:	d202      	bcs.n	8000388 <__udivmoddi4+0x154>
 8000382:	45a6      	cmp	lr, r4
 8000384:	f200 80bb 	bhi.w	80004fe <__udivmoddi4+0x2ca>
 8000388:	4608      	mov	r0, r1
 800038a:	eba4 040e 	sub.w	r4, r4, lr
 800038e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000392:	e79c      	b.n	80002ce <__udivmoddi4+0x9a>
 8000394:	f1c6 0720 	rsb	r7, r6, #32
 8000398:	40b3      	lsls	r3, r6
 800039a:	fa22 fc07 	lsr.w	ip, r2, r7
 800039e:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a2:	fa20 f407 	lsr.w	r4, r0, r7
 80003a6:	fa01 f306 	lsl.w	r3, r1, r6
 80003aa:	431c      	orrs	r4, r3
 80003ac:	40f9      	lsrs	r1, r7
 80003ae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b2:	fa00 f306 	lsl.w	r3, r0, r6
 80003b6:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ba:	0c20      	lsrs	r0, r4, #16
 80003bc:	fa1f fe8c 	uxth.w	lr, ip
 80003c0:	fb09 1118 	mls	r1, r9, r8, r1
 80003c4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c8:	fb08 f00e 	mul.w	r0, r8, lr
 80003cc:	4288      	cmp	r0, r1
 80003ce:	fa02 f206 	lsl.w	r2, r2, r6
 80003d2:	d90b      	bls.n	80003ec <__udivmoddi4+0x1b8>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003dc:	f080 8088 	bcs.w	80004f0 <__udivmoddi4+0x2bc>
 80003e0:	4288      	cmp	r0, r1
 80003e2:	f240 8085 	bls.w	80004f0 <__udivmoddi4+0x2bc>
 80003e6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ea:	4461      	add	r1, ip
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003f4:	fb09 1110 	mls	r1, r9, r0, r1
 80003f8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003fc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000400:	458e      	cmp	lr, r1
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x1e2>
 8000404:	eb1c 0101 	adds.w	r1, ip, r1
 8000408:	f100 34ff 	add.w	r4, r0, #4294967295
 800040c:	d26c      	bcs.n	80004e8 <__udivmoddi4+0x2b4>
 800040e:	458e      	cmp	lr, r1
 8000410:	d96a      	bls.n	80004e8 <__udivmoddi4+0x2b4>
 8000412:	3802      	subs	r0, #2
 8000414:	4461      	add	r1, ip
 8000416:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800041a:	fba0 9402 	umull	r9, r4, r0, r2
 800041e:	eba1 010e 	sub.w	r1, r1, lr
 8000422:	42a1      	cmp	r1, r4
 8000424:	46c8      	mov	r8, r9
 8000426:	46a6      	mov	lr, r4
 8000428:	d356      	bcc.n	80004d8 <__udivmoddi4+0x2a4>
 800042a:	d053      	beq.n	80004d4 <__udivmoddi4+0x2a0>
 800042c:	b15d      	cbz	r5, 8000446 <__udivmoddi4+0x212>
 800042e:	ebb3 0208 	subs.w	r2, r3, r8
 8000432:	eb61 010e 	sbc.w	r1, r1, lr
 8000436:	fa01 f707 	lsl.w	r7, r1, r7
 800043a:	fa22 f306 	lsr.w	r3, r2, r6
 800043e:	40f1      	lsrs	r1, r6
 8000440:	431f      	orrs	r7, r3
 8000442:	e9c5 7100 	strd	r7, r1, [r5]
 8000446:	2600      	movs	r6, #0
 8000448:	4631      	mov	r1, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	f1c2 0320 	rsb	r3, r2, #32
 8000452:	40d8      	lsrs	r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa21 f303 	lsr.w	r3, r1, r3
 800045c:	4091      	lsls	r1, r2
 800045e:	4301      	orrs	r1, r0
 8000460:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000464:	fa1f fe8c 	uxth.w	lr, ip
 8000468:	fbb3 f0f7 	udiv	r0, r3, r7
 800046c:	fb07 3610 	mls	r6, r7, r0, r3
 8000470:	0c0b      	lsrs	r3, r1, #16
 8000472:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000476:	fb00 f60e 	mul.w	r6, r0, lr
 800047a:	429e      	cmp	r6, r3
 800047c:	fa04 f402 	lsl.w	r4, r4, r2
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x260>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 38ff 	add.w	r8, r0, #4294967295
 800048a:	d22f      	bcs.n	80004ec <__udivmoddi4+0x2b8>
 800048c:	429e      	cmp	r6, r3
 800048e:	d92d      	bls.n	80004ec <__udivmoddi4+0x2b8>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1b9b      	subs	r3, r3, r6
 8000496:	b289      	uxth	r1, r1
 8000498:	fbb3 f6f7 	udiv	r6, r3, r7
 800049c:	fb07 3316 	mls	r3, r7, r6, r3
 80004a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a4:	fb06 f30e 	mul.w	r3, r6, lr
 80004a8:	428b      	cmp	r3, r1
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x28a>
 80004ac:	eb1c 0101 	adds.w	r1, ip, r1
 80004b0:	f106 38ff 	add.w	r8, r6, #4294967295
 80004b4:	d216      	bcs.n	80004e4 <__udivmoddi4+0x2b0>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d914      	bls.n	80004e4 <__udivmoddi4+0x2b0>
 80004ba:	3e02      	subs	r6, #2
 80004bc:	4461      	add	r1, ip
 80004be:	1ac9      	subs	r1, r1, r3
 80004c0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004c4:	e738      	b.n	8000338 <__udivmoddi4+0x104>
 80004c6:	462e      	mov	r6, r5
 80004c8:	4628      	mov	r0, r5
 80004ca:	e705      	b.n	80002d8 <__udivmoddi4+0xa4>
 80004cc:	4606      	mov	r6, r0
 80004ce:	e6e3      	b.n	8000298 <__udivmoddi4+0x64>
 80004d0:	4618      	mov	r0, r3
 80004d2:	e6f8      	b.n	80002c6 <__udivmoddi4+0x92>
 80004d4:	454b      	cmp	r3, r9
 80004d6:	d2a9      	bcs.n	800042c <__udivmoddi4+0x1f8>
 80004d8:	ebb9 0802 	subs.w	r8, r9, r2
 80004dc:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004e0:	3801      	subs	r0, #1
 80004e2:	e7a3      	b.n	800042c <__udivmoddi4+0x1f8>
 80004e4:	4646      	mov	r6, r8
 80004e6:	e7ea      	b.n	80004be <__udivmoddi4+0x28a>
 80004e8:	4620      	mov	r0, r4
 80004ea:	e794      	b.n	8000416 <__udivmoddi4+0x1e2>
 80004ec:	4640      	mov	r0, r8
 80004ee:	e7d1      	b.n	8000494 <__udivmoddi4+0x260>
 80004f0:	46d0      	mov	r8, sl
 80004f2:	e77b      	b.n	80003ec <__udivmoddi4+0x1b8>
 80004f4:	3b02      	subs	r3, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	e732      	b.n	8000360 <__udivmoddi4+0x12c>
 80004fa:	4630      	mov	r0, r6
 80004fc:	e709      	b.n	8000312 <__udivmoddi4+0xde>
 80004fe:	4464      	add	r4, ip
 8000500:	3802      	subs	r0, #2
 8000502:	e742      	b.n	800038a <__udivmoddi4+0x156>

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800050c:	f001 f850 	bl	80015b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000510:	f000 f81a 	bl	8000548 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000514:	f000 fc62 	bl	8000ddc <MX_GPIO_Init>
  MX_TIM1_Init();
 8000518:	f000 f882 	bl	8000620 <MX_TIM1_Init>
  MX_TIM2_Init();
 800051c:	f000 f932 	bl	8000784 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000520:	f000 f9aa 	bl	8000878 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000524:	f000 fa2c 	bl	8000980 <MX_TIM4_Init>
  MX_TIM5_Init();
 8000528:	f000 faae 	bl	8000a88 <MX_TIM5_Init>
  MX_TIM8_Init();
 800052c:	f000 fb28 	bl	8000b80 <MX_TIM8_Init>
  MX_TIM9_Init();
 8000530:	f000 fbba 	bl	8000ca8 <MX_TIM9_Init>
  MX_TIM12_Init();
 8000534:	f000 fc0c 	bl	8000d50 <MX_TIM12_Init>
//
//HAL_TIM_PWM_Start(&htim9,TIM_CHANNEL_4);
//
/*       __________________________________________________________________     */

HAL_TIM_PWM_Start(&htim12,TIM_CHANNEL_2);
 8000538:	2104      	movs	r1, #4
 800053a:	4802      	ldr	r0, [pc, #8]	; (8000544 <main+0x3c>)
 800053c:	f002 f942 	bl	80027c4 <HAL_TIM_PWM_Start>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000540:	e7fe      	b.n	8000540 <main+0x38>
 8000542:	bf00      	nop
 8000544:	20000220 	.word	0x20000220

08000548 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b094      	sub	sp, #80	; 0x50
 800054c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800054e:	f107 031c 	add.w	r3, r7, #28
 8000552:	2234      	movs	r2, #52	; 0x34
 8000554:	2100      	movs	r1, #0
 8000556:	4618      	mov	r0, r3
 8000558:	f002 fe26 	bl	80031a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800055c:	f107 0308 	add.w	r3, r7, #8
 8000560:	2200      	movs	r2, #0
 8000562:	601a      	str	r2, [r3, #0]
 8000564:	605a      	str	r2, [r3, #4]
 8000566:	609a      	str	r2, [r3, #8]
 8000568:	60da      	str	r2, [r3, #12]
 800056a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800056c:	2300      	movs	r3, #0
 800056e:	607b      	str	r3, [r7, #4]
 8000570:	4b29      	ldr	r3, [pc, #164]	; (8000618 <SystemClock_Config+0xd0>)
 8000572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000574:	4a28      	ldr	r2, [pc, #160]	; (8000618 <SystemClock_Config+0xd0>)
 8000576:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800057a:	6413      	str	r3, [r2, #64]	; 0x40
 800057c:	4b26      	ldr	r3, [pc, #152]	; (8000618 <SystemClock_Config+0xd0>)
 800057e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000580:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000584:	607b      	str	r3, [r7, #4]
 8000586:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000588:	2300      	movs	r3, #0
 800058a:	603b      	str	r3, [r7, #0]
 800058c:	4b23      	ldr	r3, [pc, #140]	; (800061c <SystemClock_Config+0xd4>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	4a22      	ldr	r2, [pc, #136]	; (800061c <SystemClock_Config+0xd4>)
 8000592:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000596:	6013      	str	r3, [r2, #0]
 8000598:	4b20      	ldr	r3, [pc, #128]	; (800061c <SystemClock_Config+0xd4>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005a0:	603b      	str	r3, [r7, #0]
 80005a2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005a4:	2301      	movs	r3, #1
 80005a6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80005a8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80005ac:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005ae:	2302      	movs	r3, #2
 80005b0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005b2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005b6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80005b8:	2304      	movs	r3, #4
 80005ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 80005bc:	23a8      	movs	r3, #168	; 0xa8
 80005be:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005c0:	2302      	movs	r3, #2
 80005c2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005c4:	2307      	movs	r3, #7
 80005c6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80005c8:	2302      	movs	r3, #2
 80005ca:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005cc:	f107 031c 	add.w	r3, r7, #28
 80005d0:	4618      	mov	r0, r3
 80005d2:	f001 fe09 	bl	80021e8 <HAL_RCC_OscConfig>
 80005d6:	4603      	mov	r3, r0
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d001      	beq.n	80005e0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80005dc:	f000 fcec 	bl	8000fb8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005e0:	230f      	movs	r3, #15
 80005e2:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005e4:	2302      	movs	r3, #2
 80005e6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005e8:	2300      	movs	r3, #0
 80005ea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005ec:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005f0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005f6:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005f8:	f107 0308 	add.w	r3, r7, #8
 80005fc:	2105      	movs	r1, #5
 80005fe:	4618      	mov	r0, r3
 8000600:	f001 fadc 	bl	8001bbc <HAL_RCC_ClockConfig>
 8000604:	4603      	mov	r3, r0
 8000606:	2b00      	cmp	r3, #0
 8000608:	d001      	beq.n	800060e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800060a:	f000 fcd5 	bl	8000fb8 <Error_Handler>
  }
}
 800060e:	bf00      	nop
 8000610:	3750      	adds	r7, #80	; 0x50
 8000612:	46bd      	mov	sp, r7
 8000614:	bd80      	pop	{r7, pc}
 8000616:	bf00      	nop
 8000618:	40023800 	.word	0x40023800
 800061c:	40007000 	.word	0x40007000

08000620 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b092      	sub	sp, #72	; 0x48
 8000624:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000626:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800062a:	2200      	movs	r2, #0
 800062c:	601a      	str	r2, [r3, #0]
 800062e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000630:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000634:	2200      	movs	r2, #0
 8000636:	601a      	str	r2, [r3, #0]
 8000638:	605a      	str	r2, [r3, #4]
 800063a:	609a      	str	r2, [r3, #8]
 800063c:	60da      	str	r2, [r3, #12]
 800063e:	611a      	str	r2, [r3, #16]
 8000640:	615a      	str	r2, [r3, #20]
 8000642:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000644:	1d3b      	adds	r3, r7, #4
 8000646:	2220      	movs	r2, #32
 8000648:	2100      	movs	r1, #0
 800064a:	4618      	mov	r0, r3
 800064c:	f002 fdac 	bl	80031a8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000650:	4b4a      	ldr	r3, [pc, #296]	; (800077c <MX_TIM1_Init+0x15c>)
 8000652:	4a4b      	ldr	r2, [pc, #300]	; (8000780 <MX_TIM1_Init+0x160>)
 8000654:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000656:	4b49      	ldr	r3, [pc, #292]	; (800077c <MX_TIM1_Init+0x15c>)
 8000658:	2200      	movs	r2, #0
 800065a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800065c:	4b47      	ldr	r3, [pc, #284]	; (800077c <MX_TIM1_Init+0x15c>)
 800065e:	2200      	movs	r2, #0
 8000660:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000662:	4b46      	ldr	r3, [pc, #280]	; (800077c <MX_TIM1_Init+0x15c>)
 8000664:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000668:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800066a:	4b44      	ldr	r3, [pc, #272]	; (800077c <MX_TIM1_Init+0x15c>)
 800066c:	2200      	movs	r2, #0
 800066e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000670:	4b42      	ldr	r3, [pc, #264]	; (800077c <MX_TIM1_Init+0x15c>)
 8000672:	2200      	movs	r2, #0
 8000674:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000676:	4b41      	ldr	r3, [pc, #260]	; (800077c <MX_TIM1_Init+0x15c>)
 8000678:	2200      	movs	r2, #0
 800067a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800067c:	483f      	ldr	r0, [pc, #252]	; (800077c <MX_TIM1_Init+0x15c>)
 800067e:	f002 f851 	bl	8002724 <HAL_TIM_PWM_Init>
 8000682:	4603      	mov	r3, r0
 8000684:	2b00      	cmp	r3, #0
 8000686:	d001      	beq.n	800068c <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8000688:	f000 fc96 	bl	8000fb8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800068c:	2300      	movs	r3, #0
 800068e:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000690:	2300      	movs	r3, #0
 8000692:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000694:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000698:	4619      	mov	r1, r3
 800069a:	4838      	ldr	r0, [pc, #224]	; (800077c <MX_TIM1_Init+0x15c>)
 800069c:	f002 fc92 	bl	8002fc4 <HAL_TIMEx_MasterConfigSynchronization>
 80006a0:	4603      	mov	r3, r0
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d001      	beq.n	80006aa <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 80006a6:	f000 fc87 	bl	8000fb8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80006aa:	2360      	movs	r3, #96	; 0x60
 80006ac:	627b      	str	r3, [r7, #36]	; 0x24
//  sConfigOC.Pulse = 32767;
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80006ae:	2300      	movs	r3, #0
 80006b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80006b2:	2300      	movs	r3, #0
 80006b4:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80006b6:	2300      	movs	r3, #0
 80006b8:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80006ba:	2300      	movs	r3, #0
 80006bc:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80006be:	2300      	movs	r3, #0
 80006c0:	63fb      	str	r3, [r7, #60]	; 0x3c

  sConfigOC.Pulse = 13107;
 80006c2:	f243 3333 	movw	r3, #13107	; 0x3333
 80006c6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80006c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006cc:	2200      	movs	r2, #0
 80006ce:	4619      	mov	r1, r3
 80006d0:	482a      	ldr	r0, [pc, #168]	; (800077c <MX_TIM1_Init+0x15c>)
 80006d2:	f002 f93f 	bl	8002954 <HAL_TIM_PWM_ConfigChannel>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <MX_TIM1_Init+0xc0>
  {
    Error_Handler();
 80006dc:	f000 fc6c 	bl	8000fb8 <Error_Handler>
  }
  sConfigOC.Pulse = 26214;
 80006e0:	f246 6366 	movw	r3, #26214	; 0x6666
 80006e4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80006e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006ea:	2204      	movs	r2, #4
 80006ec:	4619      	mov	r1, r3
 80006ee:	4823      	ldr	r0, [pc, #140]	; (800077c <MX_TIM1_Init+0x15c>)
 80006f0:	f002 f930 	bl	8002954 <HAL_TIM_PWM_ConfigChannel>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d001      	beq.n	80006fe <MX_TIM1_Init+0xde>
  {
    Error_Handler();
 80006fa:	f000 fc5d 	bl	8000fb8 <Error_Handler>
  }
  sConfigOC.Pulse = 39321;
 80006fe:	f649 1399 	movw	r3, #39321	; 0x9999
 8000702:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000704:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000708:	2208      	movs	r2, #8
 800070a:	4619      	mov	r1, r3
 800070c:	481b      	ldr	r0, [pc, #108]	; (800077c <MX_TIM1_Init+0x15c>)
 800070e:	f002 f921 	bl	8002954 <HAL_TIM_PWM_ConfigChannel>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d001      	beq.n	800071c <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 8000718:	f000 fc4e 	bl	8000fb8 <Error_Handler>
  }
  sConfigOC.Pulse = 52428;
 800071c:	f64c 43cc 	movw	r3, #52428	; 0xcccc
 8000720:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000722:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000726:	220c      	movs	r2, #12
 8000728:	4619      	mov	r1, r3
 800072a:	4814      	ldr	r0, [pc, #80]	; (800077c <MX_TIM1_Init+0x15c>)
 800072c:	f002 f912 	bl	8002954 <HAL_TIM_PWM_ConfigChannel>
 8000730:	4603      	mov	r3, r0
 8000732:	2b00      	cmp	r3, #0
 8000734:	d001      	beq.n	800073a <MX_TIM1_Init+0x11a>
  {
    Error_Handler();
 8000736:	f000 fc3f 	bl	8000fb8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800073a:	2300      	movs	r3, #0
 800073c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800073e:	2300      	movs	r3, #0
 8000740:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000742:	2300      	movs	r3, #0
 8000744:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000746:	2300      	movs	r3, #0
 8000748:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800074a:	2300      	movs	r3, #0
 800074c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800074e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000752:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000754:	2300      	movs	r3, #0
 8000756:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000758:	1d3b      	adds	r3, r7, #4
 800075a:	4619      	mov	r1, r3
 800075c:	4807      	ldr	r0, [pc, #28]	; (800077c <MX_TIM1_Init+0x15c>)
 800075e:	f002 fcad 	bl	80030bc <HAL_TIMEx_ConfigBreakDeadTime>
 8000762:	4603      	mov	r3, r0
 8000764:	2b00      	cmp	r3, #0
 8000766:	d001      	beq.n	800076c <MX_TIM1_Init+0x14c>
  {
    Error_Handler();
 8000768:	f000 fc26 	bl	8000fb8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800076c:	4803      	ldr	r0, [pc, #12]	; (800077c <MX_TIM1_Init+0x15c>)
 800076e:	f000 fd0b 	bl	8001188 <HAL_TIM_MspPostInit>

}
 8000772:	bf00      	nop
 8000774:	3748      	adds	r7, #72	; 0x48
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	20000028 	.word	0x20000028
 8000780:	40010000 	.word	0x40010000

08000784 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b08a      	sub	sp, #40	; 0x28
 8000788:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800078a:	f107 0320 	add.w	r3, r7, #32
 800078e:	2200      	movs	r2, #0
 8000790:	601a      	str	r2, [r3, #0]
 8000792:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000794:	1d3b      	adds	r3, r7, #4
 8000796:	2200      	movs	r2, #0
 8000798:	601a      	str	r2, [r3, #0]
 800079a:	605a      	str	r2, [r3, #4]
 800079c:	609a      	str	r2, [r3, #8]
 800079e:	60da      	str	r2, [r3, #12]
 80007a0:	611a      	str	r2, [r3, #16]
 80007a2:	615a      	str	r2, [r3, #20]
 80007a4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80007a6:	4b33      	ldr	r3, [pc, #204]	; (8000874 <MX_TIM2_Init+0xf0>)
 80007a8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80007ac:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80007ae:	4b31      	ldr	r3, [pc, #196]	; (8000874 <MX_TIM2_Init+0xf0>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007b4:	4b2f      	ldr	r3, [pc, #188]	; (8000874 <MX_TIM2_Init+0xf0>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80007ba:	4b2e      	ldr	r3, [pc, #184]	; (8000874 <MX_TIM2_Init+0xf0>)
 80007bc:	f04f 32ff 	mov.w	r2, #4294967295
 80007c0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007c2:	4b2c      	ldr	r3, [pc, #176]	; (8000874 <MX_TIM2_Init+0xf0>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007c8:	4b2a      	ldr	r3, [pc, #168]	; (8000874 <MX_TIM2_Init+0xf0>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80007ce:	4829      	ldr	r0, [pc, #164]	; (8000874 <MX_TIM2_Init+0xf0>)
 80007d0:	f001 ffa8 	bl	8002724 <HAL_TIM_PWM_Init>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d001      	beq.n	80007de <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80007da:	f000 fbed 	bl	8000fb8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007de:	2300      	movs	r3, #0
 80007e0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007e2:	2300      	movs	r3, #0
 80007e4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80007e6:	f107 0320 	add.w	r3, r7, #32
 80007ea:	4619      	mov	r1, r3
 80007ec:	4821      	ldr	r0, [pc, #132]	; (8000874 <MX_TIM2_Init+0xf0>)
 80007ee:	f002 fbe9 	bl	8002fc4 <HAL_TIMEx_MasterConfigSynchronization>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d001      	beq.n	80007fc <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 80007f8:	f000 fbde 	bl	8000fb8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80007fc:	2360      	movs	r3, #96	; 0x60
 80007fe:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 2147483648;
 8000800:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8000804:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000806:	2300      	movs	r3, #0
 8000808:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800080a:	2300      	movs	r3, #0
 800080c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800080e:	1d3b      	adds	r3, r7, #4
 8000810:	2200      	movs	r2, #0
 8000812:	4619      	mov	r1, r3
 8000814:	4817      	ldr	r0, [pc, #92]	; (8000874 <MX_TIM2_Init+0xf0>)
 8000816:	f002 f89d 	bl	8002954 <HAL_TIM_PWM_ConfigChannel>
 800081a:	4603      	mov	r3, r0
 800081c:	2b00      	cmp	r3, #0
 800081e:	d001      	beq.n	8000824 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8000820:	f000 fbca 	bl	8000fb8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000824:	1d3b      	adds	r3, r7, #4
 8000826:	2204      	movs	r2, #4
 8000828:	4619      	mov	r1, r3
 800082a:	4812      	ldr	r0, [pc, #72]	; (8000874 <MX_TIM2_Init+0xf0>)
 800082c:	f002 f892 	bl	8002954 <HAL_TIM_PWM_ConfigChannel>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d001      	beq.n	800083a <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 8000836:	f000 fbbf 	bl	8000fb8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800083a:	1d3b      	adds	r3, r7, #4
 800083c:	2208      	movs	r2, #8
 800083e:	4619      	mov	r1, r3
 8000840:	480c      	ldr	r0, [pc, #48]	; (8000874 <MX_TIM2_Init+0xf0>)
 8000842:	f002 f887 	bl	8002954 <HAL_TIM_PWM_ConfigChannel>
 8000846:	4603      	mov	r3, r0
 8000848:	2b00      	cmp	r3, #0
 800084a:	d001      	beq.n	8000850 <MX_TIM2_Init+0xcc>
  {
    Error_Handler();
 800084c:	f000 fbb4 	bl	8000fb8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000850:	1d3b      	adds	r3, r7, #4
 8000852:	220c      	movs	r2, #12
 8000854:	4619      	mov	r1, r3
 8000856:	4807      	ldr	r0, [pc, #28]	; (8000874 <MX_TIM2_Init+0xf0>)
 8000858:	f002 f87c 	bl	8002954 <HAL_TIM_PWM_ConfigChannel>
 800085c:	4603      	mov	r3, r0
 800085e:	2b00      	cmp	r3, #0
 8000860:	d001      	beq.n	8000866 <MX_TIM2_Init+0xe2>
  {
    Error_Handler();
 8000862:	f000 fba9 	bl	8000fb8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000866:	4803      	ldr	r0, [pc, #12]	; (8000874 <MX_TIM2_Init+0xf0>)
 8000868:	f000 fc8e 	bl	8001188 <HAL_TIM_MspPostInit>

}
 800086c:	bf00      	nop
 800086e:	3728      	adds	r7, #40	; 0x28
 8000870:	46bd      	mov	sp, r7
 8000872:	bd80      	pop	{r7, pc}
 8000874:	20000070 	.word	0x20000070

08000878 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b08a      	sub	sp, #40	; 0x28
 800087c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800087e:	f107 0320 	add.w	r3, r7, #32
 8000882:	2200      	movs	r2, #0
 8000884:	601a      	str	r2, [r3, #0]
 8000886:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000888:	1d3b      	adds	r3, r7, #4
 800088a:	2200      	movs	r2, #0
 800088c:	601a      	str	r2, [r3, #0]
 800088e:	605a      	str	r2, [r3, #4]
 8000890:	609a      	str	r2, [r3, #8]
 8000892:	60da      	str	r2, [r3, #12]
 8000894:	611a      	str	r2, [r3, #16]
 8000896:	615a      	str	r2, [r3, #20]
 8000898:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800089a:	4b37      	ldr	r3, [pc, #220]	; (8000978 <MX_TIM3_Init+0x100>)
 800089c:	4a37      	ldr	r2, [pc, #220]	; (800097c <MX_TIM3_Init+0x104>)
 800089e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80008a0:	4b35      	ldr	r3, [pc, #212]	; (8000978 <MX_TIM3_Init+0x100>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008a6:	4b34      	ldr	r3, [pc, #208]	; (8000978 <MX_TIM3_Init+0x100>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80008ac:	4b32      	ldr	r3, [pc, #200]	; (8000978 <MX_TIM3_Init+0x100>)
 80008ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80008b2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008b4:	4b30      	ldr	r3, [pc, #192]	; (8000978 <MX_TIM3_Init+0x100>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008ba:	4b2f      	ldr	r3, [pc, #188]	; (8000978 <MX_TIM3_Init+0x100>)
 80008bc:	2200      	movs	r2, #0
 80008be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80008c0:	482d      	ldr	r0, [pc, #180]	; (8000978 <MX_TIM3_Init+0x100>)
 80008c2:	f001 ff2f 	bl	8002724 <HAL_TIM_PWM_Init>
 80008c6:	4603      	mov	r3, r0
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d001      	beq.n	80008d0 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80008cc:	f000 fb74 	bl	8000fb8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008d0:	2300      	movs	r3, #0
 80008d2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008d4:	2300      	movs	r3, #0
 80008d6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80008d8:	f107 0320 	add.w	r3, r7, #32
 80008dc:	4619      	mov	r1, r3
 80008de:	4826      	ldr	r0, [pc, #152]	; (8000978 <MX_TIM3_Init+0x100>)
 80008e0:	f002 fb70 	bl	8002fc4 <HAL_TIMEx_MasterConfigSynchronization>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d001      	beq.n	80008ee <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80008ea:	f000 fb65 	bl	8000fb8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80008ee:	2360      	movs	r3, #96	; 0x60
 80008f0:	607b      	str	r3, [r7, #4]
//  sConfigOC.Pulse = 32767;
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008f2:	2300      	movs	r3, #0
 80008f4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008f6:	2300      	movs	r3, #0
 80008f8:	617b      	str	r3, [r7, #20]
  sConfigOC.Pulse = 13107;
 80008fa:	f243 3333 	movw	r3, #13107	; 0x3333
 80008fe:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000900:	1d3b      	adds	r3, r7, #4
 8000902:	2200      	movs	r2, #0
 8000904:	4619      	mov	r1, r3
 8000906:	481c      	ldr	r0, [pc, #112]	; (8000978 <MX_TIM3_Init+0x100>)
 8000908:	f002 f824 	bl	8002954 <HAL_TIM_PWM_ConfigChannel>
 800090c:	4603      	mov	r3, r0
 800090e:	2b00      	cmp	r3, #0
 8000910:	d001      	beq.n	8000916 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8000912:	f000 fb51 	bl	8000fb8 <Error_Handler>
  }
  sConfigOC.Pulse = 26214;
 8000916:	f246 6366 	movw	r3, #26214	; 0x6666
 800091a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800091c:	1d3b      	adds	r3, r7, #4
 800091e:	2204      	movs	r2, #4
 8000920:	4619      	mov	r1, r3
 8000922:	4815      	ldr	r0, [pc, #84]	; (8000978 <MX_TIM3_Init+0x100>)
 8000924:	f002 f816 	bl	8002954 <HAL_TIM_PWM_ConfigChannel>
 8000928:	4603      	mov	r3, r0
 800092a:	2b00      	cmp	r3, #0
 800092c:	d001      	beq.n	8000932 <MX_TIM3_Init+0xba>
  {
    Error_Handler();
 800092e:	f000 fb43 	bl	8000fb8 <Error_Handler>
  }
  sConfigOC.Pulse = 39321;
 8000932:	f649 1399 	movw	r3, #39321	; 0x9999
 8000936:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000938:	1d3b      	adds	r3, r7, #4
 800093a:	2208      	movs	r2, #8
 800093c:	4619      	mov	r1, r3
 800093e:	480e      	ldr	r0, [pc, #56]	; (8000978 <MX_TIM3_Init+0x100>)
 8000940:	f002 f808 	bl	8002954 <HAL_TIM_PWM_ConfigChannel>
 8000944:	4603      	mov	r3, r0
 8000946:	2b00      	cmp	r3, #0
 8000948:	d001      	beq.n	800094e <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 800094a:	f000 fb35 	bl	8000fb8 <Error_Handler>
  }
  sConfigOC.Pulse = 52428;
 800094e:	f64c 43cc 	movw	r3, #52428	; 0xcccc
 8000952:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000954:	1d3b      	adds	r3, r7, #4
 8000956:	220c      	movs	r2, #12
 8000958:	4619      	mov	r1, r3
 800095a:	4807      	ldr	r0, [pc, #28]	; (8000978 <MX_TIM3_Init+0x100>)
 800095c:	f001 fffa 	bl	8002954 <HAL_TIM_PWM_ConfigChannel>
 8000960:	4603      	mov	r3, r0
 8000962:	2b00      	cmp	r3, #0
 8000964:	d001      	beq.n	800096a <MX_TIM3_Init+0xf2>
  {
    Error_Handler();
 8000966:	f000 fb27 	bl	8000fb8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800096a:	4803      	ldr	r0, [pc, #12]	; (8000978 <MX_TIM3_Init+0x100>)
 800096c:	f000 fc0c 	bl	8001188 <HAL_TIM_MspPostInit>

}
 8000970:	bf00      	nop
 8000972:	3728      	adds	r7, #40	; 0x28
 8000974:	46bd      	mov	sp, r7
 8000976:	bd80      	pop	{r7, pc}
 8000978:	200000b8 	.word	0x200000b8
 800097c:	40000400 	.word	0x40000400

08000980 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b08a      	sub	sp, #40	; 0x28
 8000984:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000986:	f107 0320 	add.w	r3, r7, #32
 800098a:	2200      	movs	r2, #0
 800098c:	601a      	str	r2, [r3, #0]
 800098e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000990:	1d3b      	adds	r3, r7, #4
 8000992:	2200      	movs	r2, #0
 8000994:	601a      	str	r2, [r3, #0]
 8000996:	605a      	str	r2, [r3, #4]
 8000998:	609a      	str	r2, [r3, #8]
 800099a:	60da      	str	r2, [r3, #12]
 800099c:	611a      	str	r2, [r3, #16]
 800099e:	615a      	str	r2, [r3, #20]
 80009a0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80009a2:	4b37      	ldr	r3, [pc, #220]	; (8000a80 <MX_TIM4_Init+0x100>)
 80009a4:	4a37      	ldr	r2, [pc, #220]	; (8000a84 <MX_TIM4_Init+0x104>)
 80009a6:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80009a8:	4b35      	ldr	r3, [pc, #212]	; (8000a80 <MX_TIM4_Init+0x100>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009ae:	4b34      	ldr	r3, [pc, #208]	; (8000a80 <MX_TIM4_Init+0x100>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80009b4:	4b32      	ldr	r3, [pc, #200]	; (8000a80 <MX_TIM4_Init+0x100>)
 80009b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80009ba:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009bc:	4b30      	ldr	r3, [pc, #192]	; (8000a80 <MX_TIM4_Init+0x100>)
 80009be:	2200      	movs	r2, #0
 80009c0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009c2:	4b2f      	ldr	r3, [pc, #188]	; (8000a80 <MX_TIM4_Init+0x100>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80009c8:	482d      	ldr	r0, [pc, #180]	; (8000a80 <MX_TIM4_Init+0x100>)
 80009ca:	f001 feab 	bl	8002724 <HAL_TIM_PWM_Init>
 80009ce:	4603      	mov	r3, r0
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d001      	beq.n	80009d8 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 80009d4:	f000 faf0 	bl	8000fb8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009d8:	2300      	movs	r3, #0
 80009da:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009dc:	2300      	movs	r3, #0
 80009de:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80009e0:	f107 0320 	add.w	r3, r7, #32
 80009e4:	4619      	mov	r1, r3
 80009e6:	4826      	ldr	r0, [pc, #152]	; (8000a80 <MX_TIM4_Init+0x100>)
 80009e8:	f002 faec 	bl	8002fc4 <HAL_TIMEx_MasterConfigSynchronization>
 80009ec:	4603      	mov	r3, r0
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d001      	beq.n	80009f6 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 80009f2:	f000 fae1 	bl	8000fb8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009f6:	2360      	movs	r3, #96	; 0x60
 80009f8:	607b      	str	r3, [r7, #4]
//  sConfigOC.Pulse = 32767;
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009fa:	2300      	movs	r3, #0
 80009fc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009fe:	2300      	movs	r3, #0
 8000a00:	617b      	str	r3, [r7, #20]

  sConfigOC.Pulse = 13107;
 8000a02:	f243 3333 	movw	r3, #13107	; 0x3333
 8000a06:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a08:	1d3b      	adds	r3, r7, #4
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	481c      	ldr	r0, [pc, #112]	; (8000a80 <MX_TIM4_Init+0x100>)
 8000a10:	f001 ffa0 	bl	8002954 <HAL_TIM_PWM_ConfigChannel>
 8000a14:	4603      	mov	r3, r0
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d001      	beq.n	8000a1e <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 8000a1a:	f000 facd 	bl	8000fb8 <Error_Handler>
  }
  sConfigOC.Pulse = 26214;
 8000a1e:	f246 6366 	movw	r3, #26214	; 0x6666
 8000a22:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000a24:	1d3b      	adds	r3, r7, #4
 8000a26:	2204      	movs	r2, #4
 8000a28:	4619      	mov	r1, r3
 8000a2a:	4815      	ldr	r0, [pc, #84]	; (8000a80 <MX_TIM4_Init+0x100>)
 8000a2c:	f001 ff92 	bl	8002954 <HAL_TIM_PWM_ConfigChannel>
 8000a30:	4603      	mov	r3, r0
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d001      	beq.n	8000a3a <MX_TIM4_Init+0xba>
  {
    Error_Handler();
 8000a36:	f000 fabf 	bl	8000fb8 <Error_Handler>
  }
  sConfigOC.Pulse = 39321 ;
 8000a3a:	f649 1399 	movw	r3, #39321	; 0x9999
 8000a3e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000a40:	1d3b      	adds	r3, r7, #4
 8000a42:	2208      	movs	r2, #8
 8000a44:	4619      	mov	r1, r3
 8000a46:	480e      	ldr	r0, [pc, #56]	; (8000a80 <MX_TIM4_Init+0x100>)
 8000a48:	f001 ff84 	bl	8002954 <HAL_TIM_PWM_ConfigChannel>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d001      	beq.n	8000a56 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8000a52:	f000 fab1 	bl	8000fb8 <Error_Handler>
  }
  sConfigOC.Pulse = 52428;
 8000a56:	f64c 43cc 	movw	r3, #52428	; 0xcccc
 8000a5a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000a5c:	1d3b      	adds	r3, r7, #4
 8000a5e:	220c      	movs	r2, #12
 8000a60:	4619      	mov	r1, r3
 8000a62:	4807      	ldr	r0, [pc, #28]	; (8000a80 <MX_TIM4_Init+0x100>)
 8000a64:	f001 ff76 	bl	8002954 <HAL_TIM_PWM_ConfigChannel>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d001      	beq.n	8000a72 <MX_TIM4_Init+0xf2>
  {
    Error_Handler();
 8000a6e:	f000 faa3 	bl	8000fb8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000a72:	4803      	ldr	r0, [pc, #12]	; (8000a80 <MX_TIM4_Init+0x100>)
 8000a74:	f000 fb88 	bl	8001188 <HAL_TIM_MspPostInit>

}
 8000a78:	bf00      	nop
 8000a7a:	3728      	adds	r7, #40	; 0x28
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bd80      	pop	{r7, pc}
 8000a80:	20000100 	.word	0x20000100
 8000a84:	40000800 	.word	0x40000800

08000a88 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b08a      	sub	sp, #40	; 0x28
 8000a8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a8e:	f107 0320 	add.w	r3, r7, #32
 8000a92:	2200      	movs	r2, #0
 8000a94:	601a      	str	r2, [r3, #0]
 8000a96:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a98:	1d3b      	adds	r3, r7, #4
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	601a      	str	r2, [r3, #0]
 8000a9e:	605a      	str	r2, [r3, #4]
 8000aa0:	609a      	str	r2, [r3, #8]
 8000aa2:	60da      	str	r2, [r3, #12]
 8000aa4:	611a      	str	r2, [r3, #16]
 8000aa6:	615a      	str	r2, [r3, #20]
 8000aa8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000aaa:	4b33      	ldr	r3, [pc, #204]	; (8000b78 <MX_TIM5_Init+0xf0>)
 8000aac:	4a33      	ldr	r2, [pc, #204]	; (8000b7c <MX_TIM5_Init+0xf4>)
 8000aae:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8000ab0:	4b31      	ldr	r3, [pc, #196]	; (8000b78 <MX_TIM5_Init+0xf0>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ab6:	4b30      	ldr	r3, [pc, #192]	; (8000b78 <MX_TIM5_Init+0xf0>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8000abc:	4b2e      	ldr	r3, [pc, #184]	; (8000b78 <MX_TIM5_Init+0xf0>)
 8000abe:	f04f 32ff 	mov.w	r2, #4294967295
 8000ac2:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ac4:	4b2c      	ldr	r3, [pc, #176]	; (8000b78 <MX_TIM5_Init+0xf0>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000aca:	4b2b      	ldr	r3, [pc, #172]	; (8000b78 <MX_TIM5_Init+0xf0>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8000ad0:	4829      	ldr	r0, [pc, #164]	; (8000b78 <MX_TIM5_Init+0xf0>)
 8000ad2:	f001 fe27 	bl	8002724 <HAL_TIM_PWM_Init>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d001      	beq.n	8000ae0 <MX_TIM5_Init+0x58>
  {
    Error_Handler();
 8000adc:	f000 fa6c 	bl	8000fb8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000ae8:	f107 0320 	add.w	r3, r7, #32
 8000aec:	4619      	mov	r1, r3
 8000aee:	4822      	ldr	r0, [pc, #136]	; (8000b78 <MX_TIM5_Init+0xf0>)
 8000af0:	f002 fa68 	bl	8002fc4 <HAL_TIMEx_MasterConfigSynchronization>
 8000af4:	4603      	mov	r3, r0
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d001      	beq.n	8000afe <MX_TIM5_Init+0x76>
  {
    Error_Handler();
 8000afa:	f000 fa5d 	bl	8000fb8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000afe:	2360      	movs	r3, #96	; 0x60
 8000b00:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 2147483648;
 8000b02:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8000b06:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b10:	1d3b      	adds	r3, r7, #4
 8000b12:	2200      	movs	r2, #0
 8000b14:	4619      	mov	r1, r3
 8000b16:	4818      	ldr	r0, [pc, #96]	; (8000b78 <MX_TIM5_Init+0xf0>)
 8000b18:	f001 ff1c 	bl	8002954 <HAL_TIM_PWM_ConfigChannel>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d001      	beq.n	8000b26 <MX_TIM5_Init+0x9e>
  {
    Error_Handler();
 8000b22:	f000 fa49 	bl	8000fb8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000b26:	1d3b      	adds	r3, r7, #4
 8000b28:	2204      	movs	r2, #4
 8000b2a:	4619      	mov	r1, r3
 8000b2c:	4812      	ldr	r0, [pc, #72]	; (8000b78 <MX_TIM5_Init+0xf0>)
 8000b2e:	f001 ff11 	bl	8002954 <HAL_TIM_PWM_ConfigChannel>
 8000b32:	4603      	mov	r3, r0
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d001      	beq.n	8000b3c <MX_TIM5_Init+0xb4>
  {
    Error_Handler();
 8000b38:	f000 fa3e 	bl	8000fb8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000b3c:	1d3b      	adds	r3, r7, #4
 8000b3e:	2208      	movs	r2, #8
 8000b40:	4619      	mov	r1, r3
 8000b42:	480d      	ldr	r0, [pc, #52]	; (8000b78 <MX_TIM5_Init+0xf0>)
 8000b44:	f001 ff06 	bl	8002954 <HAL_TIM_PWM_ConfigChannel>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d001      	beq.n	8000b52 <MX_TIM5_Init+0xca>
  {
    Error_Handler();
 8000b4e:	f000 fa33 	bl	8000fb8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000b52:	1d3b      	adds	r3, r7, #4
 8000b54:	220c      	movs	r2, #12
 8000b56:	4619      	mov	r1, r3
 8000b58:	4807      	ldr	r0, [pc, #28]	; (8000b78 <MX_TIM5_Init+0xf0>)
 8000b5a:	f001 fefb 	bl	8002954 <HAL_TIM_PWM_ConfigChannel>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d001      	beq.n	8000b68 <MX_TIM5_Init+0xe0>
  {
    Error_Handler();
 8000b64:	f000 fa28 	bl	8000fb8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8000b68:	4803      	ldr	r0, [pc, #12]	; (8000b78 <MX_TIM5_Init+0xf0>)
 8000b6a:	f000 fb0d 	bl	8001188 <HAL_TIM_MspPostInit>

}
 8000b6e:	bf00      	nop
 8000b70:	3728      	adds	r7, #40	; 0x28
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	20000148 	.word	0x20000148
 8000b7c:	40000c00 	.word	0x40000c00

08000b80 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b092      	sub	sp, #72	; 0x48
 8000b84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b86:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	601a      	str	r2, [r3, #0]
 8000b8e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b94:	2200      	movs	r2, #0
 8000b96:	601a      	str	r2, [r3, #0]
 8000b98:	605a      	str	r2, [r3, #4]
 8000b9a:	609a      	str	r2, [r3, #8]
 8000b9c:	60da      	str	r2, [r3, #12]
 8000b9e:	611a      	str	r2, [r3, #16]
 8000ba0:	615a      	str	r2, [r3, #20]
 8000ba2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000ba4:	1d3b      	adds	r3, r7, #4
 8000ba6:	2220      	movs	r2, #32
 8000ba8:	2100      	movs	r1, #0
 8000baa:	4618      	mov	r0, r3
 8000bac:	f002 fafc 	bl	80031a8 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000bb0:	4b3b      	ldr	r3, [pc, #236]	; (8000ca0 <MX_TIM8_Init+0x120>)
 8000bb2:	4a3c      	ldr	r2, [pc, #240]	; (8000ca4 <MX_TIM8_Init+0x124>)
 8000bb4:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8000bb6:	4b3a      	ldr	r3, [pc, #232]	; (8000ca0 <MX_TIM8_Init+0x120>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bbc:	4b38      	ldr	r3, [pc, #224]	; (8000ca0 <MX_TIM8_Init+0x120>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8000bc2:	4b37      	ldr	r3, [pc, #220]	; (8000ca0 <MX_TIM8_Init+0x120>)
 8000bc4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000bc8:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bca:	4b35      	ldr	r3, [pc, #212]	; (8000ca0 <MX_TIM8_Init+0x120>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000bd0:	4b33      	ldr	r3, [pc, #204]	; (8000ca0 <MX_TIM8_Init+0x120>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bd6:	4b32      	ldr	r3, [pc, #200]	; (8000ca0 <MX_TIM8_Init+0x120>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8000bdc:	4830      	ldr	r0, [pc, #192]	; (8000ca0 <MX_TIM8_Init+0x120>)
 8000bde:	f001 fda1 	bl	8002724 <HAL_TIM_PWM_Init>
 8000be2:	4603      	mov	r3, r0
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d001      	beq.n	8000bec <MX_TIM8_Init+0x6c>
  {
    Error_Handler();
 8000be8:	f000 f9e6 	bl	8000fb8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bec:	2300      	movs	r3, #0
 8000bee:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000bf4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000bf8:	4619      	mov	r1, r3
 8000bfa:	4829      	ldr	r0, [pc, #164]	; (8000ca0 <MX_TIM8_Init+0x120>)
 8000bfc:	f002 f9e2 	bl	8002fc4 <HAL_TIMEx_MasterConfigSynchronization>
 8000c00:	4603      	mov	r3, r0
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d001      	beq.n	8000c0a <MX_TIM8_Init+0x8a>
  {
    Error_Handler();
 8000c06:	f000 f9d7 	bl	8000fb8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c0a:	2360      	movs	r3, #96	; 0x60
 8000c0c:	627b      	str	r3, [r7, #36]	; 0x24
//  sConfigOC.Pulse = 32767;
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000c12:	2300      	movs	r3, #0
 8000c14:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c16:	2300      	movs	r3, #0
 8000c18:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.Pulse = 39321 ;
 8000c22:	f649 1399 	movw	r3, #39321	; 0x9999
 8000c26:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c28:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	4619      	mov	r1, r3
 8000c30:	481b      	ldr	r0, [pc, #108]	; (8000ca0 <MX_TIM8_Init+0x120>)
 8000c32:	f001 fe8f 	bl	8002954 <HAL_TIM_PWM_ConfigChannel>
 8000c36:	4603      	mov	r3, r0
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d001      	beq.n	8000c40 <MX_TIM8_Init+0xc0>
  {
    Error_Handler();
 8000c3c:	f000 f9bc 	bl	8000fb8 <Error_Handler>
  }
  sConfigOC.Pulse = 52428;
 8000c40:	f64c 43cc 	movw	r3, #52428	; 0xcccc
 8000c44:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000c46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c4a:	2204      	movs	r2, #4
 8000c4c:	4619      	mov	r1, r3
 8000c4e:	4814      	ldr	r0, [pc, #80]	; (8000ca0 <MX_TIM8_Init+0x120>)
 8000c50:	f001 fe80 	bl	8002954 <HAL_TIM_PWM_ConfigChannel>
 8000c54:	4603      	mov	r3, r0
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d001      	beq.n	8000c5e <MX_TIM8_Init+0xde>
  {
    Error_Handler();
 8000c5a:	f000 f9ad 	bl	8000fb8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000c62:	2300      	movs	r3, #0
 8000c64:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000c66:	2300      	movs	r3, #0
 8000c68:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000c72:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c76:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8000c7c:	1d3b      	adds	r3, r7, #4
 8000c7e:	4619      	mov	r1, r3
 8000c80:	4807      	ldr	r0, [pc, #28]	; (8000ca0 <MX_TIM8_Init+0x120>)
 8000c82:	f002 fa1b 	bl	80030bc <HAL_TIMEx_ConfigBreakDeadTime>
 8000c86:	4603      	mov	r3, r0
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d001      	beq.n	8000c90 <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 8000c8c:	f000 f994 	bl	8000fb8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8000c90:	4803      	ldr	r0, [pc, #12]	; (8000ca0 <MX_TIM8_Init+0x120>)
 8000c92:	f000 fa79 	bl	8001188 <HAL_TIM_MspPostInit>

}
 8000c96:	bf00      	nop
 8000c98:	3748      	adds	r7, #72	; 0x48
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	20000190 	.word	0x20000190
 8000ca4:	40010400 	.word	0x40010400

08000ca8 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b088      	sub	sp, #32
 8000cac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000cae:	1d3b      	adds	r3, r7, #4
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	601a      	str	r2, [r3, #0]
 8000cb4:	605a      	str	r2, [r3, #4]
 8000cb6:	609a      	str	r2, [r3, #8]
 8000cb8:	60da      	str	r2, [r3, #12]
 8000cba:	611a      	str	r2, [r3, #16]
 8000cbc:	615a      	str	r2, [r3, #20]
 8000cbe:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8000cc0:	4b21      	ldr	r3, [pc, #132]	; (8000d48 <MX_TIM9_Init+0xa0>)
 8000cc2:	4a22      	ldr	r2, [pc, #136]	; (8000d4c <MX_TIM9_Init+0xa4>)
 8000cc4:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 0;
 8000cc6:	4b20      	ldr	r3, [pc, #128]	; (8000d48 <MX_TIM9_Init+0xa0>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ccc:	4b1e      	ldr	r3, [pc, #120]	; (8000d48 <MX_TIM9_Init+0xa0>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 65535;
 8000cd2:	4b1d      	ldr	r3, [pc, #116]	; (8000d48 <MX_TIM9_Init+0xa0>)
 8000cd4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000cd8:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cda:	4b1b      	ldr	r3, [pc, #108]	; (8000d48 <MX_TIM9_Init+0xa0>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ce0:	4b19      	ldr	r3, [pc, #100]	; (8000d48 <MX_TIM9_Init+0xa0>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 8000ce6:	4818      	ldr	r0, [pc, #96]	; (8000d48 <MX_TIM9_Init+0xa0>)
 8000ce8:	f001 fd1c 	bl	8002724 <HAL_TIM_PWM_Init>
 8000cec:	4603      	mov	r3, r0
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d001      	beq.n	8000cf6 <MX_TIM9_Init+0x4e>
  {
    Error_Handler();
 8000cf2:	f000 f961 	bl	8000fb8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000cf6:	2360      	movs	r3, #96	; 0x60
 8000cf8:	607b      	str	r3, [r7, #4]
//  sConfigOC.Pulse = 32767;
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	617b      	str	r3, [r7, #20]
  sConfigOC.Pulse = 39321 ;
 8000d02:	f649 1399 	movw	r3, #39321	; 0x9999
 8000d06:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d08:	1d3b      	adds	r3, r7, #4
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	4619      	mov	r1, r3
 8000d0e:	480e      	ldr	r0, [pc, #56]	; (8000d48 <MX_TIM9_Init+0xa0>)
 8000d10:	f001 fe20 	bl	8002954 <HAL_TIM_PWM_ConfigChannel>
 8000d14:	4603      	mov	r3, r0
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d001      	beq.n	8000d1e <MX_TIM9_Init+0x76>
  {
    Error_Handler();
 8000d1a:	f000 f94d 	bl	8000fb8 <Error_Handler>
  }
  sConfigOC.Pulse = 52428;
 8000d1e:	f64c 43cc 	movw	r3, #52428	; 0xcccc
 8000d22:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000d24:	1d3b      	adds	r3, r7, #4
 8000d26:	2204      	movs	r2, #4
 8000d28:	4619      	mov	r1, r3
 8000d2a:	4807      	ldr	r0, [pc, #28]	; (8000d48 <MX_TIM9_Init+0xa0>)
 8000d2c:	f001 fe12 	bl	8002954 <HAL_TIM_PWM_ConfigChannel>
 8000d30:	4603      	mov	r3, r0
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d001      	beq.n	8000d3a <MX_TIM9_Init+0x92>
  {
    Error_Handler();
 8000d36:	f000 f93f 	bl	8000fb8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 8000d3a:	4803      	ldr	r0, [pc, #12]	; (8000d48 <MX_TIM9_Init+0xa0>)
 8000d3c:	f000 fa24 	bl	8001188 <HAL_TIM_MspPostInit>

}
 8000d40:	bf00      	nop
 8000d42:	3720      	adds	r7, #32
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bd80      	pop	{r7, pc}
 8000d48:	200001d8 	.word	0x200001d8
 8000d4c:	40014000 	.word	0x40014000

08000d50 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b088      	sub	sp, #32
 8000d54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d56:	1d3b      	adds	r3, r7, #4
 8000d58:	2200      	movs	r2, #0
 8000d5a:	601a      	str	r2, [r3, #0]
 8000d5c:	605a      	str	r2, [r3, #4]
 8000d5e:	609a      	str	r2, [r3, #8]
 8000d60:	60da      	str	r2, [r3, #12]
 8000d62:	611a      	str	r2, [r3, #16]
 8000d64:	615a      	str	r2, [r3, #20]
 8000d66:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8000d68:	4b1a      	ldr	r3, [pc, #104]	; (8000dd4 <MX_TIM12_Init+0x84>)
 8000d6a:	4a1b      	ldr	r2, [pc, #108]	; (8000dd8 <MX_TIM12_Init+0x88>)
 8000d6c:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 8000d6e:	4b19      	ldr	r3, [pc, #100]	; (8000dd4 <MX_TIM12_Init+0x84>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d74:	4b17      	ldr	r3, [pc, #92]	; (8000dd4 <MX_TIM12_Init+0x84>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 8000d7a:	4b16      	ldr	r3, [pc, #88]	; (8000dd4 <MX_TIM12_Init+0x84>)
 8000d7c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d80:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d82:	4b14      	ldr	r3, [pc, #80]	; (8000dd4 <MX_TIM12_Init+0x84>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d88:	4b12      	ldr	r3, [pc, #72]	; (8000dd4 <MX_TIM12_Init+0x84>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8000d8e:	4811      	ldr	r0, [pc, #68]	; (8000dd4 <MX_TIM12_Init+0x84>)
 8000d90:	f001 fcc8 	bl	8002724 <HAL_TIM_PWM_Init>
 8000d94:	4603      	mov	r3, r0
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d001      	beq.n	8000d9e <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 8000d9a:	f000 f90d 	bl	8000fb8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d9e:	2360      	movs	r3, #96	; 0x60
 8000da0:	607b      	str	r3, [r7, #4]
//  sConfigOC.Pulse = 32767;
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000da2:	2300      	movs	r3, #0
 8000da4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000da6:	2300      	movs	r3, #0
 8000da8:	617b      	str	r3, [r7, #20]
  sConfigOC.Pulse = 52428;
 8000daa:	f64c 43cc 	movw	r3, #52428	; 0xcccc
 8000dae:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000db0:	1d3b      	adds	r3, r7, #4
 8000db2:	2204      	movs	r2, #4
 8000db4:	4619      	mov	r1, r3
 8000db6:	4807      	ldr	r0, [pc, #28]	; (8000dd4 <MX_TIM12_Init+0x84>)
 8000db8:	f001 fdcc 	bl	8002954 <HAL_TIM_PWM_ConfigChannel>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d001      	beq.n	8000dc6 <MX_TIM12_Init+0x76>
  {
    Error_Handler();
 8000dc2:	f000 f8f9 	bl	8000fb8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8000dc6:	4803      	ldr	r0, [pc, #12]	; (8000dd4 <MX_TIM12_Init+0x84>)
 8000dc8:	f000 f9de 	bl	8001188 <HAL_TIM_MspPostInit>

}
 8000dcc:	bf00      	nop
 8000dce:	3720      	adds	r7, #32
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}
 8000dd4:	20000220 	.word	0x20000220
 8000dd8:	40001800 	.word	0x40001800

08000ddc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b08c      	sub	sp, #48	; 0x30
 8000de0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000de2:	f107 031c 	add.w	r3, r7, #28
 8000de6:	2200      	movs	r2, #0
 8000de8:	601a      	str	r2, [r3, #0]
 8000dea:	605a      	str	r2, [r3, #4]
 8000dec:	609a      	str	r2, [r3, #8]
 8000dee:	60da      	str	r2, [r3, #12]
 8000df0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000df2:	2300      	movs	r3, #0
 8000df4:	61bb      	str	r3, [r7, #24]
 8000df6:	4b6a      	ldr	r3, [pc, #424]	; (8000fa0 <MX_GPIO_Init+0x1c4>)
 8000df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dfa:	4a69      	ldr	r2, [pc, #420]	; (8000fa0 <MX_GPIO_Init+0x1c4>)
 8000dfc:	f043 0310 	orr.w	r3, r3, #16
 8000e00:	6313      	str	r3, [r2, #48]	; 0x30
 8000e02:	4b67      	ldr	r3, [pc, #412]	; (8000fa0 <MX_GPIO_Init+0x1c4>)
 8000e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e06:	f003 0310 	and.w	r3, r3, #16
 8000e0a:	61bb      	str	r3, [r7, #24]
 8000e0c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e0e:	2300      	movs	r3, #0
 8000e10:	617b      	str	r3, [r7, #20]
 8000e12:	4b63      	ldr	r3, [pc, #396]	; (8000fa0 <MX_GPIO_Init+0x1c4>)
 8000e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e16:	4a62      	ldr	r2, [pc, #392]	; (8000fa0 <MX_GPIO_Init+0x1c4>)
 8000e18:	f043 0304 	orr.w	r3, r3, #4
 8000e1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e1e:	4b60      	ldr	r3, [pc, #384]	; (8000fa0 <MX_GPIO_Init+0x1c4>)
 8000e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e22:	f003 0304 	and.w	r3, r3, #4
 8000e26:	617b      	str	r3, [r7, #20]
 8000e28:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	613b      	str	r3, [r7, #16]
 8000e2e:	4b5c      	ldr	r3, [pc, #368]	; (8000fa0 <MX_GPIO_Init+0x1c4>)
 8000e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e32:	4a5b      	ldr	r2, [pc, #364]	; (8000fa0 <MX_GPIO_Init+0x1c4>)
 8000e34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e38:	6313      	str	r3, [r2, #48]	; 0x30
 8000e3a:	4b59      	ldr	r3, [pc, #356]	; (8000fa0 <MX_GPIO_Init+0x1c4>)
 8000e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e42:	613b      	str	r3, [r7, #16]
 8000e44:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e46:	2300      	movs	r3, #0
 8000e48:	60fb      	str	r3, [r7, #12]
 8000e4a:	4b55      	ldr	r3, [pc, #340]	; (8000fa0 <MX_GPIO_Init+0x1c4>)
 8000e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e4e:	4a54      	ldr	r2, [pc, #336]	; (8000fa0 <MX_GPIO_Init+0x1c4>)
 8000e50:	f043 0301 	orr.w	r3, r3, #1
 8000e54:	6313      	str	r3, [r2, #48]	; 0x30
 8000e56:	4b52      	ldr	r3, [pc, #328]	; (8000fa0 <MX_GPIO_Init+0x1c4>)
 8000e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e5a:	f003 0301 	and.w	r3, r3, #1
 8000e5e:	60fb      	str	r3, [r7, #12]
 8000e60:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e62:	2300      	movs	r3, #0
 8000e64:	60bb      	str	r3, [r7, #8]
 8000e66:	4b4e      	ldr	r3, [pc, #312]	; (8000fa0 <MX_GPIO_Init+0x1c4>)
 8000e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e6a:	4a4d      	ldr	r2, [pc, #308]	; (8000fa0 <MX_GPIO_Init+0x1c4>)
 8000e6c:	f043 0302 	orr.w	r3, r3, #2
 8000e70:	6313      	str	r3, [r2, #48]	; 0x30
 8000e72:	4b4b      	ldr	r3, [pc, #300]	; (8000fa0 <MX_GPIO_Init+0x1c4>)
 8000e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e76:	f003 0302 	and.w	r3, r3, #2
 8000e7a:	60bb      	str	r3, [r7, #8]
 8000e7c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e7e:	2300      	movs	r3, #0
 8000e80:	607b      	str	r3, [r7, #4]
 8000e82:	4b47      	ldr	r3, [pc, #284]	; (8000fa0 <MX_GPIO_Init+0x1c4>)
 8000e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e86:	4a46      	ldr	r2, [pc, #280]	; (8000fa0 <MX_GPIO_Init+0x1c4>)
 8000e88:	f043 0308 	orr.w	r3, r3, #8
 8000e8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e8e:	4b44      	ldr	r3, [pc, #272]	; (8000fa0 <MX_GPIO_Init+0x1c4>)
 8000e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e92:	f003 0308 	and.w	r3, r3, #8
 8000e96:	607b      	str	r3, [r7, #4]
 8000e98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	603b      	str	r3, [r7, #0]
 8000e9e:	4b40      	ldr	r3, [pc, #256]	; (8000fa0 <MX_GPIO_Init+0x1c4>)
 8000ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea2:	4a3f      	ldr	r2, [pc, #252]	; (8000fa0 <MX_GPIO_Init+0x1c4>)
 8000ea4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ea8:	6313      	str	r3, [r2, #48]	; 0x30
 8000eaa:	4b3d      	ldr	r3, [pc, #244]	; (8000fa0 <MX_GPIO_Init+0x1c4>)
 8000eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000eb2:	603b      	str	r3, [r7, #0]
 8000eb4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	f244 0181 	movw	r1, #16513	; 0x4081
 8000ebc:	4839      	ldr	r0, [pc, #228]	; (8000fa4 <MX_GPIO_Init+0x1c8>)
 8000ebe:	f000 fe63 	bl	8001b88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	2140      	movs	r1, #64	; 0x40
 8000ec6:	4838      	ldr	r0, [pc, #224]	; (8000fa8 <MX_GPIO_Init+0x1cc>)
 8000ec8:	f000 fe5e 	bl	8001b88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000ecc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ed0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ed2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000ed6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000edc:	f107 031c 	add.w	r3, r7, #28
 8000ee0:	4619      	mov	r1, r3
 8000ee2:	4832      	ldr	r0, [pc, #200]	; (8000fac <MX_GPIO_Init+0x1d0>)
 8000ee4:	f000 fcbc 	bl	8001860 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000ee8:	f244 0381 	movw	r3, #16513	; 0x4081
 8000eec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eee:	2301      	movs	r3, #1
 8000ef0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000efa:	f107 031c 	add.w	r3, r7, #28
 8000efe:	4619      	mov	r1, r3
 8000f00:	4828      	ldr	r0, [pc, #160]	; (8000fa4 <MX_GPIO_Init+0x1c8>)
 8000f02:	f000 fcad 	bl	8001860 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLK_RX_Pin STLK_TX_Pin */
  GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000f06:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000f0a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f0c:	2302      	movs	r3, #2
 8000f0e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f10:	2300      	movs	r3, #0
 8000f12:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f14:	2303      	movs	r3, #3
 8000f16:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000f18:	2307      	movs	r3, #7
 8000f1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f1c:	f107 031c 	add.w	r3, r7, #28
 8000f20:	4619      	mov	r1, r3
 8000f22:	4823      	ldr	r0, [pc, #140]	; (8000fb0 <MX_GPIO_Init+0x1d4>)
 8000f24:	f000 fc9c 	bl	8001860 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000f28:	2340      	movs	r3, #64	; 0x40
 8000f2a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f2c:	2301      	movs	r3, #1
 8000f2e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f30:	2300      	movs	r3, #0
 8000f32:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f34:	2300      	movs	r3, #0
 8000f36:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f38:	f107 031c 	add.w	r3, r7, #28
 8000f3c:	4619      	mov	r1, r3
 8000f3e:	481a      	ldr	r0, [pc, #104]	; (8000fa8 <MX_GPIO_Init+0x1cc>)
 8000f40:	f000 fc8e 	bl	8001860 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000f44:	2380      	movs	r3, #128	; 0x80
 8000f46:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000f50:	f107 031c 	add.w	r3, r7, #28
 8000f54:	4619      	mov	r1, r3
 8000f56:	4814      	ldr	r0, [pc, #80]	; (8000fa8 <MX_GPIO_Init+0x1cc>)
 8000f58:	f000 fc82 	bl	8001860 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000f5c:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000f60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f62:	2302      	movs	r3, #2
 8000f64:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f66:	2300      	movs	r3, #0
 8000f68:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f6a:	2303      	movs	r3, #3
 8000f6c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000f6e:	230a      	movs	r3, #10
 8000f70:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f72:	f107 031c 	add.w	r3, r7, #28
 8000f76:	4619      	mov	r1, r3
 8000f78:	480e      	ldr	r0, [pc, #56]	; (8000fb4 <MX_GPIO_Init+0x1d8>)
 8000f7a:	f000 fc71 	bl	8001860 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000f7e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f82:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f84:	2300      	movs	r3, #0
 8000f86:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000f8c:	f107 031c 	add.w	r3, r7, #28
 8000f90:	4619      	mov	r1, r3
 8000f92:	4808      	ldr	r0, [pc, #32]	; (8000fb4 <MX_GPIO_Init+0x1d8>)
 8000f94:	f000 fc64 	bl	8001860 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f98:	bf00      	nop
 8000f9a:	3730      	adds	r7, #48	; 0x30
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd80      	pop	{r7, pc}
 8000fa0:	40023800 	.word	0x40023800
 8000fa4:	40020400 	.word	0x40020400
 8000fa8:	40021800 	.word	0x40021800
 8000fac:	40020800 	.word	0x40020800
 8000fb0:	40020c00 	.word	0x40020c00
 8000fb4:	40020000 	.word	0x40020000

08000fb8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fbc:	b672      	cpsid	i
}
 8000fbe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fc0:	e7fe      	b.n	8000fc0 <Error_Handler+0x8>
	...

08000fc4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	b083      	sub	sp, #12
 8000fc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fca:	2300      	movs	r3, #0
 8000fcc:	607b      	str	r3, [r7, #4]
 8000fce:	4b10      	ldr	r3, [pc, #64]	; (8001010 <HAL_MspInit+0x4c>)
 8000fd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fd2:	4a0f      	ldr	r2, [pc, #60]	; (8001010 <HAL_MspInit+0x4c>)
 8000fd4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fd8:	6453      	str	r3, [r2, #68]	; 0x44
 8000fda:	4b0d      	ldr	r3, [pc, #52]	; (8001010 <HAL_MspInit+0x4c>)
 8000fdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fde:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fe2:	607b      	str	r3, [r7, #4]
 8000fe4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	603b      	str	r3, [r7, #0]
 8000fea:	4b09      	ldr	r3, [pc, #36]	; (8001010 <HAL_MspInit+0x4c>)
 8000fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fee:	4a08      	ldr	r2, [pc, #32]	; (8001010 <HAL_MspInit+0x4c>)
 8000ff0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ff4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ff6:	4b06      	ldr	r3, [pc, #24]	; (8001010 <HAL_MspInit+0x4c>)
 8000ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ffa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ffe:	603b      	str	r3, [r7, #0]
 8001000:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001002:	bf00      	nop
 8001004:	370c      	adds	r7, #12
 8001006:	46bd      	mov	sp, r7
 8001008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100c:	4770      	bx	lr
 800100e:	bf00      	nop
 8001010:	40023800 	.word	0x40023800

08001014 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001014:	b480      	push	{r7}
 8001016:	b08b      	sub	sp, #44	; 0x2c
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	4a51      	ldr	r2, [pc, #324]	; (8001168 <HAL_TIM_PWM_MspInit+0x154>)
 8001022:	4293      	cmp	r3, r2
 8001024:	d10e      	bne.n	8001044 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001026:	2300      	movs	r3, #0
 8001028:	627b      	str	r3, [r7, #36]	; 0x24
 800102a:	4b50      	ldr	r3, [pc, #320]	; (800116c <HAL_TIM_PWM_MspInit+0x158>)
 800102c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800102e:	4a4f      	ldr	r2, [pc, #316]	; (800116c <HAL_TIM_PWM_MspInit+0x158>)
 8001030:	f043 0301 	orr.w	r3, r3, #1
 8001034:	6453      	str	r3, [r2, #68]	; 0x44
 8001036:	4b4d      	ldr	r3, [pc, #308]	; (800116c <HAL_TIM_PWM_MspInit+0x158>)
 8001038:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800103a:	f003 0301 	and.w	r3, r3, #1
 800103e:	627b      	str	r3, [r7, #36]	; 0x24
 8001040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 8001042:	e08a      	b.n	800115a <HAL_TIM_PWM_MspInit+0x146>
  else if(htim_pwm->Instance==TIM2)
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800104c:	d10e      	bne.n	800106c <HAL_TIM_PWM_MspInit+0x58>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800104e:	2300      	movs	r3, #0
 8001050:	623b      	str	r3, [r7, #32]
 8001052:	4b46      	ldr	r3, [pc, #280]	; (800116c <HAL_TIM_PWM_MspInit+0x158>)
 8001054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001056:	4a45      	ldr	r2, [pc, #276]	; (800116c <HAL_TIM_PWM_MspInit+0x158>)
 8001058:	f043 0301 	orr.w	r3, r3, #1
 800105c:	6413      	str	r3, [r2, #64]	; 0x40
 800105e:	4b43      	ldr	r3, [pc, #268]	; (800116c <HAL_TIM_PWM_MspInit+0x158>)
 8001060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001062:	f003 0301 	and.w	r3, r3, #1
 8001066:	623b      	str	r3, [r7, #32]
 8001068:	6a3b      	ldr	r3, [r7, #32]
}
 800106a:	e076      	b.n	800115a <HAL_TIM_PWM_MspInit+0x146>
  else if(htim_pwm->Instance==TIM3)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	4a3f      	ldr	r2, [pc, #252]	; (8001170 <HAL_TIM_PWM_MspInit+0x15c>)
 8001072:	4293      	cmp	r3, r2
 8001074:	d10e      	bne.n	8001094 <HAL_TIM_PWM_MspInit+0x80>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001076:	2300      	movs	r3, #0
 8001078:	61fb      	str	r3, [r7, #28]
 800107a:	4b3c      	ldr	r3, [pc, #240]	; (800116c <HAL_TIM_PWM_MspInit+0x158>)
 800107c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800107e:	4a3b      	ldr	r2, [pc, #236]	; (800116c <HAL_TIM_PWM_MspInit+0x158>)
 8001080:	f043 0302 	orr.w	r3, r3, #2
 8001084:	6413      	str	r3, [r2, #64]	; 0x40
 8001086:	4b39      	ldr	r3, [pc, #228]	; (800116c <HAL_TIM_PWM_MspInit+0x158>)
 8001088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800108a:	f003 0302 	and.w	r3, r3, #2
 800108e:	61fb      	str	r3, [r7, #28]
 8001090:	69fb      	ldr	r3, [r7, #28]
}
 8001092:	e062      	b.n	800115a <HAL_TIM_PWM_MspInit+0x146>
  else if(htim_pwm->Instance==TIM4)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	4a36      	ldr	r2, [pc, #216]	; (8001174 <HAL_TIM_PWM_MspInit+0x160>)
 800109a:	4293      	cmp	r3, r2
 800109c:	d10e      	bne.n	80010bc <HAL_TIM_PWM_MspInit+0xa8>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800109e:	2300      	movs	r3, #0
 80010a0:	61bb      	str	r3, [r7, #24]
 80010a2:	4b32      	ldr	r3, [pc, #200]	; (800116c <HAL_TIM_PWM_MspInit+0x158>)
 80010a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010a6:	4a31      	ldr	r2, [pc, #196]	; (800116c <HAL_TIM_PWM_MspInit+0x158>)
 80010a8:	f043 0304 	orr.w	r3, r3, #4
 80010ac:	6413      	str	r3, [r2, #64]	; 0x40
 80010ae:	4b2f      	ldr	r3, [pc, #188]	; (800116c <HAL_TIM_PWM_MspInit+0x158>)
 80010b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010b2:	f003 0304 	and.w	r3, r3, #4
 80010b6:	61bb      	str	r3, [r7, #24]
 80010b8:	69bb      	ldr	r3, [r7, #24]
}
 80010ba:	e04e      	b.n	800115a <HAL_TIM_PWM_MspInit+0x146>
  else if(htim_pwm->Instance==TIM5)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	4a2d      	ldr	r2, [pc, #180]	; (8001178 <HAL_TIM_PWM_MspInit+0x164>)
 80010c2:	4293      	cmp	r3, r2
 80010c4:	d10e      	bne.n	80010e4 <HAL_TIM_PWM_MspInit+0xd0>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80010c6:	2300      	movs	r3, #0
 80010c8:	617b      	str	r3, [r7, #20]
 80010ca:	4b28      	ldr	r3, [pc, #160]	; (800116c <HAL_TIM_PWM_MspInit+0x158>)
 80010cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ce:	4a27      	ldr	r2, [pc, #156]	; (800116c <HAL_TIM_PWM_MspInit+0x158>)
 80010d0:	f043 0308 	orr.w	r3, r3, #8
 80010d4:	6413      	str	r3, [r2, #64]	; 0x40
 80010d6:	4b25      	ldr	r3, [pc, #148]	; (800116c <HAL_TIM_PWM_MspInit+0x158>)
 80010d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010da:	f003 0308 	and.w	r3, r3, #8
 80010de:	617b      	str	r3, [r7, #20]
 80010e0:	697b      	ldr	r3, [r7, #20]
}
 80010e2:	e03a      	b.n	800115a <HAL_TIM_PWM_MspInit+0x146>
  else if(htim_pwm->Instance==TIM8)
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	4a24      	ldr	r2, [pc, #144]	; (800117c <HAL_TIM_PWM_MspInit+0x168>)
 80010ea:	4293      	cmp	r3, r2
 80010ec:	d10e      	bne.n	800110c <HAL_TIM_PWM_MspInit+0xf8>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80010ee:	2300      	movs	r3, #0
 80010f0:	613b      	str	r3, [r7, #16]
 80010f2:	4b1e      	ldr	r3, [pc, #120]	; (800116c <HAL_TIM_PWM_MspInit+0x158>)
 80010f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010f6:	4a1d      	ldr	r2, [pc, #116]	; (800116c <HAL_TIM_PWM_MspInit+0x158>)
 80010f8:	f043 0302 	orr.w	r3, r3, #2
 80010fc:	6453      	str	r3, [r2, #68]	; 0x44
 80010fe:	4b1b      	ldr	r3, [pc, #108]	; (800116c <HAL_TIM_PWM_MspInit+0x158>)
 8001100:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001102:	f003 0302 	and.w	r3, r3, #2
 8001106:	613b      	str	r3, [r7, #16]
 8001108:	693b      	ldr	r3, [r7, #16]
}
 800110a:	e026      	b.n	800115a <HAL_TIM_PWM_MspInit+0x146>
  else if(htim_pwm->Instance==TIM9)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	4a1b      	ldr	r2, [pc, #108]	; (8001180 <HAL_TIM_PWM_MspInit+0x16c>)
 8001112:	4293      	cmp	r3, r2
 8001114:	d10e      	bne.n	8001134 <HAL_TIM_PWM_MspInit+0x120>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8001116:	2300      	movs	r3, #0
 8001118:	60fb      	str	r3, [r7, #12]
 800111a:	4b14      	ldr	r3, [pc, #80]	; (800116c <HAL_TIM_PWM_MspInit+0x158>)
 800111c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800111e:	4a13      	ldr	r2, [pc, #76]	; (800116c <HAL_TIM_PWM_MspInit+0x158>)
 8001120:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001124:	6453      	str	r3, [r2, #68]	; 0x44
 8001126:	4b11      	ldr	r3, [pc, #68]	; (800116c <HAL_TIM_PWM_MspInit+0x158>)
 8001128:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800112a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800112e:	60fb      	str	r3, [r7, #12]
 8001130:	68fb      	ldr	r3, [r7, #12]
}
 8001132:	e012      	b.n	800115a <HAL_TIM_PWM_MspInit+0x146>
  else if(htim_pwm->Instance==TIM12)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	4a12      	ldr	r2, [pc, #72]	; (8001184 <HAL_TIM_PWM_MspInit+0x170>)
 800113a:	4293      	cmp	r3, r2
 800113c:	d10d      	bne.n	800115a <HAL_TIM_PWM_MspInit+0x146>
    __HAL_RCC_TIM12_CLK_ENABLE();
 800113e:	2300      	movs	r3, #0
 8001140:	60bb      	str	r3, [r7, #8]
 8001142:	4b0a      	ldr	r3, [pc, #40]	; (800116c <HAL_TIM_PWM_MspInit+0x158>)
 8001144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001146:	4a09      	ldr	r2, [pc, #36]	; (800116c <HAL_TIM_PWM_MspInit+0x158>)
 8001148:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800114c:	6413      	str	r3, [r2, #64]	; 0x40
 800114e:	4b07      	ldr	r3, [pc, #28]	; (800116c <HAL_TIM_PWM_MspInit+0x158>)
 8001150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001152:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001156:	60bb      	str	r3, [r7, #8]
 8001158:	68bb      	ldr	r3, [r7, #8]
}
 800115a:	bf00      	nop
 800115c:	372c      	adds	r7, #44	; 0x2c
 800115e:	46bd      	mov	sp, r7
 8001160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001164:	4770      	bx	lr
 8001166:	bf00      	nop
 8001168:	40010000 	.word	0x40010000
 800116c:	40023800 	.word	0x40023800
 8001170:	40000400 	.word	0x40000400
 8001174:	40000800 	.word	0x40000800
 8001178:	40000c00 	.word	0x40000c00
 800117c:	40010400 	.word	0x40010400
 8001180:	40014000 	.word	0x40014000
 8001184:	40001800 	.word	0x40001800

08001188 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b092      	sub	sp, #72	; 0x48
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001190:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001194:	2200      	movs	r2, #0
 8001196:	601a      	str	r2, [r3, #0]
 8001198:	605a      	str	r2, [r3, #4]
 800119a:	609a      	str	r2, [r3, #8]
 800119c:	60da      	str	r2, [r3, #12]
 800119e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	4a99      	ldr	r2, [pc, #612]	; (800140c <HAL_TIM_MspPostInit+0x284>)
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d11f      	bne.n	80011ea <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80011aa:	2300      	movs	r3, #0
 80011ac:	633b      	str	r3, [r7, #48]	; 0x30
 80011ae:	4b98      	ldr	r3, [pc, #608]	; (8001410 <HAL_TIM_MspPostInit+0x288>)
 80011b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b2:	4a97      	ldr	r2, [pc, #604]	; (8001410 <HAL_TIM_MspPostInit+0x288>)
 80011b4:	f043 0310 	orr.w	r3, r3, #16
 80011b8:	6313      	str	r3, [r2, #48]	; 0x30
 80011ba:	4b95      	ldr	r3, [pc, #596]	; (8001410 <HAL_TIM_MspPostInit+0x288>)
 80011bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011be:	f003 0310 	and.w	r3, r3, #16
 80011c2:	633b      	str	r3, [r7, #48]	; 0x30
 80011c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14;
 80011c6:	f44f 43d4 	mov.w	r3, #27136	; 0x6a00
 80011ca:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011cc:	2302      	movs	r3, #2
 80011ce:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d0:	2300      	movs	r3, #0
 80011d2:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011d4:	2300      	movs	r3, #0
 80011d6:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80011d8:	2301      	movs	r3, #1
 80011da:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80011dc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80011e0:	4619      	mov	r1, r3
 80011e2:	488c      	ldr	r0, [pc, #560]	; (8001414 <HAL_TIM_MspPostInit+0x28c>)
 80011e4:	f000 fb3c 	bl	8001860 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 80011e8:	e16e      	b.n	80014c8 <HAL_TIM_MspPostInit+0x340>
  else if(htim->Instance==TIM2)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80011f2:	d13d      	bne.n	8001270 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011f4:	2300      	movs	r3, #0
 80011f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80011f8:	4b85      	ldr	r3, [pc, #532]	; (8001410 <HAL_TIM_MspPostInit+0x288>)
 80011fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011fc:	4a84      	ldr	r2, [pc, #528]	; (8001410 <HAL_TIM_MspPostInit+0x288>)
 80011fe:	f043 0301 	orr.w	r3, r3, #1
 8001202:	6313      	str	r3, [r2, #48]	; 0x30
 8001204:	4b82      	ldr	r3, [pc, #520]	; (8001410 <HAL_TIM_MspPostInit+0x288>)
 8001206:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001208:	f003 0301 	and.w	r3, r3, #1
 800120c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800120e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001210:	2300      	movs	r3, #0
 8001212:	62bb      	str	r3, [r7, #40]	; 0x28
 8001214:	4b7e      	ldr	r3, [pc, #504]	; (8001410 <HAL_TIM_MspPostInit+0x288>)
 8001216:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001218:	4a7d      	ldr	r2, [pc, #500]	; (8001410 <HAL_TIM_MspPostInit+0x288>)
 800121a:	f043 0302 	orr.w	r3, r3, #2
 800121e:	6313      	str	r3, [r2, #48]	; 0x30
 8001220:	4b7b      	ldr	r3, [pc, #492]	; (8001410 <HAL_TIM_MspPostInit+0x288>)
 8001222:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001224:	f003 0302 	and.w	r3, r3, #2
 8001228:	62bb      	str	r3, [r7, #40]	; 0x28
 800122a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800122c:	2320      	movs	r3, #32
 800122e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001230:	2302      	movs	r3, #2
 8001232:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001234:	2300      	movs	r3, #0
 8001236:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001238:	2300      	movs	r3, #0
 800123a:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800123c:	2301      	movs	r3, #1
 800123e:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001240:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001244:	4619      	mov	r1, r3
 8001246:	4874      	ldr	r0, [pc, #464]	; (8001418 <HAL_TIM_MspPostInit+0x290>)
 8001248:	f000 fb0a 	bl	8001860 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_3;
 800124c:	f240 430c 	movw	r3, #1036	; 0x40c
 8001250:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001252:	2302      	movs	r3, #2
 8001254:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001256:	2300      	movs	r3, #0
 8001258:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800125a:	2300      	movs	r3, #0
 800125c:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800125e:	2301      	movs	r3, #1
 8001260:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001262:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001266:	4619      	mov	r1, r3
 8001268:	486c      	ldr	r0, [pc, #432]	; (800141c <HAL_TIM_MspPostInit+0x294>)
 800126a:	f000 faf9 	bl	8001860 <HAL_GPIO_Init>
}
 800126e:	e12b      	b.n	80014c8 <HAL_TIM_MspPostInit+0x340>
  else if(htim->Instance==TIM3)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	4a6a      	ldr	r2, [pc, #424]	; (8001420 <HAL_TIM_MspPostInit+0x298>)
 8001276:	4293      	cmp	r3, r2
 8001278:	d15b      	bne.n	8001332 <HAL_TIM_MspPostInit+0x1aa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800127a:	2300      	movs	r3, #0
 800127c:	627b      	str	r3, [r7, #36]	; 0x24
 800127e:	4b64      	ldr	r3, [pc, #400]	; (8001410 <HAL_TIM_MspPostInit+0x288>)
 8001280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001282:	4a63      	ldr	r2, [pc, #396]	; (8001410 <HAL_TIM_MspPostInit+0x288>)
 8001284:	f043 0301 	orr.w	r3, r3, #1
 8001288:	6313      	str	r3, [r2, #48]	; 0x30
 800128a:	4b61      	ldr	r3, [pc, #388]	; (8001410 <HAL_TIM_MspPostInit+0x288>)
 800128c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128e:	f003 0301 	and.w	r3, r3, #1
 8001292:	627b      	str	r3, [r7, #36]	; 0x24
 8001294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001296:	2300      	movs	r3, #0
 8001298:	623b      	str	r3, [r7, #32]
 800129a:	4b5d      	ldr	r3, [pc, #372]	; (8001410 <HAL_TIM_MspPostInit+0x288>)
 800129c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800129e:	4a5c      	ldr	r2, [pc, #368]	; (8001410 <HAL_TIM_MspPostInit+0x288>)
 80012a0:	f043 0302 	orr.w	r3, r3, #2
 80012a4:	6313      	str	r3, [r2, #48]	; 0x30
 80012a6:	4b5a      	ldr	r3, [pc, #360]	; (8001410 <HAL_TIM_MspPostInit+0x288>)
 80012a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012aa:	f003 0302 	and.w	r3, r3, #2
 80012ae:	623b      	str	r3, [r7, #32]
 80012b0:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012b2:	2300      	movs	r3, #0
 80012b4:	61fb      	str	r3, [r7, #28]
 80012b6:	4b56      	ldr	r3, [pc, #344]	; (8001410 <HAL_TIM_MspPostInit+0x288>)
 80012b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ba:	4a55      	ldr	r2, [pc, #340]	; (8001410 <HAL_TIM_MspPostInit+0x288>)
 80012bc:	f043 0304 	orr.w	r3, r3, #4
 80012c0:	6313      	str	r3, [r2, #48]	; 0x30
 80012c2:	4b53      	ldr	r3, [pc, #332]	; (8001410 <HAL_TIM_MspPostInit+0x288>)
 80012c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c6:	f003 0304 	and.w	r3, r3, #4
 80012ca:	61fb      	str	r3, [r7, #28]
 80012cc:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80012ce:	23c0      	movs	r3, #192	; 0xc0
 80012d0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012d2:	2302      	movs	r3, #2
 80012d4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d6:	2300      	movs	r3, #0
 80012d8:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012da:	2300      	movs	r3, #0
 80012dc:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80012de:	2302      	movs	r3, #2
 80012e0:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012e2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80012e6:	4619      	mov	r1, r3
 80012e8:	484b      	ldr	r0, [pc, #300]	; (8001418 <HAL_TIM_MspPostInit+0x290>)
 80012ea:	f000 fab9 	bl	8001860 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80012ee:	2302      	movs	r3, #2
 80012f0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012f2:	2302      	movs	r3, #2
 80012f4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f6:	2300      	movs	r3, #0
 80012f8:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012fa:	2300      	movs	r3, #0
 80012fc:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80012fe:	2302      	movs	r3, #2
 8001300:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001302:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001306:	4619      	mov	r1, r3
 8001308:	4844      	ldr	r0, [pc, #272]	; (800141c <HAL_TIM_MspPostInit+0x294>)
 800130a:	f000 faa9 	bl	8001860 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800130e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001312:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001314:	2302      	movs	r3, #2
 8001316:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001318:	2300      	movs	r3, #0
 800131a:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800131c:	2300      	movs	r3, #0
 800131e:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001320:	2302      	movs	r3, #2
 8001322:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001324:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001328:	4619      	mov	r1, r3
 800132a:	483e      	ldr	r0, [pc, #248]	; (8001424 <HAL_TIM_MspPostInit+0x29c>)
 800132c:	f000 fa98 	bl	8001860 <HAL_GPIO_Init>
}
 8001330:	e0ca      	b.n	80014c8 <HAL_TIM_MspPostInit+0x340>
  else if(htim->Instance==TIM4)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	4a3c      	ldr	r2, [pc, #240]	; (8001428 <HAL_TIM_MspPostInit+0x2a0>)
 8001338:	4293      	cmp	r3, r2
 800133a:	d11f      	bne.n	800137c <HAL_TIM_MspPostInit+0x1f4>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800133c:	2300      	movs	r3, #0
 800133e:	61bb      	str	r3, [r7, #24]
 8001340:	4b33      	ldr	r3, [pc, #204]	; (8001410 <HAL_TIM_MspPostInit+0x288>)
 8001342:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001344:	4a32      	ldr	r2, [pc, #200]	; (8001410 <HAL_TIM_MspPostInit+0x288>)
 8001346:	f043 0308 	orr.w	r3, r3, #8
 800134a:	6313      	str	r3, [r2, #48]	; 0x30
 800134c:	4b30      	ldr	r3, [pc, #192]	; (8001410 <HAL_TIM_MspPostInit+0x288>)
 800134e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001350:	f003 0308 	and.w	r3, r3, #8
 8001354:	61bb      	str	r3, [r7, #24]
 8001356:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001358:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800135c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800135e:	2302      	movs	r3, #2
 8001360:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001362:	2300      	movs	r3, #0
 8001364:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001366:	2300      	movs	r3, #0
 8001368:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800136a:	2302      	movs	r3, #2
 800136c:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800136e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001372:	4619      	mov	r1, r3
 8001374:	482d      	ldr	r0, [pc, #180]	; (800142c <HAL_TIM_MspPostInit+0x2a4>)
 8001376:	f000 fa73 	bl	8001860 <HAL_GPIO_Init>
}
 800137a:	e0a5      	b.n	80014c8 <HAL_TIM_MspPostInit+0x340>
  else if(htim->Instance==TIM5)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	4a2b      	ldr	r2, [pc, #172]	; (8001430 <HAL_TIM_MspPostInit+0x2a8>)
 8001382:	4293      	cmp	r3, r2
 8001384:	d11e      	bne.n	80013c4 <HAL_TIM_MspPostInit+0x23c>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001386:	2300      	movs	r3, #0
 8001388:	617b      	str	r3, [r7, #20]
 800138a:	4b21      	ldr	r3, [pc, #132]	; (8001410 <HAL_TIM_MspPostInit+0x288>)
 800138c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800138e:	4a20      	ldr	r2, [pc, #128]	; (8001410 <HAL_TIM_MspPostInit+0x288>)
 8001390:	f043 0301 	orr.w	r3, r3, #1
 8001394:	6313      	str	r3, [r2, #48]	; 0x30
 8001396:	4b1e      	ldr	r3, [pc, #120]	; (8001410 <HAL_TIM_MspPostInit+0x288>)
 8001398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800139a:	f003 0301 	and.w	r3, r3, #1
 800139e:	617b      	str	r3, [r7, #20]
 80013a0:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80013a2:	230f      	movs	r3, #15
 80013a4:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013a6:	2302      	movs	r3, #2
 80013a8:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013aa:	2300      	movs	r3, #0
 80013ac:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ae:	2300      	movs	r3, #0
 80013b0:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80013b2:	2302      	movs	r3, #2
 80013b4:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013b6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80013ba:	4619      	mov	r1, r3
 80013bc:	4816      	ldr	r0, [pc, #88]	; (8001418 <HAL_TIM_MspPostInit+0x290>)
 80013be:	f000 fa4f 	bl	8001860 <HAL_GPIO_Init>
}
 80013c2:	e081      	b.n	80014c8 <HAL_TIM_MspPostInit+0x340>
  else if(htim->Instance==TIM8)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4a1a      	ldr	r2, [pc, #104]	; (8001434 <HAL_TIM_MspPostInit+0x2ac>)
 80013ca:	4293      	cmp	r3, r2
 80013cc:	d134      	bne.n	8001438 <HAL_TIM_MspPostInit+0x2b0>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80013ce:	2300      	movs	r3, #0
 80013d0:	613b      	str	r3, [r7, #16]
 80013d2:	4b0f      	ldr	r3, [pc, #60]	; (8001410 <HAL_TIM_MspPostInit+0x288>)
 80013d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d6:	4a0e      	ldr	r2, [pc, #56]	; (8001410 <HAL_TIM_MspPostInit+0x288>)
 80013d8:	f043 0304 	orr.w	r3, r3, #4
 80013dc:	6313      	str	r3, [r2, #48]	; 0x30
 80013de:	4b0c      	ldr	r3, [pc, #48]	; (8001410 <HAL_TIM_MspPostInit+0x288>)
 80013e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e2:	f003 0304 	and.w	r3, r3, #4
 80013e6:	613b      	str	r3, [r7, #16]
 80013e8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80013ea:	23c0      	movs	r3, #192	; 0xc0
 80013ec:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ee:	2302      	movs	r3, #2
 80013f0:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f2:	2300      	movs	r3, #0
 80013f4:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013f6:	2300      	movs	r3, #0
 80013f8:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80013fa:	2303      	movs	r3, #3
 80013fc:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013fe:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001402:	4619      	mov	r1, r3
 8001404:	4807      	ldr	r0, [pc, #28]	; (8001424 <HAL_TIM_MspPostInit+0x29c>)
 8001406:	f000 fa2b 	bl	8001860 <HAL_GPIO_Init>
}
 800140a:	e05d      	b.n	80014c8 <HAL_TIM_MspPostInit+0x340>
 800140c:	40010000 	.word	0x40010000
 8001410:	40023800 	.word	0x40023800
 8001414:	40021000 	.word	0x40021000
 8001418:	40020000 	.word	0x40020000
 800141c:	40020400 	.word	0x40020400
 8001420:	40000400 	.word	0x40000400
 8001424:	40020800 	.word	0x40020800
 8001428:	40000800 	.word	0x40000800
 800142c:	40020c00 	.word	0x40020c00
 8001430:	40000c00 	.word	0x40000c00
 8001434:	40010400 	.word	0x40010400
  else if(htim->Instance==TIM9)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	4a24      	ldr	r2, [pc, #144]	; (80014d0 <HAL_TIM_MspPostInit+0x348>)
 800143e:	4293      	cmp	r3, r2
 8001440:	d11e      	bne.n	8001480 <HAL_TIM_MspPostInit+0x2f8>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001442:	2300      	movs	r3, #0
 8001444:	60fb      	str	r3, [r7, #12]
 8001446:	4b23      	ldr	r3, [pc, #140]	; (80014d4 <HAL_TIM_MspPostInit+0x34c>)
 8001448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144a:	4a22      	ldr	r2, [pc, #136]	; (80014d4 <HAL_TIM_MspPostInit+0x34c>)
 800144c:	f043 0310 	orr.w	r3, r3, #16
 8001450:	6313      	str	r3, [r2, #48]	; 0x30
 8001452:	4b20      	ldr	r3, [pc, #128]	; (80014d4 <HAL_TIM_MspPostInit+0x34c>)
 8001454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001456:	f003 0310 	and.w	r3, r3, #16
 800145a:	60fb      	str	r3, [r7, #12]
 800145c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800145e:	2360      	movs	r3, #96	; 0x60
 8001460:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001462:	2302      	movs	r3, #2
 8001464:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001466:	2300      	movs	r3, #0
 8001468:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800146a:	2300      	movs	r3, #0
 800146c:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 800146e:	2303      	movs	r3, #3
 8001470:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001472:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001476:	4619      	mov	r1, r3
 8001478:	4817      	ldr	r0, [pc, #92]	; (80014d8 <HAL_TIM_MspPostInit+0x350>)
 800147a:	f000 f9f1 	bl	8001860 <HAL_GPIO_Init>
}
 800147e:	e023      	b.n	80014c8 <HAL_TIM_MspPostInit+0x340>
  else if(htim->Instance==TIM12)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	4a15      	ldr	r2, [pc, #84]	; (80014dc <HAL_TIM_MspPostInit+0x354>)
 8001486:	4293      	cmp	r3, r2
 8001488:	d11e      	bne.n	80014c8 <HAL_TIM_MspPostInit+0x340>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800148a:	2300      	movs	r3, #0
 800148c:	60bb      	str	r3, [r7, #8]
 800148e:	4b11      	ldr	r3, [pc, #68]	; (80014d4 <HAL_TIM_MspPostInit+0x34c>)
 8001490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001492:	4a10      	ldr	r2, [pc, #64]	; (80014d4 <HAL_TIM_MspPostInit+0x34c>)
 8001494:	f043 0302 	orr.w	r3, r3, #2
 8001498:	6313      	str	r3, [r2, #48]	; 0x30
 800149a:	4b0e      	ldr	r3, [pc, #56]	; (80014d4 <HAL_TIM_MspPostInit+0x34c>)
 800149c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149e:	f003 0302 	and.w	r3, r3, #2
 80014a2:	60bb      	str	r3, [r7, #8]
 80014a4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80014a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80014aa:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ac:	2302      	movs	r3, #2
 80014ae:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b0:	2300      	movs	r3, #0
 80014b2:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014b4:	2300      	movs	r3, #0
 80014b6:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 80014b8:	2309      	movs	r3, #9
 80014ba:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014bc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80014c0:	4619      	mov	r1, r3
 80014c2:	4807      	ldr	r0, [pc, #28]	; (80014e0 <HAL_TIM_MspPostInit+0x358>)
 80014c4:	f000 f9cc 	bl	8001860 <HAL_GPIO_Init>
}
 80014c8:	bf00      	nop
 80014ca:	3748      	adds	r7, #72	; 0x48
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}
 80014d0:	40014000 	.word	0x40014000
 80014d4:	40023800 	.word	0x40023800
 80014d8:	40021000 	.word	0x40021000
 80014dc:	40001800 	.word	0x40001800
 80014e0:	40020400 	.word	0x40020400

080014e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014e4:	b480      	push	{r7}
 80014e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014e8:	e7fe      	b.n	80014e8 <NMI_Handler+0x4>

080014ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014ea:	b480      	push	{r7}
 80014ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014ee:	e7fe      	b.n	80014ee <HardFault_Handler+0x4>

080014f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014f0:	b480      	push	{r7}
 80014f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014f4:	e7fe      	b.n	80014f4 <MemManage_Handler+0x4>

080014f6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014f6:	b480      	push	{r7}
 80014f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014fa:	e7fe      	b.n	80014fa <BusFault_Handler+0x4>

080014fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014fc:	b480      	push	{r7}
 80014fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001500:	e7fe      	b.n	8001500 <UsageFault_Handler+0x4>

08001502 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001502:	b480      	push	{r7}
 8001504:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001506:	bf00      	nop
 8001508:	46bd      	mov	sp, r7
 800150a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150e:	4770      	bx	lr

08001510 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001510:	b480      	push	{r7}
 8001512:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001514:	bf00      	nop
 8001516:	46bd      	mov	sp, r7
 8001518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151c:	4770      	bx	lr

0800151e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800151e:	b480      	push	{r7}
 8001520:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001522:	bf00      	nop
 8001524:	46bd      	mov	sp, r7
 8001526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152a:	4770      	bx	lr

0800152c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001530:	f000 f890 	bl	8001654 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001534:	bf00      	nop
 8001536:	bd80      	pop	{r7, pc}

08001538 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001538:	b480      	push	{r7}
 800153a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800153c:	4b06      	ldr	r3, [pc, #24]	; (8001558 <SystemInit+0x20>)
 800153e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001542:	4a05      	ldr	r2, [pc, #20]	; (8001558 <SystemInit+0x20>)
 8001544:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001548:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800154c:	bf00      	nop
 800154e:	46bd      	mov	sp, r7
 8001550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001554:	4770      	bx	lr
 8001556:	bf00      	nop
 8001558:	e000ed00 	.word	0xe000ed00

0800155c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800155c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001594 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001560:	480d      	ldr	r0, [pc, #52]	; (8001598 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001562:	490e      	ldr	r1, [pc, #56]	; (800159c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001564:	4a0e      	ldr	r2, [pc, #56]	; (80015a0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001566:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001568:	e002      	b.n	8001570 <LoopCopyDataInit>

0800156a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800156a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800156c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800156e:	3304      	adds	r3, #4

08001570 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001570:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001572:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001574:	d3f9      	bcc.n	800156a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001576:	4a0b      	ldr	r2, [pc, #44]	; (80015a4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001578:	4c0b      	ldr	r4, [pc, #44]	; (80015a8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800157a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800157c:	e001      	b.n	8001582 <LoopFillZerobss>

0800157e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800157e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001580:	3204      	adds	r2, #4

08001582 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001582:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001584:	d3fb      	bcc.n	800157e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001586:	f7ff ffd7 	bl	8001538 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800158a:	f001 fde9 	bl	8003160 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800158e:	f7fe ffbb 	bl	8000508 <main>
  bx  lr    
 8001592:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001594:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001598:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800159c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80015a0:	080031f0 	.word	0x080031f0
  ldr r2, =_sbss
 80015a4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80015a8:	2000026c 	.word	0x2000026c

080015ac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80015ac:	e7fe      	b.n	80015ac <ADC_IRQHandler>
	...

080015b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80015b4:	4b0e      	ldr	r3, [pc, #56]	; (80015f0 <HAL_Init+0x40>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	4a0d      	ldr	r2, [pc, #52]	; (80015f0 <HAL_Init+0x40>)
 80015ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80015be:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80015c0:	4b0b      	ldr	r3, [pc, #44]	; (80015f0 <HAL_Init+0x40>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4a0a      	ldr	r2, [pc, #40]	; (80015f0 <HAL_Init+0x40>)
 80015c6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80015ca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015cc:	4b08      	ldr	r3, [pc, #32]	; (80015f0 <HAL_Init+0x40>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	4a07      	ldr	r2, [pc, #28]	; (80015f0 <HAL_Init+0x40>)
 80015d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015d6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015d8:	2003      	movs	r0, #3
 80015da:	f000 f90d 	bl	80017f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015de:	2000      	movs	r0, #0
 80015e0:	f000 f808 	bl	80015f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015e4:	f7ff fcee 	bl	8000fc4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015e8:	2300      	movs	r3, #0
}
 80015ea:	4618      	mov	r0, r3
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	bf00      	nop
 80015f0:	40023c00 	.word	0x40023c00

080015f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b082      	sub	sp, #8
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015fc:	4b12      	ldr	r3, [pc, #72]	; (8001648 <HAL_InitTick+0x54>)
 80015fe:	681a      	ldr	r2, [r3, #0]
 8001600:	4b12      	ldr	r3, [pc, #72]	; (800164c <HAL_InitTick+0x58>)
 8001602:	781b      	ldrb	r3, [r3, #0]
 8001604:	4619      	mov	r1, r3
 8001606:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800160a:	fbb3 f3f1 	udiv	r3, r3, r1
 800160e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001612:	4618      	mov	r0, r3
 8001614:	f000 f917 	bl	8001846 <HAL_SYSTICK_Config>
 8001618:	4603      	mov	r3, r0
 800161a:	2b00      	cmp	r3, #0
 800161c:	d001      	beq.n	8001622 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800161e:	2301      	movs	r3, #1
 8001620:	e00e      	b.n	8001640 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	2b0f      	cmp	r3, #15
 8001626:	d80a      	bhi.n	800163e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001628:	2200      	movs	r2, #0
 800162a:	6879      	ldr	r1, [r7, #4]
 800162c:	f04f 30ff 	mov.w	r0, #4294967295
 8001630:	f000 f8ed 	bl	800180e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001634:	4a06      	ldr	r2, [pc, #24]	; (8001650 <HAL_InitTick+0x5c>)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800163a:	2300      	movs	r3, #0
 800163c:	e000      	b.n	8001640 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800163e:	2301      	movs	r3, #1
}
 8001640:	4618      	mov	r0, r3
 8001642:	3708      	adds	r7, #8
 8001644:	46bd      	mov	sp, r7
 8001646:	bd80      	pop	{r7, pc}
 8001648:	20000000 	.word	0x20000000
 800164c:	20000008 	.word	0x20000008
 8001650:	20000004 	.word	0x20000004

08001654 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001654:	b480      	push	{r7}
 8001656:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001658:	4b06      	ldr	r3, [pc, #24]	; (8001674 <HAL_IncTick+0x20>)
 800165a:	781b      	ldrb	r3, [r3, #0]
 800165c:	461a      	mov	r2, r3
 800165e:	4b06      	ldr	r3, [pc, #24]	; (8001678 <HAL_IncTick+0x24>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	4413      	add	r3, r2
 8001664:	4a04      	ldr	r2, [pc, #16]	; (8001678 <HAL_IncTick+0x24>)
 8001666:	6013      	str	r3, [r2, #0]
}
 8001668:	bf00      	nop
 800166a:	46bd      	mov	sp, r7
 800166c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001670:	4770      	bx	lr
 8001672:	bf00      	nop
 8001674:	20000008 	.word	0x20000008
 8001678:	20000268 	.word	0x20000268

0800167c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800167c:	b480      	push	{r7}
 800167e:	af00      	add	r7, sp, #0
  return uwTick;
 8001680:	4b03      	ldr	r3, [pc, #12]	; (8001690 <HAL_GetTick+0x14>)
 8001682:	681b      	ldr	r3, [r3, #0]
}
 8001684:	4618      	mov	r0, r3
 8001686:	46bd      	mov	sp, r7
 8001688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168c:	4770      	bx	lr
 800168e:	bf00      	nop
 8001690:	20000268 	.word	0x20000268

08001694 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001694:	b480      	push	{r7}
 8001696:	b085      	sub	sp, #20
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	f003 0307 	and.w	r3, r3, #7
 80016a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016a4:	4b0c      	ldr	r3, [pc, #48]	; (80016d8 <__NVIC_SetPriorityGrouping+0x44>)
 80016a6:	68db      	ldr	r3, [r3, #12]
 80016a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016aa:	68ba      	ldr	r2, [r7, #8]
 80016ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016b0:	4013      	ands	r3, r2
 80016b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016b8:	68bb      	ldr	r3, [r7, #8]
 80016ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016c6:	4a04      	ldr	r2, [pc, #16]	; (80016d8 <__NVIC_SetPriorityGrouping+0x44>)
 80016c8:	68bb      	ldr	r3, [r7, #8]
 80016ca:	60d3      	str	r3, [r2, #12]
}
 80016cc:	bf00      	nop
 80016ce:	3714      	adds	r7, #20
 80016d0:	46bd      	mov	sp, r7
 80016d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d6:	4770      	bx	lr
 80016d8:	e000ed00 	.word	0xe000ed00

080016dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016dc:	b480      	push	{r7}
 80016de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016e0:	4b04      	ldr	r3, [pc, #16]	; (80016f4 <__NVIC_GetPriorityGrouping+0x18>)
 80016e2:	68db      	ldr	r3, [r3, #12]
 80016e4:	0a1b      	lsrs	r3, r3, #8
 80016e6:	f003 0307 	and.w	r3, r3, #7
}
 80016ea:	4618      	mov	r0, r3
 80016ec:	46bd      	mov	sp, r7
 80016ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f2:	4770      	bx	lr
 80016f4:	e000ed00 	.word	0xe000ed00

080016f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016f8:	b480      	push	{r7}
 80016fa:	b083      	sub	sp, #12
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	4603      	mov	r3, r0
 8001700:	6039      	str	r1, [r7, #0]
 8001702:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001704:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001708:	2b00      	cmp	r3, #0
 800170a:	db0a      	blt.n	8001722 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	b2da      	uxtb	r2, r3
 8001710:	490c      	ldr	r1, [pc, #48]	; (8001744 <__NVIC_SetPriority+0x4c>)
 8001712:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001716:	0112      	lsls	r2, r2, #4
 8001718:	b2d2      	uxtb	r2, r2
 800171a:	440b      	add	r3, r1
 800171c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001720:	e00a      	b.n	8001738 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	b2da      	uxtb	r2, r3
 8001726:	4908      	ldr	r1, [pc, #32]	; (8001748 <__NVIC_SetPriority+0x50>)
 8001728:	79fb      	ldrb	r3, [r7, #7]
 800172a:	f003 030f 	and.w	r3, r3, #15
 800172e:	3b04      	subs	r3, #4
 8001730:	0112      	lsls	r2, r2, #4
 8001732:	b2d2      	uxtb	r2, r2
 8001734:	440b      	add	r3, r1
 8001736:	761a      	strb	r2, [r3, #24]
}
 8001738:	bf00      	nop
 800173a:	370c      	adds	r7, #12
 800173c:	46bd      	mov	sp, r7
 800173e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001742:	4770      	bx	lr
 8001744:	e000e100 	.word	0xe000e100
 8001748:	e000ed00 	.word	0xe000ed00

0800174c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800174c:	b480      	push	{r7}
 800174e:	b089      	sub	sp, #36	; 0x24
 8001750:	af00      	add	r7, sp, #0
 8001752:	60f8      	str	r0, [r7, #12]
 8001754:	60b9      	str	r1, [r7, #8]
 8001756:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	f003 0307 	and.w	r3, r3, #7
 800175e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001760:	69fb      	ldr	r3, [r7, #28]
 8001762:	f1c3 0307 	rsb	r3, r3, #7
 8001766:	2b04      	cmp	r3, #4
 8001768:	bf28      	it	cs
 800176a:	2304      	movcs	r3, #4
 800176c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800176e:	69fb      	ldr	r3, [r7, #28]
 8001770:	3304      	adds	r3, #4
 8001772:	2b06      	cmp	r3, #6
 8001774:	d902      	bls.n	800177c <NVIC_EncodePriority+0x30>
 8001776:	69fb      	ldr	r3, [r7, #28]
 8001778:	3b03      	subs	r3, #3
 800177a:	e000      	b.n	800177e <NVIC_EncodePriority+0x32>
 800177c:	2300      	movs	r3, #0
 800177e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001780:	f04f 32ff 	mov.w	r2, #4294967295
 8001784:	69bb      	ldr	r3, [r7, #24]
 8001786:	fa02 f303 	lsl.w	r3, r2, r3
 800178a:	43da      	mvns	r2, r3
 800178c:	68bb      	ldr	r3, [r7, #8]
 800178e:	401a      	ands	r2, r3
 8001790:	697b      	ldr	r3, [r7, #20]
 8001792:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001794:	f04f 31ff 	mov.w	r1, #4294967295
 8001798:	697b      	ldr	r3, [r7, #20]
 800179a:	fa01 f303 	lsl.w	r3, r1, r3
 800179e:	43d9      	mvns	r1, r3
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017a4:	4313      	orrs	r3, r2
         );
}
 80017a6:	4618      	mov	r0, r3
 80017a8:	3724      	adds	r7, #36	; 0x24
 80017aa:	46bd      	mov	sp, r7
 80017ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b0:	4770      	bx	lr
	...

080017b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b082      	sub	sp, #8
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	3b01      	subs	r3, #1
 80017c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80017c4:	d301      	bcc.n	80017ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017c6:	2301      	movs	r3, #1
 80017c8:	e00f      	b.n	80017ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017ca:	4a0a      	ldr	r2, [pc, #40]	; (80017f4 <SysTick_Config+0x40>)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	3b01      	subs	r3, #1
 80017d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017d2:	210f      	movs	r1, #15
 80017d4:	f04f 30ff 	mov.w	r0, #4294967295
 80017d8:	f7ff ff8e 	bl	80016f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017dc:	4b05      	ldr	r3, [pc, #20]	; (80017f4 <SysTick_Config+0x40>)
 80017de:	2200      	movs	r2, #0
 80017e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017e2:	4b04      	ldr	r3, [pc, #16]	; (80017f4 <SysTick_Config+0x40>)
 80017e4:	2207      	movs	r2, #7
 80017e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017e8:	2300      	movs	r3, #0
}
 80017ea:	4618      	mov	r0, r3
 80017ec:	3708      	adds	r7, #8
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	bf00      	nop
 80017f4:	e000e010 	.word	0xe000e010

080017f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b082      	sub	sp, #8
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001800:	6878      	ldr	r0, [r7, #4]
 8001802:	f7ff ff47 	bl	8001694 <__NVIC_SetPriorityGrouping>
}
 8001806:	bf00      	nop
 8001808:	3708      	adds	r7, #8
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}

0800180e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800180e:	b580      	push	{r7, lr}
 8001810:	b086      	sub	sp, #24
 8001812:	af00      	add	r7, sp, #0
 8001814:	4603      	mov	r3, r0
 8001816:	60b9      	str	r1, [r7, #8]
 8001818:	607a      	str	r2, [r7, #4]
 800181a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800181c:	2300      	movs	r3, #0
 800181e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001820:	f7ff ff5c 	bl	80016dc <__NVIC_GetPriorityGrouping>
 8001824:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001826:	687a      	ldr	r2, [r7, #4]
 8001828:	68b9      	ldr	r1, [r7, #8]
 800182a:	6978      	ldr	r0, [r7, #20]
 800182c:	f7ff ff8e 	bl	800174c <NVIC_EncodePriority>
 8001830:	4602      	mov	r2, r0
 8001832:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001836:	4611      	mov	r1, r2
 8001838:	4618      	mov	r0, r3
 800183a:	f7ff ff5d 	bl	80016f8 <__NVIC_SetPriority>
}
 800183e:	bf00      	nop
 8001840:	3718      	adds	r7, #24
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}

08001846 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001846:	b580      	push	{r7, lr}
 8001848:	b082      	sub	sp, #8
 800184a:	af00      	add	r7, sp, #0
 800184c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800184e:	6878      	ldr	r0, [r7, #4]
 8001850:	f7ff ffb0 	bl	80017b4 <SysTick_Config>
 8001854:	4603      	mov	r3, r0
}
 8001856:	4618      	mov	r0, r3
 8001858:	3708      	adds	r7, #8
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}
	...

08001860 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001860:	b480      	push	{r7}
 8001862:	b089      	sub	sp, #36	; 0x24
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
 8001868:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800186a:	2300      	movs	r3, #0
 800186c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800186e:	2300      	movs	r3, #0
 8001870:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001872:	2300      	movs	r3, #0
 8001874:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001876:	2300      	movs	r3, #0
 8001878:	61fb      	str	r3, [r7, #28]
 800187a:	e165      	b.n	8001b48 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800187c:	2201      	movs	r2, #1
 800187e:	69fb      	ldr	r3, [r7, #28]
 8001880:	fa02 f303 	lsl.w	r3, r2, r3
 8001884:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	697a      	ldr	r2, [r7, #20]
 800188c:	4013      	ands	r3, r2
 800188e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001890:	693a      	ldr	r2, [r7, #16]
 8001892:	697b      	ldr	r3, [r7, #20]
 8001894:	429a      	cmp	r2, r3
 8001896:	f040 8154 	bne.w	8001b42 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	f003 0303 	and.w	r3, r3, #3
 80018a2:	2b01      	cmp	r3, #1
 80018a4:	d005      	beq.n	80018b2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	685b      	ldr	r3, [r3, #4]
 80018aa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80018ae:	2b02      	cmp	r3, #2
 80018b0:	d130      	bne.n	8001914 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	689b      	ldr	r3, [r3, #8]
 80018b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80018b8:	69fb      	ldr	r3, [r7, #28]
 80018ba:	005b      	lsls	r3, r3, #1
 80018bc:	2203      	movs	r2, #3
 80018be:	fa02 f303 	lsl.w	r3, r2, r3
 80018c2:	43db      	mvns	r3, r3
 80018c4:	69ba      	ldr	r2, [r7, #24]
 80018c6:	4013      	ands	r3, r2
 80018c8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	68da      	ldr	r2, [r3, #12]
 80018ce:	69fb      	ldr	r3, [r7, #28]
 80018d0:	005b      	lsls	r3, r3, #1
 80018d2:	fa02 f303 	lsl.w	r3, r2, r3
 80018d6:	69ba      	ldr	r2, [r7, #24]
 80018d8:	4313      	orrs	r3, r2
 80018da:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	69ba      	ldr	r2, [r7, #24]
 80018e0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80018e8:	2201      	movs	r2, #1
 80018ea:	69fb      	ldr	r3, [r7, #28]
 80018ec:	fa02 f303 	lsl.w	r3, r2, r3
 80018f0:	43db      	mvns	r3, r3
 80018f2:	69ba      	ldr	r2, [r7, #24]
 80018f4:	4013      	ands	r3, r2
 80018f6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	091b      	lsrs	r3, r3, #4
 80018fe:	f003 0201 	and.w	r2, r3, #1
 8001902:	69fb      	ldr	r3, [r7, #28]
 8001904:	fa02 f303 	lsl.w	r3, r2, r3
 8001908:	69ba      	ldr	r2, [r7, #24]
 800190a:	4313      	orrs	r3, r2
 800190c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	69ba      	ldr	r2, [r7, #24]
 8001912:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	f003 0303 	and.w	r3, r3, #3
 800191c:	2b03      	cmp	r3, #3
 800191e:	d017      	beq.n	8001950 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	68db      	ldr	r3, [r3, #12]
 8001924:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001926:	69fb      	ldr	r3, [r7, #28]
 8001928:	005b      	lsls	r3, r3, #1
 800192a:	2203      	movs	r2, #3
 800192c:	fa02 f303 	lsl.w	r3, r2, r3
 8001930:	43db      	mvns	r3, r3
 8001932:	69ba      	ldr	r2, [r7, #24]
 8001934:	4013      	ands	r3, r2
 8001936:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	689a      	ldr	r2, [r3, #8]
 800193c:	69fb      	ldr	r3, [r7, #28]
 800193e:	005b      	lsls	r3, r3, #1
 8001940:	fa02 f303 	lsl.w	r3, r2, r3
 8001944:	69ba      	ldr	r2, [r7, #24]
 8001946:	4313      	orrs	r3, r2
 8001948:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	69ba      	ldr	r2, [r7, #24]
 800194e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	f003 0303 	and.w	r3, r3, #3
 8001958:	2b02      	cmp	r3, #2
 800195a:	d123      	bne.n	80019a4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800195c:	69fb      	ldr	r3, [r7, #28]
 800195e:	08da      	lsrs	r2, r3, #3
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	3208      	adds	r2, #8
 8001964:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001968:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800196a:	69fb      	ldr	r3, [r7, #28]
 800196c:	f003 0307 	and.w	r3, r3, #7
 8001970:	009b      	lsls	r3, r3, #2
 8001972:	220f      	movs	r2, #15
 8001974:	fa02 f303 	lsl.w	r3, r2, r3
 8001978:	43db      	mvns	r3, r3
 800197a:	69ba      	ldr	r2, [r7, #24]
 800197c:	4013      	ands	r3, r2
 800197e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	691a      	ldr	r2, [r3, #16]
 8001984:	69fb      	ldr	r3, [r7, #28]
 8001986:	f003 0307 	and.w	r3, r3, #7
 800198a:	009b      	lsls	r3, r3, #2
 800198c:	fa02 f303 	lsl.w	r3, r2, r3
 8001990:	69ba      	ldr	r2, [r7, #24]
 8001992:	4313      	orrs	r3, r2
 8001994:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001996:	69fb      	ldr	r3, [r7, #28]
 8001998:	08da      	lsrs	r2, r3, #3
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	3208      	adds	r2, #8
 800199e:	69b9      	ldr	r1, [r7, #24]
 80019a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80019aa:	69fb      	ldr	r3, [r7, #28]
 80019ac:	005b      	lsls	r3, r3, #1
 80019ae:	2203      	movs	r2, #3
 80019b0:	fa02 f303 	lsl.w	r3, r2, r3
 80019b4:	43db      	mvns	r3, r3
 80019b6:	69ba      	ldr	r2, [r7, #24]
 80019b8:	4013      	ands	r3, r2
 80019ba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	f003 0203 	and.w	r2, r3, #3
 80019c4:	69fb      	ldr	r3, [r7, #28]
 80019c6:	005b      	lsls	r3, r3, #1
 80019c8:	fa02 f303 	lsl.w	r3, r2, r3
 80019cc:	69ba      	ldr	r2, [r7, #24]
 80019ce:	4313      	orrs	r3, r2
 80019d0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	69ba      	ldr	r2, [r7, #24]
 80019d6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	685b      	ldr	r3, [r3, #4]
 80019dc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	f000 80ae 	beq.w	8001b42 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019e6:	2300      	movs	r3, #0
 80019e8:	60fb      	str	r3, [r7, #12]
 80019ea:	4b5d      	ldr	r3, [pc, #372]	; (8001b60 <HAL_GPIO_Init+0x300>)
 80019ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ee:	4a5c      	ldr	r2, [pc, #368]	; (8001b60 <HAL_GPIO_Init+0x300>)
 80019f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019f4:	6453      	str	r3, [r2, #68]	; 0x44
 80019f6:	4b5a      	ldr	r3, [pc, #360]	; (8001b60 <HAL_GPIO_Init+0x300>)
 80019f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019fe:	60fb      	str	r3, [r7, #12]
 8001a00:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a02:	4a58      	ldr	r2, [pc, #352]	; (8001b64 <HAL_GPIO_Init+0x304>)
 8001a04:	69fb      	ldr	r3, [r7, #28]
 8001a06:	089b      	lsrs	r3, r3, #2
 8001a08:	3302      	adds	r3, #2
 8001a0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001a10:	69fb      	ldr	r3, [r7, #28]
 8001a12:	f003 0303 	and.w	r3, r3, #3
 8001a16:	009b      	lsls	r3, r3, #2
 8001a18:	220f      	movs	r2, #15
 8001a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1e:	43db      	mvns	r3, r3
 8001a20:	69ba      	ldr	r2, [r7, #24]
 8001a22:	4013      	ands	r3, r2
 8001a24:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	4a4f      	ldr	r2, [pc, #316]	; (8001b68 <HAL_GPIO_Init+0x308>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d025      	beq.n	8001a7a <HAL_GPIO_Init+0x21a>
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	4a4e      	ldr	r2, [pc, #312]	; (8001b6c <HAL_GPIO_Init+0x30c>)
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d01f      	beq.n	8001a76 <HAL_GPIO_Init+0x216>
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	4a4d      	ldr	r2, [pc, #308]	; (8001b70 <HAL_GPIO_Init+0x310>)
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d019      	beq.n	8001a72 <HAL_GPIO_Init+0x212>
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	4a4c      	ldr	r2, [pc, #304]	; (8001b74 <HAL_GPIO_Init+0x314>)
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d013      	beq.n	8001a6e <HAL_GPIO_Init+0x20e>
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	4a4b      	ldr	r2, [pc, #300]	; (8001b78 <HAL_GPIO_Init+0x318>)
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d00d      	beq.n	8001a6a <HAL_GPIO_Init+0x20a>
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	4a4a      	ldr	r2, [pc, #296]	; (8001b7c <HAL_GPIO_Init+0x31c>)
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d007      	beq.n	8001a66 <HAL_GPIO_Init+0x206>
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	4a49      	ldr	r2, [pc, #292]	; (8001b80 <HAL_GPIO_Init+0x320>)
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d101      	bne.n	8001a62 <HAL_GPIO_Init+0x202>
 8001a5e:	2306      	movs	r3, #6
 8001a60:	e00c      	b.n	8001a7c <HAL_GPIO_Init+0x21c>
 8001a62:	2307      	movs	r3, #7
 8001a64:	e00a      	b.n	8001a7c <HAL_GPIO_Init+0x21c>
 8001a66:	2305      	movs	r3, #5
 8001a68:	e008      	b.n	8001a7c <HAL_GPIO_Init+0x21c>
 8001a6a:	2304      	movs	r3, #4
 8001a6c:	e006      	b.n	8001a7c <HAL_GPIO_Init+0x21c>
 8001a6e:	2303      	movs	r3, #3
 8001a70:	e004      	b.n	8001a7c <HAL_GPIO_Init+0x21c>
 8001a72:	2302      	movs	r3, #2
 8001a74:	e002      	b.n	8001a7c <HAL_GPIO_Init+0x21c>
 8001a76:	2301      	movs	r3, #1
 8001a78:	e000      	b.n	8001a7c <HAL_GPIO_Init+0x21c>
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	69fa      	ldr	r2, [r7, #28]
 8001a7e:	f002 0203 	and.w	r2, r2, #3
 8001a82:	0092      	lsls	r2, r2, #2
 8001a84:	4093      	lsls	r3, r2
 8001a86:	69ba      	ldr	r2, [r7, #24]
 8001a88:	4313      	orrs	r3, r2
 8001a8a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a8c:	4935      	ldr	r1, [pc, #212]	; (8001b64 <HAL_GPIO_Init+0x304>)
 8001a8e:	69fb      	ldr	r3, [r7, #28]
 8001a90:	089b      	lsrs	r3, r3, #2
 8001a92:	3302      	adds	r3, #2
 8001a94:	69ba      	ldr	r2, [r7, #24]
 8001a96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a9a:	4b3a      	ldr	r3, [pc, #232]	; (8001b84 <HAL_GPIO_Init+0x324>)
 8001a9c:	689b      	ldr	r3, [r3, #8]
 8001a9e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001aa0:	693b      	ldr	r3, [r7, #16]
 8001aa2:	43db      	mvns	r3, r3
 8001aa4:	69ba      	ldr	r2, [r7, #24]
 8001aa6:	4013      	ands	r3, r2
 8001aa8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d003      	beq.n	8001abe <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001ab6:	69ba      	ldr	r2, [r7, #24]
 8001ab8:	693b      	ldr	r3, [r7, #16]
 8001aba:	4313      	orrs	r3, r2
 8001abc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001abe:	4a31      	ldr	r2, [pc, #196]	; (8001b84 <HAL_GPIO_Init+0x324>)
 8001ac0:	69bb      	ldr	r3, [r7, #24]
 8001ac2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ac4:	4b2f      	ldr	r3, [pc, #188]	; (8001b84 <HAL_GPIO_Init+0x324>)
 8001ac6:	68db      	ldr	r3, [r3, #12]
 8001ac8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001aca:	693b      	ldr	r3, [r7, #16]
 8001acc:	43db      	mvns	r3, r3
 8001ace:	69ba      	ldr	r2, [r7, #24]
 8001ad0:	4013      	ands	r3, r2
 8001ad2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d003      	beq.n	8001ae8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001ae0:	69ba      	ldr	r2, [r7, #24]
 8001ae2:	693b      	ldr	r3, [r7, #16]
 8001ae4:	4313      	orrs	r3, r2
 8001ae6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001ae8:	4a26      	ldr	r2, [pc, #152]	; (8001b84 <HAL_GPIO_Init+0x324>)
 8001aea:	69bb      	ldr	r3, [r7, #24]
 8001aec:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001aee:	4b25      	ldr	r3, [pc, #148]	; (8001b84 <HAL_GPIO_Init+0x324>)
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001af4:	693b      	ldr	r3, [r7, #16]
 8001af6:	43db      	mvns	r3, r3
 8001af8:	69ba      	ldr	r2, [r7, #24]
 8001afa:	4013      	ands	r3, r2
 8001afc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d003      	beq.n	8001b12 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001b0a:	69ba      	ldr	r2, [r7, #24]
 8001b0c:	693b      	ldr	r3, [r7, #16]
 8001b0e:	4313      	orrs	r3, r2
 8001b10:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001b12:	4a1c      	ldr	r2, [pc, #112]	; (8001b84 <HAL_GPIO_Init+0x324>)
 8001b14:	69bb      	ldr	r3, [r7, #24]
 8001b16:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b18:	4b1a      	ldr	r3, [pc, #104]	; (8001b84 <HAL_GPIO_Init+0x324>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b1e:	693b      	ldr	r3, [r7, #16]
 8001b20:	43db      	mvns	r3, r3
 8001b22:	69ba      	ldr	r2, [r7, #24]
 8001b24:	4013      	ands	r3, r2
 8001b26:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d003      	beq.n	8001b3c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001b34:	69ba      	ldr	r2, [r7, #24]
 8001b36:	693b      	ldr	r3, [r7, #16]
 8001b38:	4313      	orrs	r3, r2
 8001b3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001b3c:	4a11      	ldr	r2, [pc, #68]	; (8001b84 <HAL_GPIO_Init+0x324>)
 8001b3e:	69bb      	ldr	r3, [r7, #24]
 8001b40:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b42:	69fb      	ldr	r3, [r7, #28]
 8001b44:	3301      	adds	r3, #1
 8001b46:	61fb      	str	r3, [r7, #28]
 8001b48:	69fb      	ldr	r3, [r7, #28]
 8001b4a:	2b0f      	cmp	r3, #15
 8001b4c:	f67f ae96 	bls.w	800187c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001b50:	bf00      	nop
 8001b52:	bf00      	nop
 8001b54:	3724      	adds	r7, #36	; 0x24
 8001b56:	46bd      	mov	sp, r7
 8001b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5c:	4770      	bx	lr
 8001b5e:	bf00      	nop
 8001b60:	40023800 	.word	0x40023800
 8001b64:	40013800 	.word	0x40013800
 8001b68:	40020000 	.word	0x40020000
 8001b6c:	40020400 	.word	0x40020400
 8001b70:	40020800 	.word	0x40020800
 8001b74:	40020c00 	.word	0x40020c00
 8001b78:	40021000 	.word	0x40021000
 8001b7c:	40021400 	.word	0x40021400
 8001b80:	40021800 	.word	0x40021800
 8001b84:	40013c00 	.word	0x40013c00

08001b88 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	b083      	sub	sp, #12
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
 8001b90:	460b      	mov	r3, r1
 8001b92:	807b      	strh	r3, [r7, #2]
 8001b94:	4613      	mov	r3, r2
 8001b96:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b98:	787b      	ldrb	r3, [r7, #1]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d003      	beq.n	8001ba6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b9e:	887a      	ldrh	r2, [r7, #2]
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001ba4:	e003      	b.n	8001bae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001ba6:	887b      	ldrh	r3, [r7, #2]
 8001ba8:	041a      	lsls	r2, r3, #16
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	619a      	str	r2, [r3, #24]
}
 8001bae:	bf00      	nop
 8001bb0:	370c      	adds	r7, #12
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb8:	4770      	bx	lr
	...

08001bbc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b084      	sub	sp, #16
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
 8001bc4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d101      	bne.n	8001bd0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001bcc:	2301      	movs	r3, #1
 8001bce:	e0cc      	b.n	8001d6a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001bd0:	4b68      	ldr	r3, [pc, #416]	; (8001d74 <HAL_RCC_ClockConfig+0x1b8>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f003 030f 	and.w	r3, r3, #15
 8001bd8:	683a      	ldr	r2, [r7, #0]
 8001bda:	429a      	cmp	r2, r3
 8001bdc:	d90c      	bls.n	8001bf8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bde:	4b65      	ldr	r3, [pc, #404]	; (8001d74 <HAL_RCC_ClockConfig+0x1b8>)
 8001be0:	683a      	ldr	r2, [r7, #0]
 8001be2:	b2d2      	uxtb	r2, r2
 8001be4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001be6:	4b63      	ldr	r3, [pc, #396]	; (8001d74 <HAL_RCC_ClockConfig+0x1b8>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f003 030f 	and.w	r3, r3, #15
 8001bee:	683a      	ldr	r2, [r7, #0]
 8001bf0:	429a      	cmp	r2, r3
 8001bf2:	d001      	beq.n	8001bf8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	e0b8      	b.n	8001d6a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f003 0302 	and.w	r3, r3, #2
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d020      	beq.n	8001c46 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f003 0304 	and.w	r3, r3, #4
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d005      	beq.n	8001c1c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c10:	4b59      	ldr	r3, [pc, #356]	; (8001d78 <HAL_RCC_ClockConfig+0x1bc>)
 8001c12:	689b      	ldr	r3, [r3, #8]
 8001c14:	4a58      	ldr	r2, [pc, #352]	; (8001d78 <HAL_RCC_ClockConfig+0x1bc>)
 8001c16:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001c1a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f003 0308 	and.w	r3, r3, #8
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d005      	beq.n	8001c34 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c28:	4b53      	ldr	r3, [pc, #332]	; (8001d78 <HAL_RCC_ClockConfig+0x1bc>)
 8001c2a:	689b      	ldr	r3, [r3, #8]
 8001c2c:	4a52      	ldr	r2, [pc, #328]	; (8001d78 <HAL_RCC_ClockConfig+0x1bc>)
 8001c2e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001c32:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c34:	4b50      	ldr	r3, [pc, #320]	; (8001d78 <HAL_RCC_ClockConfig+0x1bc>)
 8001c36:	689b      	ldr	r3, [r3, #8]
 8001c38:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	689b      	ldr	r3, [r3, #8]
 8001c40:	494d      	ldr	r1, [pc, #308]	; (8001d78 <HAL_RCC_ClockConfig+0x1bc>)
 8001c42:	4313      	orrs	r3, r2
 8001c44:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f003 0301 	and.w	r3, r3, #1
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d044      	beq.n	8001cdc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	685b      	ldr	r3, [r3, #4]
 8001c56:	2b01      	cmp	r3, #1
 8001c58:	d107      	bne.n	8001c6a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c5a:	4b47      	ldr	r3, [pc, #284]	; (8001d78 <HAL_RCC_ClockConfig+0x1bc>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d119      	bne.n	8001c9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c66:	2301      	movs	r3, #1
 8001c68:	e07f      	b.n	8001d6a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	685b      	ldr	r3, [r3, #4]
 8001c6e:	2b02      	cmp	r3, #2
 8001c70:	d003      	beq.n	8001c7a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001c76:	2b03      	cmp	r3, #3
 8001c78:	d107      	bne.n	8001c8a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c7a:	4b3f      	ldr	r3, [pc, #252]	; (8001d78 <HAL_RCC_ClockConfig+0x1bc>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d109      	bne.n	8001c9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c86:	2301      	movs	r3, #1
 8001c88:	e06f      	b.n	8001d6a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c8a:	4b3b      	ldr	r3, [pc, #236]	; (8001d78 <HAL_RCC_ClockConfig+0x1bc>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f003 0302 	and.w	r3, r3, #2
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d101      	bne.n	8001c9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c96:	2301      	movs	r3, #1
 8001c98:	e067      	b.n	8001d6a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c9a:	4b37      	ldr	r3, [pc, #220]	; (8001d78 <HAL_RCC_ClockConfig+0x1bc>)
 8001c9c:	689b      	ldr	r3, [r3, #8]
 8001c9e:	f023 0203 	bic.w	r2, r3, #3
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	4934      	ldr	r1, [pc, #208]	; (8001d78 <HAL_RCC_ClockConfig+0x1bc>)
 8001ca8:	4313      	orrs	r3, r2
 8001caa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001cac:	f7ff fce6 	bl	800167c <HAL_GetTick>
 8001cb0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cb2:	e00a      	b.n	8001cca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cb4:	f7ff fce2 	bl	800167c <HAL_GetTick>
 8001cb8:	4602      	mov	r2, r0
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	1ad3      	subs	r3, r2, r3
 8001cbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d901      	bls.n	8001cca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001cc6:	2303      	movs	r3, #3
 8001cc8:	e04f      	b.n	8001d6a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cca:	4b2b      	ldr	r3, [pc, #172]	; (8001d78 <HAL_RCC_ClockConfig+0x1bc>)
 8001ccc:	689b      	ldr	r3, [r3, #8]
 8001cce:	f003 020c 	and.w	r2, r3, #12
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	009b      	lsls	r3, r3, #2
 8001cd8:	429a      	cmp	r2, r3
 8001cda:	d1eb      	bne.n	8001cb4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001cdc:	4b25      	ldr	r3, [pc, #148]	; (8001d74 <HAL_RCC_ClockConfig+0x1b8>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f003 030f 	and.w	r3, r3, #15
 8001ce4:	683a      	ldr	r2, [r7, #0]
 8001ce6:	429a      	cmp	r2, r3
 8001ce8:	d20c      	bcs.n	8001d04 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cea:	4b22      	ldr	r3, [pc, #136]	; (8001d74 <HAL_RCC_ClockConfig+0x1b8>)
 8001cec:	683a      	ldr	r2, [r7, #0]
 8001cee:	b2d2      	uxtb	r2, r2
 8001cf0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cf2:	4b20      	ldr	r3, [pc, #128]	; (8001d74 <HAL_RCC_ClockConfig+0x1b8>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f003 030f 	and.w	r3, r3, #15
 8001cfa:	683a      	ldr	r2, [r7, #0]
 8001cfc:	429a      	cmp	r2, r3
 8001cfe:	d001      	beq.n	8001d04 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001d00:	2301      	movs	r3, #1
 8001d02:	e032      	b.n	8001d6a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f003 0304 	and.w	r3, r3, #4
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d008      	beq.n	8001d22 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d10:	4b19      	ldr	r3, [pc, #100]	; (8001d78 <HAL_RCC_ClockConfig+0x1bc>)
 8001d12:	689b      	ldr	r3, [r3, #8]
 8001d14:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	68db      	ldr	r3, [r3, #12]
 8001d1c:	4916      	ldr	r1, [pc, #88]	; (8001d78 <HAL_RCC_ClockConfig+0x1bc>)
 8001d1e:	4313      	orrs	r3, r2
 8001d20:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f003 0308 	and.w	r3, r3, #8
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d009      	beq.n	8001d42 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d2e:	4b12      	ldr	r3, [pc, #72]	; (8001d78 <HAL_RCC_ClockConfig+0x1bc>)
 8001d30:	689b      	ldr	r3, [r3, #8]
 8001d32:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	691b      	ldr	r3, [r3, #16]
 8001d3a:	00db      	lsls	r3, r3, #3
 8001d3c:	490e      	ldr	r1, [pc, #56]	; (8001d78 <HAL_RCC_ClockConfig+0x1bc>)
 8001d3e:	4313      	orrs	r3, r2
 8001d40:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001d42:	f000 f821 	bl	8001d88 <HAL_RCC_GetSysClockFreq>
 8001d46:	4602      	mov	r2, r0
 8001d48:	4b0b      	ldr	r3, [pc, #44]	; (8001d78 <HAL_RCC_ClockConfig+0x1bc>)
 8001d4a:	689b      	ldr	r3, [r3, #8]
 8001d4c:	091b      	lsrs	r3, r3, #4
 8001d4e:	f003 030f 	and.w	r3, r3, #15
 8001d52:	490a      	ldr	r1, [pc, #40]	; (8001d7c <HAL_RCC_ClockConfig+0x1c0>)
 8001d54:	5ccb      	ldrb	r3, [r1, r3]
 8001d56:	fa22 f303 	lsr.w	r3, r2, r3
 8001d5a:	4a09      	ldr	r2, [pc, #36]	; (8001d80 <HAL_RCC_ClockConfig+0x1c4>)
 8001d5c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001d5e:	4b09      	ldr	r3, [pc, #36]	; (8001d84 <HAL_RCC_ClockConfig+0x1c8>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4618      	mov	r0, r3
 8001d64:	f7ff fc46 	bl	80015f4 <HAL_InitTick>

  return HAL_OK;
 8001d68:	2300      	movs	r3, #0
}
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	3710      	adds	r7, #16
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}
 8001d72:	bf00      	nop
 8001d74:	40023c00 	.word	0x40023c00
 8001d78:	40023800 	.word	0x40023800
 8001d7c:	080031d0 	.word	0x080031d0
 8001d80:	20000000 	.word	0x20000000
 8001d84:	20000004 	.word	0x20000004

08001d88 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001d8c:	b0ae      	sub	sp, #184	; 0xb8
 8001d8e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001d90:	2300      	movs	r3, #0
 8001d92:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8001d96:	2300      	movs	r3, #0
 8001d98:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8001da2:	2300      	movs	r3, #0
 8001da4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8001da8:	2300      	movs	r3, #0
 8001daa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001dae:	4bcb      	ldr	r3, [pc, #812]	; (80020dc <HAL_RCC_GetSysClockFreq+0x354>)
 8001db0:	689b      	ldr	r3, [r3, #8]
 8001db2:	f003 030c 	and.w	r3, r3, #12
 8001db6:	2b0c      	cmp	r3, #12
 8001db8:	f200 8206 	bhi.w	80021c8 <HAL_RCC_GetSysClockFreq+0x440>
 8001dbc:	a201      	add	r2, pc, #4	; (adr r2, 8001dc4 <HAL_RCC_GetSysClockFreq+0x3c>)
 8001dbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dc2:	bf00      	nop
 8001dc4:	08001df9 	.word	0x08001df9
 8001dc8:	080021c9 	.word	0x080021c9
 8001dcc:	080021c9 	.word	0x080021c9
 8001dd0:	080021c9 	.word	0x080021c9
 8001dd4:	08001e01 	.word	0x08001e01
 8001dd8:	080021c9 	.word	0x080021c9
 8001ddc:	080021c9 	.word	0x080021c9
 8001de0:	080021c9 	.word	0x080021c9
 8001de4:	08001e09 	.word	0x08001e09
 8001de8:	080021c9 	.word	0x080021c9
 8001dec:	080021c9 	.word	0x080021c9
 8001df0:	080021c9 	.word	0x080021c9
 8001df4:	08001ff9 	.word	0x08001ff9
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001df8:	4bb9      	ldr	r3, [pc, #740]	; (80020e0 <HAL_RCC_GetSysClockFreq+0x358>)
 8001dfa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8001dfe:	e1e7      	b.n	80021d0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001e00:	4bb8      	ldr	r3, [pc, #736]	; (80020e4 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001e02:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001e06:	e1e3      	b.n	80021d0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001e08:	4bb4      	ldr	r3, [pc, #720]	; (80020dc <HAL_RCC_GetSysClockFreq+0x354>)
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001e10:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001e14:	4bb1      	ldr	r3, [pc, #708]	; (80020dc <HAL_RCC_GetSysClockFreq+0x354>)
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d071      	beq.n	8001f04 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e20:	4bae      	ldr	r3, [pc, #696]	; (80020dc <HAL_RCC_GetSysClockFreq+0x354>)
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	099b      	lsrs	r3, r3, #6
 8001e26:	2200      	movs	r2, #0
 8001e28:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001e2c:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8001e30:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001e34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e38:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001e42:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8001e46:	4622      	mov	r2, r4
 8001e48:	462b      	mov	r3, r5
 8001e4a:	f04f 0000 	mov.w	r0, #0
 8001e4e:	f04f 0100 	mov.w	r1, #0
 8001e52:	0159      	lsls	r1, r3, #5
 8001e54:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001e58:	0150      	lsls	r0, r2, #5
 8001e5a:	4602      	mov	r2, r0
 8001e5c:	460b      	mov	r3, r1
 8001e5e:	4621      	mov	r1, r4
 8001e60:	1a51      	subs	r1, r2, r1
 8001e62:	6439      	str	r1, [r7, #64]	; 0x40
 8001e64:	4629      	mov	r1, r5
 8001e66:	eb63 0301 	sbc.w	r3, r3, r1
 8001e6a:	647b      	str	r3, [r7, #68]	; 0x44
 8001e6c:	f04f 0200 	mov.w	r2, #0
 8001e70:	f04f 0300 	mov.w	r3, #0
 8001e74:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8001e78:	4649      	mov	r1, r9
 8001e7a:	018b      	lsls	r3, r1, #6
 8001e7c:	4641      	mov	r1, r8
 8001e7e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001e82:	4641      	mov	r1, r8
 8001e84:	018a      	lsls	r2, r1, #6
 8001e86:	4641      	mov	r1, r8
 8001e88:	1a51      	subs	r1, r2, r1
 8001e8a:	63b9      	str	r1, [r7, #56]	; 0x38
 8001e8c:	4649      	mov	r1, r9
 8001e8e:	eb63 0301 	sbc.w	r3, r3, r1
 8001e92:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001e94:	f04f 0200 	mov.w	r2, #0
 8001e98:	f04f 0300 	mov.w	r3, #0
 8001e9c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8001ea0:	4649      	mov	r1, r9
 8001ea2:	00cb      	lsls	r3, r1, #3
 8001ea4:	4641      	mov	r1, r8
 8001ea6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001eaa:	4641      	mov	r1, r8
 8001eac:	00ca      	lsls	r2, r1, #3
 8001eae:	4610      	mov	r0, r2
 8001eb0:	4619      	mov	r1, r3
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	4622      	mov	r2, r4
 8001eb6:	189b      	adds	r3, r3, r2
 8001eb8:	633b      	str	r3, [r7, #48]	; 0x30
 8001eba:	462b      	mov	r3, r5
 8001ebc:	460a      	mov	r2, r1
 8001ebe:	eb42 0303 	adc.w	r3, r2, r3
 8001ec2:	637b      	str	r3, [r7, #52]	; 0x34
 8001ec4:	f04f 0200 	mov.w	r2, #0
 8001ec8:	f04f 0300 	mov.w	r3, #0
 8001ecc:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001ed0:	4629      	mov	r1, r5
 8001ed2:	024b      	lsls	r3, r1, #9
 8001ed4:	4621      	mov	r1, r4
 8001ed6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001eda:	4621      	mov	r1, r4
 8001edc:	024a      	lsls	r2, r1, #9
 8001ede:	4610      	mov	r0, r2
 8001ee0:	4619      	mov	r1, r3
 8001ee2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001eec:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001ef0:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8001ef4:	f7fe f986 	bl	8000204 <__aeabi_uldivmod>
 8001ef8:	4602      	mov	r2, r0
 8001efa:	460b      	mov	r3, r1
 8001efc:	4613      	mov	r3, r2
 8001efe:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001f02:	e067      	b.n	8001fd4 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f04:	4b75      	ldr	r3, [pc, #468]	; (80020dc <HAL_RCC_GetSysClockFreq+0x354>)
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	099b      	lsrs	r3, r3, #6
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001f10:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8001f14:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001f18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f1c:	67bb      	str	r3, [r7, #120]	; 0x78
 8001f1e:	2300      	movs	r3, #0
 8001f20:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001f22:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8001f26:	4622      	mov	r2, r4
 8001f28:	462b      	mov	r3, r5
 8001f2a:	f04f 0000 	mov.w	r0, #0
 8001f2e:	f04f 0100 	mov.w	r1, #0
 8001f32:	0159      	lsls	r1, r3, #5
 8001f34:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001f38:	0150      	lsls	r0, r2, #5
 8001f3a:	4602      	mov	r2, r0
 8001f3c:	460b      	mov	r3, r1
 8001f3e:	4621      	mov	r1, r4
 8001f40:	1a51      	subs	r1, r2, r1
 8001f42:	62b9      	str	r1, [r7, #40]	; 0x28
 8001f44:	4629      	mov	r1, r5
 8001f46:	eb63 0301 	sbc.w	r3, r3, r1
 8001f4a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001f4c:	f04f 0200 	mov.w	r2, #0
 8001f50:	f04f 0300 	mov.w	r3, #0
 8001f54:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8001f58:	4649      	mov	r1, r9
 8001f5a:	018b      	lsls	r3, r1, #6
 8001f5c:	4641      	mov	r1, r8
 8001f5e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001f62:	4641      	mov	r1, r8
 8001f64:	018a      	lsls	r2, r1, #6
 8001f66:	4641      	mov	r1, r8
 8001f68:	ebb2 0a01 	subs.w	sl, r2, r1
 8001f6c:	4649      	mov	r1, r9
 8001f6e:	eb63 0b01 	sbc.w	fp, r3, r1
 8001f72:	f04f 0200 	mov.w	r2, #0
 8001f76:	f04f 0300 	mov.w	r3, #0
 8001f7a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001f7e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001f82:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001f86:	4692      	mov	sl, r2
 8001f88:	469b      	mov	fp, r3
 8001f8a:	4623      	mov	r3, r4
 8001f8c:	eb1a 0303 	adds.w	r3, sl, r3
 8001f90:	623b      	str	r3, [r7, #32]
 8001f92:	462b      	mov	r3, r5
 8001f94:	eb4b 0303 	adc.w	r3, fp, r3
 8001f98:	627b      	str	r3, [r7, #36]	; 0x24
 8001f9a:	f04f 0200 	mov.w	r2, #0
 8001f9e:	f04f 0300 	mov.w	r3, #0
 8001fa2:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001fa6:	4629      	mov	r1, r5
 8001fa8:	028b      	lsls	r3, r1, #10
 8001faa:	4621      	mov	r1, r4
 8001fac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001fb0:	4621      	mov	r1, r4
 8001fb2:	028a      	lsls	r2, r1, #10
 8001fb4:	4610      	mov	r0, r2
 8001fb6:	4619      	mov	r1, r3
 8001fb8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	673b      	str	r3, [r7, #112]	; 0x70
 8001fc0:	677a      	str	r2, [r7, #116]	; 0x74
 8001fc2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001fc6:	f7fe f91d 	bl	8000204 <__aeabi_uldivmod>
 8001fca:	4602      	mov	r2, r0
 8001fcc:	460b      	mov	r3, r1
 8001fce:	4613      	mov	r3, r2
 8001fd0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001fd4:	4b41      	ldr	r3, [pc, #260]	; (80020dc <HAL_RCC_GetSysClockFreq+0x354>)
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	0c1b      	lsrs	r3, r3, #16
 8001fda:	f003 0303 	and.w	r3, r3, #3
 8001fde:	3301      	adds	r3, #1
 8001fe0:	005b      	lsls	r3, r3, #1
 8001fe2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8001fe6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001fea:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001fee:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ff2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001ff6:	e0eb      	b.n	80021d0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001ff8:	4b38      	ldr	r3, [pc, #224]	; (80020dc <HAL_RCC_GetSysClockFreq+0x354>)
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002000:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002004:	4b35      	ldr	r3, [pc, #212]	; (80020dc <HAL_RCC_GetSysClockFreq+0x354>)
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800200c:	2b00      	cmp	r3, #0
 800200e:	d06b      	beq.n	80020e8 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002010:	4b32      	ldr	r3, [pc, #200]	; (80020dc <HAL_RCC_GetSysClockFreq+0x354>)
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	099b      	lsrs	r3, r3, #6
 8002016:	2200      	movs	r2, #0
 8002018:	66bb      	str	r3, [r7, #104]	; 0x68
 800201a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800201c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800201e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002022:	663b      	str	r3, [r7, #96]	; 0x60
 8002024:	2300      	movs	r3, #0
 8002026:	667b      	str	r3, [r7, #100]	; 0x64
 8002028:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 800202c:	4622      	mov	r2, r4
 800202e:	462b      	mov	r3, r5
 8002030:	f04f 0000 	mov.w	r0, #0
 8002034:	f04f 0100 	mov.w	r1, #0
 8002038:	0159      	lsls	r1, r3, #5
 800203a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800203e:	0150      	lsls	r0, r2, #5
 8002040:	4602      	mov	r2, r0
 8002042:	460b      	mov	r3, r1
 8002044:	4621      	mov	r1, r4
 8002046:	1a51      	subs	r1, r2, r1
 8002048:	61b9      	str	r1, [r7, #24]
 800204a:	4629      	mov	r1, r5
 800204c:	eb63 0301 	sbc.w	r3, r3, r1
 8002050:	61fb      	str	r3, [r7, #28]
 8002052:	f04f 0200 	mov.w	r2, #0
 8002056:	f04f 0300 	mov.w	r3, #0
 800205a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800205e:	4659      	mov	r1, fp
 8002060:	018b      	lsls	r3, r1, #6
 8002062:	4651      	mov	r1, sl
 8002064:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002068:	4651      	mov	r1, sl
 800206a:	018a      	lsls	r2, r1, #6
 800206c:	4651      	mov	r1, sl
 800206e:	ebb2 0801 	subs.w	r8, r2, r1
 8002072:	4659      	mov	r1, fp
 8002074:	eb63 0901 	sbc.w	r9, r3, r1
 8002078:	f04f 0200 	mov.w	r2, #0
 800207c:	f04f 0300 	mov.w	r3, #0
 8002080:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002084:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002088:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800208c:	4690      	mov	r8, r2
 800208e:	4699      	mov	r9, r3
 8002090:	4623      	mov	r3, r4
 8002092:	eb18 0303 	adds.w	r3, r8, r3
 8002096:	613b      	str	r3, [r7, #16]
 8002098:	462b      	mov	r3, r5
 800209a:	eb49 0303 	adc.w	r3, r9, r3
 800209e:	617b      	str	r3, [r7, #20]
 80020a0:	f04f 0200 	mov.w	r2, #0
 80020a4:	f04f 0300 	mov.w	r3, #0
 80020a8:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80020ac:	4629      	mov	r1, r5
 80020ae:	024b      	lsls	r3, r1, #9
 80020b0:	4621      	mov	r1, r4
 80020b2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80020b6:	4621      	mov	r1, r4
 80020b8:	024a      	lsls	r2, r1, #9
 80020ba:	4610      	mov	r0, r2
 80020bc:	4619      	mov	r1, r3
 80020be:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80020c2:	2200      	movs	r2, #0
 80020c4:	65bb      	str	r3, [r7, #88]	; 0x58
 80020c6:	65fa      	str	r2, [r7, #92]	; 0x5c
 80020c8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80020cc:	f7fe f89a 	bl	8000204 <__aeabi_uldivmod>
 80020d0:	4602      	mov	r2, r0
 80020d2:	460b      	mov	r3, r1
 80020d4:	4613      	mov	r3, r2
 80020d6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80020da:	e065      	b.n	80021a8 <HAL_RCC_GetSysClockFreq+0x420>
 80020dc:	40023800 	.word	0x40023800
 80020e0:	00f42400 	.word	0x00f42400
 80020e4:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80020e8:	4b3d      	ldr	r3, [pc, #244]	; (80021e0 <HAL_RCC_GetSysClockFreq+0x458>)
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	099b      	lsrs	r3, r3, #6
 80020ee:	2200      	movs	r2, #0
 80020f0:	4618      	mov	r0, r3
 80020f2:	4611      	mov	r1, r2
 80020f4:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80020f8:	653b      	str	r3, [r7, #80]	; 0x50
 80020fa:	2300      	movs	r3, #0
 80020fc:	657b      	str	r3, [r7, #84]	; 0x54
 80020fe:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8002102:	4642      	mov	r2, r8
 8002104:	464b      	mov	r3, r9
 8002106:	f04f 0000 	mov.w	r0, #0
 800210a:	f04f 0100 	mov.w	r1, #0
 800210e:	0159      	lsls	r1, r3, #5
 8002110:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002114:	0150      	lsls	r0, r2, #5
 8002116:	4602      	mov	r2, r0
 8002118:	460b      	mov	r3, r1
 800211a:	4641      	mov	r1, r8
 800211c:	1a51      	subs	r1, r2, r1
 800211e:	60b9      	str	r1, [r7, #8]
 8002120:	4649      	mov	r1, r9
 8002122:	eb63 0301 	sbc.w	r3, r3, r1
 8002126:	60fb      	str	r3, [r7, #12]
 8002128:	f04f 0200 	mov.w	r2, #0
 800212c:	f04f 0300 	mov.w	r3, #0
 8002130:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002134:	4659      	mov	r1, fp
 8002136:	018b      	lsls	r3, r1, #6
 8002138:	4651      	mov	r1, sl
 800213a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800213e:	4651      	mov	r1, sl
 8002140:	018a      	lsls	r2, r1, #6
 8002142:	4651      	mov	r1, sl
 8002144:	1a54      	subs	r4, r2, r1
 8002146:	4659      	mov	r1, fp
 8002148:	eb63 0501 	sbc.w	r5, r3, r1
 800214c:	f04f 0200 	mov.w	r2, #0
 8002150:	f04f 0300 	mov.w	r3, #0
 8002154:	00eb      	lsls	r3, r5, #3
 8002156:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800215a:	00e2      	lsls	r2, r4, #3
 800215c:	4614      	mov	r4, r2
 800215e:	461d      	mov	r5, r3
 8002160:	4643      	mov	r3, r8
 8002162:	18e3      	adds	r3, r4, r3
 8002164:	603b      	str	r3, [r7, #0]
 8002166:	464b      	mov	r3, r9
 8002168:	eb45 0303 	adc.w	r3, r5, r3
 800216c:	607b      	str	r3, [r7, #4]
 800216e:	f04f 0200 	mov.w	r2, #0
 8002172:	f04f 0300 	mov.w	r3, #0
 8002176:	e9d7 4500 	ldrd	r4, r5, [r7]
 800217a:	4629      	mov	r1, r5
 800217c:	028b      	lsls	r3, r1, #10
 800217e:	4621      	mov	r1, r4
 8002180:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002184:	4621      	mov	r1, r4
 8002186:	028a      	lsls	r2, r1, #10
 8002188:	4610      	mov	r0, r2
 800218a:	4619      	mov	r1, r3
 800218c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002190:	2200      	movs	r2, #0
 8002192:	64bb      	str	r3, [r7, #72]	; 0x48
 8002194:	64fa      	str	r2, [r7, #76]	; 0x4c
 8002196:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800219a:	f7fe f833 	bl	8000204 <__aeabi_uldivmod>
 800219e:	4602      	mov	r2, r0
 80021a0:	460b      	mov	r3, r1
 80021a2:	4613      	mov	r3, r2
 80021a4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80021a8:	4b0d      	ldr	r3, [pc, #52]	; (80021e0 <HAL_RCC_GetSysClockFreq+0x458>)
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	0f1b      	lsrs	r3, r3, #28
 80021ae:	f003 0307 	and.w	r3, r3, #7
 80021b2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 80021b6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80021ba:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80021be:	fbb2 f3f3 	udiv	r3, r2, r3
 80021c2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80021c6:	e003      	b.n	80021d0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80021c8:	4b06      	ldr	r3, [pc, #24]	; (80021e4 <HAL_RCC_GetSysClockFreq+0x45c>)
 80021ca:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80021ce:	bf00      	nop
    }
  }
  return sysclockfreq;
 80021d0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 80021d4:	4618      	mov	r0, r3
 80021d6:	37b8      	adds	r7, #184	; 0xb8
 80021d8:	46bd      	mov	sp, r7
 80021da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80021de:	bf00      	nop
 80021e0:	40023800 	.word	0x40023800
 80021e4:	00f42400 	.word	0x00f42400

080021e8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b086      	sub	sp, #24
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d101      	bne.n	80021fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80021f6:	2301      	movs	r3, #1
 80021f8:	e28d      	b.n	8002716 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f003 0301 	and.w	r3, r3, #1
 8002202:	2b00      	cmp	r3, #0
 8002204:	f000 8083 	beq.w	800230e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002208:	4b94      	ldr	r3, [pc, #592]	; (800245c <HAL_RCC_OscConfig+0x274>)
 800220a:	689b      	ldr	r3, [r3, #8]
 800220c:	f003 030c 	and.w	r3, r3, #12
 8002210:	2b04      	cmp	r3, #4
 8002212:	d019      	beq.n	8002248 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002214:	4b91      	ldr	r3, [pc, #580]	; (800245c <HAL_RCC_OscConfig+0x274>)
 8002216:	689b      	ldr	r3, [r3, #8]
 8002218:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800221c:	2b08      	cmp	r3, #8
 800221e:	d106      	bne.n	800222e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002220:	4b8e      	ldr	r3, [pc, #568]	; (800245c <HAL_RCC_OscConfig+0x274>)
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002228:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800222c:	d00c      	beq.n	8002248 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800222e:	4b8b      	ldr	r3, [pc, #556]	; (800245c <HAL_RCC_OscConfig+0x274>)
 8002230:	689b      	ldr	r3, [r3, #8]
 8002232:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002236:	2b0c      	cmp	r3, #12
 8002238:	d112      	bne.n	8002260 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800223a:	4b88      	ldr	r3, [pc, #544]	; (800245c <HAL_RCC_OscConfig+0x274>)
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002242:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002246:	d10b      	bne.n	8002260 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002248:	4b84      	ldr	r3, [pc, #528]	; (800245c <HAL_RCC_OscConfig+0x274>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002250:	2b00      	cmp	r3, #0
 8002252:	d05b      	beq.n	800230c <HAL_RCC_OscConfig+0x124>
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	2b00      	cmp	r3, #0
 800225a:	d157      	bne.n	800230c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800225c:	2301      	movs	r3, #1
 800225e:	e25a      	b.n	8002716 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002268:	d106      	bne.n	8002278 <HAL_RCC_OscConfig+0x90>
 800226a:	4b7c      	ldr	r3, [pc, #496]	; (800245c <HAL_RCC_OscConfig+0x274>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4a7b      	ldr	r2, [pc, #492]	; (800245c <HAL_RCC_OscConfig+0x274>)
 8002270:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002274:	6013      	str	r3, [r2, #0]
 8002276:	e01d      	b.n	80022b4 <HAL_RCC_OscConfig+0xcc>
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002280:	d10c      	bne.n	800229c <HAL_RCC_OscConfig+0xb4>
 8002282:	4b76      	ldr	r3, [pc, #472]	; (800245c <HAL_RCC_OscConfig+0x274>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4a75      	ldr	r2, [pc, #468]	; (800245c <HAL_RCC_OscConfig+0x274>)
 8002288:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800228c:	6013      	str	r3, [r2, #0]
 800228e:	4b73      	ldr	r3, [pc, #460]	; (800245c <HAL_RCC_OscConfig+0x274>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4a72      	ldr	r2, [pc, #456]	; (800245c <HAL_RCC_OscConfig+0x274>)
 8002294:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002298:	6013      	str	r3, [r2, #0]
 800229a:	e00b      	b.n	80022b4 <HAL_RCC_OscConfig+0xcc>
 800229c:	4b6f      	ldr	r3, [pc, #444]	; (800245c <HAL_RCC_OscConfig+0x274>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4a6e      	ldr	r2, [pc, #440]	; (800245c <HAL_RCC_OscConfig+0x274>)
 80022a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022a6:	6013      	str	r3, [r2, #0]
 80022a8:	4b6c      	ldr	r3, [pc, #432]	; (800245c <HAL_RCC_OscConfig+0x274>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4a6b      	ldr	r2, [pc, #428]	; (800245c <HAL_RCC_OscConfig+0x274>)
 80022ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d013      	beq.n	80022e4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022bc:	f7ff f9de 	bl	800167c <HAL_GetTick>
 80022c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022c2:	e008      	b.n	80022d6 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80022c4:	f7ff f9da 	bl	800167c <HAL_GetTick>
 80022c8:	4602      	mov	r2, r0
 80022ca:	693b      	ldr	r3, [r7, #16]
 80022cc:	1ad3      	subs	r3, r2, r3
 80022ce:	2b64      	cmp	r3, #100	; 0x64
 80022d0:	d901      	bls.n	80022d6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80022d2:	2303      	movs	r3, #3
 80022d4:	e21f      	b.n	8002716 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022d6:	4b61      	ldr	r3, [pc, #388]	; (800245c <HAL_RCC_OscConfig+0x274>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d0f0      	beq.n	80022c4 <HAL_RCC_OscConfig+0xdc>
 80022e2:	e014      	b.n	800230e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022e4:	f7ff f9ca 	bl	800167c <HAL_GetTick>
 80022e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022ea:	e008      	b.n	80022fe <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80022ec:	f7ff f9c6 	bl	800167c <HAL_GetTick>
 80022f0:	4602      	mov	r2, r0
 80022f2:	693b      	ldr	r3, [r7, #16]
 80022f4:	1ad3      	subs	r3, r2, r3
 80022f6:	2b64      	cmp	r3, #100	; 0x64
 80022f8:	d901      	bls.n	80022fe <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80022fa:	2303      	movs	r3, #3
 80022fc:	e20b      	b.n	8002716 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022fe:	4b57      	ldr	r3, [pc, #348]	; (800245c <HAL_RCC_OscConfig+0x274>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002306:	2b00      	cmp	r3, #0
 8002308:	d1f0      	bne.n	80022ec <HAL_RCC_OscConfig+0x104>
 800230a:	e000      	b.n	800230e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800230c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f003 0302 	and.w	r3, r3, #2
 8002316:	2b00      	cmp	r3, #0
 8002318:	d06f      	beq.n	80023fa <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800231a:	4b50      	ldr	r3, [pc, #320]	; (800245c <HAL_RCC_OscConfig+0x274>)
 800231c:	689b      	ldr	r3, [r3, #8]
 800231e:	f003 030c 	and.w	r3, r3, #12
 8002322:	2b00      	cmp	r3, #0
 8002324:	d017      	beq.n	8002356 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002326:	4b4d      	ldr	r3, [pc, #308]	; (800245c <HAL_RCC_OscConfig+0x274>)
 8002328:	689b      	ldr	r3, [r3, #8]
 800232a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800232e:	2b08      	cmp	r3, #8
 8002330:	d105      	bne.n	800233e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002332:	4b4a      	ldr	r3, [pc, #296]	; (800245c <HAL_RCC_OscConfig+0x274>)
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800233a:	2b00      	cmp	r3, #0
 800233c:	d00b      	beq.n	8002356 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800233e:	4b47      	ldr	r3, [pc, #284]	; (800245c <HAL_RCC_OscConfig+0x274>)
 8002340:	689b      	ldr	r3, [r3, #8]
 8002342:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002346:	2b0c      	cmp	r3, #12
 8002348:	d11c      	bne.n	8002384 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800234a:	4b44      	ldr	r3, [pc, #272]	; (800245c <HAL_RCC_OscConfig+0x274>)
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002352:	2b00      	cmp	r3, #0
 8002354:	d116      	bne.n	8002384 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002356:	4b41      	ldr	r3, [pc, #260]	; (800245c <HAL_RCC_OscConfig+0x274>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f003 0302 	and.w	r3, r3, #2
 800235e:	2b00      	cmp	r3, #0
 8002360:	d005      	beq.n	800236e <HAL_RCC_OscConfig+0x186>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	68db      	ldr	r3, [r3, #12]
 8002366:	2b01      	cmp	r3, #1
 8002368:	d001      	beq.n	800236e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800236a:	2301      	movs	r3, #1
 800236c:	e1d3      	b.n	8002716 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800236e:	4b3b      	ldr	r3, [pc, #236]	; (800245c <HAL_RCC_OscConfig+0x274>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	691b      	ldr	r3, [r3, #16]
 800237a:	00db      	lsls	r3, r3, #3
 800237c:	4937      	ldr	r1, [pc, #220]	; (800245c <HAL_RCC_OscConfig+0x274>)
 800237e:	4313      	orrs	r3, r2
 8002380:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002382:	e03a      	b.n	80023fa <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	68db      	ldr	r3, [r3, #12]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d020      	beq.n	80023ce <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800238c:	4b34      	ldr	r3, [pc, #208]	; (8002460 <HAL_RCC_OscConfig+0x278>)
 800238e:	2201      	movs	r2, #1
 8002390:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002392:	f7ff f973 	bl	800167c <HAL_GetTick>
 8002396:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002398:	e008      	b.n	80023ac <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800239a:	f7ff f96f 	bl	800167c <HAL_GetTick>
 800239e:	4602      	mov	r2, r0
 80023a0:	693b      	ldr	r3, [r7, #16]
 80023a2:	1ad3      	subs	r3, r2, r3
 80023a4:	2b02      	cmp	r3, #2
 80023a6:	d901      	bls.n	80023ac <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80023a8:	2303      	movs	r3, #3
 80023aa:	e1b4      	b.n	8002716 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023ac:	4b2b      	ldr	r3, [pc, #172]	; (800245c <HAL_RCC_OscConfig+0x274>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f003 0302 	and.w	r3, r3, #2
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d0f0      	beq.n	800239a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023b8:	4b28      	ldr	r3, [pc, #160]	; (800245c <HAL_RCC_OscConfig+0x274>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	691b      	ldr	r3, [r3, #16]
 80023c4:	00db      	lsls	r3, r3, #3
 80023c6:	4925      	ldr	r1, [pc, #148]	; (800245c <HAL_RCC_OscConfig+0x274>)
 80023c8:	4313      	orrs	r3, r2
 80023ca:	600b      	str	r3, [r1, #0]
 80023cc:	e015      	b.n	80023fa <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023ce:	4b24      	ldr	r3, [pc, #144]	; (8002460 <HAL_RCC_OscConfig+0x278>)
 80023d0:	2200      	movs	r2, #0
 80023d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023d4:	f7ff f952 	bl	800167c <HAL_GetTick>
 80023d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023da:	e008      	b.n	80023ee <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80023dc:	f7ff f94e 	bl	800167c <HAL_GetTick>
 80023e0:	4602      	mov	r2, r0
 80023e2:	693b      	ldr	r3, [r7, #16]
 80023e4:	1ad3      	subs	r3, r2, r3
 80023e6:	2b02      	cmp	r3, #2
 80023e8:	d901      	bls.n	80023ee <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80023ea:	2303      	movs	r3, #3
 80023ec:	e193      	b.n	8002716 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023ee:	4b1b      	ldr	r3, [pc, #108]	; (800245c <HAL_RCC_OscConfig+0x274>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f003 0302 	and.w	r3, r3, #2
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d1f0      	bne.n	80023dc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f003 0308 	and.w	r3, r3, #8
 8002402:	2b00      	cmp	r3, #0
 8002404:	d036      	beq.n	8002474 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	695b      	ldr	r3, [r3, #20]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d016      	beq.n	800243c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800240e:	4b15      	ldr	r3, [pc, #84]	; (8002464 <HAL_RCC_OscConfig+0x27c>)
 8002410:	2201      	movs	r2, #1
 8002412:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002414:	f7ff f932 	bl	800167c <HAL_GetTick>
 8002418:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800241a:	e008      	b.n	800242e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800241c:	f7ff f92e 	bl	800167c <HAL_GetTick>
 8002420:	4602      	mov	r2, r0
 8002422:	693b      	ldr	r3, [r7, #16]
 8002424:	1ad3      	subs	r3, r2, r3
 8002426:	2b02      	cmp	r3, #2
 8002428:	d901      	bls.n	800242e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800242a:	2303      	movs	r3, #3
 800242c:	e173      	b.n	8002716 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800242e:	4b0b      	ldr	r3, [pc, #44]	; (800245c <HAL_RCC_OscConfig+0x274>)
 8002430:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002432:	f003 0302 	and.w	r3, r3, #2
 8002436:	2b00      	cmp	r3, #0
 8002438:	d0f0      	beq.n	800241c <HAL_RCC_OscConfig+0x234>
 800243a:	e01b      	b.n	8002474 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800243c:	4b09      	ldr	r3, [pc, #36]	; (8002464 <HAL_RCC_OscConfig+0x27c>)
 800243e:	2200      	movs	r2, #0
 8002440:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002442:	f7ff f91b 	bl	800167c <HAL_GetTick>
 8002446:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002448:	e00e      	b.n	8002468 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800244a:	f7ff f917 	bl	800167c <HAL_GetTick>
 800244e:	4602      	mov	r2, r0
 8002450:	693b      	ldr	r3, [r7, #16]
 8002452:	1ad3      	subs	r3, r2, r3
 8002454:	2b02      	cmp	r3, #2
 8002456:	d907      	bls.n	8002468 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002458:	2303      	movs	r3, #3
 800245a:	e15c      	b.n	8002716 <HAL_RCC_OscConfig+0x52e>
 800245c:	40023800 	.word	0x40023800
 8002460:	42470000 	.word	0x42470000
 8002464:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002468:	4b8a      	ldr	r3, [pc, #552]	; (8002694 <HAL_RCC_OscConfig+0x4ac>)
 800246a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800246c:	f003 0302 	and.w	r3, r3, #2
 8002470:	2b00      	cmp	r3, #0
 8002472:	d1ea      	bne.n	800244a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f003 0304 	and.w	r3, r3, #4
 800247c:	2b00      	cmp	r3, #0
 800247e:	f000 8097 	beq.w	80025b0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002482:	2300      	movs	r3, #0
 8002484:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002486:	4b83      	ldr	r3, [pc, #524]	; (8002694 <HAL_RCC_OscConfig+0x4ac>)
 8002488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800248a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800248e:	2b00      	cmp	r3, #0
 8002490:	d10f      	bne.n	80024b2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002492:	2300      	movs	r3, #0
 8002494:	60bb      	str	r3, [r7, #8]
 8002496:	4b7f      	ldr	r3, [pc, #508]	; (8002694 <HAL_RCC_OscConfig+0x4ac>)
 8002498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800249a:	4a7e      	ldr	r2, [pc, #504]	; (8002694 <HAL_RCC_OscConfig+0x4ac>)
 800249c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024a0:	6413      	str	r3, [r2, #64]	; 0x40
 80024a2:	4b7c      	ldr	r3, [pc, #496]	; (8002694 <HAL_RCC_OscConfig+0x4ac>)
 80024a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024aa:	60bb      	str	r3, [r7, #8]
 80024ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024ae:	2301      	movs	r3, #1
 80024b0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024b2:	4b79      	ldr	r3, [pc, #484]	; (8002698 <HAL_RCC_OscConfig+0x4b0>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d118      	bne.n	80024f0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80024be:	4b76      	ldr	r3, [pc, #472]	; (8002698 <HAL_RCC_OscConfig+0x4b0>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4a75      	ldr	r2, [pc, #468]	; (8002698 <HAL_RCC_OscConfig+0x4b0>)
 80024c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024ca:	f7ff f8d7 	bl	800167c <HAL_GetTick>
 80024ce:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024d0:	e008      	b.n	80024e4 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024d2:	f7ff f8d3 	bl	800167c <HAL_GetTick>
 80024d6:	4602      	mov	r2, r0
 80024d8:	693b      	ldr	r3, [r7, #16]
 80024da:	1ad3      	subs	r3, r2, r3
 80024dc:	2b02      	cmp	r3, #2
 80024de:	d901      	bls.n	80024e4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80024e0:	2303      	movs	r3, #3
 80024e2:	e118      	b.n	8002716 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024e4:	4b6c      	ldr	r3, [pc, #432]	; (8002698 <HAL_RCC_OscConfig+0x4b0>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d0f0      	beq.n	80024d2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	689b      	ldr	r3, [r3, #8]
 80024f4:	2b01      	cmp	r3, #1
 80024f6:	d106      	bne.n	8002506 <HAL_RCC_OscConfig+0x31e>
 80024f8:	4b66      	ldr	r3, [pc, #408]	; (8002694 <HAL_RCC_OscConfig+0x4ac>)
 80024fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024fc:	4a65      	ldr	r2, [pc, #404]	; (8002694 <HAL_RCC_OscConfig+0x4ac>)
 80024fe:	f043 0301 	orr.w	r3, r3, #1
 8002502:	6713      	str	r3, [r2, #112]	; 0x70
 8002504:	e01c      	b.n	8002540 <HAL_RCC_OscConfig+0x358>
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	689b      	ldr	r3, [r3, #8]
 800250a:	2b05      	cmp	r3, #5
 800250c:	d10c      	bne.n	8002528 <HAL_RCC_OscConfig+0x340>
 800250e:	4b61      	ldr	r3, [pc, #388]	; (8002694 <HAL_RCC_OscConfig+0x4ac>)
 8002510:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002512:	4a60      	ldr	r2, [pc, #384]	; (8002694 <HAL_RCC_OscConfig+0x4ac>)
 8002514:	f043 0304 	orr.w	r3, r3, #4
 8002518:	6713      	str	r3, [r2, #112]	; 0x70
 800251a:	4b5e      	ldr	r3, [pc, #376]	; (8002694 <HAL_RCC_OscConfig+0x4ac>)
 800251c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800251e:	4a5d      	ldr	r2, [pc, #372]	; (8002694 <HAL_RCC_OscConfig+0x4ac>)
 8002520:	f043 0301 	orr.w	r3, r3, #1
 8002524:	6713      	str	r3, [r2, #112]	; 0x70
 8002526:	e00b      	b.n	8002540 <HAL_RCC_OscConfig+0x358>
 8002528:	4b5a      	ldr	r3, [pc, #360]	; (8002694 <HAL_RCC_OscConfig+0x4ac>)
 800252a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800252c:	4a59      	ldr	r2, [pc, #356]	; (8002694 <HAL_RCC_OscConfig+0x4ac>)
 800252e:	f023 0301 	bic.w	r3, r3, #1
 8002532:	6713      	str	r3, [r2, #112]	; 0x70
 8002534:	4b57      	ldr	r3, [pc, #348]	; (8002694 <HAL_RCC_OscConfig+0x4ac>)
 8002536:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002538:	4a56      	ldr	r2, [pc, #344]	; (8002694 <HAL_RCC_OscConfig+0x4ac>)
 800253a:	f023 0304 	bic.w	r3, r3, #4
 800253e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	689b      	ldr	r3, [r3, #8]
 8002544:	2b00      	cmp	r3, #0
 8002546:	d015      	beq.n	8002574 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002548:	f7ff f898 	bl	800167c <HAL_GetTick>
 800254c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800254e:	e00a      	b.n	8002566 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002550:	f7ff f894 	bl	800167c <HAL_GetTick>
 8002554:	4602      	mov	r2, r0
 8002556:	693b      	ldr	r3, [r7, #16]
 8002558:	1ad3      	subs	r3, r2, r3
 800255a:	f241 3288 	movw	r2, #5000	; 0x1388
 800255e:	4293      	cmp	r3, r2
 8002560:	d901      	bls.n	8002566 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002562:	2303      	movs	r3, #3
 8002564:	e0d7      	b.n	8002716 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002566:	4b4b      	ldr	r3, [pc, #300]	; (8002694 <HAL_RCC_OscConfig+0x4ac>)
 8002568:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800256a:	f003 0302 	and.w	r3, r3, #2
 800256e:	2b00      	cmp	r3, #0
 8002570:	d0ee      	beq.n	8002550 <HAL_RCC_OscConfig+0x368>
 8002572:	e014      	b.n	800259e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002574:	f7ff f882 	bl	800167c <HAL_GetTick>
 8002578:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800257a:	e00a      	b.n	8002592 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800257c:	f7ff f87e 	bl	800167c <HAL_GetTick>
 8002580:	4602      	mov	r2, r0
 8002582:	693b      	ldr	r3, [r7, #16]
 8002584:	1ad3      	subs	r3, r2, r3
 8002586:	f241 3288 	movw	r2, #5000	; 0x1388
 800258a:	4293      	cmp	r3, r2
 800258c:	d901      	bls.n	8002592 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800258e:	2303      	movs	r3, #3
 8002590:	e0c1      	b.n	8002716 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002592:	4b40      	ldr	r3, [pc, #256]	; (8002694 <HAL_RCC_OscConfig+0x4ac>)
 8002594:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002596:	f003 0302 	and.w	r3, r3, #2
 800259a:	2b00      	cmp	r3, #0
 800259c:	d1ee      	bne.n	800257c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800259e:	7dfb      	ldrb	r3, [r7, #23]
 80025a0:	2b01      	cmp	r3, #1
 80025a2:	d105      	bne.n	80025b0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025a4:	4b3b      	ldr	r3, [pc, #236]	; (8002694 <HAL_RCC_OscConfig+0x4ac>)
 80025a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025a8:	4a3a      	ldr	r2, [pc, #232]	; (8002694 <HAL_RCC_OscConfig+0x4ac>)
 80025aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025ae:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	699b      	ldr	r3, [r3, #24]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	f000 80ad 	beq.w	8002714 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80025ba:	4b36      	ldr	r3, [pc, #216]	; (8002694 <HAL_RCC_OscConfig+0x4ac>)
 80025bc:	689b      	ldr	r3, [r3, #8]
 80025be:	f003 030c 	and.w	r3, r3, #12
 80025c2:	2b08      	cmp	r3, #8
 80025c4:	d060      	beq.n	8002688 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	699b      	ldr	r3, [r3, #24]
 80025ca:	2b02      	cmp	r3, #2
 80025cc:	d145      	bne.n	800265a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025ce:	4b33      	ldr	r3, [pc, #204]	; (800269c <HAL_RCC_OscConfig+0x4b4>)
 80025d0:	2200      	movs	r2, #0
 80025d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025d4:	f7ff f852 	bl	800167c <HAL_GetTick>
 80025d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025da:	e008      	b.n	80025ee <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025dc:	f7ff f84e 	bl	800167c <HAL_GetTick>
 80025e0:	4602      	mov	r2, r0
 80025e2:	693b      	ldr	r3, [r7, #16]
 80025e4:	1ad3      	subs	r3, r2, r3
 80025e6:	2b02      	cmp	r3, #2
 80025e8:	d901      	bls.n	80025ee <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80025ea:	2303      	movs	r3, #3
 80025ec:	e093      	b.n	8002716 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025ee:	4b29      	ldr	r3, [pc, #164]	; (8002694 <HAL_RCC_OscConfig+0x4ac>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d1f0      	bne.n	80025dc <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	69da      	ldr	r2, [r3, #28]
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6a1b      	ldr	r3, [r3, #32]
 8002602:	431a      	orrs	r2, r3
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002608:	019b      	lsls	r3, r3, #6
 800260a:	431a      	orrs	r2, r3
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002610:	085b      	lsrs	r3, r3, #1
 8002612:	3b01      	subs	r3, #1
 8002614:	041b      	lsls	r3, r3, #16
 8002616:	431a      	orrs	r2, r3
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800261c:	061b      	lsls	r3, r3, #24
 800261e:	431a      	orrs	r2, r3
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002624:	071b      	lsls	r3, r3, #28
 8002626:	491b      	ldr	r1, [pc, #108]	; (8002694 <HAL_RCC_OscConfig+0x4ac>)
 8002628:	4313      	orrs	r3, r2
 800262a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800262c:	4b1b      	ldr	r3, [pc, #108]	; (800269c <HAL_RCC_OscConfig+0x4b4>)
 800262e:	2201      	movs	r2, #1
 8002630:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002632:	f7ff f823 	bl	800167c <HAL_GetTick>
 8002636:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002638:	e008      	b.n	800264c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800263a:	f7ff f81f 	bl	800167c <HAL_GetTick>
 800263e:	4602      	mov	r2, r0
 8002640:	693b      	ldr	r3, [r7, #16]
 8002642:	1ad3      	subs	r3, r2, r3
 8002644:	2b02      	cmp	r3, #2
 8002646:	d901      	bls.n	800264c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002648:	2303      	movs	r3, #3
 800264a:	e064      	b.n	8002716 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800264c:	4b11      	ldr	r3, [pc, #68]	; (8002694 <HAL_RCC_OscConfig+0x4ac>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002654:	2b00      	cmp	r3, #0
 8002656:	d0f0      	beq.n	800263a <HAL_RCC_OscConfig+0x452>
 8002658:	e05c      	b.n	8002714 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800265a:	4b10      	ldr	r3, [pc, #64]	; (800269c <HAL_RCC_OscConfig+0x4b4>)
 800265c:	2200      	movs	r2, #0
 800265e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002660:	f7ff f80c 	bl	800167c <HAL_GetTick>
 8002664:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002666:	e008      	b.n	800267a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002668:	f7ff f808 	bl	800167c <HAL_GetTick>
 800266c:	4602      	mov	r2, r0
 800266e:	693b      	ldr	r3, [r7, #16]
 8002670:	1ad3      	subs	r3, r2, r3
 8002672:	2b02      	cmp	r3, #2
 8002674:	d901      	bls.n	800267a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002676:	2303      	movs	r3, #3
 8002678:	e04d      	b.n	8002716 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800267a:	4b06      	ldr	r3, [pc, #24]	; (8002694 <HAL_RCC_OscConfig+0x4ac>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002682:	2b00      	cmp	r3, #0
 8002684:	d1f0      	bne.n	8002668 <HAL_RCC_OscConfig+0x480>
 8002686:	e045      	b.n	8002714 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	699b      	ldr	r3, [r3, #24]
 800268c:	2b01      	cmp	r3, #1
 800268e:	d107      	bne.n	80026a0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002690:	2301      	movs	r3, #1
 8002692:	e040      	b.n	8002716 <HAL_RCC_OscConfig+0x52e>
 8002694:	40023800 	.word	0x40023800
 8002698:	40007000 	.word	0x40007000
 800269c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80026a0:	4b1f      	ldr	r3, [pc, #124]	; (8002720 <HAL_RCC_OscConfig+0x538>)
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	699b      	ldr	r3, [r3, #24]
 80026aa:	2b01      	cmp	r3, #1
 80026ac:	d030      	beq.n	8002710 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80026b8:	429a      	cmp	r2, r3
 80026ba:	d129      	bne.n	8002710 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026c6:	429a      	cmp	r2, r3
 80026c8:	d122      	bne.n	8002710 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80026ca:	68fa      	ldr	r2, [r7, #12]
 80026cc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80026d0:	4013      	ands	r3, r2
 80026d2:	687a      	ldr	r2, [r7, #4]
 80026d4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80026d6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80026d8:	4293      	cmp	r3, r2
 80026da:	d119      	bne.n	8002710 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026e6:	085b      	lsrs	r3, r3, #1
 80026e8:	3b01      	subs	r3, #1
 80026ea:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80026ec:	429a      	cmp	r2, r3
 80026ee:	d10f      	bne.n	8002710 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026fa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80026fc:	429a      	cmp	r2, r3
 80026fe:	d107      	bne.n	8002710 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800270a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800270c:	429a      	cmp	r2, r3
 800270e:	d001      	beq.n	8002714 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002710:	2301      	movs	r3, #1
 8002712:	e000      	b.n	8002716 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002714:	2300      	movs	r3, #0
}
 8002716:	4618      	mov	r0, r3
 8002718:	3718      	adds	r7, #24
 800271a:	46bd      	mov	sp, r7
 800271c:	bd80      	pop	{r7, pc}
 800271e:	bf00      	nop
 8002720:	40023800 	.word	0x40023800

08002724 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b082      	sub	sp, #8
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d101      	bne.n	8002736 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002732:	2301      	movs	r3, #1
 8002734:	e041      	b.n	80027ba <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800273c:	b2db      	uxtb	r3, r3
 800273e:	2b00      	cmp	r3, #0
 8002740:	d106      	bne.n	8002750 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2200      	movs	r2, #0
 8002746:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800274a:	6878      	ldr	r0, [r7, #4]
 800274c:	f7fe fc62 	bl	8001014 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2202      	movs	r2, #2
 8002754:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681a      	ldr	r2, [r3, #0]
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	3304      	adds	r3, #4
 8002760:	4619      	mov	r1, r3
 8002762:	4610      	mov	r0, r2
 8002764:	f000 f9b8 	bl	8002ad8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2201      	movs	r2, #1
 800276c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2201      	movs	r2, #1
 8002774:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2201      	movs	r2, #1
 800277c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2201      	movs	r2, #1
 8002784:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2201      	movs	r2, #1
 800278c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2201      	movs	r2, #1
 8002794:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2201      	movs	r2, #1
 800279c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2201      	movs	r2, #1
 80027a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2201      	movs	r2, #1
 80027ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2201      	movs	r2, #1
 80027b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80027b8:	2300      	movs	r3, #0
}
 80027ba:	4618      	mov	r0, r3
 80027bc:	3708      	adds	r7, #8
 80027be:	46bd      	mov	sp, r7
 80027c0:	bd80      	pop	{r7, pc}
	...

080027c4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b084      	sub	sp, #16
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
 80027cc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d109      	bne.n	80027e8 <HAL_TIM_PWM_Start+0x24>
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80027da:	b2db      	uxtb	r3, r3
 80027dc:	2b01      	cmp	r3, #1
 80027de:	bf14      	ite	ne
 80027e0:	2301      	movne	r3, #1
 80027e2:	2300      	moveq	r3, #0
 80027e4:	b2db      	uxtb	r3, r3
 80027e6:	e022      	b.n	800282e <HAL_TIM_PWM_Start+0x6a>
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	2b04      	cmp	r3, #4
 80027ec:	d109      	bne.n	8002802 <HAL_TIM_PWM_Start+0x3e>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80027f4:	b2db      	uxtb	r3, r3
 80027f6:	2b01      	cmp	r3, #1
 80027f8:	bf14      	ite	ne
 80027fa:	2301      	movne	r3, #1
 80027fc:	2300      	moveq	r3, #0
 80027fe:	b2db      	uxtb	r3, r3
 8002800:	e015      	b.n	800282e <HAL_TIM_PWM_Start+0x6a>
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	2b08      	cmp	r3, #8
 8002806:	d109      	bne.n	800281c <HAL_TIM_PWM_Start+0x58>
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800280e:	b2db      	uxtb	r3, r3
 8002810:	2b01      	cmp	r3, #1
 8002812:	bf14      	ite	ne
 8002814:	2301      	movne	r3, #1
 8002816:	2300      	moveq	r3, #0
 8002818:	b2db      	uxtb	r3, r3
 800281a:	e008      	b.n	800282e <HAL_TIM_PWM_Start+0x6a>
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002822:	b2db      	uxtb	r3, r3
 8002824:	2b01      	cmp	r3, #1
 8002826:	bf14      	ite	ne
 8002828:	2301      	movne	r3, #1
 800282a:	2300      	moveq	r3, #0
 800282c:	b2db      	uxtb	r3, r3
 800282e:	2b00      	cmp	r3, #0
 8002830:	d001      	beq.n	8002836 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002832:	2301      	movs	r3, #1
 8002834:	e07c      	b.n	8002930 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d104      	bne.n	8002846 <HAL_TIM_PWM_Start+0x82>
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2202      	movs	r2, #2
 8002840:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002844:	e013      	b.n	800286e <HAL_TIM_PWM_Start+0xaa>
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	2b04      	cmp	r3, #4
 800284a:	d104      	bne.n	8002856 <HAL_TIM_PWM_Start+0x92>
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2202      	movs	r2, #2
 8002850:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002854:	e00b      	b.n	800286e <HAL_TIM_PWM_Start+0xaa>
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	2b08      	cmp	r3, #8
 800285a:	d104      	bne.n	8002866 <HAL_TIM_PWM_Start+0xa2>
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2202      	movs	r2, #2
 8002860:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002864:	e003      	b.n	800286e <HAL_TIM_PWM_Start+0xaa>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2202      	movs	r2, #2
 800286a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	2201      	movs	r2, #1
 8002874:	6839      	ldr	r1, [r7, #0]
 8002876:	4618      	mov	r0, r3
 8002878:	f000 fb7e 	bl	8002f78 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4a2d      	ldr	r2, [pc, #180]	; (8002938 <HAL_TIM_PWM_Start+0x174>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d004      	beq.n	8002890 <HAL_TIM_PWM_Start+0xcc>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4a2c      	ldr	r2, [pc, #176]	; (800293c <HAL_TIM_PWM_Start+0x178>)
 800288c:	4293      	cmp	r3, r2
 800288e:	d101      	bne.n	8002894 <HAL_TIM_PWM_Start+0xd0>
 8002890:	2301      	movs	r3, #1
 8002892:	e000      	b.n	8002896 <HAL_TIM_PWM_Start+0xd2>
 8002894:	2300      	movs	r3, #0
 8002896:	2b00      	cmp	r3, #0
 8002898:	d007      	beq.n	80028aa <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80028a8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4a22      	ldr	r2, [pc, #136]	; (8002938 <HAL_TIM_PWM_Start+0x174>)
 80028b0:	4293      	cmp	r3, r2
 80028b2:	d022      	beq.n	80028fa <HAL_TIM_PWM_Start+0x136>
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028bc:	d01d      	beq.n	80028fa <HAL_TIM_PWM_Start+0x136>
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4a1f      	ldr	r2, [pc, #124]	; (8002940 <HAL_TIM_PWM_Start+0x17c>)
 80028c4:	4293      	cmp	r3, r2
 80028c6:	d018      	beq.n	80028fa <HAL_TIM_PWM_Start+0x136>
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4a1d      	ldr	r2, [pc, #116]	; (8002944 <HAL_TIM_PWM_Start+0x180>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d013      	beq.n	80028fa <HAL_TIM_PWM_Start+0x136>
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4a1c      	ldr	r2, [pc, #112]	; (8002948 <HAL_TIM_PWM_Start+0x184>)
 80028d8:	4293      	cmp	r3, r2
 80028da:	d00e      	beq.n	80028fa <HAL_TIM_PWM_Start+0x136>
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4a16      	ldr	r2, [pc, #88]	; (800293c <HAL_TIM_PWM_Start+0x178>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d009      	beq.n	80028fa <HAL_TIM_PWM_Start+0x136>
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4a18      	ldr	r2, [pc, #96]	; (800294c <HAL_TIM_PWM_Start+0x188>)
 80028ec:	4293      	cmp	r3, r2
 80028ee:	d004      	beq.n	80028fa <HAL_TIM_PWM_Start+0x136>
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4a16      	ldr	r2, [pc, #88]	; (8002950 <HAL_TIM_PWM_Start+0x18c>)
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d111      	bne.n	800291e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	689b      	ldr	r3, [r3, #8]
 8002900:	f003 0307 	and.w	r3, r3, #7
 8002904:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	2b06      	cmp	r3, #6
 800290a:	d010      	beq.n	800292e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	681a      	ldr	r2, [r3, #0]
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f042 0201 	orr.w	r2, r2, #1
 800291a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800291c:	e007      	b.n	800292e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	681a      	ldr	r2, [r3, #0]
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f042 0201 	orr.w	r2, r2, #1
 800292c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800292e:	2300      	movs	r3, #0
}
 8002930:	4618      	mov	r0, r3
 8002932:	3710      	adds	r7, #16
 8002934:	46bd      	mov	sp, r7
 8002936:	bd80      	pop	{r7, pc}
 8002938:	40010000 	.word	0x40010000
 800293c:	40010400 	.word	0x40010400
 8002940:	40000400 	.word	0x40000400
 8002944:	40000800 	.word	0x40000800
 8002948:	40000c00 	.word	0x40000c00
 800294c:	40014000 	.word	0x40014000
 8002950:	40001800 	.word	0x40001800

08002954 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b086      	sub	sp, #24
 8002958:	af00      	add	r7, sp, #0
 800295a:	60f8      	str	r0, [r7, #12]
 800295c:	60b9      	str	r1, [r7, #8]
 800295e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002960:	2300      	movs	r3, #0
 8002962:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800296a:	2b01      	cmp	r3, #1
 800296c:	d101      	bne.n	8002972 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800296e:	2302      	movs	r3, #2
 8002970:	e0ae      	b.n	8002ad0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	2201      	movs	r2, #1
 8002976:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	2b0c      	cmp	r3, #12
 800297e:	f200 809f 	bhi.w	8002ac0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002982:	a201      	add	r2, pc, #4	; (adr r2, 8002988 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002984:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002988:	080029bd 	.word	0x080029bd
 800298c:	08002ac1 	.word	0x08002ac1
 8002990:	08002ac1 	.word	0x08002ac1
 8002994:	08002ac1 	.word	0x08002ac1
 8002998:	080029fd 	.word	0x080029fd
 800299c:	08002ac1 	.word	0x08002ac1
 80029a0:	08002ac1 	.word	0x08002ac1
 80029a4:	08002ac1 	.word	0x08002ac1
 80029a8:	08002a3f 	.word	0x08002a3f
 80029ac:	08002ac1 	.word	0x08002ac1
 80029b0:	08002ac1 	.word	0x08002ac1
 80029b4:	08002ac1 	.word	0x08002ac1
 80029b8:	08002a7f 	.word	0x08002a7f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	68b9      	ldr	r1, [r7, #8]
 80029c2:	4618      	mov	r0, r3
 80029c4:	f000 f928 	bl	8002c18 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	699a      	ldr	r2, [r3, #24]
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f042 0208 	orr.w	r2, r2, #8
 80029d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	699a      	ldr	r2, [r3, #24]
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f022 0204 	bic.w	r2, r2, #4
 80029e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	6999      	ldr	r1, [r3, #24]
 80029ee:	68bb      	ldr	r3, [r7, #8]
 80029f0:	691a      	ldr	r2, [r3, #16]
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	430a      	orrs	r2, r1
 80029f8:	619a      	str	r2, [r3, #24]
      break;
 80029fa:	e064      	b.n	8002ac6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	68b9      	ldr	r1, [r7, #8]
 8002a02:	4618      	mov	r0, r3
 8002a04:	f000 f978 	bl	8002cf8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	699a      	ldr	r2, [r3, #24]
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002a16:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	699a      	ldr	r2, [r3, #24]
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a26:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	6999      	ldr	r1, [r3, #24]
 8002a2e:	68bb      	ldr	r3, [r7, #8]
 8002a30:	691b      	ldr	r3, [r3, #16]
 8002a32:	021a      	lsls	r2, r3, #8
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	430a      	orrs	r2, r1
 8002a3a:	619a      	str	r2, [r3, #24]
      break;
 8002a3c:	e043      	b.n	8002ac6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	68b9      	ldr	r1, [r7, #8]
 8002a44:	4618      	mov	r0, r3
 8002a46:	f000 f9cd 	bl	8002de4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	69da      	ldr	r2, [r3, #28]
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f042 0208 	orr.w	r2, r2, #8
 8002a58:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	69da      	ldr	r2, [r3, #28]
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f022 0204 	bic.w	r2, r2, #4
 8002a68:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	69d9      	ldr	r1, [r3, #28]
 8002a70:	68bb      	ldr	r3, [r7, #8]
 8002a72:	691a      	ldr	r2, [r3, #16]
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	430a      	orrs	r2, r1
 8002a7a:	61da      	str	r2, [r3, #28]
      break;
 8002a7c:	e023      	b.n	8002ac6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	68b9      	ldr	r1, [r7, #8]
 8002a84:	4618      	mov	r0, r3
 8002a86:	f000 fa21 	bl	8002ecc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	69da      	ldr	r2, [r3, #28]
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002a98:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	69da      	ldr	r2, [r3, #28]
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002aa8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	69d9      	ldr	r1, [r3, #28]
 8002ab0:	68bb      	ldr	r3, [r7, #8]
 8002ab2:	691b      	ldr	r3, [r3, #16]
 8002ab4:	021a      	lsls	r2, r3, #8
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	430a      	orrs	r2, r1
 8002abc:	61da      	str	r2, [r3, #28]
      break;
 8002abe:	e002      	b.n	8002ac6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	75fb      	strb	r3, [r7, #23]
      break;
 8002ac4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	2200      	movs	r2, #0
 8002aca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002ace:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	3718      	adds	r7, #24
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bd80      	pop	{r7, pc}

08002ad8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	b085      	sub	sp, #20
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
 8002ae0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	4a40      	ldr	r2, [pc, #256]	; (8002bec <TIM_Base_SetConfig+0x114>)
 8002aec:	4293      	cmp	r3, r2
 8002aee:	d013      	beq.n	8002b18 <TIM_Base_SetConfig+0x40>
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002af6:	d00f      	beq.n	8002b18 <TIM_Base_SetConfig+0x40>
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	4a3d      	ldr	r2, [pc, #244]	; (8002bf0 <TIM_Base_SetConfig+0x118>)
 8002afc:	4293      	cmp	r3, r2
 8002afe:	d00b      	beq.n	8002b18 <TIM_Base_SetConfig+0x40>
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	4a3c      	ldr	r2, [pc, #240]	; (8002bf4 <TIM_Base_SetConfig+0x11c>)
 8002b04:	4293      	cmp	r3, r2
 8002b06:	d007      	beq.n	8002b18 <TIM_Base_SetConfig+0x40>
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	4a3b      	ldr	r2, [pc, #236]	; (8002bf8 <TIM_Base_SetConfig+0x120>)
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d003      	beq.n	8002b18 <TIM_Base_SetConfig+0x40>
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	4a3a      	ldr	r2, [pc, #232]	; (8002bfc <TIM_Base_SetConfig+0x124>)
 8002b14:	4293      	cmp	r3, r2
 8002b16:	d108      	bne.n	8002b2a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b1e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	68fa      	ldr	r2, [r7, #12]
 8002b26:	4313      	orrs	r3, r2
 8002b28:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	4a2f      	ldr	r2, [pc, #188]	; (8002bec <TIM_Base_SetConfig+0x114>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d02b      	beq.n	8002b8a <TIM_Base_SetConfig+0xb2>
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b38:	d027      	beq.n	8002b8a <TIM_Base_SetConfig+0xb2>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	4a2c      	ldr	r2, [pc, #176]	; (8002bf0 <TIM_Base_SetConfig+0x118>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d023      	beq.n	8002b8a <TIM_Base_SetConfig+0xb2>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	4a2b      	ldr	r2, [pc, #172]	; (8002bf4 <TIM_Base_SetConfig+0x11c>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d01f      	beq.n	8002b8a <TIM_Base_SetConfig+0xb2>
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	4a2a      	ldr	r2, [pc, #168]	; (8002bf8 <TIM_Base_SetConfig+0x120>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d01b      	beq.n	8002b8a <TIM_Base_SetConfig+0xb2>
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	4a29      	ldr	r2, [pc, #164]	; (8002bfc <TIM_Base_SetConfig+0x124>)
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d017      	beq.n	8002b8a <TIM_Base_SetConfig+0xb2>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	4a28      	ldr	r2, [pc, #160]	; (8002c00 <TIM_Base_SetConfig+0x128>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d013      	beq.n	8002b8a <TIM_Base_SetConfig+0xb2>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	4a27      	ldr	r2, [pc, #156]	; (8002c04 <TIM_Base_SetConfig+0x12c>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d00f      	beq.n	8002b8a <TIM_Base_SetConfig+0xb2>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	4a26      	ldr	r2, [pc, #152]	; (8002c08 <TIM_Base_SetConfig+0x130>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d00b      	beq.n	8002b8a <TIM_Base_SetConfig+0xb2>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	4a25      	ldr	r2, [pc, #148]	; (8002c0c <TIM_Base_SetConfig+0x134>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d007      	beq.n	8002b8a <TIM_Base_SetConfig+0xb2>
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	4a24      	ldr	r2, [pc, #144]	; (8002c10 <TIM_Base_SetConfig+0x138>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d003      	beq.n	8002b8a <TIM_Base_SetConfig+0xb2>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	4a23      	ldr	r2, [pc, #140]	; (8002c14 <TIM_Base_SetConfig+0x13c>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d108      	bne.n	8002b9c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b90:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	68db      	ldr	r3, [r3, #12]
 8002b96:	68fa      	ldr	r2, [r7, #12]
 8002b98:	4313      	orrs	r3, r2
 8002b9a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	695b      	ldr	r3, [r3, #20]
 8002ba6:	4313      	orrs	r3, r2
 8002ba8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	68fa      	ldr	r2, [r7, #12]
 8002bae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	689a      	ldr	r2, [r3, #8]
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	681a      	ldr	r2, [r3, #0]
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	4a0a      	ldr	r2, [pc, #40]	; (8002bec <TIM_Base_SetConfig+0x114>)
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	d003      	beq.n	8002bd0 <TIM_Base_SetConfig+0xf8>
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	4a0c      	ldr	r2, [pc, #48]	; (8002bfc <TIM_Base_SetConfig+0x124>)
 8002bcc:	4293      	cmp	r3, r2
 8002bce:	d103      	bne.n	8002bd8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	691a      	ldr	r2, [r3, #16]
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2201      	movs	r2, #1
 8002bdc:	615a      	str	r2, [r3, #20]
}
 8002bde:	bf00      	nop
 8002be0:	3714      	adds	r7, #20
 8002be2:	46bd      	mov	sp, r7
 8002be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be8:	4770      	bx	lr
 8002bea:	bf00      	nop
 8002bec:	40010000 	.word	0x40010000
 8002bf0:	40000400 	.word	0x40000400
 8002bf4:	40000800 	.word	0x40000800
 8002bf8:	40000c00 	.word	0x40000c00
 8002bfc:	40010400 	.word	0x40010400
 8002c00:	40014000 	.word	0x40014000
 8002c04:	40014400 	.word	0x40014400
 8002c08:	40014800 	.word	0x40014800
 8002c0c:	40001800 	.word	0x40001800
 8002c10:	40001c00 	.word	0x40001c00
 8002c14:	40002000 	.word	0x40002000

08002c18 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	b087      	sub	sp, #28
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
 8002c20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6a1b      	ldr	r3, [r3, #32]
 8002c26:	f023 0201 	bic.w	r2, r3, #1
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6a1b      	ldr	r3, [r3, #32]
 8002c32:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	699b      	ldr	r3, [r3, #24]
 8002c3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	f023 0303 	bic.w	r3, r3, #3
 8002c4e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	68fa      	ldr	r2, [r7, #12]
 8002c56:	4313      	orrs	r3, r2
 8002c58:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002c5a:	697b      	ldr	r3, [r7, #20]
 8002c5c:	f023 0302 	bic.w	r3, r3, #2
 8002c60:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	689b      	ldr	r3, [r3, #8]
 8002c66:	697a      	ldr	r2, [r7, #20]
 8002c68:	4313      	orrs	r3, r2
 8002c6a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	4a20      	ldr	r2, [pc, #128]	; (8002cf0 <TIM_OC1_SetConfig+0xd8>)
 8002c70:	4293      	cmp	r3, r2
 8002c72:	d003      	beq.n	8002c7c <TIM_OC1_SetConfig+0x64>
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	4a1f      	ldr	r2, [pc, #124]	; (8002cf4 <TIM_OC1_SetConfig+0xdc>)
 8002c78:	4293      	cmp	r3, r2
 8002c7a:	d10c      	bne.n	8002c96 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002c7c:	697b      	ldr	r3, [r7, #20]
 8002c7e:	f023 0308 	bic.w	r3, r3, #8
 8002c82:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	68db      	ldr	r3, [r3, #12]
 8002c88:	697a      	ldr	r2, [r7, #20]
 8002c8a:	4313      	orrs	r3, r2
 8002c8c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002c8e:	697b      	ldr	r3, [r7, #20]
 8002c90:	f023 0304 	bic.w	r3, r3, #4
 8002c94:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	4a15      	ldr	r2, [pc, #84]	; (8002cf0 <TIM_OC1_SetConfig+0xd8>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d003      	beq.n	8002ca6 <TIM_OC1_SetConfig+0x8e>
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	4a14      	ldr	r2, [pc, #80]	; (8002cf4 <TIM_OC1_SetConfig+0xdc>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d111      	bne.n	8002cca <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002ca6:	693b      	ldr	r3, [r7, #16]
 8002ca8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002cac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002cae:	693b      	ldr	r3, [r7, #16]
 8002cb0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002cb4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	695b      	ldr	r3, [r3, #20]
 8002cba:	693a      	ldr	r2, [r7, #16]
 8002cbc:	4313      	orrs	r3, r2
 8002cbe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	699b      	ldr	r3, [r3, #24]
 8002cc4:	693a      	ldr	r2, [r7, #16]
 8002cc6:	4313      	orrs	r3, r2
 8002cc8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	693a      	ldr	r2, [r7, #16]
 8002cce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	68fa      	ldr	r2, [r7, #12]
 8002cd4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	685a      	ldr	r2, [r3, #4]
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	697a      	ldr	r2, [r7, #20]
 8002ce2:	621a      	str	r2, [r3, #32]
}
 8002ce4:	bf00      	nop
 8002ce6:	371c      	adds	r7, #28
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cee:	4770      	bx	lr
 8002cf0:	40010000 	.word	0x40010000
 8002cf4:	40010400 	.word	0x40010400

08002cf8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	b087      	sub	sp, #28
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
 8002d00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6a1b      	ldr	r3, [r3, #32]
 8002d06:	f023 0210 	bic.w	r2, r3, #16
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6a1b      	ldr	r3, [r3, #32]
 8002d12:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	685b      	ldr	r3, [r3, #4]
 8002d18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	699b      	ldr	r3, [r3, #24]
 8002d1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002d26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d2e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	021b      	lsls	r3, r3, #8
 8002d36:	68fa      	ldr	r2, [r7, #12]
 8002d38:	4313      	orrs	r3, r2
 8002d3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002d3c:	697b      	ldr	r3, [r7, #20]
 8002d3e:	f023 0320 	bic.w	r3, r3, #32
 8002d42:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	689b      	ldr	r3, [r3, #8]
 8002d48:	011b      	lsls	r3, r3, #4
 8002d4a:	697a      	ldr	r2, [r7, #20]
 8002d4c:	4313      	orrs	r3, r2
 8002d4e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	4a22      	ldr	r2, [pc, #136]	; (8002ddc <TIM_OC2_SetConfig+0xe4>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d003      	beq.n	8002d60 <TIM_OC2_SetConfig+0x68>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	4a21      	ldr	r2, [pc, #132]	; (8002de0 <TIM_OC2_SetConfig+0xe8>)
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d10d      	bne.n	8002d7c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002d60:	697b      	ldr	r3, [r7, #20]
 8002d62:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002d66:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	68db      	ldr	r3, [r3, #12]
 8002d6c:	011b      	lsls	r3, r3, #4
 8002d6e:	697a      	ldr	r2, [r7, #20]
 8002d70:	4313      	orrs	r3, r2
 8002d72:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002d74:	697b      	ldr	r3, [r7, #20]
 8002d76:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002d7a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	4a17      	ldr	r2, [pc, #92]	; (8002ddc <TIM_OC2_SetConfig+0xe4>)
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d003      	beq.n	8002d8c <TIM_OC2_SetConfig+0x94>
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	4a16      	ldr	r2, [pc, #88]	; (8002de0 <TIM_OC2_SetConfig+0xe8>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d113      	bne.n	8002db4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002d8c:	693b      	ldr	r3, [r7, #16]
 8002d8e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002d92:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002d94:	693b      	ldr	r3, [r7, #16]
 8002d96:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002d9a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	695b      	ldr	r3, [r3, #20]
 8002da0:	009b      	lsls	r3, r3, #2
 8002da2:	693a      	ldr	r2, [r7, #16]
 8002da4:	4313      	orrs	r3, r2
 8002da6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	699b      	ldr	r3, [r3, #24]
 8002dac:	009b      	lsls	r3, r3, #2
 8002dae:	693a      	ldr	r2, [r7, #16]
 8002db0:	4313      	orrs	r3, r2
 8002db2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	693a      	ldr	r2, [r7, #16]
 8002db8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	68fa      	ldr	r2, [r7, #12]
 8002dbe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	685a      	ldr	r2, [r3, #4]
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	697a      	ldr	r2, [r7, #20]
 8002dcc:	621a      	str	r2, [r3, #32]
}
 8002dce:	bf00      	nop
 8002dd0:	371c      	adds	r7, #28
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd8:	4770      	bx	lr
 8002dda:	bf00      	nop
 8002ddc:	40010000 	.word	0x40010000
 8002de0:	40010400 	.word	0x40010400

08002de4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002de4:	b480      	push	{r7}
 8002de6:	b087      	sub	sp, #28
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
 8002dec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6a1b      	ldr	r3, [r3, #32]
 8002df2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6a1b      	ldr	r3, [r3, #32]
 8002dfe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	69db      	ldr	r3, [r3, #28]
 8002e0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	f023 0303 	bic.w	r3, r3, #3
 8002e1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	68fa      	ldr	r2, [r7, #12]
 8002e22:	4313      	orrs	r3, r2
 8002e24:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002e26:	697b      	ldr	r3, [r7, #20]
 8002e28:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002e2c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	689b      	ldr	r3, [r3, #8]
 8002e32:	021b      	lsls	r3, r3, #8
 8002e34:	697a      	ldr	r2, [r7, #20]
 8002e36:	4313      	orrs	r3, r2
 8002e38:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	4a21      	ldr	r2, [pc, #132]	; (8002ec4 <TIM_OC3_SetConfig+0xe0>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d003      	beq.n	8002e4a <TIM_OC3_SetConfig+0x66>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	4a20      	ldr	r2, [pc, #128]	; (8002ec8 <TIM_OC3_SetConfig+0xe4>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d10d      	bne.n	8002e66 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002e4a:	697b      	ldr	r3, [r7, #20]
 8002e4c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002e50:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	68db      	ldr	r3, [r3, #12]
 8002e56:	021b      	lsls	r3, r3, #8
 8002e58:	697a      	ldr	r2, [r7, #20]
 8002e5a:	4313      	orrs	r3, r2
 8002e5c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002e5e:	697b      	ldr	r3, [r7, #20]
 8002e60:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002e64:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	4a16      	ldr	r2, [pc, #88]	; (8002ec4 <TIM_OC3_SetConfig+0xe0>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d003      	beq.n	8002e76 <TIM_OC3_SetConfig+0x92>
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	4a15      	ldr	r2, [pc, #84]	; (8002ec8 <TIM_OC3_SetConfig+0xe4>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d113      	bne.n	8002e9e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002e76:	693b      	ldr	r3, [r7, #16]
 8002e78:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002e7c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002e7e:	693b      	ldr	r3, [r7, #16]
 8002e80:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002e84:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	695b      	ldr	r3, [r3, #20]
 8002e8a:	011b      	lsls	r3, r3, #4
 8002e8c:	693a      	ldr	r2, [r7, #16]
 8002e8e:	4313      	orrs	r3, r2
 8002e90:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	699b      	ldr	r3, [r3, #24]
 8002e96:	011b      	lsls	r3, r3, #4
 8002e98:	693a      	ldr	r2, [r7, #16]
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	693a      	ldr	r2, [r7, #16]
 8002ea2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	68fa      	ldr	r2, [r7, #12]
 8002ea8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	685a      	ldr	r2, [r3, #4]
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	697a      	ldr	r2, [r7, #20]
 8002eb6:	621a      	str	r2, [r3, #32]
}
 8002eb8:	bf00      	nop
 8002eba:	371c      	adds	r7, #28
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec2:	4770      	bx	lr
 8002ec4:	40010000 	.word	0x40010000
 8002ec8:	40010400 	.word	0x40010400

08002ecc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	b087      	sub	sp, #28
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
 8002ed4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6a1b      	ldr	r3, [r3, #32]
 8002eda:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6a1b      	ldr	r3, [r3, #32]
 8002ee6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	69db      	ldr	r3, [r3, #28]
 8002ef2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002efa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f02:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	021b      	lsls	r3, r3, #8
 8002f0a:	68fa      	ldr	r2, [r7, #12]
 8002f0c:	4313      	orrs	r3, r2
 8002f0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002f10:	693b      	ldr	r3, [r7, #16]
 8002f12:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002f16:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	689b      	ldr	r3, [r3, #8]
 8002f1c:	031b      	lsls	r3, r3, #12
 8002f1e:	693a      	ldr	r2, [r7, #16]
 8002f20:	4313      	orrs	r3, r2
 8002f22:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	4a12      	ldr	r2, [pc, #72]	; (8002f70 <TIM_OC4_SetConfig+0xa4>)
 8002f28:	4293      	cmp	r3, r2
 8002f2a:	d003      	beq.n	8002f34 <TIM_OC4_SetConfig+0x68>
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	4a11      	ldr	r2, [pc, #68]	; (8002f74 <TIM_OC4_SetConfig+0xa8>)
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d109      	bne.n	8002f48 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002f34:	697b      	ldr	r3, [r7, #20]
 8002f36:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002f3a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	695b      	ldr	r3, [r3, #20]
 8002f40:	019b      	lsls	r3, r3, #6
 8002f42:	697a      	ldr	r2, [r7, #20]
 8002f44:	4313      	orrs	r3, r2
 8002f46:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	697a      	ldr	r2, [r7, #20]
 8002f4c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	68fa      	ldr	r2, [r7, #12]
 8002f52:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	685a      	ldr	r2, [r3, #4]
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	693a      	ldr	r2, [r7, #16]
 8002f60:	621a      	str	r2, [r3, #32]
}
 8002f62:	bf00      	nop
 8002f64:	371c      	adds	r7, #28
 8002f66:	46bd      	mov	sp, r7
 8002f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6c:	4770      	bx	lr
 8002f6e:	bf00      	nop
 8002f70:	40010000 	.word	0x40010000
 8002f74:	40010400 	.word	0x40010400

08002f78 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	b087      	sub	sp, #28
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	60f8      	str	r0, [r7, #12]
 8002f80:	60b9      	str	r1, [r7, #8]
 8002f82:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002f84:	68bb      	ldr	r3, [r7, #8]
 8002f86:	f003 031f 	and.w	r3, r3, #31
 8002f8a:	2201      	movs	r2, #1
 8002f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f90:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	6a1a      	ldr	r2, [r3, #32]
 8002f96:	697b      	ldr	r3, [r7, #20]
 8002f98:	43db      	mvns	r3, r3
 8002f9a:	401a      	ands	r2, r3
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	6a1a      	ldr	r2, [r3, #32]
 8002fa4:	68bb      	ldr	r3, [r7, #8]
 8002fa6:	f003 031f 	and.w	r3, r3, #31
 8002faa:	6879      	ldr	r1, [r7, #4]
 8002fac:	fa01 f303 	lsl.w	r3, r1, r3
 8002fb0:	431a      	orrs	r2, r3
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	621a      	str	r2, [r3, #32]
}
 8002fb6:	bf00      	nop
 8002fb8:	371c      	adds	r7, #28
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc0:	4770      	bx	lr
	...

08002fc4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	b085      	sub	sp, #20
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
 8002fcc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002fd4:	2b01      	cmp	r3, #1
 8002fd6:	d101      	bne.n	8002fdc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002fd8:	2302      	movs	r3, #2
 8002fda:	e05a      	b.n	8003092 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2201      	movs	r2, #1
 8002fe0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2202      	movs	r2, #2
 8002fe8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	689b      	ldr	r3, [r3, #8]
 8002ffa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003002:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	68fa      	ldr	r2, [r7, #12]
 800300a:	4313      	orrs	r3, r2
 800300c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	68fa      	ldr	r2, [r7, #12]
 8003014:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4a21      	ldr	r2, [pc, #132]	; (80030a0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800301c:	4293      	cmp	r3, r2
 800301e:	d022      	beq.n	8003066 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003028:	d01d      	beq.n	8003066 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4a1d      	ldr	r2, [pc, #116]	; (80030a4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003030:	4293      	cmp	r3, r2
 8003032:	d018      	beq.n	8003066 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4a1b      	ldr	r2, [pc, #108]	; (80030a8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d013      	beq.n	8003066 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	4a1a      	ldr	r2, [pc, #104]	; (80030ac <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003044:	4293      	cmp	r3, r2
 8003046:	d00e      	beq.n	8003066 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4a18      	ldr	r2, [pc, #96]	; (80030b0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800304e:	4293      	cmp	r3, r2
 8003050:	d009      	beq.n	8003066 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4a17      	ldr	r2, [pc, #92]	; (80030b4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003058:	4293      	cmp	r3, r2
 800305a:	d004      	beq.n	8003066 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4a15      	ldr	r2, [pc, #84]	; (80030b8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d10c      	bne.n	8003080 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003066:	68bb      	ldr	r3, [r7, #8]
 8003068:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800306c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	685b      	ldr	r3, [r3, #4]
 8003072:	68ba      	ldr	r2, [r7, #8]
 8003074:	4313      	orrs	r3, r2
 8003076:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	68ba      	ldr	r2, [r7, #8]
 800307e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2201      	movs	r2, #1
 8003084:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2200      	movs	r2, #0
 800308c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003090:	2300      	movs	r3, #0
}
 8003092:	4618      	mov	r0, r3
 8003094:	3714      	adds	r7, #20
 8003096:	46bd      	mov	sp, r7
 8003098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309c:	4770      	bx	lr
 800309e:	bf00      	nop
 80030a0:	40010000 	.word	0x40010000
 80030a4:	40000400 	.word	0x40000400
 80030a8:	40000800 	.word	0x40000800
 80030ac:	40000c00 	.word	0x40000c00
 80030b0:	40010400 	.word	0x40010400
 80030b4:	40014000 	.word	0x40014000
 80030b8:	40001800 	.word	0x40001800

080030bc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80030bc:	b480      	push	{r7}
 80030be:	b085      	sub	sp, #20
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
 80030c4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80030c6:	2300      	movs	r3, #0
 80030c8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030d0:	2b01      	cmp	r3, #1
 80030d2:	d101      	bne.n	80030d8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80030d4:	2302      	movs	r3, #2
 80030d6:	e03d      	b.n	8003154 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2201      	movs	r2, #1
 80030dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	68db      	ldr	r3, [r3, #12]
 80030ea:	4313      	orrs	r3, r2
 80030ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	689b      	ldr	r3, [r3, #8]
 80030f8:	4313      	orrs	r3, r2
 80030fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	4313      	orrs	r3, r2
 8003108:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4313      	orrs	r3, r2
 8003116:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	691b      	ldr	r3, [r3, #16]
 8003122:	4313      	orrs	r3, r2
 8003124:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	695b      	ldr	r3, [r3, #20]
 8003130:	4313      	orrs	r3, r2
 8003132:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	69db      	ldr	r3, [r3, #28]
 800313e:	4313      	orrs	r3, r2
 8003140:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	68fa      	ldr	r2, [r7, #12]
 8003148:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2200      	movs	r2, #0
 800314e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003152:	2300      	movs	r3, #0
}
 8003154:	4618      	mov	r0, r3
 8003156:	3714      	adds	r7, #20
 8003158:	46bd      	mov	sp, r7
 800315a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315e:	4770      	bx	lr

08003160 <__libc_init_array>:
 8003160:	b570      	push	{r4, r5, r6, lr}
 8003162:	4d0d      	ldr	r5, [pc, #52]	; (8003198 <__libc_init_array+0x38>)
 8003164:	4c0d      	ldr	r4, [pc, #52]	; (800319c <__libc_init_array+0x3c>)
 8003166:	1b64      	subs	r4, r4, r5
 8003168:	10a4      	asrs	r4, r4, #2
 800316a:	2600      	movs	r6, #0
 800316c:	42a6      	cmp	r6, r4
 800316e:	d109      	bne.n	8003184 <__libc_init_array+0x24>
 8003170:	4d0b      	ldr	r5, [pc, #44]	; (80031a0 <__libc_init_array+0x40>)
 8003172:	4c0c      	ldr	r4, [pc, #48]	; (80031a4 <__libc_init_array+0x44>)
 8003174:	f000 f820 	bl	80031b8 <_init>
 8003178:	1b64      	subs	r4, r4, r5
 800317a:	10a4      	asrs	r4, r4, #2
 800317c:	2600      	movs	r6, #0
 800317e:	42a6      	cmp	r6, r4
 8003180:	d105      	bne.n	800318e <__libc_init_array+0x2e>
 8003182:	bd70      	pop	{r4, r5, r6, pc}
 8003184:	f855 3b04 	ldr.w	r3, [r5], #4
 8003188:	4798      	blx	r3
 800318a:	3601      	adds	r6, #1
 800318c:	e7ee      	b.n	800316c <__libc_init_array+0xc>
 800318e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003192:	4798      	blx	r3
 8003194:	3601      	adds	r6, #1
 8003196:	e7f2      	b.n	800317e <__libc_init_array+0x1e>
 8003198:	080031e8 	.word	0x080031e8
 800319c:	080031e8 	.word	0x080031e8
 80031a0:	080031e8 	.word	0x080031e8
 80031a4:	080031ec 	.word	0x080031ec

080031a8 <memset>:
 80031a8:	4402      	add	r2, r0
 80031aa:	4603      	mov	r3, r0
 80031ac:	4293      	cmp	r3, r2
 80031ae:	d100      	bne.n	80031b2 <memset+0xa>
 80031b0:	4770      	bx	lr
 80031b2:	f803 1b01 	strb.w	r1, [r3], #1
 80031b6:	e7f9      	b.n	80031ac <memset+0x4>

080031b8 <_init>:
 80031b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031ba:	bf00      	nop
 80031bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80031be:	bc08      	pop	{r3}
 80031c0:	469e      	mov	lr, r3
 80031c2:	4770      	bx	lr

080031c4 <_fini>:
 80031c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031c6:	bf00      	nop
 80031c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80031ca:	bc08      	pop	{r3}
 80031cc:	469e      	mov	lr, r3
 80031ce:	4770      	bx	lr
