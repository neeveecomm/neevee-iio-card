
CAN_Interrupt_FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006e14  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000130  08006fe4  08006fe4  00016fe4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007114  08007114  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08007114  08007114  00017114  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800711c  0800711c  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800711c  0800711c  0001711c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007120  08007120  00017120  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08007124  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001f69c  20000078  0800719c  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2001f714  0800719c  0002f714  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012dca  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002fa6  00000000  00000000  00032e72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001190  00000000  00000000  00035e18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001028  00000000  00000000  00036fa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002239f  00000000  00000000  00037fd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013d34  00000000  00000000  0005a36f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dafa4  00000000  00000000  0006e0a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00149047  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000050b8  00000000  00000000  00149098  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000078 	.word	0x20000078
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08006fcc 	.word	0x08006fcc

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000007c 	.word	0x2000007c
 800020c:	08006fcc 	.word	0x08006fcc

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80005b4:	b480      	push	{r7}
 80005b6:	b083      	sub	sp, #12
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	f103 0208 	add.w	r2, r3, #8
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	f04f 32ff 	mov.w	r2, #4294967295
 80005cc:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	f103 0208 	add.w	r2, r3, #8
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	f103 0208 	add.w	r2, r3, #8
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	2200      	movs	r2, #0
 80005e6:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80005e8:	bf00      	nop
 80005ea:	370c      	adds	r7, #12
 80005ec:	46bd      	mov	sp, r7
 80005ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f2:	4770      	bx	lr

080005f4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80005f4:	b480      	push	{r7}
 80005f6:	b083      	sub	sp, #12
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	2200      	movs	r2, #0
 8000600:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8000602:	bf00      	nop
 8000604:	370c      	adds	r7, #12
 8000606:	46bd      	mov	sp, r7
 8000608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060c:	4770      	bx	lr

0800060e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 800060e:	b480      	push	{r7}
 8000610:	b085      	sub	sp, #20
 8000612:	af00      	add	r7, sp, #0
 8000614:	6078      	str	r0, [r7, #4]
 8000616:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	685b      	ldr	r3, [r3, #4]
 800061c:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 800061e:	683b      	ldr	r3, [r7, #0]
 8000620:	68fa      	ldr	r2, [r7, #12]
 8000622:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8000624:	68fb      	ldr	r3, [r7, #12]
 8000626:	689a      	ldr	r2, [r3, #8]
 8000628:	683b      	ldr	r3, [r7, #0]
 800062a:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 800062c:	68fb      	ldr	r3, [r7, #12]
 800062e:	689b      	ldr	r3, [r3, #8]
 8000630:	683a      	ldr	r2, [r7, #0]
 8000632:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8000634:	68fb      	ldr	r3, [r7, #12]
 8000636:	683a      	ldr	r2, [r7, #0]
 8000638:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 800063a:	683b      	ldr	r3, [r7, #0]
 800063c:	687a      	ldr	r2, [r7, #4]
 800063e:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	1c5a      	adds	r2, r3, #1
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	601a      	str	r2, [r3, #0]
}
 800064a:	bf00      	nop
 800064c:	3714      	adds	r7, #20
 800064e:	46bd      	mov	sp, r7
 8000650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000654:	4770      	bx	lr

08000656 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8000656:	b480      	push	{r7}
 8000658:	b085      	sub	sp, #20
 800065a:	af00      	add	r7, sp, #0
 800065c:	6078      	str	r0, [r7, #4]
 800065e:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8000660:	683b      	ldr	r3, [r7, #0]
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8000666:	68bb      	ldr	r3, [r7, #8]
 8000668:	f1b3 3fff 	cmp.w	r3, #4294967295
 800066c:	d103      	bne.n	8000676 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	691b      	ldr	r3, [r3, #16]
 8000672:	60fb      	str	r3, [r7, #12]
 8000674:	e00c      	b.n	8000690 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	3308      	adds	r3, #8
 800067a:	60fb      	str	r3, [r7, #12]
 800067c:	e002      	b.n	8000684 <vListInsert+0x2e>
 800067e:	68fb      	ldr	r3, [r7, #12]
 8000680:	685b      	ldr	r3, [r3, #4]
 8000682:	60fb      	str	r3, [r7, #12]
 8000684:	68fb      	ldr	r3, [r7, #12]
 8000686:	685b      	ldr	r3, [r3, #4]
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	68ba      	ldr	r2, [r7, #8]
 800068c:	429a      	cmp	r2, r3
 800068e:	d2f6      	bcs.n	800067e <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8000690:	68fb      	ldr	r3, [r7, #12]
 8000692:	685a      	ldr	r2, [r3, #4]
 8000694:	683b      	ldr	r3, [r7, #0]
 8000696:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8000698:	683b      	ldr	r3, [r7, #0]
 800069a:	685b      	ldr	r3, [r3, #4]
 800069c:	683a      	ldr	r2, [r7, #0]
 800069e:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 80006a0:	683b      	ldr	r3, [r7, #0]
 80006a2:	68fa      	ldr	r2, [r7, #12]
 80006a4:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 80006a6:	68fb      	ldr	r3, [r7, #12]
 80006a8:	683a      	ldr	r2, [r7, #0]
 80006aa:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 80006ac:	683b      	ldr	r3, [r7, #0]
 80006ae:	687a      	ldr	r2, [r7, #4]
 80006b0:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	1c5a      	adds	r2, r3, #1
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	601a      	str	r2, [r3, #0]
}
 80006bc:	bf00      	nop
 80006be:	3714      	adds	r7, #20
 80006c0:	46bd      	mov	sp, r7
 80006c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c6:	4770      	bx	lr

080006c8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80006c8:	b480      	push	{r7}
 80006ca:	b085      	sub	sp, #20
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	691b      	ldr	r3, [r3, #16]
 80006d4:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	685b      	ldr	r3, [r3, #4]
 80006da:	687a      	ldr	r2, [r7, #4]
 80006dc:	6892      	ldr	r2, [r2, #8]
 80006de:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	689b      	ldr	r3, [r3, #8]
 80006e4:	687a      	ldr	r2, [r7, #4]
 80006e6:	6852      	ldr	r2, [r2, #4]
 80006e8:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80006ea:	68fb      	ldr	r3, [r7, #12]
 80006ec:	685b      	ldr	r3, [r3, #4]
 80006ee:	687a      	ldr	r2, [r7, #4]
 80006f0:	429a      	cmp	r2, r3
 80006f2:	d103      	bne.n	80006fc <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	689a      	ldr	r2, [r3, #8]
 80006f8:	68fb      	ldr	r3, [r7, #12]
 80006fa:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	2200      	movs	r2, #0
 8000700:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8000702:	68fb      	ldr	r3, [r7, #12]
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	1e5a      	subs	r2, r3, #1
 8000708:	68fb      	ldr	r3, [r7, #12]
 800070a:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 800070c:	68fb      	ldr	r3, [r7, #12]
 800070e:	681b      	ldr	r3, [r3, #0]
}
 8000710:	4618      	mov	r0, r3
 8000712:	3714      	adds	r7, #20
 8000714:	46bd      	mov	sp, r7
 8000716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071a:	4770      	bx	lr

0800071c <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b084      	sub	sp, #16
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
 8000724:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 800072a:	68fb      	ldr	r3, [r7, #12]
 800072c:	2b00      	cmp	r3, #0
 800072e:	d10a      	bne.n	8000746 <xQueueGenericReset+0x2a>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8000730:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000734:	f383 8811 	msr	BASEPRI, r3
 8000738:	f3bf 8f6f 	isb	sy
 800073c:	f3bf 8f4f 	dsb	sy
 8000740:	60bb      	str	r3, [r7, #8]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8000742:	bf00      	nop
 8000744:	e7fe      	b.n	8000744 <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 8000746:	f002 f8f7 	bl	8002938 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800074a:	68fb      	ldr	r3, [r7, #12]
 800074c:	681a      	ldr	r2, [r3, #0]
 800074e:	68fb      	ldr	r3, [r7, #12]
 8000750:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000752:	68f9      	ldr	r1, [r7, #12]
 8000754:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8000756:	fb01 f303 	mul.w	r3, r1, r3
 800075a:	441a      	add	r2, r3
 800075c:	68fb      	ldr	r3, [r7, #12]
 800075e:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8000760:	68fb      	ldr	r3, [r7, #12]
 8000762:	2200      	movs	r2, #0
 8000764:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 8000766:	68fb      	ldr	r3, [r7, #12]
 8000768:	681a      	ldr	r2, [r3, #0]
 800076a:	68fb      	ldr	r3, [r7, #12]
 800076c:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800076e:	68fb      	ldr	r3, [r7, #12]
 8000770:	681a      	ldr	r2, [r3, #0]
 8000772:	68fb      	ldr	r3, [r7, #12]
 8000774:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000776:	3b01      	subs	r3, #1
 8000778:	68f9      	ldr	r1, [r7, #12]
 800077a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800077c:	fb01 f303 	mul.w	r3, r1, r3
 8000780:	441a      	add	r2, r3
 8000782:	68fb      	ldr	r3, [r7, #12]
 8000784:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 8000786:	68fb      	ldr	r3, [r7, #12]
 8000788:	22ff      	movs	r2, #255	; 0xff
 800078a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 800078e:	68fb      	ldr	r3, [r7, #12]
 8000790:	22ff      	movs	r2, #255	; 0xff
 8000792:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 8000796:	683b      	ldr	r3, [r7, #0]
 8000798:	2b00      	cmp	r3, #0
 800079a:	d114      	bne.n	80007c6 <xQueueGenericReset+0xaa>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800079c:	68fb      	ldr	r3, [r7, #12]
 800079e:	691b      	ldr	r3, [r3, #16]
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d01a      	beq.n	80007da <xQueueGenericReset+0xbe>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80007a4:	68fb      	ldr	r3, [r7, #12]
 80007a6:	3310      	adds	r3, #16
 80007a8:	4618      	mov	r0, r3
 80007aa:	f001 f881 	bl	80018b0 <xTaskRemoveFromEventList>
 80007ae:	4603      	mov	r3, r0
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d012      	beq.n	80007da <xQueueGenericReset+0xbe>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 80007b4:	4b0c      	ldr	r3, [pc, #48]	; (80007e8 <xQueueGenericReset+0xcc>)
 80007b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80007ba:	601a      	str	r2, [r3, #0]
 80007bc:	f3bf 8f4f 	dsb	sy
 80007c0:	f3bf 8f6f 	isb	sy
 80007c4:	e009      	b.n	80007da <xQueueGenericReset+0xbe>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80007c6:	68fb      	ldr	r3, [r7, #12]
 80007c8:	3310      	adds	r3, #16
 80007ca:	4618      	mov	r0, r3
 80007cc:	f7ff fef2 	bl	80005b4 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80007d0:	68fb      	ldr	r3, [r7, #12]
 80007d2:	3324      	adds	r3, #36	; 0x24
 80007d4:	4618      	mov	r0, r3
 80007d6:	f7ff feed 	bl	80005b4 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 80007da:	f002 f8dd 	bl	8002998 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 80007de:	2301      	movs	r3, #1
}
 80007e0:	4618      	mov	r0, r3
 80007e2:	3710      	adds	r7, #16
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bd80      	pop	{r7, pc}
 80007e8:	e000ed04 	.word	0xe000ed04

080007ec <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b08c      	sub	sp, #48	; 0x30
 80007f0:	af02      	add	r7, sp, #8
 80007f2:	60f8      	str	r0, [r7, #12]
 80007f4:	60b9      	str	r1, [r7, #8]
 80007f6:	4613      	mov	r3, r2
 80007f8:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80007fa:	68fb      	ldr	r3, [r7, #12]
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d10a      	bne.n	8000816 <xQueueGenericCreate+0x2a>
        __asm volatile
 8000800:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000804:	f383 8811 	msr	BASEPRI, r3
 8000808:	f3bf 8f6f 	isb	sy
 800080c:	f3bf 8f4f 	dsb	sy
 8000810:	61bb      	str	r3, [r7, #24]
    }
 8000812:	bf00      	nop
 8000814:	e7fe      	b.n	8000814 <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000816:	68fb      	ldr	r3, [r7, #12]
 8000818:	68ba      	ldr	r2, [r7, #8]
 800081a:	fb02 f303 	mul.w	r3, r2, r3
 800081e:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 8000820:	68bb      	ldr	r3, [r7, #8]
 8000822:	2b00      	cmp	r3, #0
 8000824:	d006      	beq.n	8000834 <xQueueGenericCreate+0x48>
 8000826:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000828:	68bb      	ldr	r3, [r7, #8]
 800082a:	fbb2 f3f3 	udiv	r3, r2, r3
 800082e:	68fa      	ldr	r2, [r7, #12]
 8000830:	429a      	cmp	r2, r3
 8000832:	d101      	bne.n	8000838 <xQueueGenericCreate+0x4c>
 8000834:	2301      	movs	r3, #1
 8000836:	e000      	b.n	800083a <xQueueGenericCreate+0x4e>
 8000838:	2300      	movs	r3, #0
 800083a:	2b00      	cmp	r3, #0
 800083c:	d10a      	bne.n	8000854 <xQueueGenericCreate+0x68>
        __asm volatile
 800083e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000842:	f383 8811 	msr	BASEPRI, r3
 8000846:	f3bf 8f6f 	isb	sy
 800084a:	f3bf 8f4f 	dsb	sy
 800084e:	617b      	str	r3, [r7, #20]
    }
 8000850:	bf00      	nop
 8000852:	e7fe      	b.n	8000852 <xQueueGenericCreate+0x66>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 8000854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000856:	f113 0f51 	cmn.w	r3, #81	; 0x51
 800085a:	d90a      	bls.n	8000872 <xQueueGenericCreate+0x86>
        __asm volatile
 800085c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000860:	f383 8811 	msr	BASEPRI, r3
 8000864:	f3bf 8f6f 	isb	sy
 8000868:	f3bf 8f4f 	dsb	sy
 800086c:	613b      	str	r3, [r7, #16]
    }
 800086e:	bf00      	nop
 8000870:	e7fe      	b.n	8000870 <xQueueGenericCreate+0x84>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8000872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000874:	3350      	adds	r3, #80	; 0x50
 8000876:	4618      	mov	r0, r3
 8000878:	f002 f980 	bl	8002b7c <pvPortMalloc>
 800087c:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 800087e:	6a3b      	ldr	r3, [r7, #32]
 8000880:	2b00      	cmp	r3, #0
 8000882:	d00d      	beq.n	80008a0 <xQueueGenericCreate+0xb4>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8000884:	6a3b      	ldr	r3, [r7, #32]
 8000886:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000888:	69fb      	ldr	r3, [r7, #28]
 800088a:	3350      	adds	r3, #80	; 0x50
 800088c:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800088e:	79fa      	ldrb	r2, [r7, #7]
 8000890:	6a3b      	ldr	r3, [r7, #32]
 8000892:	9300      	str	r3, [sp, #0]
 8000894:	4613      	mov	r3, r2
 8000896:	69fa      	ldr	r2, [r7, #28]
 8000898:	68b9      	ldr	r1, [r7, #8]
 800089a:	68f8      	ldr	r0, [r7, #12]
 800089c:	f000 f805 	bl	80008aa <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 80008a0:	6a3b      	ldr	r3, [r7, #32]
    }
 80008a2:	4618      	mov	r0, r3
 80008a4:	3728      	adds	r7, #40	; 0x28
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}

080008aa <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 80008aa:	b580      	push	{r7, lr}
 80008ac:	b084      	sub	sp, #16
 80008ae:	af00      	add	r7, sp, #0
 80008b0:	60f8      	str	r0, [r7, #12]
 80008b2:	60b9      	str	r1, [r7, #8]
 80008b4:	607a      	str	r2, [r7, #4]
 80008b6:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 80008b8:	68bb      	ldr	r3, [r7, #8]
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d103      	bne.n	80008c6 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80008be:	69bb      	ldr	r3, [r7, #24]
 80008c0:	69ba      	ldr	r2, [r7, #24]
 80008c2:	601a      	str	r2, [r3, #0]
 80008c4:	e002      	b.n	80008cc <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80008c6:	69bb      	ldr	r3, [r7, #24]
 80008c8:	687a      	ldr	r2, [r7, #4]
 80008ca:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 80008cc:	69bb      	ldr	r3, [r7, #24]
 80008ce:	68fa      	ldr	r2, [r7, #12]
 80008d0:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 80008d2:	69bb      	ldr	r3, [r7, #24]
 80008d4:	68ba      	ldr	r2, [r7, #8]
 80008d6:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80008d8:	2101      	movs	r1, #1
 80008da:	69b8      	ldr	r0, [r7, #24]
 80008dc:	f7ff ff1e 	bl	800071c <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 80008e0:	69bb      	ldr	r3, [r7, #24]
 80008e2:	78fa      	ldrb	r2, [r7, #3]
 80008e4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 80008e8:	bf00      	nop
 80008ea:	3710      	adds	r7, #16
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bd80      	pop	{r7, pc}

080008f0 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b08e      	sub	sp, #56	; 0x38
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	60f8      	str	r0, [r7, #12]
 80008f8:	60b9      	str	r1, [r7, #8]
 80008fa:	607a      	str	r2, [r7, #4]
 80008fc:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80008fe:	2300      	movs	r3, #0
 8000900:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8000902:	68fb      	ldr	r3, [r7, #12]
 8000904:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 8000906:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000908:	2b00      	cmp	r3, #0
 800090a:	d10a      	bne.n	8000922 <xQueueGenericSend+0x32>
        __asm volatile
 800090c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000910:	f383 8811 	msr	BASEPRI, r3
 8000914:	f3bf 8f6f 	isb	sy
 8000918:	f3bf 8f4f 	dsb	sy
 800091c:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 800091e:	bf00      	nop
 8000920:	e7fe      	b.n	8000920 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000922:	68bb      	ldr	r3, [r7, #8]
 8000924:	2b00      	cmp	r3, #0
 8000926:	d103      	bne.n	8000930 <xQueueGenericSend+0x40>
 8000928:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800092a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800092c:	2b00      	cmp	r3, #0
 800092e:	d101      	bne.n	8000934 <xQueueGenericSend+0x44>
 8000930:	2301      	movs	r3, #1
 8000932:	e000      	b.n	8000936 <xQueueGenericSend+0x46>
 8000934:	2300      	movs	r3, #0
 8000936:	2b00      	cmp	r3, #0
 8000938:	d10a      	bne.n	8000950 <xQueueGenericSend+0x60>
        __asm volatile
 800093a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800093e:	f383 8811 	msr	BASEPRI, r3
 8000942:	f3bf 8f6f 	isb	sy
 8000946:	f3bf 8f4f 	dsb	sy
 800094a:	627b      	str	r3, [r7, #36]	; 0x24
    }
 800094c:	bf00      	nop
 800094e:	e7fe      	b.n	800094e <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8000950:	683b      	ldr	r3, [r7, #0]
 8000952:	2b02      	cmp	r3, #2
 8000954:	d103      	bne.n	800095e <xQueueGenericSend+0x6e>
 8000956:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000958:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800095a:	2b01      	cmp	r3, #1
 800095c:	d101      	bne.n	8000962 <xQueueGenericSend+0x72>
 800095e:	2301      	movs	r3, #1
 8000960:	e000      	b.n	8000964 <xQueueGenericSend+0x74>
 8000962:	2300      	movs	r3, #0
 8000964:	2b00      	cmp	r3, #0
 8000966:	d10a      	bne.n	800097e <xQueueGenericSend+0x8e>
        __asm volatile
 8000968:	f04f 0350 	mov.w	r3, #80	; 0x50
 800096c:	f383 8811 	msr	BASEPRI, r3
 8000970:	f3bf 8f6f 	isb	sy
 8000974:	f3bf 8f4f 	dsb	sy
 8000978:	623b      	str	r3, [r7, #32]
    }
 800097a:	bf00      	nop
 800097c:	e7fe      	b.n	800097c <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800097e:	f001 f933 	bl	8001be8 <xTaskGetSchedulerState>
 8000982:	4603      	mov	r3, r0
 8000984:	2b00      	cmp	r3, #0
 8000986:	d102      	bne.n	800098e <xQueueGenericSend+0x9e>
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	2b00      	cmp	r3, #0
 800098c:	d101      	bne.n	8000992 <xQueueGenericSend+0xa2>
 800098e:	2301      	movs	r3, #1
 8000990:	e000      	b.n	8000994 <xQueueGenericSend+0xa4>
 8000992:	2300      	movs	r3, #0
 8000994:	2b00      	cmp	r3, #0
 8000996:	d10a      	bne.n	80009ae <xQueueGenericSend+0xbe>
        __asm volatile
 8000998:	f04f 0350 	mov.w	r3, #80	; 0x50
 800099c:	f383 8811 	msr	BASEPRI, r3
 80009a0:	f3bf 8f6f 	isb	sy
 80009a4:	f3bf 8f4f 	dsb	sy
 80009a8:	61fb      	str	r3, [r7, #28]
    }
 80009aa:	bf00      	nop
 80009ac:	e7fe      	b.n	80009ac <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80009ae:	f001 ffc3 	bl	8002938 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80009b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80009b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80009b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80009b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80009ba:	429a      	cmp	r2, r3
 80009bc:	d302      	bcc.n	80009c4 <xQueueGenericSend+0xd4>
 80009be:	683b      	ldr	r3, [r7, #0]
 80009c0:	2b02      	cmp	r3, #2
 80009c2:	d129      	bne.n	8000a18 <xQueueGenericSend+0x128>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80009c4:	683a      	ldr	r2, [r7, #0]
 80009c6:	68b9      	ldr	r1, [r7, #8]
 80009c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80009ca:	f000 fa19 	bl	8000e00 <prvCopyDataToQueue>
 80009ce:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80009d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80009d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d010      	beq.n	80009fa <xQueueGenericSend+0x10a>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80009d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80009da:	3324      	adds	r3, #36	; 0x24
 80009dc:	4618      	mov	r0, r3
 80009de:	f000 ff67 	bl	80018b0 <xTaskRemoveFromEventList>
 80009e2:	4603      	mov	r3, r0
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d013      	beq.n	8000a10 <xQueueGenericSend+0x120>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 80009e8:	4b3f      	ldr	r3, [pc, #252]	; (8000ae8 <xQueueGenericSend+0x1f8>)
 80009ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80009ee:	601a      	str	r2, [r3, #0]
 80009f0:	f3bf 8f4f 	dsb	sy
 80009f4:	f3bf 8f6f 	isb	sy
 80009f8:	e00a      	b.n	8000a10 <xQueueGenericSend+0x120>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 80009fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d007      	beq.n	8000a10 <xQueueGenericSend+0x120>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 8000a00:	4b39      	ldr	r3, [pc, #228]	; (8000ae8 <xQueueGenericSend+0x1f8>)
 8000a02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000a06:	601a      	str	r2, [r3, #0]
 8000a08:	f3bf 8f4f 	dsb	sy
 8000a0c:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8000a10:	f001 ffc2 	bl	8002998 <vPortExitCritical>
                return pdPASS;
 8000a14:	2301      	movs	r3, #1
 8000a16:	e063      	b.n	8000ae0 <xQueueGenericSend+0x1f0>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d103      	bne.n	8000a26 <xQueueGenericSend+0x136>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8000a1e:	f001 ffbb 	bl	8002998 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 8000a22:	2300      	movs	r3, #0
 8000a24:	e05c      	b.n	8000ae0 <xQueueGenericSend+0x1f0>
                }
                else if( xEntryTimeSet == pdFALSE )
 8000a26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d106      	bne.n	8000a3a <xQueueGenericSend+0x14a>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8000a2c:	f107 0314 	add.w	r3, r7, #20
 8000a30:	4618      	mov	r0, r3
 8000a32:	f000 ff9f 	bl	8001974 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8000a36:	2301      	movs	r3, #1
 8000a38:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8000a3a:	f001 ffad 	bl	8002998 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8000a3e:	f000 fd19 	bl	8001474 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8000a42:	f001 ff79 	bl	8002938 <vPortEnterCritical>
 8000a46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a48:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000a4c:	b25b      	sxtb	r3, r3
 8000a4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a52:	d103      	bne.n	8000a5c <xQueueGenericSend+0x16c>
 8000a54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a56:	2200      	movs	r2, #0
 8000a58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8000a5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a5e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000a62:	b25b      	sxtb	r3, r3
 8000a64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a68:	d103      	bne.n	8000a72 <xQueueGenericSend+0x182>
 8000a6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8000a72:	f001 ff91 	bl	8002998 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000a76:	1d3a      	adds	r2, r7, #4
 8000a78:	f107 0314 	add.w	r3, r7, #20
 8000a7c:	4611      	mov	r1, r2
 8000a7e:	4618      	mov	r0, r3
 8000a80:	f000 ff8e 	bl	80019a0 <xTaskCheckForTimeOut>
 8000a84:	4603      	mov	r3, r0
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d124      	bne.n	8000ad4 <xQueueGenericSend+0x1e4>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8000a8a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000a8c:	f000 fab0 	bl	8000ff0 <prvIsQueueFull>
 8000a90:	4603      	mov	r3, r0
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d018      	beq.n	8000ac8 <xQueueGenericSend+0x1d8>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8000a96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a98:	3310      	adds	r3, #16
 8000a9a:	687a      	ldr	r2, [r7, #4]
 8000a9c:	4611      	mov	r1, r2
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	f000 feb6 	bl	8001810 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8000aa4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000aa6:	f000 fa3b 	bl	8000f20 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8000aaa:	f000 fcf1 	bl	8001490 <xTaskResumeAll>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	f47f af7c 	bne.w	80009ae <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 8000ab6:	4b0c      	ldr	r3, [pc, #48]	; (8000ae8 <xQueueGenericSend+0x1f8>)
 8000ab8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000abc:	601a      	str	r2, [r3, #0]
 8000abe:	f3bf 8f4f 	dsb	sy
 8000ac2:	f3bf 8f6f 	isb	sy
 8000ac6:	e772      	b.n	80009ae <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8000ac8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000aca:	f000 fa29 	bl	8000f20 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8000ace:	f000 fcdf 	bl	8001490 <xTaskResumeAll>
 8000ad2:	e76c      	b.n	80009ae <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8000ad4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000ad6:	f000 fa23 	bl	8000f20 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8000ada:	f000 fcd9 	bl	8001490 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 8000ade:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	3738      	adds	r7, #56	; 0x38
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	bd80      	pop	{r7, pc}
 8000ae8:	e000ed04 	.word	0xe000ed04

08000aec <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b090      	sub	sp, #64	; 0x40
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	60f8      	str	r0, [r7, #12]
 8000af4:	60b9      	str	r1, [r7, #8]
 8000af6:	607a      	str	r2, [r7, #4]
 8000af8:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8000afa:	68fb      	ldr	r3, [r7, #12]
 8000afc:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 8000afe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d10a      	bne.n	8000b1a <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 8000b04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000b08:	f383 8811 	msr	BASEPRI, r3
 8000b0c:	f3bf 8f6f 	isb	sy
 8000b10:	f3bf 8f4f 	dsb	sy
 8000b14:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8000b16:	bf00      	nop
 8000b18:	e7fe      	b.n	8000b18 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000b1a:	68bb      	ldr	r3, [r7, #8]
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d103      	bne.n	8000b28 <xQueueGenericSendFromISR+0x3c>
 8000b20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d101      	bne.n	8000b2c <xQueueGenericSendFromISR+0x40>
 8000b28:	2301      	movs	r3, #1
 8000b2a:	e000      	b.n	8000b2e <xQueueGenericSendFromISR+0x42>
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d10a      	bne.n	8000b48 <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 8000b32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000b36:	f383 8811 	msr	BASEPRI, r3
 8000b3a:	f3bf 8f6f 	isb	sy
 8000b3e:	f3bf 8f4f 	dsb	sy
 8000b42:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8000b44:	bf00      	nop
 8000b46:	e7fe      	b.n	8000b46 <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8000b48:	683b      	ldr	r3, [r7, #0]
 8000b4a:	2b02      	cmp	r3, #2
 8000b4c:	d103      	bne.n	8000b56 <xQueueGenericSendFromISR+0x6a>
 8000b4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000b50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000b52:	2b01      	cmp	r3, #1
 8000b54:	d101      	bne.n	8000b5a <xQueueGenericSendFromISR+0x6e>
 8000b56:	2301      	movs	r3, #1
 8000b58:	e000      	b.n	8000b5c <xQueueGenericSendFromISR+0x70>
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d10a      	bne.n	8000b76 <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 8000b60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000b64:	f383 8811 	msr	BASEPRI, r3
 8000b68:	f3bf 8f6f 	isb	sy
 8000b6c:	f3bf 8f4f 	dsb	sy
 8000b70:	623b      	str	r3, [r7, #32]
    }
 8000b72:	bf00      	nop
 8000b74:	e7fe      	b.n	8000b74 <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8000b76:	f001 ffc1 	bl	8002afc <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8000b7a:	f3ef 8211 	mrs	r2, BASEPRI
 8000b7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000b82:	f383 8811 	msr	BASEPRI, r3
 8000b86:	f3bf 8f6f 	isb	sy
 8000b8a:	f3bf 8f4f 	dsb	sy
 8000b8e:	61fa      	str	r2, [r7, #28]
 8000b90:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8000b92:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8000b94:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8000b96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000b98:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000b9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000b9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000b9e:	429a      	cmp	r2, r3
 8000ba0:	d302      	bcc.n	8000ba8 <xQueueGenericSendFromISR+0xbc>
 8000ba2:	683b      	ldr	r3, [r7, #0]
 8000ba4:	2b02      	cmp	r3, #2
 8000ba6:	d13e      	bne.n	8000c26 <xQueueGenericSendFromISR+0x13a>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8000ba8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000baa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000bae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000bb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000bb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000bb6:	62fb      	str	r3, [r7, #44]	; 0x2c
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8000bb8:	683a      	ldr	r2, [r7, #0]
 8000bba:	68b9      	ldr	r1, [r7, #8]
 8000bbc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8000bbe:	f000 f91f 	bl	8000e00 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8000bc2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8000bc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000bca:	d112      	bne.n	8000bf2 <xQueueGenericSendFromISR+0x106>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000bcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d025      	beq.n	8000c20 <xQueueGenericSendFromISR+0x134>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000bd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000bd6:	3324      	adds	r3, #36	; 0x24
 8000bd8:	4618      	mov	r0, r3
 8000bda:	f000 fe69 	bl	80018b0 <xTaskRemoveFromEventList>
 8000bde:	4603      	mov	r3, r0
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d01d      	beq.n	8000c20 <xQueueGenericSendFromISR+0x134>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d01a      	beq.n	8000c20 <xQueueGenericSendFromISR+0x134>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	2201      	movs	r2, #1
 8000bee:	601a      	str	r2, [r3, #0]
 8000bf0:	e016      	b.n	8000c20 <xQueueGenericSendFromISR+0x134>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 8000bf2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8000bf6:	2b7f      	cmp	r3, #127	; 0x7f
 8000bf8:	d10a      	bne.n	8000c10 <xQueueGenericSendFromISR+0x124>
        __asm volatile
 8000bfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000bfe:	f383 8811 	msr	BASEPRI, r3
 8000c02:	f3bf 8f6f 	isb	sy
 8000c06:	f3bf 8f4f 	dsb	sy
 8000c0a:	617b      	str	r3, [r7, #20]
    }
 8000c0c:	bf00      	nop
 8000c0e:	e7fe      	b.n	8000c0e <xQueueGenericSendFromISR+0x122>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8000c10:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000c14:	3301      	adds	r3, #1
 8000c16:	b2db      	uxtb	r3, r3
 8000c18:	b25a      	sxtb	r2, r3
 8000c1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000c1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 8000c20:	2301      	movs	r3, #1
 8000c22:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 8000c24:	e001      	b.n	8000c2a <xQueueGenericSendFromISR+0x13e>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 8000c26:	2300      	movs	r3, #0
 8000c28:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000c2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c2c:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8000c2e:	693b      	ldr	r3, [r7, #16]
 8000c30:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8000c34:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8000c36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8000c38:	4618      	mov	r0, r3
 8000c3a:	3740      	adds	r7, #64	; 0x40
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}

08000c40 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b08c      	sub	sp, #48	; 0x30
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	60f8      	str	r0, [r7, #12]
 8000c48:	60b9      	str	r1, [r7, #8]
 8000c4a:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8000c50:	68fb      	ldr	r3, [r7, #12]
 8000c52:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8000c54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d10a      	bne.n	8000c70 <xQueueReceive+0x30>
        __asm volatile
 8000c5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000c5e:	f383 8811 	msr	BASEPRI, r3
 8000c62:	f3bf 8f6f 	isb	sy
 8000c66:	f3bf 8f4f 	dsb	sy
 8000c6a:	623b      	str	r3, [r7, #32]
    }
 8000c6c:	bf00      	nop
 8000c6e:	e7fe      	b.n	8000c6e <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000c70:	68bb      	ldr	r3, [r7, #8]
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d103      	bne.n	8000c7e <xQueueReceive+0x3e>
 8000c76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d101      	bne.n	8000c82 <xQueueReceive+0x42>
 8000c7e:	2301      	movs	r3, #1
 8000c80:	e000      	b.n	8000c84 <xQueueReceive+0x44>
 8000c82:	2300      	movs	r3, #0
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d10a      	bne.n	8000c9e <xQueueReceive+0x5e>
        __asm volatile
 8000c88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000c8c:	f383 8811 	msr	BASEPRI, r3
 8000c90:	f3bf 8f6f 	isb	sy
 8000c94:	f3bf 8f4f 	dsb	sy
 8000c98:	61fb      	str	r3, [r7, #28]
    }
 8000c9a:	bf00      	nop
 8000c9c:	e7fe      	b.n	8000c9c <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8000c9e:	f000 ffa3 	bl	8001be8 <xTaskGetSchedulerState>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d102      	bne.n	8000cae <xQueueReceive+0x6e>
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d101      	bne.n	8000cb2 <xQueueReceive+0x72>
 8000cae:	2301      	movs	r3, #1
 8000cb0:	e000      	b.n	8000cb4 <xQueueReceive+0x74>
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d10a      	bne.n	8000cce <xQueueReceive+0x8e>
        __asm volatile
 8000cb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000cbc:	f383 8811 	msr	BASEPRI, r3
 8000cc0:	f3bf 8f6f 	isb	sy
 8000cc4:	f3bf 8f4f 	dsb	sy
 8000cc8:	61bb      	str	r3, [r7, #24]
    }
 8000cca:	bf00      	nop
 8000ccc:	e7fe      	b.n	8000ccc <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8000cce:	f001 fe33 	bl	8002938 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000cd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000cd6:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8000cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d01f      	beq.n	8000d1e <xQueueReceive+0xde>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8000cde:	68b9      	ldr	r1, [r7, #8]
 8000ce0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000ce2:	f000 f8f7 	bl	8000ed4 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8000ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ce8:	1e5a      	subs	r2, r3, #1
 8000cea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cec:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000cee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cf0:	691b      	ldr	r3, [r3, #16]
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d00f      	beq.n	8000d16 <xQueueReceive+0xd6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000cf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cf8:	3310      	adds	r3, #16
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	f000 fdd8 	bl	80018b0 <xTaskRemoveFromEventList>
 8000d00:	4603      	mov	r3, r0
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d007      	beq.n	8000d16 <xQueueReceive+0xd6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8000d06:	4b3d      	ldr	r3, [pc, #244]	; (8000dfc <xQueueReceive+0x1bc>)
 8000d08:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000d0c:	601a      	str	r2, [r3, #0]
 8000d0e:	f3bf 8f4f 	dsb	sy
 8000d12:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8000d16:	f001 fe3f 	bl	8002998 <vPortExitCritical>
                return pdPASS;
 8000d1a:	2301      	movs	r3, #1
 8000d1c:	e069      	b.n	8000df2 <xQueueReceive+0x1b2>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d103      	bne.n	8000d2c <xQueueReceive+0xec>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8000d24:	f001 fe38 	bl	8002998 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	e062      	b.n	8000df2 <xQueueReceive+0x1b2>
                }
                else if( xEntryTimeSet == pdFALSE )
 8000d2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d106      	bne.n	8000d40 <xQueueReceive+0x100>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8000d32:	f107 0310 	add.w	r3, r7, #16
 8000d36:	4618      	mov	r0, r3
 8000d38:	f000 fe1c 	bl	8001974 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8000d3c:	2301      	movs	r3, #1
 8000d3e:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8000d40:	f001 fe2a 	bl	8002998 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8000d44:	f000 fb96 	bl	8001474 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8000d48:	f001 fdf6 	bl	8002938 <vPortEnterCritical>
 8000d4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d4e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000d52:	b25b      	sxtb	r3, r3
 8000d54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d58:	d103      	bne.n	8000d62 <xQueueReceive+0x122>
 8000d5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8000d62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d64:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000d68:	b25b      	sxtb	r3, r3
 8000d6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d6e:	d103      	bne.n	8000d78 <xQueueReceive+0x138>
 8000d70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d72:	2200      	movs	r2, #0
 8000d74:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8000d78:	f001 fe0e 	bl	8002998 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000d7c:	1d3a      	adds	r2, r7, #4
 8000d7e:	f107 0310 	add.w	r3, r7, #16
 8000d82:	4611      	mov	r1, r2
 8000d84:	4618      	mov	r0, r3
 8000d86:	f000 fe0b 	bl	80019a0 <xTaskCheckForTimeOut>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d123      	bne.n	8000dd8 <xQueueReceive+0x198>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000d90:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000d92:	f000 f917 	bl	8000fc4 <prvIsQueueEmpty>
 8000d96:	4603      	mov	r3, r0
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d017      	beq.n	8000dcc <xQueueReceive+0x18c>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8000d9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d9e:	3324      	adds	r3, #36	; 0x24
 8000da0:	687a      	ldr	r2, [r7, #4]
 8000da2:	4611      	mov	r1, r2
 8000da4:	4618      	mov	r0, r3
 8000da6:	f000 fd33 	bl	8001810 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8000daa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000dac:	f000 f8b8 	bl	8000f20 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8000db0:	f000 fb6e 	bl	8001490 <xTaskResumeAll>
 8000db4:	4603      	mov	r3, r0
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d189      	bne.n	8000cce <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8000dba:	4b10      	ldr	r3, [pc, #64]	; (8000dfc <xQueueReceive+0x1bc>)
 8000dbc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000dc0:	601a      	str	r2, [r3, #0]
 8000dc2:	f3bf 8f4f 	dsb	sy
 8000dc6:	f3bf 8f6f 	isb	sy
 8000dca:	e780      	b.n	8000cce <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8000dcc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000dce:	f000 f8a7 	bl	8000f20 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8000dd2:	f000 fb5d 	bl	8001490 <xTaskResumeAll>
 8000dd6:	e77a      	b.n	8000cce <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8000dd8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000dda:	f000 f8a1 	bl	8000f20 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8000dde:	f000 fb57 	bl	8001490 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000de2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000de4:	f000 f8ee 	bl	8000fc4 <prvIsQueueEmpty>
 8000de8:	4603      	mov	r3, r0
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	f43f af6f 	beq.w	8000cce <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8000df0:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8000df2:	4618      	mov	r0, r3
 8000df4:	3730      	adds	r7, #48	; 0x30
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	e000ed04 	.word	0xe000ed04

08000e00 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b086      	sub	sp, #24
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	60f8      	str	r0, [r7, #12]
 8000e08:	60b9      	str	r1, [r7, #8]
 8000e0a:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e14:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8000e16:	68fb      	ldr	r3, [r7, #12]
 8000e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d10d      	bne.n	8000e3a <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8000e1e:	68fb      	ldr	r3, [r7, #12]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d14d      	bne.n	8000ec2 <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8000e26:	68fb      	ldr	r3, [r7, #12]
 8000e28:	689b      	ldr	r3, [r3, #8]
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	f000 fefa 	bl	8001c24 <xTaskPriorityDisinherit>
 8000e30:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8000e32:	68fb      	ldr	r3, [r7, #12]
 8000e34:	2200      	movs	r2, #0
 8000e36:	609a      	str	r2, [r3, #8]
 8000e38:	e043      	b.n	8000ec2 <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d119      	bne.n	8000e74 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	6858      	ldr	r0, [r3, #4]
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e48:	461a      	mov	r2, r3
 8000e4a:	68b9      	ldr	r1, [r7, #8]
 8000e4c:	f005 f8a4 	bl	8005f98 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	685a      	ldr	r2, [r3, #4]
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e58:	441a      	add	r2, r3
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8000e5e:	68fb      	ldr	r3, [r7, #12]
 8000e60:	685a      	ldr	r2, [r3, #4]
 8000e62:	68fb      	ldr	r3, [r7, #12]
 8000e64:	689b      	ldr	r3, [r3, #8]
 8000e66:	429a      	cmp	r2, r3
 8000e68:	d32b      	bcc.n	8000ec2 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8000e6a:	68fb      	ldr	r3, [r7, #12]
 8000e6c:	681a      	ldr	r2, [r3, #0]
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	605a      	str	r2, [r3, #4]
 8000e72:	e026      	b.n	8000ec2 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	68d8      	ldr	r0, [r3, #12]
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e7c:	461a      	mov	r2, r3
 8000e7e:	68b9      	ldr	r1, [r7, #8]
 8000e80:	f005 f88a 	bl	8005f98 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	68da      	ldr	r2, [r3, #12]
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e8c:	425b      	negs	r3, r3
 8000e8e:	441a      	add	r2, r3
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	68da      	ldr	r2, [r3, #12]
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	429a      	cmp	r2, r3
 8000e9e:	d207      	bcs.n	8000eb0 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	689a      	ldr	r2, [r3, #8]
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ea8:	425b      	negs	r3, r3
 8000eaa:	441a      	add	r2, r3
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	2b02      	cmp	r3, #2
 8000eb4:	d105      	bne.n	8000ec2 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8000eb6:	693b      	ldr	r3, [r7, #16]
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d002      	beq.n	8000ec2 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8000ebc:	693b      	ldr	r3, [r7, #16]
 8000ebe:	3b01      	subs	r3, #1
 8000ec0:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8000ec2:	693b      	ldr	r3, [r7, #16]
 8000ec4:	1c5a      	adds	r2, r3, #1
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 8000eca:	697b      	ldr	r3, [r7, #20]
}
 8000ecc:	4618      	mov	r0, r3
 8000ece:	3718      	adds	r7, #24
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}

08000ed4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b082      	sub	sp, #8
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
 8000edc:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d018      	beq.n	8000f18 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	68da      	ldr	r2, [r3, #12]
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eee:	441a      	add	r2, r3
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	68da      	ldr	r2, [r3, #12]
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	689b      	ldr	r3, [r3, #8]
 8000efc:	429a      	cmp	r2, r3
 8000efe:	d303      	bcc.n	8000f08 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681a      	ldr	r2, [r3, #0]
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	68d9      	ldr	r1, [r3, #12]
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f10:	461a      	mov	r2, r3
 8000f12:	6838      	ldr	r0, [r7, #0]
 8000f14:	f005 f840 	bl	8005f98 <memcpy>
    }
}
 8000f18:	bf00      	nop
 8000f1a:	3708      	adds	r7, #8
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bd80      	pop	{r7, pc}

08000f20 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b084      	sub	sp, #16
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8000f28:	f001 fd06 	bl	8002938 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000f32:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8000f34:	e011      	b.n	8000f5a <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d012      	beq.n	8000f64 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	3324      	adds	r3, #36	; 0x24
 8000f42:	4618      	mov	r0, r3
 8000f44:	f000 fcb4 	bl	80018b0 <xTaskRemoveFromEventList>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d001      	beq.n	8000f52 <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8000f4e:	f000 fd8d 	bl	8001a6c <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8000f52:	7bfb      	ldrb	r3, [r7, #15]
 8000f54:	3b01      	subs	r3, #1
 8000f56:	b2db      	uxtb	r3, r3
 8000f58:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8000f5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	dce9      	bgt.n	8000f36 <prvUnlockQueue+0x16>
 8000f62:	e000      	b.n	8000f66 <prvUnlockQueue+0x46>
                        break;
 8000f64:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	22ff      	movs	r2, #255	; 0xff
 8000f6a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8000f6e:	f001 fd13 	bl	8002998 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8000f72:	f001 fce1 	bl	8002938 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000f7c:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8000f7e:	e011      	b.n	8000fa4 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	691b      	ldr	r3, [r3, #16]
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d012      	beq.n	8000fae <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	3310      	adds	r3, #16
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f000 fc8f 	bl	80018b0 <xTaskRemoveFromEventList>
 8000f92:	4603      	mov	r3, r0
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d001      	beq.n	8000f9c <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8000f98:	f000 fd68 	bl	8001a6c <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8000f9c:	7bbb      	ldrb	r3, [r7, #14]
 8000f9e:	3b01      	subs	r3, #1
 8000fa0:	b2db      	uxtb	r3, r3
 8000fa2:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8000fa4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	dce9      	bgt.n	8000f80 <prvUnlockQueue+0x60>
 8000fac:	e000      	b.n	8000fb0 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8000fae:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	22ff      	movs	r2, #255	; 0xff
 8000fb4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8000fb8:	f001 fcee 	bl	8002998 <vPortExitCritical>
}
 8000fbc:	bf00      	nop
 8000fbe:	3710      	adds	r7, #16
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}

08000fc4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b084      	sub	sp, #16
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8000fcc:	f001 fcb4 	bl	8002938 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d102      	bne.n	8000fde <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8000fd8:	2301      	movs	r3, #1
 8000fda:	60fb      	str	r3, [r7, #12]
 8000fdc:	e001      	b.n	8000fe2 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8000fe2:	f001 fcd9 	bl	8002998 <vPortExitCritical>

    return xReturn;
 8000fe6:	68fb      	ldr	r3, [r7, #12]
}
 8000fe8:	4618      	mov	r0, r3
 8000fea:	3710      	adds	r7, #16
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}

08000ff0 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b084      	sub	sp, #16
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8000ff8:	f001 fc9e 	bl	8002938 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001004:	429a      	cmp	r2, r3
 8001006:	d102      	bne.n	800100e <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8001008:	2301      	movs	r3, #1
 800100a:	60fb      	str	r3, [r7, #12]
 800100c:	e001      	b.n	8001012 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 800100e:	2300      	movs	r3, #0
 8001010:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8001012:	f001 fcc1 	bl	8002998 <vPortExitCritical>

    return xReturn;
 8001016:	68fb      	ldr	r3, [r7, #12]
}
 8001018:	4618      	mov	r0, r3
 800101a:	3710      	adds	r7, #16
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}

08001020 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8001020:	b480      	push	{r7}
 8001022:	b085      	sub	sp, #20
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
 8001028:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800102a:	2300      	movs	r3, #0
 800102c:	60fb      	str	r3, [r7, #12]
 800102e:	e014      	b.n	800105a <vQueueAddToRegistry+0x3a>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8001030:	4a0f      	ldr	r2, [pc, #60]	; (8001070 <vQueueAddToRegistry+0x50>)
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001038:	2b00      	cmp	r3, #0
 800103a:	d10b      	bne.n	8001054 <vQueueAddToRegistry+0x34>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800103c:	490c      	ldr	r1, [pc, #48]	; (8001070 <vQueueAddToRegistry+0x50>)
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	683a      	ldr	r2, [r7, #0]
 8001042:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 8001046:	4a0a      	ldr	r2, [pc, #40]	; (8001070 <vQueueAddToRegistry+0x50>)
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	00db      	lsls	r3, r3, #3
 800104c:	4413      	add	r3, r2
 800104e:	687a      	ldr	r2, [r7, #4]
 8001050:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
                break;
 8001052:	e006      	b.n	8001062 <vQueueAddToRegistry+0x42>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	3301      	adds	r3, #1
 8001058:	60fb      	str	r3, [r7, #12]
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	2b07      	cmp	r3, #7
 800105e:	d9e7      	bls.n	8001030 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8001060:	bf00      	nop
 8001062:	bf00      	nop
 8001064:	3714      	adds	r7, #20
 8001066:	46bd      	mov	sp, r7
 8001068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106c:	4770      	bx	lr
 800106e:	bf00      	nop
 8001070:	20000094 	.word	0x20000094

08001074 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8001074:	b580      	push	{r7, lr}
 8001076:	b086      	sub	sp, #24
 8001078:	af00      	add	r7, sp, #0
 800107a:	60f8      	str	r0, [r7, #12]
 800107c:	60b9      	str	r1, [r7, #8]
 800107e:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8001084:	f001 fc58 	bl	8002938 <vPortEnterCritical>
 8001088:	697b      	ldr	r3, [r7, #20]
 800108a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800108e:	b25b      	sxtb	r3, r3
 8001090:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001094:	d103      	bne.n	800109e <vQueueWaitForMessageRestricted+0x2a>
 8001096:	697b      	ldr	r3, [r7, #20]
 8001098:	2200      	movs	r2, #0
 800109a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800109e:	697b      	ldr	r3, [r7, #20]
 80010a0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80010a4:	b25b      	sxtb	r3, r3
 80010a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010aa:	d103      	bne.n	80010b4 <vQueueWaitForMessageRestricted+0x40>
 80010ac:	697b      	ldr	r3, [r7, #20]
 80010ae:	2200      	movs	r2, #0
 80010b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80010b4:	f001 fc70 	bl	8002998 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80010b8:	697b      	ldr	r3, [r7, #20]
 80010ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d106      	bne.n	80010ce <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80010c0:	697b      	ldr	r3, [r7, #20]
 80010c2:	3324      	adds	r3, #36	; 0x24
 80010c4:	687a      	ldr	r2, [r7, #4]
 80010c6:	68b9      	ldr	r1, [r7, #8]
 80010c8:	4618      	mov	r0, r3
 80010ca:	f000 fbc5 	bl	8001858 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 80010ce:	6978      	ldr	r0, [r7, #20]
 80010d0:	f7ff ff26 	bl	8000f20 <prvUnlockQueue>
    }
 80010d4:	bf00      	nop
 80010d6:	3718      	adds	r7, #24
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}

080010dc <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80010dc:	b580      	push	{r7, lr}
 80010de:	b08c      	sub	sp, #48	; 0x30
 80010e0:	af04      	add	r7, sp, #16
 80010e2:	60f8      	str	r0, [r7, #12]
 80010e4:	60b9      	str	r1, [r7, #8]
 80010e6:	603b      	str	r3, [r7, #0]
 80010e8:	4613      	mov	r3, r2
 80010ea:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80010ec:	88fb      	ldrh	r3, [r7, #6]
 80010ee:	009b      	lsls	r3, r3, #2
 80010f0:	4618      	mov	r0, r3
 80010f2:	f001 fd43 	bl	8002b7c <pvPortMalloc>
 80010f6:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 80010f8:	697b      	ldr	r3, [r7, #20]
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d00e      	beq.n	800111c <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80010fe:	2058      	movs	r0, #88	; 0x58
 8001100:	f001 fd3c 	bl	8002b7c <pvPortMalloc>
 8001104:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8001106:	69fb      	ldr	r3, [r7, #28]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d003      	beq.n	8001114 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 800110c:	69fb      	ldr	r3, [r7, #28]
 800110e:	697a      	ldr	r2, [r7, #20]
 8001110:	631a      	str	r2, [r3, #48]	; 0x30
 8001112:	e005      	b.n	8001120 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8001114:	6978      	ldr	r0, [r7, #20]
 8001116:	f001 fe11 	bl	8002d3c <vPortFree>
 800111a:	e001      	b.n	8001120 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 800111c:	2300      	movs	r3, #0
 800111e:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8001120:	69fb      	ldr	r3, [r7, #28]
 8001122:	2b00      	cmp	r3, #0
 8001124:	d013      	beq.n	800114e <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8001126:	88fa      	ldrh	r2, [r7, #6]
 8001128:	2300      	movs	r3, #0
 800112a:	9303      	str	r3, [sp, #12]
 800112c:	69fb      	ldr	r3, [r7, #28]
 800112e:	9302      	str	r3, [sp, #8]
 8001130:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001132:	9301      	str	r3, [sp, #4]
 8001134:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001136:	9300      	str	r3, [sp, #0]
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	68b9      	ldr	r1, [r7, #8]
 800113c:	68f8      	ldr	r0, [r7, #12]
 800113e:	f000 f80e 	bl	800115e <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8001142:	69f8      	ldr	r0, [r7, #28]
 8001144:	f000 f8a2 	bl	800128c <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8001148:	2301      	movs	r3, #1
 800114a:	61bb      	str	r3, [r7, #24]
 800114c:	e002      	b.n	8001154 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800114e:	f04f 33ff 	mov.w	r3, #4294967295
 8001152:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8001154:	69bb      	ldr	r3, [r7, #24]
    }
 8001156:	4618      	mov	r0, r3
 8001158:	3720      	adds	r7, #32
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}

0800115e <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 800115e:	b580      	push	{r7, lr}
 8001160:	b088      	sub	sp, #32
 8001162:	af00      	add	r7, sp, #0
 8001164:	60f8      	str	r0, [r7, #12]
 8001166:	60b9      	str	r1, [r7, #8]
 8001168:	607a      	str	r2, [r7, #4]
 800116a:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800116c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800116e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	009b      	lsls	r3, r3, #2
 8001174:	461a      	mov	r2, r3
 8001176:	21a5      	movs	r1, #165	; 0xa5
 8001178:	f004 ff1c 	bl	8005fb4 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800117c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800117e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001186:	3b01      	subs	r3, #1
 8001188:	009b      	lsls	r3, r3, #2
 800118a:	4413      	add	r3, r2
 800118c:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800118e:	69bb      	ldr	r3, [r7, #24]
 8001190:	f023 0307 	bic.w	r3, r3, #7
 8001194:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8001196:	69bb      	ldr	r3, [r7, #24]
 8001198:	f003 0307 	and.w	r3, r3, #7
 800119c:	2b00      	cmp	r3, #0
 800119e:	d00a      	beq.n	80011b6 <prvInitialiseNewTask+0x58>
        __asm volatile
 80011a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80011a4:	f383 8811 	msr	BASEPRI, r3
 80011a8:	f3bf 8f6f 	isb	sy
 80011ac:	f3bf 8f4f 	dsb	sy
 80011b0:	617b      	str	r3, [r7, #20]
    }
 80011b2:	bf00      	nop
 80011b4:	e7fe      	b.n	80011b4 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80011b6:	68bb      	ldr	r3, [r7, #8]
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d01f      	beq.n	80011fc <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80011bc:	2300      	movs	r3, #0
 80011be:	61fb      	str	r3, [r7, #28]
 80011c0:	e012      	b.n	80011e8 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80011c2:	68ba      	ldr	r2, [r7, #8]
 80011c4:	69fb      	ldr	r3, [r7, #28]
 80011c6:	4413      	add	r3, r2
 80011c8:	7819      	ldrb	r1, [r3, #0]
 80011ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80011cc:	69fb      	ldr	r3, [r7, #28]
 80011ce:	4413      	add	r3, r2
 80011d0:	3334      	adds	r3, #52	; 0x34
 80011d2:	460a      	mov	r2, r1
 80011d4:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 80011d6:	68ba      	ldr	r2, [r7, #8]
 80011d8:	69fb      	ldr	r3, [r7, #28]
 80011da:	4413      	add	r3, r2
 80011dc:	781b      	ldrb	r3, [r3, #0]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d006      	beq.n	80011f0 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80011e2:	69fb      	ldr	r3, [r7, #28]
 80011e4:	3301      	adds	r3, #1
 80011e6:	61fb      	str	r3, [r7, #28]
 80011e8:	69fb      	ldr	r3, [r7, #28]
 80011ea:	2b09      	cmp	r3, #9
 80011ec:	d9e9      	bls.n	80011c2 <prvInitialiseNewTask+0x64>
 80011ee:	e000      	b.n	80011f2 <prvInitialiseNewTask+0x94>
            {
                break;
 80011f0:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80011f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80011f4:	2200      	movs	r2, #0
 80011f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80011fa:	e003      	b.n	8001204 <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80011fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80011fe:	2200      	movs	r2, #0
 8001200:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8001204:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001206:	2b04      	cmp	r3, #4
 8001208:	d901      	bls.n	800120e <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800120a:	2304      	movs	r3, #4
 800120c:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 800120e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001210:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001212:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8001214:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001216:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001218:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 800121a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800121c:	2200      	movs	r2, #0
 800121e:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001220:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001222:	3304      	adds	r3, #4
 8001224:	4618      	mov	r0, r3
 8001226:	f7ff f9e5 	bl	80005f4 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800122a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800122c:	3318      	adds	r3, #24
 800122e:	4618      	mov	r0, r3
 8001230:	f7ff f9e0 	bl	80005f4 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8001234:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001236:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001238:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800123a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800123c:	f1c3 0205 	rsb	r2, r3, #5
 8001240:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001242:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8001244:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001246:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001248:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 800124a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800124c:	3350      	adds	r3, #80	; 0x50
 800124e:	2204      	movs	r2, #4
 8001250:	2100      	movs	r1, #0
 8001252:	4618      	mov	r0, r3
 8001254:	f004 feae 	bl	8005fb4 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8001258:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800125a:	3354      	adds	r3, #84	; 0x54
 800125c:	2201      	movs	r2, #1
 800125e:	2100      	movs	r1, #0
 8001260:	4618      	mov	r0, r3
 8001262:	f004 fea7 	bl	8005fb4 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001266:	683a      	ldr	r2, [r7, #0]
 8001268:	68f9      	ldr	r1, [r7, #12]
 800126a:	69b8      	ldr	r0, [r7, #24]
 800126c:	f001 fa36 	bl	80026dc <pxPortInitialiseStack>
 8001270:	4602      	mov	r2, r0
 8001272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001274:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8001276:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001278:	2b00      	cmp	r3, #0
 800127a:	d002      	beq.n	8001282 <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800127c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800127e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001280:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8001282:	bf00      	nop
 8001284:	3720      	adds	r7, #32
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}
	...

0800128c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b082      	sub	sp, #8
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8001294:	f001 fb50 	bl	8002938 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8001298:	4b2c      	ldr	r3, [pc, #176]	; (800134c <prvAddNewTaskToReadyList+0xc0>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	3301      	adds	r3, #1
 800129e:	4a2b      	ldr	r2, [pc, #172]	; (800134c <prvAddNewTaskToReadyList+0xc0>)
 80012a0:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 80012a2:	4b2b      	ldr	r3, [pc, #172]	; (8001350 <prvAddNewTaskToReadyList+0xc4>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d109      	bne.n	80012be <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 80012aa:	4a29      	ldr	r2, [pc, #164]	; (8001350 <prvAddNewTaskToReadyList+0xc4>)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80012b0:	4b26      	ldr	r3, [pc, #152]	; (800134c <prvAddNewTaskToReadyList+0xc0>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	2b01      	cmp	r3, #1
 80012b6:	d110      	bne.n	80012da <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 80012b8:	f000 fbfc 	bl	8001ab4 <prvInitialiseTaskLists>
 80012bc:	e00d      	b.n	80012da <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 80012be:	4b25      	ldr	r3, [pc, #148]	; (8001354 <prvAddNewTaskToReadyList+0xc8>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d109      	bne.n	80012da <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80012c6:	4b22      	ldr	r3, [pc, #136]	; (8001350 <prvAddNewTaskToReadyList+0xc4>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012d0:	429a      	cmp	r2, r3
 80012d2:	d802      	bhi.n	80012da <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 80012d4:	4a1e      	ldr	r2, [pc, #120]	; (8001350 <prvAddNewTaskToReadyList+0xc4>)
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 80012da:	4b1f      	ldr	r3, [pc, #124]	; (8001358 <prvAddNewTaskToReadyList+0xcc>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	3301      	adds	r3, #1
 80012e0:	4a1d      	ldr	r2, [pc, #116]	; (8001358 <prvAddNewTaskToReadyList+0xcc>)
 80012e2:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 80012e4:	4b1c      	ldr	r3, [pc, #112]	; (8001358 <prvAddNewTaskToReadyList+0xcc>)
 80012e6:	681a      	ldr	r2, [r3, #0]
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012f0:	2201      	movs	r2, #1
 80012f2:	409a      	lsls	r2, r3
 80012f4:	4b19      	ldr	r3, [pc, #100]	; (800135c <prvAddNewTaskToReadyList+0xd0>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	4313      	orrs	r3, r2
 80012fa:	4a18      	ldr	r2, [pc, #96]	; (800135c <prvAddNewTaskToReadyList+0xd0>)
 80012fc:	6013      	str	r3, [r2, #0]
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001302:	4613      	mov	r3, r2
 8001304:	009b      	lsls	r3, r3, #2
 8001306:	4413      	add	r3, r2
 8001308:	009b      	lsls	r3, r3, #2
 800130a:	4a15      	ldr	r2, [pc, #84]	; (8001360 <prvAddNewTaskToReadyList+0xd4>)
 800130c:	441a      	add	r2, r3
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	3304      	adds	r3, #4
 8001312:	4619      	mov	r1, r3
 8001314:	4610      	mov	r0, r2
 8001316:	f7ff f97a 	bl	800060e <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 800131a:	f001 fb3d 	bl	8002998 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 800131e:	4b0d      	ldr	r3, [pc, #52]	; (8001354 <prvAddNewTaskToReadyList+0xc8>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	2b00      	cmp	r3, #0
 8001324:	d00e      	beq.n	8001344 <prvAddNewTaskToReadyList+0xb8>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8001326:	4b0a      	ldr	r3, [pc, #40]	; (8001350 <prvAddNewTaskToReadyList+0xc4>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001330:	429a      	cmp	r2, r3
 8001332:	d207      	bcs.n	8001344 <prvAddNewTaskToReadyList+0xb8>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8001334:	4b0b      	ldr	r3, [pc, #44]	; (8001364 <prvAddNewTaskToReadyList+0xd8>)
 8001336:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800133a:	601a      	str	r2, [r3, #0]
 800133c:	f3bf 8f4f 	dsb	sy
 8001340:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8001344:	bf00      	nop
 8001346:	3708      	adds	r7, #8
 8001348:	46bd      	mov	sp, r7
 800134a:	bd80      	pop	{r7, pc}
 800134c:	200001ac 	.word	0x200001ac
 8001350:	200000d4 	.word	0x200000d4
 8001354:	200001b8 	.word	0x200001b8
 8001358:	200001c8 	.word	0x200001c8
 800135c:	200001b4 	.word	0x200001b4
 8001360:	200000d8 	.word	0x200000d8
 8001364:	e000ed04 	.word	0xe000ed04

08001368 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8001368:	b580      	push	{r7, lr}
 800136a:	b084      	sub	sp, #16
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8001370:	2300      	movs	r3, #0
 8001372:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	2b00      	cmp	r3, #0
 8001378:	d017      	beq.n	80013aa <vTaskDelay+0x42>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 800137a:	4b13      	ldr	r3, [pc, #76]	; (80013c8 <vTaskDelay+0x60>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	2b00      	cmp	r3, #0
 8001380:	d00a      	beq.n	8001398 <vTaskDelay+0x30>
        __asm volatile
 8001382:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001386:	f383 8811 	msr	BASEPRI, r3
 800138a:	f3bf 8f6f 	isb	sy
 800138e:	f3bf 8f4f 	dsb	sy
 8001392:	60bb      	str	r3, [r7, #8]
    }
 8001394:	bf00      	nop
 8001396:	e7fe      	b.n	8001396 <vTaskDelay+0x2e>
            vTaskSuspendAll();
 8001398:	f000 f86c 	bl	8001474 <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800139c:	2100      	movs	r1, #0
 800139e:	6878      	ldr	r0, [r7, #4]
 80013a0:	f000 fe24 	bl	8001fec <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 80013a4:	f000 f874 	bl	8001490 <xTaskResumeAll>
 80013a8:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d107      	bne.n	80013c0 <vTaskDelay+0x58>
        {
            portYIELD_WITHIN_API();
 80013b0:	4b06      	ldr	r3, [pc, #24]	; (80013cc <vTaskDelay+0x64>)
 80013b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80013b6:	601a      	str	r2, [r3, #0]
 80013b8:	f3bf 8f4f 	dsb	sy
 80013bc:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 80013c0:	bf00      	nop
 80013c2:	3710      	adds	r7, #16
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}
 80013c8:	200001d4 	.word	0x200001d4
 80013cc:	e000ed04 	.word	0xe000ed04

080013d0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b086      	sub	sp, #24
 80013d4:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 80013d6:	4b20      	ldr	r3, [pc, #128]	; (8001458 <vTaskStartScheduler+0x88>)
 80013d8:	9301      	str	r3, [sp, #4]
 80013da:	2300      	movs	r3, #0
 80013dc:	9300      	str	r3, [sp, #0]
 80013de:	2300      	movs	r3, #0
 80013e0:	2282      	movs	r2, #130	; 0x82
 80013e2:	491e      	ldr	r1, [pc, #120]	; (800145c <vTaskStartScheduler+0x8c>)
 80013e4:	481e      	ldr	r0, [pc, #120]	; (8001460 <vTaskStartScheduler+0x90>)
 80013e6:	f7ff fe79 	bl	80010dc <xTaskCreate>
 80013ea:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	2b01      	cmp	r3, #1
 80013f0:	d102      	bne.n	80013f8 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 80013f2:	f000 fe61 	bl	80020b8 <xTimerCreateTimerTask>
 80013f6:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	2b01      	cmp	r3, #1
 80013fc:	d116      	bne.n	800142c <vTaskStartScheduler+0x5c>
        __asm volatile
 80013fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001402:	f383 8811 	msr	BASEPRI, r3
 8001406:	f3bf 8f6f 	isb	sy
 800140a:	f3bf 8f4f 	dsb	sy
 800140e:	60bb      	str	r3, [r7, #8]
    }
 8001410:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8001412:	4b14      	ldr	r3, [pc, #80]	; (8001464 <vTaskStartScheduler+0x94>)
 8001414:	f04f 32ff 	mov.w	r2, #4294967295
 8001418:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 800141a:	4b13      	ldr	r3, [pc, #76]	; (8001468 <vTaskStartScheduler+0x98>)
 800141c:	2201      	movs	r2, #1
 800141e:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8001420:	4b12      	ldr	r3, [pc, #72]	; (800146c <vTaskStartScheduler+0x9c>)
 8001422:	2200      	movs	r2, #0
 8001424:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8001426:	f001 f9e5 	bl	80027f4 <xPortStartScheduler>
 800142a:	e00e      	b.n	800144a <vTaskStartScheduler+0x7a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001432:	d10a      	bne.n	800144a <vTaskStartScheduler+0x7a>
        __asm volatile
 8001434:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001438:	f383 8811 	msr	BASEPRI, r3
 800143c:	f3bf 8f6f 	isb	sy
 8001440:	f3bf 8f4f 	dsb	sy
 8001444:	607b      	str	r3, [r7, #4]
    }
 8001446:	bf00      	nop
 8001448:	e7fe      	b.n	8001448 <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 800144a:	4b09      	ldr	r3, [pc, #36]	; (8001470 <vTaskStartScheduler+0xa0>)
 800144c:	681b      	ldr	r3, [r3, #0]
}
 800144e:	bf00      	nop
 8001450:	3710      	adds	r7, #16
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	200001d0 	.word	0x200001d0
 800145c:	08006fe4 	.word	0x08006fe4
 8001460:	08001a85 	.word	0x08001a85
 8001464:	200001cc 	.word	0x200001cc
 8001468:	200001b8 	.word	0x200001b8
 800146c:	200001b0 	.word	0x200001b0
 8001470:	20000000 	.word	0x20000000

08001474 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8001474:	b480      	push	{r7}
 8001476:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8001478:	4b04      	ldr	r3, [pc, #16]	; (800148c <vTaskSuspendAll+0x18>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	3301      	adds	r3, #1
 800147e:	4a03      	ldr	r2, [pc, #12]	; (800148c <vTaskSuspendAll+0x18>)
 8001480:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8001482:	bf00      	nop
 8001484:	46bd      	mov	sp, r7
 8001486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148a:	4770      	bx	lr
 800148c:	200001d4 	.word	0x200001d4

08001490 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b084      	sub	sp, #16
 8001494:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8001496:	2300      	movs	r3, #0
 8001498:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 800149a:	2300      	movs	r3, #0
 800149c:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 800149e:	4b41      	ldr	r3, [pc, #260]	; (80015a4 <xTaskResumeAll+0x114>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d10a      	bne.n	80014bc <xTaskResumeAll+0x2c>
        __asm volatile
 80014a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80014aa:	f383 8811 	msr	BASEPRI, r3
 80014ae:	f3bf 8f6f 	isb	sy
 80014b2:	f3bf 8f4f 	dsb	sy
 80014b6:	603b      	str	r3, [r7, #0]
    }
 80014b8:	bf00      	nop
 80014ba:	e7fe      	b.n	80014ba <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 80014bc:	f001 fa3c 	bl	8002938 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 80014c0:	4b38      	ldr	r3, [pc, #224]	; (80015a4 <xTaskResumeAll+0x114>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	3b01      	subs	r3, #1
 80014c6:	4a37      	ldr	r2, [pc, #220]	; (80015a4 <xTaskResumeAll+0x114>)
 80014c8:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80014ca:	4b36      	ldr	r3, [pc, #216]	; (80015a4 <xTaskResumeAll+0x114>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d161      	bne.n	8001596 <xTaskResumeAll+0x106>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80014d2:	4b35      	ldr	r3, [pc, #212]	; (80015a8 <xTaskResumeAll+0x118>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d05d      	beq.n	8001596 <xTaskResumeAll+0x106>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80014da:	e02e      	b.n	800153a <xTaskResumeAll+0xaa>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80014dc:	4b33      	ldr	r3, [pc, #204]	; (80015ac <xTaskResumeAll+0x11c>)
 80014de:	68db      	ldr	r3, [r3, #12]
 80014e0:	68db      	ldr	r3, [r3, #12]
 80014e2:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	3318      	adds	r3, #24
 80014e8:	4618      	mov	r0, r3
 80014ea:	f7ff f8ed 	bl	80006c8 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	3304      	adds	r3, #4
 80014f2:	4618      	mov	r0, r3
 80014f4:	f7ff f8e8 	bl	80006c8 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014fc:	2201      	movs	r2, #1
 80014fe:	409a      	lsls	r2, r3
 8001500:	4b2b      	ldr	r3, [pc, #172]	; (80015b0 <xTaskResumeAll+0x120>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	4313      	orrs	r3, r2
 8001506:	4a2a      	ldr	r2, [pc, #168]	; (80015b0 <xTaskResumeAll+0x120>)
 8001508:	6013      	str	r3, [r2, #0]
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800150e:	4613      	mov	r3, r2
 8001510:	009b      	lsls	r3, r3, #2
 8001512:	4413      	add	r3, r2
 8001514:	009b      	lsls	r3, r3, #2
 8001516:	4a27      	ldr	r2, [pc, #156]	; (80015b4 <xTaskResumeAll+0x124>)
 8001518:	441a      	add	r2, r3
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	3304      	adds	r3, #4
 800151e:	4619      	mov	r1, r3
 8001520:	4610      	mov	r0, r2
 8001522:	f7ff f874 	bl	800060e <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800152a:	4b23      	ldr	r3, [pc, #140]	; (80015b8 <xTaskResumeAll+0x128>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001530:	429a      	cmp	r2, r3
 8001532:	d302      	bcc.n	800153a <xTaskResumeAll+0xaa>
                    {
                        xYieldPending = pdTRUE;
 8001534:	4b21      	ldr	r3, [pc, #132]	; (80015bc <xTaskResumeAll+0x12c>)
 8001536:	2201      	movs	r2, #1
 8001538:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800153a:	4b1c      	ldr	r3, [pc, #112]	; (80015ac <xTaskResumeAll+0x11c>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	2b00      	cmp	r3, #0
 8001540:	d1cc      	bne.n	80014dc <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	2b00      	cmp	r3, #0
 8001546:	d001      	beq.n	800154c <xTaskResumeAll+0xbc>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8001548:	f000 fb32 	bl	8001bb0 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800154c:	4b1c      	ldr	r3, [pc, #112]	; (80015c0 <xTaskResumeAll+0x130>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	2b00      	cmp	r3, #0
 8001556:	d010      	beq.n	800157a <xTaskResumeAll+0xea>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8001558:	f000 f846 	bl	80015e8 <xTaskIncrementTick>
 800155c:	4603      	mov	r3, r0
 800155e:	2b00      	cmp	r3, #0
 8001560:	d002      	beq.n	8001568 <xTaskResumeAll+0xd8>
                            {
                                xYieldPending = pdTRUE;
 8001562:	4b16      	ldr	r3, [pc, #88]	; (80015bc <xTaskResumeAll+0x12c>)
 8001564:	2201      	movs	r2, #1
 8001566:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	3b01      	subs	r3, #1
 800156c:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	2b00      	cmp	r3, #0
 8001572:	d1f1      	bne.n	8001558 <xTaskResumeAll+0xc8>

                        xPendedTicks = 0;
 8001574:	4b12      	ldr	r3, [pc, #72]	; (80015c0 <xTaskResumeAll+0x130>)
 8001576:	2200      	movs	r2, #0
 8001578:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 800157a:	4b10      	ldr	r3, [pc, #64]	; (80015bc <xTaskResumeAll+0x12c>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	2b00      	cmp	r3, #0
 8001580:	d009      	beq.n	8001596 <xTaskResumeAll+0x106>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8001582:	2301      	movs	r3, #1
 8001584:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8001586:	4b0f      	ldr	r3, [pc, #60]	; (80015c4 <xTaskResumeAll+0x134>)
 8001588:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800158c:	601a      	str	r2, [r3, #0]
 800158e:	f3bf 8f4f 	dsb	sy
 8001592:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8001596:	f001 f9ff 	bl	8002998 <vPortExitCritical>

    return xAlreadyYielded;
 800159a:	68bb      	ldr	r3, [r7, #8]
}
 800159c:	4618      	mov	r0, r3
 800159e:	3710      	adds	r7, #16
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}
 80015a4:	200001d4 	.word	0x200001d4
 80015a8:	200001ac 	.word	0x200001ac
 80015ac:	2000016c 	.word	0x2000016c
 80015b0:	200001b4 	.word	0x200001b4
 80015b4:	200000d8 	.word	0x200000d8
 80015b8:	200000d4 	.word	0x200000d4
 80015bc:	200001c0 	.word	0x200001c0
 80015c0:	200001bc 	.word	0x200001bc
 80015c4:	e000ed04 	.word	0xe000ed04

080015c8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80015c8:	b480      	push	{r7}
 80015ca:	b083      	sub	sp, #12
 80015cc:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 80015ce:	4b05      	ldr	r3, [pc, #20]	; (80015e4 <xTaskGetTickCount+0x1c>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 80015d4:	687b      	ldr	r3, [r7, #4]
}
 80015d6:	4618      	mov	r0, r3
 80015d8:	370c      	adds	r7, #12
 80015da:	46bd      	mov	sp, r7
 80015dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e0:	4770      	bx	lr
 80015e2:	bf00      	nop
 80015e4:	200001b0 	.word	0x200001b0

080015e8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b086      	sub	sp, #24
 80015ec:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80015ee:	2300      	movs	r3, #0
 80015f0:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80015f2:	4b4e      	ldr	r3, [pc, #312]	; (800172c <xTaskIncrementTick+0x144>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	f040 808e 	bne.w	8001718 <xTaskIncrementTick+0x130>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80015fc:	4b4c      	ldr	r3, [pc, #304]	; (8001730 <xTaskIncrementTick+0x148>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	3301      	adds	r3, #1
 8001602:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8001604:	4a4a      	ldr	r2, [pc, #296]	; (8001730 <xTaskIncrementTick+0x148>)
 8001606:	693b      	ldr	r3, [r7, #16]
 8001608:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800160a:	693b      	ldr	r3, [r7, #16]
 800160c:	2b00      	cmp	r3, #0
 800160e:	d120      	bne.n	8001652 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8001610:	4b48      	ldr	r3, [pc, #288]	; (8001734 <xTaskIncrementTick+0x14c>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	2b00      	cmp	r3, #0
 8001618:	d00a      	beq.n	8001630 <xTaskIncrementTick+0x48>
        __asm volatile
 800161a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800161e:	f383 8811 	msr	BASEPRI, r3
 8001622:	f3bf 8f6f 	isb	sy
 8001626:	f3bf 8f4f 	dsb	sy
 800162a:	603b      	str	r3, [r7, #0]
    }
 800162c:	bf00      	nop
 800162e:	e7fe      	b.n	800162e <xTaskIncrementTick+0x46>
 8001630:	4b40      	ldr	r3, [pc, #256]	; (8001734 <xTaskIncrementTick+0x14c>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	60fb      	str	r3, [r7, #12]
 8001636:	4b40      	ldr	r3, [pc, #256]	; (8001738 <xTaskIncrementTick+0x150>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	4a3e      	ldr	r2, [pc, #248]	; (8001734 <xTaskIncrementTick+0x14c>)
 800163c:	6013      	str	r3, [r2, #0]
 800163e:	4a3e      	ldr	r2, [pc, #248]	; (8001738 <xTaskIncrementTick+0x150>)
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	6013      	str	r3, [r2, #0]
 8001644:	4b3d      	ldr	r3, [pc, #244]	; (800173c <xTaskIncrementTick+0x154>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	3301      	adds	r3, #1
 800164a:	4a3c      	ldr	r2, [pc, #240]	; (800173c <xTaskIncrementTick+0x154>)
 800164c:	6013      	str	r3, [r2, #0]
 800164e:	f000 faaf 	bl	8001bb0 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8001652:	4b3b      	ldr	r3, [pc, #236]	; (8001740 <xTaskIncrementTick+0x158>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	693a      	ldr	r2, [r7, #16]
 8001658:	429a      	cmp	r2, r3
 800165a:	d348      	bcc.n	80016ee <xTaskIncrementTick+0x106>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800165c:	4b35      	ldr	r3, [pc, #212]	; (8001734 <xTaskIncrementTick+0x14c>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	2b00      	cmp	r3, #0
 8001664:	d104      	bne.n	8001670 <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001666:	4b36      	ldr	r3, [pc, #216]	; (8001740 <xTaskIncrementTick+0x158>)
 8001668:	f04f 32ff 	mov.w	r2, #4294967295
 800166c:	601a      	str	r2, [r3, #0]
                    break;
 800166e:	e03e      	b.n	80016ee <xTaskIncrementTick+0x106>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001670:	4b30      	ldr	r3, [pc, #192]	; (8001734 <xTaskIncrementTick+0x14c>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	68db      	ldr	r3, [r3, #12]
 8001676:	68db      	ldr	r3, [r3, #12]
 8001678:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800167a:	68bb      	ldr	r3, [r7, #8]
 800167c:	685b      	ldr	r3, [r3, #4]
 800167e:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8001680:	693a      	ldr	r2, [r7, #16]
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	429a      	cmp	r2, r3
 8001686:	d203      	bcs.n	8001690 <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8001688:	4a2d      	ldr	r2, [pc, #180]	; (8001740 <xTaskIncrementTick+0x158>)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800168e:	e02e      	b.n	80016ee <xTaskIncrementTick+0x106>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001690:	68bb      	ldr	r3, [r7, #8]
 8001692:	3304      	adds	r3, #4
 8001694:	4618      	mov	r0, r3
 8001696:	f7ff f817 	bl	80006c8 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800169a:	68bb      	ldr	r3, [r7, #8]
 800169c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d004      	beq.n	80016ac <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80016a2:	68bb      	ldr	r3, [r7, #8]
 80016a4:	3318      	adds	r3, #24
 80016a6:	4618      	mov	r0, r3
 80016a8:	f7ff f80e 	bl	80006c8 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80016ac:	68bb      	ldr	r3, [r7, #8]
 80016ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016b0:	2201      	movs	r2, #1
 80016b2:	409a      	lsls	r2, r3
 80016b4:	4b23      	ldr	r3, [pc, #140]	; (8001744 <xTaskIncrementTick+0x15c>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4313      	orrs	r3, r2
 80016ba:	4a22      	ldr	r2, [pc, #136]	; (8001744 <xTaskIncrementTick+0x15c>)
 80016bc:	6013      	str	r3, [r2, #0]
 80016be:	68bb      	ldr	r3, [r7, #8]
 80016c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016c2:	4613      	mov	r3, r2
 80016c4:	009b      	lsls	r3, r3, #2
 80016c6:	4413      	add	r3, r2
 80016c8:	009b      	lsls	r3, r3, #2
 80016ca:	4a1f      	ldr	r2, [pc, #124]	; (8001748 <xTaskIncrementTick+0x160>)
 80016cc:	441a      	add	r2, r3
 80016ce:	68bb      	ldr	r3, [r7, #8]
 80016d0:	3304      	adds	r3, #4
 80016d2:	4619      	mov	r1, r3
 80016d4:	4610      	mov	r0, r2
 80016d6:	f7fe ff9a 	bl	800060e <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80016da:	68bb      	ldr	r3, [r7, #8]
 80016dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016de:	4b1b      	ldr	r3, [pc, #108]	; (800174c <xTaskIncrementTick+0x164>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016e4:	429a      	cmp	r2, r3
 80016e6:	d3b9      	bcc.n	800165c <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 80016e8:	2301      	movs	r3, #1
 80016ea:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80016ec:	e7b6      	b.n	800165c <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80016ee:	4b17      	ldr	r3, [pc, #92]	; (800174c <xTaskIncrementTick+0x164>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016f4:	4914      	ldr	r1, [pc, #80]	; (8001748 <xTaskIncrementTick+0x160>)
 80016f6:	4613      	mov	r3, r2
 80016f8:	009b      	lsls	r3, r3, #2
 80016fa:	4413      	add	r3, r2
 80016fc:	009b      	lsls	r3, r3, #2
 80016fe:	440b      	add	r3, r1
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	2b01      	cmp	r3, #1
 8001704:	d901      	bls.n	800170a <xTaskIncrementTick+0x122>
                {
                    xSwitchRequired = pdTRUE;
 8001706:	2301      	movs	r3, #1
 8001708:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 800170a:	4b11      	ldr	r3, [pc, #68]	; (8001750 <xTaskIncrementTick+0x168>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	2b00      	cmp	r3, #0
 8001710:	d007      	beq.n	8001722 <xTaskIncrementTick+0x13a>
                {
                    xSwitchRequired = pdTRUE;
 8001712:	2301      	movs	r3, #1
 8001714:	617b      	str	r3, [r7, #20]
 8001716:	e004      	b.n	8001722 <xTaskIncrementTick+0x13a>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8001718:	4b0e      	ldr	r3, [pc, #56]	; (8001754 <xTaskIncrementTick+0x16c>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	3301      	adds	r3, #1
 800171e:	4a0d      	ldr	r2, [pc, #52]	; (8001754 <xTaskIncrementTick+0x16c>)
 8001720:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8001722:	697b      	ldr	r3, [r7, #20]
}
 8001724:	4618      	mov	r0, r3
 8001726:	3718      	adds	r7, #24
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}
 800172c:	200001d4 	.word	0x200001d4
 8001730:	200001b0 	.word	0x200001b0
 8001734:	20000164 	.word	0x20000164
 8001738:	20000168 	.word	0x20000168
 800173c:	200001c4 	.word	0x200001c4
 8001740:	200001cc 	.word	0x200001cc
 8001744:	200001b4 	.word	0x200001b4
 8001748:	200000d8 	.word	0x200000d8
 800174c:	200000d4 	.word	0x200000d4
 8001750:	200001c0 	.word	0x200001c0
 8001754:	200001bc 	.word	0x200001bc

08001758 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8001758:	b480      	push	{r7}
 800175a:	b087      	sub	sp, #28
 800175c:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800175e:	4b27      	ldr	r3, [pc, #156]	; (80017fc <vTaskSwitchContext+0xa4>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	2b00      	cmp	r3, #0
 8001764:	d003      	beq.n	800176e <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8001766:	4b26      	ldr	r3, [pc, #152]	; (8001800 <vTaskSwitchContext+0xa8>)
 8001768:	2201      	movs	r2, #1
 800176a:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 800176c:	e03f      	b.n	80017ee <vTaskSwitchContext+0x96>
        xYieldPending = pdFALSE;
 800176e:	4b24      	ldr	r3, [pc, #144]	; (8001800 <vTaskSwitchContext+0xa8>)
 8001770:	2200      	movs	r2, #0
 8001772:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001774:	4b23      	ldr	r3, [pc, #140]	; (8001804 <vTaskSwitchContext+0xac>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	fab3 f383 	clz	r3, r3
 8001780:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8001782:	7afb      	ldrb	r3, [r7, #11]
 8001784:	f1c3 031f 	rsb	r3, r3, #31
 8001788:	617b      	str	r3, [r7, #20]
 800178a:	491f      	ldr	r1, [pc, #124]	; (8001808 <vTaskSwitchContext+0xb0>)
 800178c:	697a      	ldr	r2, [r7, #20]
 800178e:	4613      	mov	r3, r2
 8001790:	009b      	lsls	r3, r3, #2
 8001792:	4413      	add	r3, r2
 8001794:	009b      	lsls	r3, r3, #2
 8001796:	440b      	add	r3, r1
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	2b00      	cmp	r3, #0
 800179c:	d10a      	bne.n	80017b4 <vTaskSwitchContext+0x5c>
        __asm volatile
 800179e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80017a2:	f383 8811 	msr	BASEPRI, r3
 80017a6:	f3bf 8f6f 	isb	sy
 80017aa:	f3bf 8f4f 	dsb	sy
 80017ae:	607b      	str	r3, [r7, #4]
    }
 80017b0:	bf00      	nop
 80017b2:	e7fe      	b.n	80017b2 <vTaskSwitchContext+0x5a>
 80017b4:	697a      	ldr	r2, [r7, #20]
 80017b6:	4613      	mov	r3, r2
 80017b8:	009b      	lsls	r3, r3, #2
 80017ba:	4413      	add	r3, r2
 80017bc:	009b      	lsls	r3, r3, #2
 80017be:	4a12      	ldr	r2, [pc, #72]	; (8001808 <vTaskSwitchContext+0xb0>)
 80017c0:	4413      	add	r3, r2
 80017c2:	613b      	str	r3, [r7, #16]
 80017c4:	693b      	ldr	r3, [r7, #16]
 80017c6:	685b      	ldr	r3, [r3, #4]
 80017c8:	685a      	ldr	r2, [r3, #4]
 80017ca:	693b      	ldr	r3, [r7, #16]
 80017cc:	605a      	str	r2, [r3, #4]
 80017ce:	693b      	ldr	r3, [r7, #16]
 80017d0:	685a      	ldr	r2, [r3, #4]
 80017d2:	693b      	ldr	r3, [r7, #16]
 80017d4:	3308      	adds	r3, #8
 80017d6:	429a      	cmp	r2, r3
 80017d8:	d104      	bne.n	80017e4 <vTaskSwitchContext+0x8c>
 80017da:	693b      	ldr	r3, [r7, #16]
 80017dc:	685b      	ldr	r3, [r3, #4]
 80017de:	685a      	ldr	r2, [r3, #4]
 80017e0:	693b      	ldr	r3, [r7, #16]
 80017e2:	605a      	str	r2, [r3, #4]
 80017e4:	693b      	ldr	r3, [r7, #16]
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	68db      	ldr	r3, [r3, #12]
 80017ea:	4a08      	ldr	r2, [pc, #32]	; (800180c <vTaskSwitchContext+0xb4>)
 80017ec:	6013      	str	r3, [r2, #0]
}
 80017ee:	bf00      	nop
 80017f0:	371c      	adds	r7, #28
 80017f2:	46bd      	mov	sp, r7
 80017f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f8:	4770      	bx	lr
 80017fa:	bf00      	nop
 80017fc:	200001d4 	.word	0x200001d4
 8001800:	200001c0 	.word	0x200001c0
 8001804:	200001b4 	.word	0x200001b4
 8001808:	200000d8 	.word	0x200000d8
 800180c:	200000d4 	.word	0x200000d4

08001810 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b084      	sub	sp, #16
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
 8001818:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	2b00      	cmp	r3, #0
 800181e:	d10a      	bne.n	8001836 <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8001820:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001824:	f383 8811 	msr	BASEPRI, r3
 8001828:	f3bf 8f6f 	isb	sy
 800182c:	f3bf 8f4f 	dsb	sy
 8001830:	60fb      	str	r3, [r7, #12]
    }
 8001832:	bf00      	nop
 8001834:	e7fe      	b.n	8001834 <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8001836:	4b07      	ldr	r3, [pc, #28]	; (8001854 <vTaskPlaceOnEventList+0x44>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	3318      	adds	r3, #24
 800183c:	4619      	mov	r1, r3
 800183e:	6878      	ldr	r0, [r7, #4]
 8001840:	f7fe ff09 	bl	8000656 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8001844:	2101      	movs	r1, #1
 8001846:	6838      	ldr	r0, [r7, #0]
 8001848:	f000 fbd0 	bl	8001fec <prvAddCurrentTaskToDelayedList>
}
 800184c:	bf00      	nop
 800184e:	3710      	adds	r7, #16
 8001850:	46bd      	mov	sp, r7
 8001852:	bd80      	pop	{r7, pc}
 8001854:	200000d4 	.word	0x200000d4

08001858 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8001858:	b580      	push	{r7, lr}
 800185a:	b086      	sub	sp, #24
 800185c:	af00      	add	r7, sp, #0
 800185e:	60f8      	str	r0, [r7, #12]
 8001860:	60b9      	str	r1, [r7, #8]
 8001862:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	2b00      	cmp	r3, #0
 8001868:	d10a      	bne.n	8001880 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 800186a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800186e:	f383 8811 	msr	BASEPRI, r3
 8001872:	f3bf 8f6f 	isb	sy
 8001876:	f3bf 8f4f 	dsb	sy
 800187a:	617b      	str	r3, [r7, #20]
    }
 800187c:	bf00      	nop
 800187e:	e7fe      	b.n	800187e <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8001880:	4b0a      	ldr	r3, [pc, #40]	; (80018ac <vTaskPlaceOnEventListRestricted+0x54>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	3318      	adds	r3, #24
 8001886:	4619      	mov	r1, r3
 8001888:	68f8      	ldr	r0, [r7, #12]
 800188a:	f7fe fec0 	bl	800060e <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	2b00      	cmp	r3, #0
 8001892:	d002      	beq.n	800189a <vTaskPlaceOnEventListRestricted+0x42>
        {
            xTicksToWait = portMAX_DELAY;
 8001894:	f04f 33ff 	mov.w	r3, #4294967295
 8001898:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800189a:	6879      	ldr	r1, [r7, #4]
 800189c:	68b8      	ldr	r0, [r7, #8]
 800189e:	f000 fba5 	bl	8001fec <prvAddCurrentTaskToDelayedList>
    }
 80018a2:	bf00      	nop
 80018a4:	3718      	adds	r7, #24
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	bf00      	nop
 80018ac:	200000d4 	.word	0x200000d4

080018b0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b086      	sub	sp, #24
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	68db      	ldr	r3, [r3, #12]
 80018bc:	68db      	ldr	r3, [r3, #12]
 80018be:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 80018c0:	693b      	ldr	r3, [r7, #16]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d10a      	bne.n	80018dc <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 80018c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80018ca:	f383 8811 	msr	BASEPRI, r3
 80018ce:	f3bf 8f6f 	isb	sy
 80018d2:	f3bf 8f4f 	dsb	sy
 80018d6:	60fb      	str	r3, [r7, #12]
    }
 80018d8:	bf00      	nop
 80018da:	e7fe      	b.n	80018da <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80018dc:	693b      	ldr	r3, [r7, #16]
 80018de:	3318      	adds	r3, #24
 80018e0:	4618      	mov	r0, r3
 80018e2:	f7fe fef1 	bl	80006c8 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80018e6:	4b1d      	ldr	r3, [pc, #116]	; (800195c <xTaskRemoveFromEventList+0xac>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d11c      	bne.n	8001928 <xTaskRemoveFromEventList+0x78>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80018ee:	693b      	ldr	r3, [r7, #16]
 80018f0:	3304      	adds	r3, #4
 80018f2:	4618      	mov	r0, r3
 80018f4:	f7fe fee8 	bl	80006c8 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 80018f8:	693b      	ldr	r3, [r7, #16]
 80018fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018fc:	2201      	movs	r2, #1
 80018fe:	409a      	lsls	r2, r3
 8001900:	4b17      	ldr	r3, [pc, #92]	; (8001960 <xTaskRemoveFromEventList+0xb0>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4313      	orrs	r3, r2
 8001906:	4a16      	ldr	r2, [pc, #88]	; (8001960 <xTaskRemoveFromEventList+0xb0>)
 8001908:	6013      	str	r3, [r2, #0]
 800190a:	693b      	ldr	r3, [r7, #16]
 800190c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800190e:	4613      	mov	r3, r2
 8001910:	009b      	lsls	r3, r3, #2
 8001912:	4413      	add	r3, r2
 8001914:	009b      	lsls	r3, r3, #2
 8001916:	4a13      	ldr	r2, [pc, #76]	; (8001964 <xTaskRemoveFromEventList+0xb4>)
 8001918:	441a      	add	r2, r3
 800191a:	693b      	ldr	r3, [r7, #16]
 800191c:	3304      	adds	r3, #4
 800191e:	4619      	mov	r1, r3
 8001920:	4610      	mov	r0, r2
 8001922:	f7fe fe74 	bl	800060e <vListInsertEnd>
 8001926:	e005      	b.n	8001934 <xTaskRemoveFromEventList+0x84>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8001928:	693b      	ldr	r3, [r7, #16]
 800192a:	3318      	adds	r3, #24
 800192c:	4619      	mov	r1, r3
 800192e:	480e      	ldr	r0, [pc, #56]	; (8001968 <xTaskRemoveFromEventList+0xb8>)
 8001930:	f7fe fe6d 	bl	800060e <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8001934:	693b      	ldr	r3, [r7, #16]
 8001936:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001938:	4b0c      	ldr	r3, [pc, #48]	; (800196c <xTaskRemoveFromEventList+0xbc>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800193e:	429a      	cmp	r2, r3
 8001940:	d905      	bls.n	800194e <xTaskRemoveFromEventList+0x9e>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8001942:	2301      	movs	r3, #1
 8001944:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8001946:	4b0a      	ldr	r3, [pc, #40]	; (8001970 <xTaskRemoveFromEventList+0xc0>)
 8001948:	2201      	movs	r2, #1
 800194a:	601a      	str	r2, [r3, #0]
 800194c:	e001      	b.n	8001952 <xTaskRemoveFromEventList+0xa2>
    }
    else
    {
        xReturn = pdFALSE;
 800194e:	2300      	movs	r3, #0
 8001950:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8001952:	697b      	ldr	r3, [r7, #20]
}
 8001954:	4618      	mov	r0, r3
 8001956:	3718      	adds	r7, #24
 8001958:	46bd      	mov	sp, r7
 800195a:	bd80      	pop	{r7, pc}
 800195c:	200001d4 	.word	0x200001d4
 8001960:	200001b4 	.word	0x200001b4
 8001964:	200000d8 	.word	0x200000d8
 8001968:	2000016c 	.word	0x2000016c
 800196c:	200000d4 	.word	0x200000d4
 8001970:	200001c0 	.word	0x200001c0

08001974 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8001974:	b480      	push	{r7}
 8001976:	b083      	sub	sp, #12
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 800197c:	4b06      	ldr	r3, [pc, #24]	; (8001998 <vTaskInternalSetTimeOutState+0x24>)
 800197e:	681a      	ldr	r2, [r3, #0]
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8001984:	4b05      	ldr	r3, [pc, #20]	; (800199c <vTaskInternalSetTimeOutState+0x28>)
 8001986:	681a      	ldr	r2, [r3, #0]
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	605a      	str	r2, [r3, #4]
}
 800198c:	bf00      	nop
 800198e:	370c      	adds	r7, #12
 8001990:	46bd      	mov	sp, r7
 8001992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001996:	4770      	bx	lr
 8001998:	200001c4 	.word	0x200001c4
 800199c:	200001b0 	.word	0x200001b0

080019a0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b088      	sub	sp, #32
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
 80019a8:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d10a      	bne.n	80019c6 <xTaskCheckForTimeOut+0x26>
        __asm volatile
 80019b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80019b4:	f383 8811 	msr	BASEPRI, r3
 80019b8:	f3bf 8f6f 	isb	sy
 80019bc:	f3bf 8f4f 	dsb	sy
 80019c0:	613b      	str	r3, [r7, #16]
    }
 80019c2:	bf00      	nop
 80019c4:	e7fe      	b.n	80019c4 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d10a      	bne.n	80019e2 <xTaskCheckForTimeOut+0x42>
        __asm volatile
 80019cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80019d0:	f383 8811 	msr	BASEPRI, r3
 80019d4:	f3bf 8f6f 	isb	sy
 80019d8:	f3bf 8f4f 	dsb	sy
 80019dc:	60fb      	str	r3, [r7, #12]
    }
 80019de:	bf00      	nop
 80019e0:	e7fe      	b.n	80019e0 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 80019e2:	f000 ffa9 	bl	8002938 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 80019e6:	4b1f      	ldr	r3, [pc, #124]	; (8001a64 <xTaskCheckForTimeOut+0xc4>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	69ba      	ldr	r2, [r7, #24]
 80019f2:	1ad3      	subs	r3, r2, r3
 80019f4:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019fe:	d102      	bne.n	8001a06 <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8001a00:	2300      	movs	r3, #0
 8001a02:	61fb      	str	r3, [r7, #28]
 8001a04:	e026      	b.n	8001a54 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681a      	ldr	r2, [r3, #0]
 8001a0a:	4b17      	ldr	r3, [pc, #92]	; (8001a68 <xTaskCheckForTimeOut+0xc8>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	429a      	cmp	r2, r3
 8001a10:	d00a      	beq.n	8001a28 <xTaskCheckForTimeOut+0x88>
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	69ba      	ldr	r2, [r7, #24]
 8001a18:	429a      	cmp	r2, r3
 8001a1a:	d305      	bcc.n	8001a28 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	2200      	movs	r2, #0
 8001a24:	601a      	str	r2, [r3, #0]
 8001a26:	e015      	b.n	8001a54 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	697a      	ldr	r2, [r7, #20]
 8001a2e:	429a      	cmp	r2, r3
 8001a30:	d20b      	bcs.n	8001a4a <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	681a      	ldr	r2, [r3, #0]
 8001a36:	697b      	ldr	r3, [r7, #20]
 8001a38:	1ad2      	subs	r2, r2, r3
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8001a3e:	6878      	ldr	r0, [r7, #4]
 8001a40:	f7ff ff98 	bl	8001974 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8001a44:	2300      	movs	r3, #0
 8001a46:	61fb      	str	r3, [r7, #28]
 8001a48:	e004      	b.n	8001a54 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8001a50:	2301      	movs	r3, #1
 8001a52:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8001a54:	f000 ffa0 	bl	8002998 <vPortExitCritical>

    return xReturn;
 8001a58:	69fb      	ldr	r3, [r7, #28]
}
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	3720      	adds	r7, #32
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	bf00      	nop
 8001a64:	200001b0 	.word	0x200001b0
 8001a68:	200001c4 	.word	0x200001c4

08001a6c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8001a70:	4b03      	ldr	r3, [pc, #12]	; (8001a80 <vTaskMissedYield+0x14>)
 8001a72:	2201      	movs	r2, #1
 8001a74:	601a      	str	r2, [r3, #0]
}
 8001a76:	bf00      	nop
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7e:	4770      	bx	lr
 8001a80:	200001c0 	.word	0x200001c0

08001a84 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b082      	sub	sp, #8
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8001a8c:	f000 f852 	bl	8001b34 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8001a90:	4b06      	ldr	r3, [pc, #24]	; (8001aac <prvIdleTask+0x28>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	2b01      	cmp	r3, #1
 8001a96:	d9f9      	bls.n	8001a8c <prvIdleTask+0x8>
                {
                    taskYIELD();
 8001a98:	4b05      	ldr	r3, [pc, #20]	; (8001ab0 <prvIdleTask+0x2c>)
 8001a9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001a9e:	601a      	str	r2, [r3, #0]
 8001aa0:	f3bf 8f4f 	dsb	sy
 8001aa4:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8001aa8:	e7f0      	b.n	8001a8c <prvIdleTask+0x8>
 8001aaa:	bf00      	nop
 8001aac:	200000d8 	.word	0x200000d8
 8001ab0:	e000ed04 	.word	0xe000ed04

08001ab4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b082      	sub	sp, #8
 8001ab8:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001aba:	2300      	movs	r3, #0
 8001abc:	607b      	str	r3, [r7, #4]
 8001abe:	e00c      	b.n	8001ada <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8001ac0:	687a      	ldr	r2, [r7, #4]
 8001ac2:	4613      	mov	r3, r2
 8001ac4:	009b      	lsls	r3, r3, #2
 8001ac6:	4413      	add	r3, r2
 8001ac8:	009b      	lsls	r3, r3, #2
 8001aca:	4a12      	ldr	r2, [pc, #72]	; (8001b14 <prvInitialiseTaskLists+0x60>)
 8001acc:	4413      	add	r3, r2
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f7fe fd70 	bl	80005b4 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	3301      	adds	r3, #1
 8001ad8:	607b      	str	r3, [r7, #4]
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	2b04      	cmp	r3, #4
 8001ade:	d9ef      	bls.n	8001ac0 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8001ae0:	480d      	ldr	r0, [pc, #52]	; (8001b18 <prvInitialiseTaskLists+0x64>)
 8001ae2:	f7fe fd67 	bl	80005b4 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8001ae6:	480d      	ldr	r0, [pc, #52]	; (8001b1c <prvInitialiseTaskLists+0x68>)
 8001ae8:	f7fe fd64 	bl	80005b4 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8001aec:	480c      	ldr	r0, [pc, #48]	; (8001b20 <prvInitialiseTaskLists+0x6c>)
 8001aee:	f7fe fd61 	bl	80005b4 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8001af2:	480c      	ldr	r0, [pc, #48]	; (8001b24 <prvInitialiseTaskLists+0x70>)
 8001af4:	f7fe fd5e 	bl	80005b4 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8001af8:	480b      	ldr	r0, [pc, #44]	; (8001b28 <prvInitialiseTaskLists+0x74>)
 8001afa:	f7fe fd5b 	bl	80005b4 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8001afe:	4b0b      	ldr	r3, [pc, #44]	; (8001b2c <prvInitialiseTaskLists+0x78>)
 8001b00:	4a05      	ldr	r2, [pc, #20]	; (8001b18 <prvInitialiseTaskLists+0x64>)
 8001b02:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8001b04:	4b0a      	ldr	r3, [pc, #40]	; (8001b30 <prvInitialiseTaskLists+0x7c>)
 8001b06:	4a05      	ldr	r2, [pc, #20]	; (8001b1c <prvInitialiseTaskLists+0x68>)
 8001b08:	601a      	str	r2, [r3, #0]
}
 8001b0a:	bf00      	nop
 8001b0c:	3708      	adds	r7, #8
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}
 8001b12:	bf00      	nop
 8001b14:	200000d8 	.word	0x200000d8
 8001b18:	2000013c 	.word	0x2000013c
 8001b1c:	20000150 	.word	0x20000150
 8001b20:	2000016c 	.word	0x2000016c
 8001b24:	20000180 	.word	0x20000180
 8001b28:	20000198 	.word	0x20000198
 8001b2c:	20000164 	.word	0x20000164
 8001b30:	20000168 	.word	0x20000168

08001b34 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b082      	sub	sp, #8
 8001b38:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001b3a:	e019      	b.n	8001b70 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8001b3c:	f000 fefc 	bl	8002938 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001b40:	4b10      	ldr	r3, [pc, #64]	; (8001b84 <prvCheckTasksWaitingTermination+0x50>)
 8001b42:	68db      	ldr	r3, [r3, #12]
 8001b44:	68db      	ldr	r3, [r3, #12]
 8001b46:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	3304      	adds	r3, #4
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	f7fe fdbb 	bl	80006c8 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8001b52:	4b0d      	ldr	r3, [pc, #52]	; (8001b88 <prvCheckTasksWaitingTermination+0x54>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	3b01      	subs	r3, #1
 8001b58:	4a0b      	ldr	r2, [pc, #44]	; (8001b88 <prvCheckTasksWaitingTermination+0x54>)
 8001b5a:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8001b5c:	4b0b      	ldr	r3, [pc, #44]	; (8001b8c <prvCheckTasksWaitingTermination+0x58>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	3b01      	subs	r3, #1
 8001b62:	4a0a      	ldr	r2, [pc, #40]	; (8001b8c <prvCheckTasksWaitingTermination+0x58>)
 8001b64:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8001b66:	f000 ff17 	bl	8002998 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8001b6a:	6878      	ldr	r0, [r7, #4]
 8001b6c:	f000 f810 	bl	8001b90 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001b70:	4b06      	ldr	r3, [pc, #24]	; (8001b8c <prvCheckTasksWaitingTermination+0x58>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d1e1      	bne.n	8001b3c <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8001b78:	bf00      	nop
 8001b7a:	bf00      	nop
 8001b7c:	3708      	adds	r7, #8
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}
 8001b82:	bf00      	nop
 8001b84:	20000180 	.word	0x20000180
 8001b88:	200001ac 	.word	0x200001ac
 8001b8c:	20000194 	.word	0x20000194

08001b90 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b082      	sub	sp, #8
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	f001 f8cd 	bl	8002d3c <vPortFree>
                vPortFree( pxTCB );
 8001ba2:	6878      	ldr	r0, [r7, #4]
 8001ba4:	f001 f8ca 	bl	8002d3c <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8001ba8:	bf00      	nop
 8001baa:	3708      	adds	r7, #8
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd80      	pop	{r7, pc}

08001bb0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001bb4:	4b0a      	ldr	r3, [pc, #40]	; (8001be0 <prvResetNextTaskUnblockTime+0x30>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d104      	bne.n	8001bc8 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8001bbe:	4b09      	ldr	r3, [pc, #36]	; (8001be4 <prvResetNextTaskUnblockTime+0x34>)
 8001bc0:	f04f 32ff 	mov.w	r2, #4294967295
 8001bc4:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8001bc6:	e005      	b.n	8001bd4 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8001bc8:	4b05      	ldr	r3, [pc, #20]	; (8001be0 <prvResetNextTaskUnblockTime+0x30>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	68db      	ldr	r3, [r3, #12]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4a04      	ldr	r2, [pc, #16]	; (8001be4 <prvResetNextTaskUnblockTime+0x34>)
 8001bd2:	6013      	str	r3, [r2, #0]
}
 8001bd4:	bf00      	nop
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bdc:	4770      	bx	lr
 8001bde:	bf00      	nop
 8001be0:	20000164 	.word	0x20000164
 8001be4:	200001cc 	.word	0x200001cc

08001be8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8001be8:	b480      	push	{r7}
 8001bea:	b083      	sub	sp, #12
 8001bec:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8001bee:	4b0b      	ldr	r3, [pc, #44]	; (8001c1c <xTaskGetSchedulerState+0x34>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d102      	bne.n	8001bfc <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	607b      	str	r3, [r7, #4]
 8001bfa:	e008      	b.n	8001c0e <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001bfc:	4b08      	ldr	r3, [pc, #32]	; (8001c20 <xTaskGetSchedulerState+0x38>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d102      	bne.n	8001c0a <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8001c04:	2302      	movs	r3, #2
 8001c06:	607b      	str	r3, [r7, #4]
 8001c08:	e001      	b.n	8001c0e <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8001c0e:	687b      	ldr	r3, [r7, #4]
    }
 8001c10:	4618      	mov	r0, r3
 8001c12:	370c      	adds	r7, #12
 8001c14:	46bd      	mov	sp, r7
 8001c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1a:	4770      	bx	lr
 8001c1c:	200001b8 	.word	0x200001b8
 8001c20:	200001d4 	.word	0x200001d4

08001c24 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b086      	sub	sp, #24
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8001c30:	2300      	movs	r3, #0
 8001c32:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d063      	beq.n	8001d02 <xTaskPriorityDisinherit+0xde>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8001c3a:	4b34      	ldr	r3, [pc, #208]	; (8001d0c <xTaskPriorityDisinherit+0xe8>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	693a      	ldr	r2, [r7, #16]
 8001c40:	429a      	cmp	r2, r3
 8001c42:	d00a      	beq.n	8001c5a <xTaskPriorityDisinherit+0x36>
        __asm volatile
 8001c44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c48:	f383 8811 	msr	BASEPRI, r3
 8001c4c:	f3bf 8f6f 	isb	sy
 8001c50:	f3bf 8f4f 	dsb	sy
 8001c54:	60fb      	str	r3, [r7, #12]
    }
 8001c56:	bf00      	nop
 8001c58:	e7fe      	b.n	8001c58 <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 8001c5a:	693b      	ldr	r3, [r7, #16]
 8001c5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d10a      	bne.n	8001c78 <xTaskPriorityDisinherit+0x54>
        __asm volatile
 8001c62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c66:	f383 8811 	msr	BASEPRI, r3
 8001c6a:	f3bf 8f6f 	isb	sy
 8001c6e:	f3bf 8f4f 	dsb	sy
 8001c72:	60bb      	str	r3, [r7, #8]
    }
 8001c74:	bf00      	nop
 8001c76:	e7fe      	b.n	8001c76 <xTaskPriorityDisinherit+0x52>
            ( pxTCB->uxMutexesHeld )--;
 8001c78:	693b      	ldr	r3, [r7, #16]
 8001c7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c7c:	1e5a      	subs	r2, r3, #1
 8001c7e:	693b      	ldr	r3, [r7, #16]
 8001c80:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8001c82:	693b      	ldr	r3, [r7, #16]
 8001c84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c86:	693b      	ldr	r3, [r7, #16]
 8001c88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c8a:	429a      	cmp	r2, r3
 8001c8c:	d039      	beq.n	8001d02 <xTaskPriorityDisinherit+0xde>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8001c8e:	693b      	ldr	r3, [r7, #16]
 8001c90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d135      	bne.n	8001d02 <xTaskPriorityDisinherit+0xde>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001c96:	693b      	ldr	r3, [r7, #16]
 8001c98:	3304      	adds	r3, #4
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f7fe fd14 	bl	80006c8 <uxListRemove>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d10a      	bne.n	8001cbc <xTaskPriorityDisinherit+0x98>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8001ca6:	693b      	ldr	r3, [r7, #16]
 8001ca8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001caa:	2201      	movs	r2, #1
 8001cac:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb0:	43da      	mvns	r2, r3
 8001cb2:	4b17      	ldr	r3, [pc, #92]	; (8001d10 <xTaskPriorityDisinherit+0xec>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4013      	ands	r3, r2
 8001cb8:	4a15      	ldr	r2, [pc, #84]	; (8001d10 <xTaskPriorityDisinherit+0xec>)
 8001cba:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8001cbc:	693b      	ldr	r3, [r7, #16]
 8001cbe:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001cc0:	693b      	ldr	r3, [r7, #16]
 8001cc2:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001cc4:	693b      	ldr	r3, [r7, #16]
 8001cc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cc8:	f1c3 0205 	rsb	r2, r3, #5
 8001ccc:	693b      	ldr	r3, [r7, #16]
 8001cce:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 8001cd0:	693b      	ldr	r3, [r7, #16]
 8001cd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cd4:	2201      	movs	r2, #1
 8001cd6:	409a      	lsls	r2, r3
 8001cd8:	4b0d      	ldr	r3, [pc, #52]	; (8001d10 <xTaskPriorityDisinherit+0xec>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4313      	orrs	r3, r2
 8001cde:	4a0c      	ldr	r2, [pc, #48]	; (8001d10 <xTaskPriorityDisinherit+0xec>)
 8001ce0:	6013      	str	r3, [r2, #0]
 8001ce2:	693b      	ldr	r3, [r7, #16]
 8001ce4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ce6:	4613      	mov	r3, r2
 8001ce8:	009b      	lsls	r3, r3, #2
 8001cea:	4413      	add	r3, r2
 8001cec:	009b      	lsls	r3, r3, #2
 8001cee:	4a09      	ldr	r2, [pc, #36]	; (8001d14 <xTaskPriorityDisinherit+0xf0>)
 8001cf0:	441a      	add	r2, r3
 8001cf2:	693b      	ldr	r3, [r7, #16]
 8001cf4:	3304      	adds	r3, #4
 8001cf6:	4619      	mov	r1, r3
 8001cf8:	4610      	mov	r0, r2
 8001cfa:	f7fe fc88 	bl	800060e <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8001cfe:	2301      	movs	r3, #1
 8001d00:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8001d02:	697b      	ldr	r3, [r7, #20]
    }
 8001d04:	4618      	mov	r0, r3
 8001d06:	3718      	adds	r7, #24
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bd80      	pop	{r7, pc}
 8001d0c:	200000d4 	.word	0x200000d4
 8001d10:	200001b4 	.word	0x200001b4
 8001d14:	200000d8 	.word	0x200000d8

08001d18 <ulTaskGenericNotifyTake>:
#if ( configUSE_TASK_NOTIFICATIONS == 1 )

    uint32_t ulTaskGenericNotifyTake( UBaseType_t uxIndexToWait,
                                      BaseType_t xClearCountOnExit,
                                      TickType_t xTicksToWait )
    {
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b086      	sub	sp, #24
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	60f8      	str	r0, [r7, #12]
 8001d20:	60b9      	str	r1, [r7, #8]
 8001d22:	607a      	str	r2, [r7, #4]
        uint32_t ulReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d00a      	beq.n	8001d40 <ulTaskGenericNotifyTake+0x28>
        __asm volatile
 8001d2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d2e:	f383 8811 	msr	BASEPRI, r3
 8001d32:	f3bf 8f6f 	isb	sy
 8001d36:	f3bf 8f4f 	dsb	sy
 8001d3a:	613b      	str	r3, [r7, #16]
    }
 8001d3c:	bf00      	nop
 8001d3e:	e7fe      	b.n	8001d3e <ulTaskGenericNotifyTake+0x26>

        taskENTER_CRITICAL();
 8001d40:	f000 fdfa 	bl	8002938 <vPortEnterCritical>
        {
            /* Only block if the notification count is not already non-zero. */
            if( pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] == 0UL )
 8001d44:	4b26      	ldr	r3, [pc, #152]	; (8001de0 <ulTaskGenericNotifyTake+0xc8>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	68fa      	ldr	r2, [r7, #12]
 8001d4a:	3214      	adds	r2, #20
 8001d4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d115      	bne.n	8001d80 <ulTaskGenericNotifyTake+0x68>
            {
                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 8001d54:	4b22      	ldr	r3, [pc, #136]	; (8001de0 <ulTaskGenericNotifyTake+0xc8>)
 8001d56:	681a      	ldr	r2, [r3, #0]
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	4413      	add	r3, r2
 8001d5c:	3354      	adds	r3, #84	; 0x54
 8001d5e:	2201      	movs	r2, #1
 8001d60:	701a      	strb	r2, [r3, #0]

                if( xTicksToWait > ( TickType_t ) 0 )
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d00b      	beq.n	8001d80 <ulTaskGenericNotifyTake+0x68>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8001d68:	2101      	movs	r1, #1
 8001d6a:	6878      	ldr	r0, [r7, #4]
 8001d6c:	f000 f93e 	bl	8001fec <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
 8001d70:	4b1c      	ldr	r3, [pc, #112]	; (8001de4 <ulTaskGenericNotifyTake+0xcc>)
 8001d72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001d76:	601a      	str	r2, [r3, #0]
 8001d78:	f3bf 8f4f 	dsb	sy
 8001d7c:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8001d80:	f000 fe0a 	bl	8002998 <vPortExitCritical>

        taskENTER_CRITICAL();
 8001d84:	f000 fdd8 	bl	8002938 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_TAKE( uxIndexToWait );
            ulReturn = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 8001d88:	4b15      	ldr	r3, [pc, #84]	; (8001de0 <ulTaskGenericNotifyTake+0xc8>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	68fa      	ldr	r2, [r7, #12]
 8001d8e:	3214      	adds	r2, #20
 8001d90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d94:	617b      	str	r3, [r7, #20]

            if( ulReturn != 0UL )
 8001d96:	697b      	ldr	r3, [r7, #20]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d012      	beq.n	8001dc2 <ulTaskGenericNotifyTake+0xaa>
            {
                if( xClearCountOnExit != pdFALSE )
 8001d9c:	68bb      	ldr	r3, [r7, #8]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d007      	beq.n	8001db2 <ulTaskGenericNotifyTake+0x9a>
                {
                    pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] = 0UL;
 8001da2:	4b0f      	ldr	r3, [pc, #60]	; (8001de0 <ulTaskGenericNotifyTake+0xc8>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	68fa      	ldr	r2, [r7, #12]
 8001da8:	3214      	adds	r2, #20
 8001daa:	2100      	movs	r1, #0
 8001dac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8001db0:	e007      	b.n	8001dc2 <ulTaskGenericNotifyTake+0xaa>
                }
                else
                {
                    pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] = ulReturn - ( uint32_t ) 1;
 8001db2:	4b0b      	ldr	r3, [pc, #44]	; (8001de0 <ulTaskGenericNotifyTake+0xc8>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	697a      	ldr	r2, [r7, #20]
 8001db8:	1e51      	subs	r1, r2, #1
 8001dba:	68fa      	ldr	r2, [r7, #12]
 8001dbc:	3214      	adds	r2, #20
 8001dbe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 8001dc2:	4b07      	ldr	r3, [pc, #28]	; (8001de0 <ulTaskGenericNotifyTake+0xc8>)
 8001dc4:	681a      	ldr	r2, [r3, #0]
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	4413      	add	r3, r2
 8001dca:	3354      	adds	r3, #84	; 0x54
 8001dcc:	2200      	movs	r2, #0
 8001dce:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 8001dd0:	f000 fde2 	bl	8002998 <vPortExitCritical>

        return ulReturn;
 8001dd4:	697b      	ldr	r3, [r7, #20]
    }
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	3718      	adds	r7, #24
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}
 8001dde:	bf00      	nop
 8001de0:	200000d4 	.word	0x200000d4
 8001de4:	e000ed04 	.word	0xe000ed04

08001de8 <xTaskGenericNotifyFromISR>:
                                          UBaseType_t uxIndexToNotify,
                                          uint32_t ulValue,
                                          eNotifyAction eAction,
                                          uint32_t * pulPreviousNotificationValue,
                                          BaseType_t * pxHigherPriorityTaskWoken )
    {
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b090      	sub	sp, #64	; 0x40
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	60f8      	str	r0, [r7, #12]
 8001df0:	60b9      	str	r1, [r7, #8]
 8001df2:	607a      	str	r2, [r7, #4]
 8001df4:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        uint8_t ucOriginalNotifyState;
        BaseType_t xReturn = pdPASS;
 8001df6:	2301      	movs	r3, #1
 8001df8:	63fb      	str	r3, [r7, #60]	; 0x3c
        UBaseType_t uxSavedInterruptStatus;

        configASSERT( xTaskToNotify );
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d10a      	bne.n	8001e16 <xTaskGenericNotifyFromISR+0x2e>
        __asm volatile
 8001e00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e04:	f383 8811 	msr	BASEPRI, r3
 8001e08:	f3bf 8f6f 	isb	sy
 8001e0c:	f3bf 8f4f 	dsb	sy
 8001e10:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
 8001e12:	bf00      	nop
 8001e14:	e7fe      	b.n	8001e14 <xTaskGenericNotifyFromISR+0x2c>
        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8001e16:	68bb      	ldr	r3, [r7, #8]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d00a      	beq.n	8001e32 <xTaskGenericNotifyFromISR+0x4a>
        __asm volatile
 8001e1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e20:	f383 8811 	msr	BASEPRI, r3
 8001e24:	f3bf 8f6f 	isb	sy
 8001e28:	f3bf 8f4f 	dsb	sy
 8001e2c:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8001e2e:	bf00      	nop
 8001e30:	e7fe      	b.n	8001e30 <xTaskGenericNotifyFromISR+0x48>
         * below the maximum system call interrupt priority.  FreeRTOS maintains a
         * separate interrupt safe API to ensure interrupt entry is as fast and as
         * simple as possible.  More information (albeit Cortex-M specific) is
         * provided on the following link:
         * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8001e32:	f000 fe63 	bl	8002afc <vPortValidateInterruptPriority>

        pxTCB = xTaskToNotify;
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	63bb      	str	r3, [r7, #56]	; 0x38
        __asm volatile
 8001e3a:	f3ef 8211 	mrs	r2, BASEPRI
 8001e3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e42:	f383 8811 	msr	BASEPRI, r3
 8001e46:	f3bf 8f6f 	isb	sy
 8001e4a:	f3bf 8f4f 	dsb	sy
 8001e4e:	627a      	str	r2, [r7, #36]	; 0x24
 8001e50:	623b      	str	r3, [r7, #32]
        return ulOriginalBASEPRI;
 8001e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8001e54:	637b      	str	r3, [r7, #52]	; 0x34
        {
            if( pulPreviousNotificationValue != NULL )
 8001e56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d006      	beq.n	8001e6a <xTaskGenericNotifyFromISR+0x82>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8001e5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e5e:	68ba      	ldr	r2, [r7, #8]
 8001e60:	3214      	adds	r2, #20
 8001e62:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001e66:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001e68:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8001e6a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001e6c:	68bb      	ldr	r3, [r7, #8]
 8001e6e:	4413      	add	r3, r2
 8001e70:	3354      	adds	r3, #84	; 0x54
 8001e72:	781b      	ldrb	r3, [r3, #0]
 8001e74:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8001e78:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001e7a:	68bb      	ldr	r3, [r7, #8]
 8001e7c:	4413      	add	r3, r2
 8001e7e:	3354      	adds	r3, #84	; 0x54
 8001e80:	2202      	movs	r2, #2
 8001e82:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 8001e84:	78fb      	ldrb	r3, [r7, #3]
 8001e86:	2b04      	cmp	r3, #4
 8001e88:	d83b      	bhi.n	8001f02 <xTaskGenericNotifyFromISR+0x11a>
 8001e8a:	a201      	add	r2, pc, #4	; (adr r2, 8001e90 <xTaskGenericNotifyFromISR+0xa8>)
 8001e8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e90:	08001f21 	.word	0x08001f21
 8001e94:	08001ea5 	.word	0x08001ea5
 8001e98:	08001ec1 	.word	0x08001ec1
 8001e9c:	08001ed9 	.word	0x08001ed9
 8001ea0:	08001ee7 	.word	0x08001ee7
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8001ea4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ea6:	68ba      	ldr	r2, [r7, #8]
 8001ea8:	3214      	adds	r2, #20
 8001eaa:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	ea42 0103 	orr.w	r1, r2, r3
 8001eb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001eb6:	68ba      	ldr	r2, [r7, #8]
 8001eb8:	3214      	adds	r2, #20
 8001eba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8001ebe:	e032      	b.n	8001f26 <xTaskGenericNotifyFromISR+0x13e>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8001ec0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ec2:	68ba      	ldr	r2, [r7, #8]
 8001ec4:	3214      	adds	r2, #20
 8001ec6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001eca:	1c59      	adds	r1, r3, #1
 8001ecc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ece:	68ba      	ldr	r2, [r7, #8]
 8001ed0:	3214      	adds	r2, #20
 8001ed2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8001ed6:	e026      	b.n	8001f26 <xTaskGenericNotifyFromISR+0x13e>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8001ed8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001eda:	68ba      	ldr	r2, [r7, #8]
 8001edc:	3214      	adds	r2, #20
 8001ede:	6879      	ldr	r1, [r7, #4]
 8001ee0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8001ee4:	e01f      	b.n	8001f26 <xTaskGenericNotifyFromISR+0x13e>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8001ee6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001eea:	2b02      	cmp	r3, #2
 8001eec:	d006      	beq.n	8001efc <xTaskGenericNotifyFromISR+0x114>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8001eee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ef0:	68ba      	ldr	r2, [r7, #8]
 8001ef2:	3214      	adds	r2, #20
 8001ef4:	6879      	ldr	r1, [r7, #4]
 8001ef6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 8001efa:	e014      	b.n	8001f26 <xTaskGenericNotifyFromISR+0x13e>
                        xReturn = pdFAIL;
 8001efc:	2300      	movs	r3, #0
 8001efe:	63fb      	str	r3, [r7, #60]	; 0x3c
                    break;
 8001f00:	e011      	b.n	8001f26 <xTaskGenericNotifyFromISR+0x13e>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 8001f02:	4b33      	ldr	r3, [pc, #204]	; (8001fd0 <xTaskGenericNotifyFromISR+0x1e8>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d00c      	beq.n	8001f24 <xTaskGenericNotifyFromISR+0x13c>
        __asm volatile
 8001f0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f0e:	f383 8811 	msr	BASEPRI, r3
 8001f12:	f3bf 8f6f 	isb	sy
 8001f16:	f3bf 8f4f 	dsb	sy
 8001f1a:	61fb      	str	r3, [r7, #28]
    }
 8001f1c:	bf00      	nop
 8001f1e:	e7fe      	b.n	8001f1e <xTaskGenericNotifyFromISR+0x136>
                    break;
 8001f20:	bf00      	nop
 8001f22:	e000      	b.n	8001f26 <xTaskGenericNotifyFromISR+0x13e>
                    break;
 8001f24:	bf00      	nop

            traceTASK_NOTIFY_FROM_ISR( uxIndexToNotify );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8001f26:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001f2a:	2b01      	cmp	r3, #1
 8001f2c:	d145      	bne.n	8001fba <xTaskGenericNotifyFromISR+0x1d2>
            {
                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8001f2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d00a      	beq.n	8001f4c <xTaskGenericNotifyFromISR+0x164>
        __asm volatile
 8001f36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f3a:	f383 8811 	msr	BASEPRI, r3
 8001f3e:	f3bf 8f6f 	isb	sy
 8001f42:	f3bf 8f4f 	dsb	sy
 8001f46:	61bb      	str	r3, [r7, #24]
    }
 8001f48:	bf00      	nop
 8001f4a:	e7fe      	b.n	8001f4a <xTaskGenericNotifyFromISR+0x162>

                if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001f4c:	4b21      	ldr	r3, [pc, #132]	; (8001fd4 <xTaskGenericNotifyFromISR+0x1ec>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d11c      	bne.n	8001f8e <xTaskGenericNotifyFromISR+0x1a6>
                {
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001f54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f56:	3304      	adds	r3, #4
 8001f58:	4618      	mov	r0, r3
 8001f5a:	f7fe fbb5 	bl	80006c8 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8001f5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f62:	2201      	movs	r2, #1
 8001f64:	409a      	lsls	r2, r3
 8001f66:	4b1c      	ldr	r3, [pc, #112]	; (8001fd8 <xTaskGenericNotifyFromISR+0x1f0>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4313      	orrs	r3, r2
 8001f6c:	4a1a      	ldr	r2, [pc, #104]	; (8001fd8 <xTaskGenericNotifyFromISR+0x1f0>)
 8001f6e:	6013      	str	r3, [r2, #0]
 8001f70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f74:	4613      	mov	r3, r2
 8001f76:	009b      	lsls	r3, r3, #2
 8001f78:	4413      	add	r3, r2
 8001f7a:	009b      	lsls	r3, r3, #2
 8001f7c:	4a17      	ldr	r2, [pc, #92]	; (8001fdc <xTaskGenericNotifyFromISR+0x1f4>)
 8001f7e:	441a      	add	r2, r3
 8001f80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f82:	3304      	adds	r3, #4
 8001f84:	4619      	mov	r1, r3
 8001f86:	4610      	mov	r0, r2
 8001f88:	f7fe fb41 	bl	800060e <vListInsertEnd>
 8001f8c:	e005      	b.n	8001f9a <xTaskGenericNotifyFromISR+0x1b2>
                }
                else
                {
                    /* The delayed and ready lists cannot be accessed, so hold
                     * this task pending until the scheduler is resumed. */
                    vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8001f8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f90:	3318      	adds	r3, #24
 8001f92:	4619      	mov	r1, r3
 8001f94:	4812      	ldr	r0, [pc, #72]	; (8001fe0 <xTaskGenericNotifyFromISR+0x1f8>)
 8001f96:	f7fe fb3a 	bl	800060e <vListInsertEnd>
                }

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8001f9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f9e:	4b11      	ldr	r3, [pc, #68]	; (8001fe4 <xTaskGenericNotifyFromISR+0x1fc>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fa4:	429a      	cmp	r2, r3
 8001fa6:	d908      	bls.n	8001fba <xTaskGenericNotifyFromISR+0x1d2>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    if( pxHigherPriorityTaskWoken != NULL )
 8001fa8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d002      	beq.n	8001fb4 <xTaskGenericNotifyFromISR+0x1cc>
                    {
                        *pxHigherPriorityTaskWoken = pdTRUE;
 8001fae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001fb0:	2201      	movs	r2, #1
 8001fb2:	601a      	str	r2, [r3, #0]
                    }

                    /* Mark that a yield is pending in case the user is not
                     * using the "xHigherPriorityTaskWoken" parameter to an ISR
                     * safe FreeRTOS function. */
                    xYieldPending = pdTRUE;
 8001fb4:	4b0c      	ldr	r3, [pc, #48]	; (8001fe8 <xTaskGenericNotifyFromISR+0x200>)
 8001fb6:	2201      	movs	r2, #1
 8001fb8:	601a      	str	r2, [r3, #0]
 8001fba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fbc:	617b      	str	r3, [r7, #20]
        __asm volatile
 8001fbe:	697b      	ldr	r3, [r7, #20]
 8001fc0:	f383 8811 	msr	BASEPRI, r3
    }
 8001fc4:	bf00      	nop
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

        return xReturn;
 8001fc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    }
 8001fc8:	4618      	mov	r0, r3
 8001fca:	3740      	adds	r7, #64	; 0x40
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bd80      	pop	{r7, pc}
 8001fd0:	200001b0 	.word	0x200001b0
 8001fd4:	200001d4 	.word	0x200001d4
 8001fd8:	200001b4 	.word	0x200001b4
 8001fdc:	200000d8 	.word	0x200000d8
 8001fe0:	2000016c 	.word	0x2000016c
 8001fe4:	200000d4 	.word	0x200000d4
 8001fe8:	200001c0 	.word	0x200001c0

08001fec <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b084      	sub	sp, #16
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
 8001ff4:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8001ff6:	4b29      	ldr	r3, [pc, #164]	; (800209c <prvAddCurrentTaskToDelayedList+0xb0>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001ffc:	4b28      	ldr	r3, [pc, #160]	; (80020a0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	3304      	adds	r3, #4
 8002002:	4618      	mov	r0, r3
 8002004:	f7fe fb60 	bl	80006c8 <uxListRemove>
 8002008:	4603      	mov	r3, r0
 800200a:	2b00      	cmp	r3, #0
 800200c:	d10b      	bne.n	8002026 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800200e:	4b24      	ldr	r3, [pc, #144]	; (80020a0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002014:	2201      	movs	r2, #1
 8002016:	fa02 f303 	lsl.w	r3, r2, r3
 800201a:	43da      	mvns	r2, r3
 800201c:	4b21      	ldr	r3, [pc, #132]	; (80020a4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4013      	ands	r3, r2
 8002022:	4a20      	ldr	r2, [pc, #128]	; (80020a4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8002024:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	f1b3 3fff 	cmp.w	r3, #4294967295
 800202c:	d10a      	bne.n	8002044 <prvAddCurrentTaskToDelayedList+0x58>
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	2b00      	cmp	r3, #0
 8002032:	d007      	beq.n	8002044 <prvAddCurrentTaskToDelayedList+0x58>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002034:	4b1a      	ldr	r3, [pc, #104]	; (80020a0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	3304      	adds	r3, #4
 800203a:	4619      	mov	r1, r3
 800203c:	481a      	ldr	r0, [pc, #104]	; (80020a8 <prvAddCurrentTaskToDelayedList+0xbc>)
 800203e:	f7fe fae6 	bl	800060e <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8002042:	e026      	b.n	8002092 <prvAddCurrentTaskToDelayedList+0xa6>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8002044:	68fa      	ldr	r2, [r7, #12]
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	4413      	add	r3, r2
 800204a:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800204c:	4b14      	ldr	r3, [pc, #80]	; (80020a0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	68ba      	ldr	r2, [r7, #8]
 8002052:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8002054:	68ba      	ldr	r2, [r7, #8]
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	429a      	cmp	r2, r3
 800205a:	d209      	bcs.n	8002070 <prvAddCurrentTaskToDelayedList+0x84>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800205c:	4b13      	ldr	r3, [pc, #76]	; (80020ac <prvAddCurrentTaskToDelayedList+0xc0>)
 800205e:	681a      	ldr	r2, [r3, #0]
 8002060:	4b0f      	ldr	r3, [pc, #60]	; (80020a0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	3304      	adds	r3, #4
 8002066:	4619      	mov	r1, r3
 8002068:	4610      	mov	r0, r2
 800206a:	f7fe faf4 	bl	8000656 <vListInsert>
}
 800206e:	e010      	b.n	8002092 <prvAddCurrentTaskToDelayedList+0xa6>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002070:	4b0f      	ldr	r3, [pc, #60]	; (80020b0 <prvAddCurrentTaskToDelayedList+0xc4>)
 8002072:	681a      	ldr	r2, [r3, #0]
 8002074:	4b0a      	ldr	r3, [pc, #40]	; (80020a0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	3304      	adds	r3, #4
 800207a:	4619      	mov	r1, r3
 800207c:	4610      	mov	r0, r2
 800207e:	f7fe faea 	bl	8000656 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8002082:	4b0c      	ldr	r3, [pc, #48]	; (80020b4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	68ba      	ldr	r2, [r7, #8]
 8002088:	429a      	cmp	r2, r3
 800208a:	d202      	bcs.n	8002092 <prvAddCurrentTaskToDelayedList+0xa6>
                        xNextTaskUnblockTime = xTimeToWake;
 800208c:	4a09      	ldr	r2, [pc, #36]	; (80020b4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800208e:	68bb      	ldr	r3, [r7, #8]
 8002090:	6013      	str	r3, [r2, #0]
}
 8002092:	bf00      	nop
 8002094:	3710      	adds	r7, #16
 8002096:	46bd      	mov	sp, r7
 8002098:	bd80      	pop	{r7, pc}
 800209a:	bf00      	nop
 800209c:	200001b0 	.word	0x200001b0
 80020a0:	200000d4 	.word	0x200000d4
 80020a4:	200001b4 	.word	0x200001b4
 80020a8:	20000198 	.word	0x20000198
 80020ac:	20000168 	.word	0x20000168
 80020b0:	20000164 	.word	0x20000164
 80020b4:	200001cc 	.word	0x200001cc

080020b8 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b084      	sub	sp, #16
 80020bc:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 80020be:	2300      	movs	r3, #0
 80020c0:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 80020c2:	f000 fad5 	bl	8002670 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 80020c6:	4b11      	ldr	r3, [pc, #68]	; (800210c <xTimerCreateTimerTask+0x54>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d00b      	beq.n	80020e6 <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 80020ce:	4b10      	ldr	r3, [pc, #64]	; (8002110 <xTimerCreateTimerTask+0x58>)
 80020d0:	9301      	str	r3, [sp, #4]
 80020d2:	2302      	movs	r3, #2
 80020d4:	9300      	str	r3, [sp, #0]
 80020d6:	2300      	movs	r3, #0
 80020d8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80020dc:	490d      	ldr	r1, [pc, #52]	; (8002114 <xTimerCreateTimerTask+0x5c>)
 80020de:	480e      	ldr	r0, [pc, #56]	; (8002118 <xTimerCreateTimerTask+0x60>)
 80020e0:	f7fe fffc 	bl	80010dc <xTaskCreate>
 80020e4:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d10a      	bne.n	8002102 <xTimerCreateTimerTask+0x4a>
        __asm volatile
 80020ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020f0:	f383 8811 	msr	BASEPRI, r3
 80020f4:	f3bf 8f6f 	isb	sy
 80020f8:	f3bf 8f4f 	dsb	sy
 80020fc:	603b      	str	r3, [r7, #0]
    }
 80020fe:	bf00      	nop
 8002100:	e7fe      	b.n	8002100 <xTimerCreateTimerTask+0x48>
        return xReturn;
 8002102:	687b      	ldr	r3, [r7, #4]
    }
 8002104:	4618      	mov	r0, r3
 8002106:	3708      	adds	r7, #8
 8002108:	46bd      	mov	sp, r7
 800210a:	bd80      	pop	{r7, pc}
 800210c:	20000208 	.word	0x20000208
 8002110:	2000020c 	.word	0x2000020c
 8002114:	08006fec 	.word	0x08006fec
 8002118:	08002251 	.word	0x08002251

0800211c <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 800211c:	b580      	push	{r7, lr}
 800211e:	b08a      	sub	sp, #40	; 0x28
 8002120:	af00      	add	r7, sp, #0
 8002122:	60f8      	str	r0, [r7, #12]
 8002124:	60b9      	str	r1, [r7, #8]
 8002126:	607a      	str	r2, [r7, #4]
 8002128:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 800212a:	2300      	movs	r3, #0
 800212c:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d10a      	bne.n	800214a <xTimerGenericCommand+0x2e>
        __asm volatile
 8002134:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002138:	f383 8811 	msr	BASEPRI, r3
 800213c:	f3bf 8f6f 	isb	sy
 8002140:	f3bf 8f4f 	dsb	sy
 8002144:	623b      	str	r3, [r7, #32]
    }
 8002146:	bf00      	nop
 8002148:	e7fe      	b.n	8002148 <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 800214a:	4b1a      	ldr	r3, [pc, #104]	; (80021b4 <xTimerGenericCommand+0x98>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d02a      	beq.n	80021a8 <xTimerGenericCommand+0x8c>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 8002152:	68bb      	ldr	r3, [r7, #8]
 8002154:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800215e:	68bb      	ldr	r3, [r7, #8]
 8002160:	2b05      	cmp	r3, #5
 8002162:	dc18      	bgt.n	8002196 <xTimerGenericCommand+0x7a>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8002164:	f7ff fd40 	bl	8001be8 <xTaskGetSchedulerState>
 8002168:	4603      	mov	r3, r0
 800216a:	2b02      	cmp	r3, #2
 800216c:	d109      	bne.n	8002182 <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800216e:	4b11      	ldr	r3, [pc, #68]	; (80021b4 <xTimerGenericCommand+0x98>)
 8002170:	6818      	ldr	r0, [r3, #0]
 8002172:	f107 0114 	add.w	r1, r7, #20
 8002176:	2300      	movs	r3, #0
 8002178:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800217a:	f7fe fbb9 	bl	80008f0 <xQueueGenericSend>
 800217e:	6278      	str	r0, [r7, #36]	; 0x24
 8002180:	e012      	b.n	80021a8 <xTimerGenericCommand+0x8c>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8002182:	4b0c      	ldr	r3, [pc, #48]	; (80021b4 <xTimerGenericCommand+0x98>)
 8002184:	6818      	ldr	r0, [r3, #0]
 8002186:	f107 0114 	add.w	r1, r7, #20
 800218a:	2300      	movs	r3, #0
 800218c:	2200      	movs	r2, #0
 800218e:	f7fe fbaf 	bl	80008f0 <xQueueGenericSend>
 8002192:	6278      	str	r0, [r7, #36]	; 0x24
 8002194:	e008      	b.n	80021a8 <xTimerGenericCommand+0x8c>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8002196:	4b07      	ldr	r3, [pc, #28]	; (80021b4 <xTimerGenericCommand+0x98>)
 8002198:	6818      	ldr	r0, [r3, #0]
 800219a:	f107 0114 	add.w	r1, r7, #20
 800219e:	2300      	movs	r3, #0
 80021a0:	683a      	ldr	r2, [r7, #0]
 80021a2:	f7fe fca3 	bl	8000aec <xQueueGenericSendFromISR>
 80021a6:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 80021a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 80021aa:	4618      	mov	r0, r3
 80021ac:	3728      	adds	r7, #40	; 0x28
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}
 80021b2:	bf00      	nop
 80021b4:	20000208 	.word	0x20000208

080021b8 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b088      	sub	sp, #32
 80021bc:	af02      	add	r7, sp, #8
 80021be:	6078      	str	r0, [r7, #4]
 80021c0:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80021c2:	4b22      	ldr	r3, [pc, #136]	; (800224c <prvProcessExpiredTimer+0x94>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	68db      	ldr	r3, [r3, #12]
 80021c8:	68db      	ldr	r3, [r3, #12]
 80021ca:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80021cc:	697b      	ldr	r3, [r7, #20]
 80021ce:	3304      	adds	r3, #4
 80021d0:	4618      	mov	r0, r3
 80021d2:	f7fe fa79 	bl	80006c8 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80021d6:	697b      	ldr	r3, [r7, #20]
 80021d8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80021dc:	f003 0304 	and.w	r3, r3, #4
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d022      	beq.n	800222a <prvProcessExpiredTimer+0x72>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80021e4:	697b      	ldr	r3, [r7, #20]
 80021e6:	699a      	ldr	r2, [r3, #24]
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	18d1      	adds	r1, r2, r3
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	683a      	ldr	r2, [r7, #0]
 80021f0:	6978      	ldr	r0, [r7, #20]
 80021f2:	f000 f8d1 	bl	8002398 <prvInsertTimerInActiveList>
 80021f6:	4603      	mov	r3, r0
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d01f      	beq.n	800223c <prvProcessExpiredTimer+0x84>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80021fc:	2300      	movs	r3, #0
 80021fe:	9300      	str	r3, [sp, #0]
 8002200:	2300      	movs	r3, #0
 8002202:	687a      	ldr	r2, [r7, #4]
 8002204:	2100      	movs	r1, #0
 8002206:	6978      	ldr	r0, [r7, #20]
 8002208:	f7ff ff88 	bl	800211c <xTimerGenericCommand>
 800220c:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 800220e:	693b      	ldr	r3, [r7, #16]
 8002210:	2b00      	cmp	r3, #0
 8002212:	d113      	bne.n	800223c <prvProcessExpiredTimer+0x84>
        __asm volatile
 8002214:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002218:	f383 8811 	msr	BASEPRI, r3
 800221c:	f3bf 8f6f 	isb	sy
 8002220:	f3bf 8f4f 	dsb	sy
 8002224:	60fb      	str	r3, [r7, #12]
    }
 8002226:	bf00      	nop
 8002228:	e7fe      	b.n	8002228 <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800222a:	697b      	ldr	r3, [r7, #20]
 800222c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002230:	f023 0301 	bic.w	r3, r3, #1
 8002234:	b2da      	uxtb	r2, r3
 8002236:	697b      	ldr	r3, [r7, #20]
 8002238:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800223c:	697b      	ldr	r3, [r7, #20]
 800223e:	6a1b      	ldr	r3, [r3, #32]
 8002240:	6978      	ldr	r0, [r7, #20]
 8002242:	4798      	blx	r3
    }
 8002244:	bf00      	nop
 8002246:	3718      	adds	r7, #24
 8002248:	46bd      	mov	sp, r7
 800224a:	bd80      	pop	{r7, pc}
 800224c:	20000200 	.word	0x20000200

08002250 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8002250:	b580      	push	{r7, lr}
 8002252:	b084      	sub	sp, #16
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8002258:	f107 0308 	add.w	r3, r7, #8
 800225c:	4618      	mov	r0, r3
 800225e:	f000 f857 	bl	8002310 <prvGetNextExpireTime>
 8002262:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8002264:	68bb      	ldr	r3, [r7, #8]
 8002266:	4619      	mov	r1, r3
 8002268:	68f8      	ldr	r0, [r7, #12]
 800226a:	f000 f803 	bl	8002274 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 800226e:	f000 f8d5 	bl	800241c <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8002272:	e7f1      	b.n	8002258 <prvTimerTask+0x8>

08002274 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8002274:	b580      	push	{r7, lr}
 8002276:	b084      	sub	sp, #16
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
 800227c:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 800227e:	f7ff f8f9 	bl	8001474 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8002282:	f107 0308 	add.w	r3, r7, #8
 8002286:	4618      	mov	r0, r3
 8002288:	f000 f866 	bl	8002358 <prvSampleTimeNow>
 800228c:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 800228e:	68bb      	ldr	r3, [r7, #8]
 8002290:	2b00      	cmp	r3, #0
 8002292:	d130      	bne.n	80022f6 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	2b00      	cmp	r3, #0
 8002298:	d10a      	bne.n	80022b0 <prvProcessTimerOrBlockTask+0x3c>
 800229a:	687a      	ldr	r2, [r7, #4]
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	429a      	cmp	r2, r3
 80022a0:	d806      	bhi.n	80022b0 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 80022a2:	f7ff f8f5 	bl	8001490 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80022a6:	68f9      	ldr	r1, [r7, #12]
 80022a8:	6878      	ldr	r0, [r7, #4]
 80022aa:	f7ff ff85 	bl	80021b8 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 80022ae:	e024      	b.n	80022fa <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d008      	beq.n	80022c8 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80022b6:	4b13      	ldr	r3, [pc, #76]	; (8002304 <prvProcessTimerOrBlockTask+0x90>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d101      	bne.n	80022c4 <prvProcessTimerOrBlockTask+0x50>
 80022c0:	2301      	movs	r3, #1
 80022c2:	e000      	b.n	80022c6 <prvProcessTimerOrBlockTask+0x52>
 80022c4:	2300      	movs	r3, #0
 80022c6:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80022c8:	4b0f      	ldr	r3, [pc, #60]	; (8002308 <prvProcessTimerOrBlockTask+0x94>)
 80022ca:	6818      	ldr	r0, [r3, #0]
 80022cc:	687a      	ldr	r2, [r7, #4]
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	1ad3      	subs	r3, r2, r3
 80022d2:	683a      	ldr	r2, [r7, #0]
 80022d4:	4619      	mov	r1, r3
 80022d6:	f7fe fecd 	bl	8001074 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 80022da:	f7ff f8d9 	bl	8001490 <xTaskResumeAll>
 80022de:	4603      	mov	r3, r0
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d10a      	bne.n	80022fa <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 80022e4:	4b09      	ldr	r3, [pc, #36]	; (800230c <prvProcessTimerOrBlockTask+0x98>)
 80022e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80022ea:	601a      	str	r2, [r3, #0]
 80022ec:	f3bf 8f4f 	dsb	sy
 80022f0:	f3bf 8f6f 	isb	sy
    }
 80022f4:	e001      	b.n	80022fa <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 80022f6:	f7ff f8cb 	bl	8001490 <xTaskResumeAll>
    }
 80022fa:	bf00      	nop
 80022fc:	3710      	adds	r7, #16
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}
 8002302:	bf00      	nop
 8002304:	20000204 	.word	0x20000204
 8002308:	20000208 	.word	0x20000208
 800230c:	e000ed04 	.word	0xe000ed04

08002310 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8002310:	b480      	push	{r7}
 8002312:	b085      	sub	sp, #20
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8002318:	4b0e      	ldr	r3, [pc, #56]	; (8002354 <prvGetNextExpireTime+0x44>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d101      	bne.n	8002326 <prvGetNextExpireTime+0x16>
 8002322:	2201      	movs	r2, #1
 8002324:	e000      	b.n	8002328 <prvGetNextExpireTime+0x18>
 8002326:	2200      	movs	r2, #0
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	2b00      	cmp	r3, #0
 8002332:	d105      	bne.n	8002340 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002334:	4b07      	ldr	r3, [pc, #28]	; (8002354 <prvGetNextExpireTime+0x44>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	68db      	ldr	r3, [r3, #12]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	60fb      	str	r3, [r7, #12]
 800233e:	e001      	b.n	8002344 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8002340:	2300      	movs	r3, #0
 8002342:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8002344:	68fb      	ldr	r3, [r7, #12]
    }
 8002346:	4618      	mov	r0, r3
 8002348:	3714      	adds	r7, #20
 800234a:	46bd      	mov	sp, r7
 800234c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002350:	4770      	bx	lr
 8002352:	bf00      	nop
 8002354:	20000200 	.word	0x20000200

08002358 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8002358:	b580      	push	{r7, lr}
 800235a:	b084      	sub	sp, #16
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8002360:	f7ff f932 	bl	80015c8 <xTaskGetTickCount>
 8002364:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8002366:	4b0b      	ldr	r3, [pc, #44]	; (8002394 <prvSampleTimeNow+0x3c>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	68fa      	ldr	r2, [r7, #12]
 800236c:	429a      	cmp	r2, r3
 800236e:	d205      	bcs.n	800237c <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8002370:	f000 f91a 	bl	80025a8 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2201      	movs	r2, #1
 8002378:	601a      	str	r2, [r3, #0]
 800237a:	e002      	b.n	8002382 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2200      	movs	r2, #0
 8002380:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8002382:	4a04      	ldr	r2, [pc, #16]	; (8002394 <prvSampleTimeNow+0x3c>)
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8002388:	68fb      	ldr	r3, [r7, #12]
    }
 800238a:	4618      	mov	r0, r3
 800238c:	3710      	adds	r7, #16
 800238e:	46bd      	mov	sp, r7
 8002390:	bd80      	pop	{r7, pc}
 8002392:	bf00      	nop
 8002394:	20000210 	.word	0x20000210

08002398 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8002398:	b580      	push	{r7, lr}
 800239a:	b086      	sub	sp, #24
 800239c:	af00      	add	r7, sp, #0
 800239e:	60f8      	str	r0, [r7, #12]
 80023a0:	60b9      	str	r1, [r7, #8]
 80023a2:	607a      	str	r2, [r7, #4]
 80023a4:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 80023a6:	2300      	movs	r3, #0
 80023a8:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	68ba      	ldr	r2, [r7, #8]
 80023ae:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	68fa      	ldr	r2, [r7, #12]
 80023b4:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 80023b6:	68ba      	ldr	r2, [r7, #8]
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	429a      	cmp	r2, r3
 80023bc:	d812      	bhi.n	80023e4 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80023be:	687a      	ldr	r2, [r7, #4]
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	1ad2      	subs	r2, r2, r3
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	699b      	ldr	r3, [r3, #24]
 80023c8:	429a      	cmp	r2, r3
 80023ca:	d302      	bcc.n	80023d2 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 80023cc:	2301      	movs	r3, #1
 80023ce:	617b      	str	r3, [r7, #20]
 80023d0:	e01b      	b.n	800240a <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80023d2:	4b10      	ldr	r3, [pc, #64]	; (8002414 <prvInsertTimerInActiveList+0x7c>)
 80023d4:	681a      	ldr	r2, [r3, #0]
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	3304      	adds	r3, #4
 80023da:	4619      	mov	r1, r3
 80023dc:	4610      	mov	r0, r2
 80023de:	f7fe f93a 	bl	8000656 <vListInsert>
 80023e2:	e012      	b.n	800240a <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80023e4:	687a      	ldr	r2, [r7, #4]
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	429a      	cmp	r2, r3
 80023ea:	d206      	bcs.n	80023fa <prvInsertTimerInActiveList+0x62>
 80023ec:	68ba      	ldr	r2, [r7, #8]
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	429a      	cmp	r2, r3
 80023f2:	d302      	bcc.n	80023fa <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 80023f4:	2301      	movs	r3, #1
 80023f6:	617b      	str	r3, [r7, #20]
 80023f8:	e007      	b.n	800240a <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80023fa:	4b07      	ldr	r3, [pc, #28]	; (8002418 <prvInsertTimerInActiveList+0x80>)
 80023fc:	681a      	ldr	r2, [r3, #0]
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	3304      	adds	r3, #4
 8002402:	4619      	mov	r1, r3
 8002404:	4610      	mov	r0, r2
 8002406:	f7fe f926 	bl	8000656 <vListInsert>
            }
        }

        return xProcessTimerNow;
 800240a:	697b      	ldr	r3, [r7, #20]
    }
 800240c:	4618      	mov	r0, r3
 800240e:	3718      	adds	r7, #24
 8002410:	46bd      	mov	sp, r7
 8002412:	bd80      	pop	{r7, pc}
 8002414:	20000204 	.word	0x20000204
 8002418:	20000200 	.word	0x20000200

0800241c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 800241c:	b580      	push	{r7, lr}
 800241e:	b08c      	sub	sp, #48	; 0x30
 8002420:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8002422:	e0ae      	b.n	8002582 <prvProcessReceivedCommands+0x166>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8002424:	68bb      	ldr	r3, [r7, #8]
 8002426:	2b00      	cmp	r3, #0
 8002428:	f2c0 80aa 	blt.w	8002580 <prvProcessReceivedCommands+0x164>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800242c:	693b      	ldr	r3, [r7, #16]
 800242e:	627b      	str	r3, [r7, #36]	; 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8002430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002432:	695b      	ldr	r3, [r3, #20]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d004      	beq.n	8002442 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800243a:	3304      	adds	r3, #4
 800243c:	4618      	mov	r0, r3
 800243e:	f7fe f943 	bl	80006c8 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8002442:	1d3b      	adds	r3, r7, #4
 8002444:	4618      	mov	r0, r3
 8002446:	f7ff ff87 	bl	8002358 <prvSampleTimeNow>
 800244a:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 800244c:	68bb      	ldr	r3, [r7, #8]
 800244e:	2b09      	cmp	r3, #9
 8002450:	f200 8097 	bhi.w	8002582 <prvProcessReceivedCommands+0x166>
 8002454:	a201      	add	r2, pc, #4	; (adr r2, 800245c <prvProcessReceivedCommands+0x40>)
 8002456:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800245a:	bf00      	nop
 800245c:	08002485 	.word	0x08002485
 8002460:	08002485 	.word	0x08002485
 8002464:	08002485 	.word	0x08002485
 8002468:	080024f9 	.word	0x080024f9
 800246c:	0800250d 	.word	0x0800250d
 8002470:	08002557 	.word	0x08002557
 8002474:	08002485 	.word	0x08002485
 8002478:	08002485 	.word	0x08002485
 800247c:	080024f9 	.word	0x080024f9
 8002480:	0800250d 	.word	0x0800250d
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8002484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002486:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800248a:	f043 0301 	orr.w	r3, r3, #1
 800248e:	b2da      	uxtb	r2, r3
 8002490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002492:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8002496:	68fa      	ldr	r2, [r7, #12]
 8002498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800249a:	699b      	ldr	r3, [r3, #24]
 800249c:	18d1      	adds	r1, r2, r3
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	6a3a      	ldr	r2, [r7, #32]
 80024a2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80024a4:	f7ff ff78 	bl	8002398 <prvInsertTimerInActiveList>
 80024a8:	4603      	mov	r3, r0
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d069      	beq.n	8002582 <prvProcessReceivedCommands+0x166>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80024ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b0:	6a1b      	ldr	r3, [r3, #32]
 80024b2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80024b4:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80024b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80024bc:	f003 0304 	and.w	r3, r3, #4
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d05e      	beq.n	8002582 <prvProcessReceivedCommands+0x166>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80024c4:	68fa      	ldr	r2, [r7, #12]
 80024c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c8:	699b      	ldr	r3, [r3, #24]
 80024ca:	441a      	add	r2, r3
 80024cc:	2300      	movs	r3, #0
 80024ce:	9300      	str	r3, [sp, #0]
 80024d0:	2300      	movs	r3, #0
 80024d2:	2100      	movs	r1, #0
 80024d4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80024d6:	f7ff fe21 	bl	800211c <xTimerGenericCommand>
 80024da:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 80024dc:	69fb      	ldr	r3, [r7, #28]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d14f      	bne.n	8002582 <prvProcessReceivedCommands+0x166>
        __asm volatile
 80024e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024e6:	f383 8811 	msr	BASEPRI, r3
 80024ea:	f3bf 8f6f 	isb	sy
 80024ee:	f3bf 8f4f 	dsb	sy
 80024f2:	61bb      	str	r3, [r7, #24]
    }
 80024f4:	bf00      	nop
 80024f6:	e7fe      	b.n	80024f6 <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80024f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024fa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80024fe:	f023 0301 	bic.w	r3, r3, #1
 8002502:	b2da      	uxtb	r2, r3
 8002504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002506:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 800250a:	e03a      	b.n	8002582 <prvProcessReceivedCommands+0x166>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800250c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800250e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002512:	f043 0301 	orr.w	r3, r3, #1
 8002516:	b2da      	uxtb	r2, r3
 8002518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800251a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800251e:	68fa      	ldr	r2, [r7, #12]
 8002520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002522:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8002524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002526:	699b      	ldr	r3, [r3, #24]
 8002528:	2b00      	cmp	r3, #0
 800252a:	d10a      	bne.n	8002542 <prvProcessReceivedCommands+0x126>
        __asm volatile
 800252c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002530:	f383 8811 	msr	BASEPRI, r3
 8002534:	f3bf 8f6f 	isb	sy
 8002538:	f3bf 8f4f 	dsb	sy
 800253c:	617b      	str	r3, [r7, #20]
    }
 800253e:	bf00      	nop
 8002540:	e7fe      	b.n	8002540 <prvProcessReceivedCommands+0x124>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8002542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002544:	699a      	ldr	r2, [r3, #24]
 8002546:	6a3b      	ldr	r3, [r7, #32]
 8002548:	18d1      	adds	r1, r2, r3
 800254a:	6a3b      	ldr	r3, [r7, #32]
 800254c:	6a3a      	ldr	r2, [r7, #32]
 800254e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002550:	f7ff ff22 	bl	8002398 <prvInsertTimerInActiveList>
                        break;
 8002554:	e015      	b.n	8002582 <prvProcessReceivedCommands+0x166>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8002556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002558:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800255c:	f003 0302 	and.w	r3, r3, #2
 8002560:	2b00      	cmp	r3, #0
 8002562:	d103      	bne.n	800256c <prvProcessReceivedCommands+0x150>
                                {
                                    vPortFree( pxTimer );
 8002564:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002566:	f000 fbe9 	bl	8002d3c <vPortFree>
 800256a:	e00a      	b.n	8002582 <prvProcessReceivedCommands+0x166>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800256c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800256e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002572:	f023 0301 	bic.w	r3, r3, #1
 8002576:	b2da      	uxtb	r2, r3
 8002578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800257a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 800257e:	e000      	b.n	8002582 <prvProcessReceivedCommands+0x166>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8002580:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8002582:	4b08      	ldr	r3, [pc, #32]	; (80025a4 <prvProcessReceivedCommands+0x188>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f107 0108 	add.w	r1, r7, #8
 800258a:	2200      	movs	r2, #0
 800258c:	4618      	mov	r0, r3
 800258e:	f7fe fb57 	bl	8000c40 <xQueueReceive>
 8002592:	4603      	mov	r3, r0
 8002594:	2b00      	cmp	r3, #0
 8002596:	f47f af45 	bne.w	8002424 <prvProcessReceivedCommands+0x8>
        }
    }
 800259a:	bf00      	nop
 800259c:	bf00      	nop
 800259e:	3728      	adds	r7, #40	; 0x28
 80025a0:	46bd      	mov	sp, r7
 80025a2:	bd80      	pop	{r7, pc}
 80025a4:	20000208 	.word	0x20000208

080025a8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b088      	sub	sp, #32
 80025ac:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80025ae:	e048      	b.n	8002642 <prvSwitchTimerLists+0x9a>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80025b0:	4b2d      	ldr	r3, [pc, #180]	; (8002668 <prvSwitchTimerLists+0xc0>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	68db      	ldr	r3, [r3, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80025ba:	4b2b      	ldr	r3, [pc, #172]	; (8002668 <prvSwitchTimerLists+0xc0>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	68db      	ldr	r3, [r3, #12]
 80025c0:	68db      	ldr	r3, [r3, #12]
 80025c2:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	3304      	adds	r3, #4
 80025c8:	4618      	mov	r0, r3
 80025ca:	f7fe f87d 	bl	80006c8 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	6a1b      	ldr	r3, [r3, #32]
 80025d2:	68f8      	ldr	r0, [r7, #12]
 80025d4:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80025dc:	f003 0304 	and.w	r3, r3, #4
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d02e      	beq.n	8002642 <prvSwitchTimerLists+0x9a>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	699b      	ldr	r3, [r3, #24]
 80025e8:	693a      	ldr	r2, [r7, #16]
 80025ea:	4413      	add	r3, r2
 80025ec:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 80025ee:	68ba      	ldr	r2, [r7, #8]
 80025f0:	693b      	ldr	r3, [r7, #16]
 80025f2:	429a      	cmp	r2, r3
 80025f4:	d90e      	bls.n	8002614 <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	68ba      	ldr	r2, [r7, #8]
 80025fa:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	68fa      	ldr	r2, [r7, #12]
 8002600:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8002602:	4b19      	ldr	r3, [pc, #100]	; (8002668 <prvSwitchTimerLists+0xc0>)
 8002604:	681a      	ldr	r2, [r3, #0]
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	3304      	adds	r3, #4
 800260a:	4619      	mov	r1, r3
 800260c:	4610      	mov	r0, r2
 800260e:	f7fe f822 	bl	8000656 <vListInsert>
 8002612:	e016      	b.n	8002642 <prvSwitchTimerLists+0x9a>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8002614:	2300      	movs	r3, #0
 8002616:	9300      	str	r3, [sp, #0]
 8002618:	2300      	movs	r3, #0
 800261a:	693a      	ldr	r2, [r7, #16]
 800261c:	2100      	movs	r1, #0
 800261e:	68f8      	ldr	r0, [r7, #12]
 8002620:	f7ff fd7c 	bl	800211c <xTimerGenericCommand>
 8002624:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2b00      	cmp	r3, #0
 800262a:	d10a      	bne.n	8002642 <prvSwitchTimerLists+0x9a>
        __asm volatile
 800262c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002630:	f383 8811 	msr	BASEPRI, r3
 8002634:	f3bf 8f6f 	isb	sy
 8002638:	f3bf 8f4f 	dsb	sy
 800263c:	603b      	str	r3, [r7, #0]
    }
 800263e:	bf00      	nop
 8002640:	e7fe      	b.n	8002640 <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8002642:	4b09      	ldr	r3, [pc, #36]	; (8002668 <prvSwitchTimerLists+0xc0>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	2b00      	cmp	r3, #0
 800264a:	d1b1      	bne.n	80025b0 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 800264c:	4b06      	ldr	r3, [pc, #24]	; (8002668 <prvSwitchTimerLists+0xc0>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 8002652:	4b06      	ldr	r3, [pc, #24]	; (800266c <prvSwitchTimerLists+0xc4>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4a04      	ldr	r2, [pc, #16]	; (8002668 <prvSwitchTimerLists+0xc0>)
 8002658:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 800265a:	4a04      	ldr	r2, [pc, #16]	; (800266c <prvSwitchTimerLists+0xc4>)
 800265c:	697b      	ldr	r3, [r7, #20]
 800265e:	6013      	str	r3, [r2, #0]
    }
 8002660:	bf00      	nop
 8002662:	3718      	adds	r7, #24
 8002664:	46bd      	mov	sp, r7
 8002666:	bd80      	pop	{r7, pc}
 8002668:	20000200 	.word	0x20000200
 800266c:	20000204 	.word	0x20000204

08002670 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8002670:	b580      	push	{r7, lr}
 8002672:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8002674:	f000 f960 	bl	8002938 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8002678:	4b12      	ldr	r3, [pc, #72]	; (80026c4 <prvCheckForValidListAndQueue+0x54>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d11d      	bne.n	80026bc <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8002680:	4811      	ldr	r0, [pc, #68]	; (80026c8 <prvCheckForValidListAndQueue+0x58>)
 8002682:	f7fd ff97 	bl	80005b4 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8002686:	4811      	ldr	r0, [pc, #68]	; (80026cc <prvCheckForValidListAndQueue+0x5c>)
 8002688:	f7fd ff94 	bl	80005b4 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 800268c:	4b10      	ldr	r3, [pc, #64]	; (80026d0 <prvCheckForValidListAndQueue+0x60>)
 800268e:	4a0e      	ldr	r2, [pc, #56]	; (80026c8 <prvCheckForValidListAndQueue+0x58>)
 8002690:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8002692:	4b10      	ldr	r3, [pc, #64]	; (80026d4 <prvCheckForValidListAndQueue+0x64>)
 8002694:	4a0d      	ldr	r2, [pc, #52]	; (80026cc <prvCheckForValidListAndQueue+0x5c>)
 8002696:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8002698:	2200      	movs	r2, #0
 800269a:	210c      	movs	r1, #12
 800269c:	200a      	movs	r0, #10
 800269e:	f7fe f8a5 	bl	80007ec <xQueueGenericCreate>
 80026a2:	4603      	mov	r3, r0
 80026a4:	4a07      	ldr	r2, [pc, #28]	; (80026c4 <prvCheckForValidListAndQueue+0x54>)
 80026a6:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 80026a8:	4b06      	ldr	r3, [pc, #24]	; (80026c4 <prvCheckForValidListAndQueue+0x54>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d005      	beq.n	80026bc <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80026b0:	4b04      	ldr	r3, [pc, #16]	; (80026c4 <prvCheckForValidListAndQueue+0x54>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4908      	ldr	r1, [pc, #32]	; (80026d8 <prvCheckForValidListAndQueue+0x68>)
 80026b6:	4618      	mov	r0, r3
 80026b8:	f7fe fcb2 	bl	8001020 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80026bc:	f000 f96c 	bl	8002998 <vPortExitCritical>
    }
 80026c0:	bf00      	nop
 80026c2:	bd80      	pop	{r7, pc}
 80026c4:	20000208 	.word	0x20000208
 80026c8:	200001d8 	.word	0x200001d8
 80026cc:	200001ec 	.word	0x200001ec
 80026d0:	20000200 	.word	0x20000200
 80026d4:	20000204 	.word	0x20000204
 80026d8:	08006ff4 	.word	0x08006ff4

080026dc <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 80026dc:	b480      	push	{r7}
 80026de:	b085      	sub	sp, #20
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	60f8      	str	r0, [r7, #12]
 80026e4:	60b9      	str	r1, [r7, #8]
 80026e6:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	3b04      	subs	r3, #4
 80026ec:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80026f4:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	3b04      	subs	r3, #4
 80026fa:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 80026fc:	68bb      	ldr	r3, [r7, #8]
 80026fe:	f023 0201 	bic.w	r2, r3, #1
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	3b04      	subs	r3, #4
 800270a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 800270c:	4a0c      	ldr	r2, [pc, #48]	; (8002740 <pxPortInitialiseStack+0x64>)
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	3b14      	subs	r3, #20
 8002716:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8002718:	687a      	ldr	r2, [r7, #4]
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	3b04      	subs	r3, #4
 8002722:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	f06f 0202 	mvn.w	r2, #2
 800272a:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	3b20      	subs	r3, #32
 8002730:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8002732:	68fb      	ldr	r3, [r7, #12]
}
 8002734:	4618      	mov	r0, r3
 8002736:	3714      	adds	r7, #20
 8002738:	46bd      	mov	sp, r7
 800273a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273e:	4770      	bx	lr
 8002740:	08002745 	.word	0x08002745

08002744 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002744:	b480      	push	{r7}
 8002746:	b085      	sub	sp, #20
 8002748:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 800274a:	2300      	movs	r3, #0
 800274c:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 800274e:	4b12      	ldr	r3, [pc, #72]	; (8002798 <prvTaskExitError+0x54>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002756:	d00a      	beq.n	800276e <prvTaskExitError+0x2a>
        __asm volatile
 8002758:	f04f 0350 	mov.w	r3, #80	; 0x50
 800275c:	f383 8811 	msr	BASEPRI, r3
 8002760:	f3bf 8f6f 	isb	sy
 8002764:	f3bf 8f4f 	dsb	sy
 8002768:	60fb      	str	r3, [r7, #12]
    }
 800276a:	bf00      	nop
 800276c:	e7fe      	b.n	800276c <prvTaskExitError+0x28>
        __asm volatile
 800276e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002772:	f383 8811 	msr	BASEPRI, r3
 8002776:	f3bf 8f6f 	isb	sy
 800277a:	f3bf 8f4f 	dsb	sy
 800277e:	60bb      	str	r3, [r7, #8]
    }
 8002780:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8002782:	bf00      	nop
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d0fc      	beq.n	8002784 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 800278a:	bf00      	nop
 800278c:	bf00      	nop
 800278e:	3714      	adds	r7, #20
 8002790:	46bd      	mov	sp, r7
 8002792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002796:	4770      	bx	lr
 8002798:	20000004 	.word	0x20000004
 800279c:	00000000 	.word	0x00000000

080027a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 80027a0:	4b07      	ldr	r3, [pc, #28]	; (80027c0 <pxCurrentTCBConst2>)
 80027a2:	6819      	ldr	r1, [r3, #0]
 80027a4:	6808      	ldr	r0, [r1, #0]
 80027a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80027aa:	f380 8809 	msr	PSP, r0
 80027ae:	f3bf 8f6f 	isb	sy
 80027b2:	f04f 0000 	mov.w	r0, #0
 80027b6:	f380 8811 	msr	BASEPRI, r0
 80027ba:	4770      	bx	lr
 80027bc:	f3af 8000 	nop.w

080027c0 <pxCurrentTCBConst2>:
 80027c0:	200000d4 	.word	0x200000d4
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 80027c4:	bf00      	nop
 80027c6:	bf00      	nop

080027c8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 80027c8:	4808      	ldr	r0, [pc, #32]	; (80027ec <prvPortStartFirstTask+0x24>)
 80027ca:	6800      	ldr	r0, [r0, #0]
 80027cc:	6800      	ldr	r0, [r0, #0]
 80027ce:	f380 8808 	msr	MSP, r0
 80027d2:	f04f 0000 	mov.w	r0, #0
 80027d6:	f380 8814 	msr	CONTROL, r0
 80027da:	b662      	cpsie	i
 80027dc:	b661      	cpsie	f
 80027de:	f3bf 8f4f 	dsb	sy
 80027e2:	f3bf 8f6f 	isb	sy
 80027e6:	df00      	svc	0
 80027e8:	bf00      	nop
 80027ea:	0000      	.short	0x0000
 80027ec:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 80027f0:	bf00      	nop
 80027f2:	bf00      	nop

080027f4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b086      	sub	sp, #24
 80027f8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80027fa:	4b46      	ldr	r3, [pc, #280]	; (8002914 <xPortStartScheduler+0x120>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4a46      	ldr	r2, [pc, #280]	; (8002918 <xPortStartScheduler+0x124>)
 8002800:	4293      	cmp	r3, r2
 8002802:	d10a      	bne.n	800281a <xPortStartScheduler+0x26>
        __asm volatile
 8002804:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002808:	f383 8811 	msr	BASEPRI, r3
 800280c:	f3bf 8f6f 	isb	sy
 8002810:	f3bf 8f4f 	dsb	sy
 8002814:	613b      	str	r3, [r7, #16]
    }
 8002816:	bf00      	nop
 8002818:	e7fe      	b.n	8002818 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800281a:	4b3e      	ldr	r3, [pc, #248]	; (8002914 <xPortStartScheduler+0x120>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	4a3f      	ldr	r2, [pc, #252]	; (800291c <xPortStartScheduler+0x128>)
 8002820:	4293      	cmp	r3, r2
 8002822:	d10a      	bne.n	800283a <xPortStartScheduler+0x46>
        __asm volatile
 8002824:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002828:	f383 8811 	msr	BASEPRI, r3
 800282c:	f3bf 8f6f 	isb	sy
 8002830:	f3bf 8f4f 	dsb	sy
 8002834:	60fb      	str	r3, [r7, #12]
    }
 8002836:	bf00      	nop
 8002838:	e7fe      	b.n	8002838 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800283a:	4b39      	ldr	r3, [pc, #228]	; (8002920 <xPortStartScheduler+0x12c>)
 800283c:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 800283e:	697b      	ldr	r3, [r7, #20]
 8002840:	781b      	ldrb	r3, [r3, #0]
 8002842:	b2db      	uxtb	r3, r3
 8002844:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002846:	697b      	ldr	r3, [r7, #20]
 8002848:	22ff      	movs	r2, #255	; 0xff
 800284a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800284c:	697b      	ldr	r3, [r7, #20]
 800284e:	781b      	ldrb	r3, [r3, #0]
 8002850:	b2db      	uxtb	r3, r3
 8002852:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002854:	78fb      	ldrb	r3, [r7, #3]
 8002856:	b2db      	uxtb	r3, r3
 8002858:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800285c:	b2da      	uxtb	r2, r3
 800285e:	4b31      	ldr	r3, [pc, #196]	; (8002924 <xPortStartScheduler+0x130>)
 8002860:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002862:	4b31      	ldr	r3, [pc, #196]	; (8002928 <xPortStartScheduler+0x134>)
 8002864:	2207      	movs	r2, #7
 8002866:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002868:	e009      	b.n	800287e <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 800286a:	4b2f      	ldr	r3, [pc, #188]	; (8002928 <xPortStartScheduler+0x134>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	3b01      	subs	r3, #1
 8002870:	4a2d      	ldr	r2, [pc, #180]	; (8002928 <xPortStartScheduler+0x134>)
 8002872:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002874:	78fb      	ldrb	r3, [r7, #3]
 8002876:	b2db      	uxtb	r3, r3
 8002878:	005b      	lsls	r3, r3, #1
 800287a:	b2db      	uxtb	r3, r3
 800287c:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800287e:	78fb      	ldrb	r3, [r7, #3]
 8002880:	b2db      	uxtb	r3, r3
 8002882:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002886:	2b80      	cmp	r3, #128	; 0x80
 8002888:	d0ef      	beq.n	800286a <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800288a:	4b27      	ldr	r3, [pc, #156]	; (8002928 <xPortStartScheduler+0x134>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f1c3 0307 	rsb	r3, r3, #7
 8002892:	2b04      	cmp	r3, #4
 8002894:	d00a      	beq.n	80028ac <xPortStartScheduler+0xb8>
        __asm volatile
 8002896:	f04f 0350 	mov.w	r3, #80	; 0x50
 800289a:	f383 8811 	msr	BASEPRI, r3
 800289e:	f3bf 8f6f 	isb	sy
 80028a2:	f3bf 8f4f 	dsb	sy
 80028a6:	60bb      	str	r3, [r7, #8]
    }
 80028a8:	bf00      	nop
 80028aa:	e7fe      	b.n	80028aa <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80028ac:	4b1e      	ldr	r3, [pc, #120]	; (8002928 <xPortStartScheduler+0x134>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	021b      	lsls	r3, r3, #8
 80028b2:	4a1d      	ldr	r2, [pc, #116]	; (8002928 <xPortStartScheduler+0x134>)
 80028b4:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80028b6:	4b1c      	ldr	r3, [pc, #112]	; (8002928 <xPortStartScheduler+0x134>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80028be:	4a1a      	ldr	r2, [pc, #104]	; (8002928 <xPortStartScheduler+0x134>)
 80028c0:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	b2da      	uxtb	r2, r3
 80028c6:	697b      	ldr	r3, [r7, #20]
 80028c8:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 80028ca:	4b18      	ldr	r3, [pc, #96]	; (800292c <xPortStartScheduler+0x138>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4a17      	ldr	r2, [pc, #92]	; (800292c <xPortStartScheduler+0x138>)
 80028d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80028d4:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 80028d6:	4b15      	ldr	r3, [pc, #84]	; (800292c <xPortStartScheduler+0x138>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	4a14      	ldr	r2, [pc, #80]	; (800292c <xPortStartScheduler+0x138>)
 80028dc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80028e0:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 80028e2:	f000 f8db 	bl	8002a9c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 80028e6:	4b12      	ldr	r3, [pc, #72]	; (8002930 <xPortStartScheduler+0x13c>)
 80028e8:	2200      	movs	r2, #0
 80028ea:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 80028ec:	f000 f8fa 	bl	8002ae4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80028f0:	4b10      	ldr	r3, [pc, #64]	; (8002934 <xPortStartScheduler+0x140>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4a0f      	ldr	r2, [pc, #60]	; (8002934 <xPortStartScheduler+0x140>)
 80028f6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80028fa:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 80028fc:	f7ff ff64 	bl	80027c8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8002900:	f7fe ff2a 	bl	8001758 <vTaskSwitchContext>
    prvTaskExitError();
 8002904:	f7ff ff1e 	bl	8002744 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8002908:	2300      	movs	r3, #0
}
 800290a:	4618      	mov	r0, r3
 800290c:	3718      	adds	r7, #24
 800290e:	46bd      	mov	sp, r7
 8002910:	bd80      	pop	{r7, pc}
 8002912:	bf00      	nop
 8002914:	e000ed00 	.word	0xe000ed00
 8002918:	410fc271 	.word	0x410fc271
 800291c:	410fc270 	.word	0x410fc270
 8002920:	e000e400 	.word	0xe000e400
 8002924:	20000214 	.word	0x20000214
 8002928:	20000218 	.word	0x20000218
 800292c:	e000ed20 	.word	0xe000ed20
 8002930:	20000004 	.word	0x20000004
 8002934:	e000ef34 	.word	0xe000ef34

08002938 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8002938:	b480      	push	{r7}
 800293a:	b083      	sub	sp, #12
 800293c:	af00      	add	r7, sp, #0
        __asm volatile
 800293e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002942:	f383 8811 	msr	BASEPRI, r3
 8002946:	f3bf 8f6f 	isb	sy
 800294a:	f3bf 8f4f 	dsb	sy
 800294e:	607b      	str	r3, [r7, #4]
    }
 8002950:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8002952:	4b0f      	ldr	r3, [pc, #60]	; (8002990 <vPortEnterCritical+0x58>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	3301      	adds	r3, #1
 8002958:	4a0d      	ldr	r2, [pc, #52]	; (8002990 <vPortEnterCritical+0x58>)
 800295a:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 800295c:	4b0c      	ldr	r3, [pc, #48]	; (8002990 <vPortEnterCritical+0x58>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	2b01      	cmp	r3, #1
 8002962:	d10f      	bne.n	8002984 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002964:	4b0b      	ldr	r3, [pc, #44]	; (8002994 <vPortEnterCritical+0x5c>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	b2db      	uxtb	r3, r3
 800296a:	2b00      	cmp	r3, #0
 800296c:	d00a      	beq.n	8002984 <vPortEnterCritical+0x4c>
        __asm volatile
 800296e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002972:	f383 8811 	msr	BASEPRI, r3
 8002976:	f3bf 8f6f 	isb	sy
 800297a:	f3bf 8f4f 	dsb	sy
 800297e:	603b      	str	r3, [r7, #0]
    }
 8002980:	bf00      	nop
 8002982:	e7fe      	b.n	8002982 <vPortEnterCritical+0x4a>
    }
}
 8002984:	bf00      	nop
 8002986:	370c      	adds	r7, #12
 8002988:	46bd      	mov	sp, r7
 800298a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298e:	4770      	bx	lr
 8002990:	20000004 	.word	0x20000004
 8002994:	e000ed04 	.word	0xe000ed04

08002998 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8002998:	b480      	push	{r7}
 800299a:	b083      	sub	sp, #12
 800299c:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800299e:	4b12      	ldr	r3, [pc, #72]	; (80029e8 <vPortExitCritical+0x50>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d10a      	bne.n	80029bc <vPortExitCritical+0x24>
        __asm volatile
 80029a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029aa:	f383 8811 	msr	BASEPRI, r3
 80029ae:	f3bf 8f6f 	isb	sy
 80029b2:	f3bf 8f4f 	dsb	sy
 80029b6:	607b      	str	r3, [r7, #4]
    }
 80029b8:	bf00      	nop
 80029ba:	e7fe      	b.n	80029ba <vPortExitCritical+0x22>
    uxCriticalNesting--;
 80029bc:	4b0a      	ldr	r3, [pc, #40]	; (80029e8 <vPortExitCritical+0x50>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	3b01      	subs	r3, #1
 80029c2:	4a09      	ldr	r2, [pc, #36]	; (80029e8 <vPortExitCritical+0x50>)
 80029c4:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 80029c6:	4b08      	ldr	r3, [pc, #32]	; (80029e8 <vPortExitCritical+0x50>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d105      	bne.n	80029da <vPortExitCritical+0x42>
 80029ce:	2300      	movs	r3, #0
 80029d0:	603b      	str	r3, [r7, #0]
        __asm volatile
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	f383 8811 	msr	BASEPRI, r3
    }
 80029d8:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 80029da:	bf00      	nop
 80029dc:	370c      	adds	r7, #12
 80029de:	46bd      	mov	sp, r7
 80029e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e4:	4770      	bx	lr
 80029e6:	bf00      	nop
 80029e8:	20000004 	.word	0x20000004
 80029ec:	00000000 	.word	0x00000000

080029f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 80029f0:	f3ef 8009 	mrs	r0, PSP
 80029f4:	f3bf 8f6f 	isb	sy
 80029f8:	4b15      	ldr	r3, [pc, #84]	; (8002a50 <pxCurrentTCBConst>)
 80029fa:	681a      	ldr	r2, [r3, #0]
 80029fc:	f01e 0f10 	tst.w	lr, #16
 8002a00:	bf08      	it	eq
 8002a02:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8002a06:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a0a:	6010      	str	r0, [r2, #0]
 8002a0c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8002a10:	f04f 0050 	mov.w	r0, #80	; 0x50
 8002a14:	f380 8811 	msr	BASEPRI, r0
 8002a18:	f3bf 8f4f 	dsb	sy
 8002a1c:	f3bf 8f6f 	isb	sy
 8002a20:	f7fe fe9a 	bl	8001758 <vTaskSwitchContext>
 8002a24:	f04f 0000 	mov.w	r0, #0
 8002a28:	f380 8811 	msr	BASEPRI, r0
 8002a2c:	bc09      	pop	{r0, r3}
 8002a2e:	6819      	ldr	r1, [r3, #0]
 8002a30:	6808      	ldr	r0, [r1, #0]
 8002a32:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a36:	f01e 0f10 	tst.w	lr, #16
 8002a3a:	bf08      	it	eq
 8002a3c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8002a40:	f380 8809 	msr	PSP, r0
 8002a44:	f3bf 8f6f 	isb	sy
 8002a48:	4770      	bx	lr
 8002a4a:	bf00      	nop
 8002a4c:	f3af 8000 	nop.w

08002a50 <pxCurrentTCBConst>:
 8002a50:	200000d4 	.word	0x200000d4
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8002a54:	bf00      	nop
 8002a56:	bf00      	nop

08002a58 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b082      	sub	sp, #8
 8002a5c:	af00      	add	r7, sp, #0
        __asm volatile
 8002a5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a62:	f383 8811 	msr	BASEPRI, r3
 8002a66:	f3bf 8f6f 	isb	sy
 8002a6a:	f3bf 8f4f 	dsb	sy
 8002a6e:	607b      	str	r3, [r7, #4]
    }
 8002a70:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8002a72:	f7fe fdb9 	bl	80015e8 <xTaskIncrementTick>
 8002a76:	4603      	mov	r3, r0
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d003      	beq.n	8002a84 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8002a7c:	4b06      	ldr	r3, [pc, #24]	; (8002a98 <SysTick_Handler+0x40>)
 8002a7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a82:	601a      	str	r2, [r3, #0]
 8002a84:	2300      	movs	r3, #0
 8002a86:	603b      	str	r3, [r7, #0]
        __asm volatile
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	f383 8811 	msr	BASEPRI, r3
    }
 8002a8e:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 8002a90:	bf00      	nop
 8002a92:	3708      	adds	r7, #8
 8002a94:	46bd      	mov	sp, r7
 8002a96:	bd80      	pop	{r7, pc}
 8002a98:	e000ed04 	.word	0xe000ed04

08002a9c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8002aa0:	4b0b      	ldr	r3, [pc, #44]	; (8002ad0 <vPortSetupTimerInterrupt+0x34>)
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002aa6:	4b0b      	ldr	r3, [pc, #44]	; (8002ad4 <vPortSetupTimerInterrupt+0x38>)
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8002aac:	4b0a      	ldr	r3, [pc, #40]	; (8002ad8 <vPortSetupTimerInterrupt+0x3c>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4a0a      	ldr	r2, [pc, #40]	; (8002adc <vPortSetupTimerInterrupt+0x40>)
 8002ab2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ab6:	099b      	lsrs	r3, r3, #6
 8002ab8:	4a09      	ldr	r2, [pc, #36]	; (8002ae0 <vPortSetupTimerInterrupt+0x44>)
 8002aba:	3b01      	subs	r3, #1
 8002abc:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8002abe:	4b04      	ldr	r3, [pc, #16]	; (8002ad0 <vPortSetupTimerInterrupt+0x34>)
 8002ac0:	2207      	movs	r2, #7
 8002ac2:	601a      	str	r2, [r3, #0]
}
 8002ac4:	bf00      	nop
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002acc:	4770      	bx	lr
 8002ace:	bf00      	nop
 8002ad0:	e000e010 	.word	0xe000e010
 8002ad4:	e000e018 	.word	0xe000e018
 8002ad8:	20000008 	.word	0x20000008
 8002adc:	10624dd3 	.word	0x10624dd3
 8002ae0:	e000e014 	.word	0xe000e014

08002ae4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8002ae4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8002af4 <vPortEnableVFP+0x10>
 8002ae8:	6801      	ldr	r1, [r0, #0]
 8002aea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8002aee:	6001      	str	r1, [r0, #0]
 8002af0:	4770      	bx	lr
 8002af2:	0000      	.short	0x0000
 8002af4:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8002af8:	bf00      	nop
 8002afa:	bf00      	nop

08002afc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8002afc:	b480      	push	{r7}
 8002afe:	b085      	sub	sp, #20
 8002b00:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8002b02:	f3ef 8305 	mrs	r3, IPSR
 8002b06:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	2b0f      	cmp	r3, #15
 8002b0c:	d914      	bls.n	8002b38 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8002b0e:	4a17      	ldr	r2, [pc, #92]	; (8002b6c <vPortValidateInterruptPriority+0x70>)
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	4413      	add	r3, r2
 8002b14:	781b      	ldrb	r3, [r3, #0]
 8002b16:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8002b18:	4b15      	ldr	r3, [pc, #84]	; (8002b70 <vPortValidateInterruptPriority+0x74>)
 8002b1a:	781b      	ldrb	r3, [r3, #0]
 8002b1c:	7afa      	ldrb	r2, [r7, #11]
 8002b1e:	429a      	cmp	r2, r3
 8002b20:	d20a      	bcs.n	8002b38 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8002b22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b26:	f383 8811 	msr	BASEPRI, r3
 8002b2a:	f3bf 8f6f 	isb	sy
 8002b2e:	f3bf 8f4f 	dsb	sy
 8002b32:	607b      	str	r3, [r7, #4]
    }
 8002b34:	bf00      	nop
 8002b36:	e7fe      	b.n	8002b36 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8002b38:	4b0e      	ldr	r3, [pc, #56]	; (8002b74 <vPortValidateInterruptPriority+0x78>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002b40:	4b0d      	ldr	r3, [pc, #52]	; (8002b78 <vPortValidateInterruptPriority+0x7c>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	429a      	cmp	r2, r3
 8002b46:	d90a      	bls.n	8002b5e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8002b48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b4c:	f383 8811 	msr	BASEPRI, r3
 8002b50:	f3bf 8f6f 	isb	sy
 8002b54:	f3bf 8f4f 	dsb	sy
 8002b58:	603b      	str	r3, [r7, #0]
    }
 8002b5a:	bf00      	nop
 8002b5c:	e7fe      	b.n	8002b5c <vPortValidateInterruptPriority+0x60>
    }
 8002b5e:	bf00      	nop
 8002b60:	3714      	adds	r7, #20
 8002b62:	46bd      	mov	sp, r7
 8002b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b68:	4770      	bx	lr
 8002b6a:	bf00      	nop
 8002b6c:	e000e3f0 	.word	0xe000e3f0
 8002b70:	20000214 	.word	0x20000214
 8002b74:	e000ed0c 	.word	0xe000ed0c
 8002b78:	20000218 	.word	0x20000218

08002b7c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b08a      	sub	sp, #40	; 0x28
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8002b84:	2300      	movs	r3, #0
 8002b86:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8002b88:	f7fe fc74 	bl	8001474 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8002b8c:	4b65      	ldr	r3, [pc, #404]	; (8002d24 <pvPortMalloc+0x1a8>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d101      	bne.n	8002b98 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8002b94:	f000 f934 	bl	8002e00 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8002b98:	4b63      	ldr	r3, [pc, #396]	; (8002d28 <pvPortMalloc+0x1ac>)
 8002b9a:	681a      	ldr	r2, [r3, #0]
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	4013      	ands	r3, r2
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	f040 80a7 	bne.w	8002cf4 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d02d      	beq.n	8002c08 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 8002bac:	2208      	movs	r2, #8
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8002bb2:	687a      	ldr	r2, [r7, #4]
 8002bb4:	429a      	cmp	r2, r3
 8002bb6:	d227      	bcs.n	8002c08 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8002bb8:	2208      	movs	r2, #8
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	4413      	add	r3, r2
 8002bbe:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	f003 0307 	and.w	r3, r3, #7
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d021      	beq.n	8002c0e <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	f023 0307 	bic.w	r3, r3, #7
 8002bd0:	3308      	adds	r3, #8
 8002bd2:	687a      	ldr	r2, [r7, #4]
 8002bd4:	429a      	cmp	r2, r3
 8002bd6:	d214      	bcs.n	8002c02 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	f023 0307 	bic.w	r3, r3, #7
 8002bde:	3308      	adds	r3, #8
 8002be0:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	f003 0307 	and.w	r3, r3, #7
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d010      	beq.n	8002c0e <pvPortMalloc+0x92>
        __asm volatile
 8002bec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bf0:	f383 8811 	msr	BASEPRI, r3
 8002bf4:	f3bf 8f6f 	isb	sy
 8002bf8:	f3bf 8f4f 	dsb	sy
 8002bfc:	617b      	str	r3, [r7, #20]
    }
 8002bfe:	bf00      	nop
 8002c00:	e7fe      	b.n	8002c00 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8002c02:	2300      	movs	r3, #0
 8002c04:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002c06:	e002      	b.n	8002c0e <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8002c08:	2300      	movs	r3, #0
 8002c0a:	607b      	str	r3, [r7, #4]
 8002c0c:	e000      	b.n	8002c10 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002c0e:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d06e      	beq.n	8002cf4 <pvPortMalloc+0x178>
 8002c16:	4b45      	ldr	r3, [pc, #276]	; (8002d2c <pvPortMalloc+0x1b0>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	687a      	ldr	r2, [r7, #4]
 8002c1c:	429a      	cmp	r2, r3
 8002c1e:	d869      	bhi.n	8002cf4 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8002c20:	4b43      	ldr	r3, [pc, #268]	; (8002d30 <pvPortMalloc+0x1b4>)
 8002c22:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8002c24:	4b42      	ldr	r3, [pc, #264]	; (8002d30 <pvPortMalloc+0x1b4>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002c2a:	e004      	b.n	8002c36 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 8002c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c2e:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8002c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c38:	685b      	ldr	r3, [r3, #4]
 8002c3a:	687a      	ldr	r2, [r7, #4]
 8002c3c:	429a      	cmp	r2, r3
 8002c3e:	d903      	bls.n	8002c48 <pvPortMalloc+0xcc>
 8002c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d1f1      	bne.n	8002c2c <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8002c48:	4b36      	ldr	r3, [pc, #216]	; (8002d24 <pvPortMalloc+0x1a8>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c4e:	429a      	cmp	r2, r3
 8002c50:	d050      	beq.n	8002cf4 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8002c52:	6a3b      	ldr	r3, [r7, #32]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	2208      	movs	r2, #8
 8002c58:	4413      	add	r3, r2
 8002c5a:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c5e:	681a      	ldr	r2, [r3, #0]
 8002c60:	6a3b      	ldr	r3, [r7, #32]
 8002c62:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8002c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c66:	685a      	ldr	r2, [r3, #4]
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	1ad2      	subs	r2, r2, r3
 8002c6c:	2308      	movs	r3, #8
 8002c6e:	005b      	lsls	r3, r3, #1
 8002c70:	429a      	cmp	r2, r3
 8002c72:	d91f      	bls.n	8002cb4 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8002c74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	4413      	add	r3, r2
 8002c7a:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002c7c:	69bb      	ldr	r3, [r7, #24]
 8002c7e:	f003 0307 	and.w	r3, r3, #7
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d00a      	beq.n	8002c9c <pvPortMalloc+0x120>
        __asm volatile
 8002c86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c8a:	f383 8811 	msr	BASEPRI, r3
 8002c8e:	f3bf 8f6f 	isb	sy
 8002c92:	f3bf 8f4f 	dsb	sy
 8002c96:	613b      	str	r3, [r7, #16]
    }
 8002c98:	bf00      	nop
 8002c9a:	e7fe      	b.n	8002c9a <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8002c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c9e:	685a      	ldr	r2, [r3, #4]
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	1ad2      	subs	r2, r2, r3
 8002ca4:	69bb      	ldr	r3, [r7, #24]
 8002ca6:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8002ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002caa:	687a      	ldr	r2, [r7, #4]
 8002cac:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8002cae:	69b8      	ldr	r0, [r7, #24]
 8002cb0:	f000 f908 	bl	8002ec4 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002cb4:	4b1d      	ldr	r3, [pc, #116]	; (8002d2c <pvPortMalloc+0x1b0>)
 8002cb6:	681a      	ldr	r2, [r3, #0]
 8002cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cba:	685b      	ldr	r3, [r3, #4]
 8002cbc:	1ad3      	subs	r3, r2, r3
 8002cbe:	4a1b      	ldr	r2, [pc, #108]	; (8002d2c <pvPortMalloc+0x1b0>)
 8002cc0:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002cc2:	4b1a      	ldr	r3, [pc, #104]	; (8002d2c <pvPortMalloc+0x1b0>)
 8002cc4:	681a      	ldr	r2, [r3, #0]
 8002cc6:	4b1b      	ldr	r3, [pc, #108]	; (8002d34 <pvPortMalloc+0x1b8>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	429a      	cmp	r2, r3
 8002ccc:	d203      	bcs.n	8002cd6 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8002cce:	4b17      	ldr	r3, [pc, #92]	; (8002d2c <pvPortMalloc+0x1b0>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4a18      	ldr	r2, [pc, #96]	; (8002d34 <pvPortMalloc+0x1b8>)
 8002cd4:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8002cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cd8:	685a      	ldr	r2, [r3, #4]
 8002cda:	4b13      	ldr	r3, [pc, #76]	; (8002d28 <pvPortMalloc+0x1ac>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	431a      	orrs	r2, r3
 8002ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ce2:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8002ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8002cea:	4b13      	ldr	r3, [pc, #76]	; (8002d38 <pvPortMalloc+0x1bc>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	3301      	adds	r3, #1
 8002cf0:	4a11      	ldr	r2, [pc, #68]	; (8002d38 <pvPortMalloc+0x1bc>)
 8002cf2:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8002cf4:	f7fe fbcc 	bl	8001490 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8002cf8:	69fb      	ldr	r3, [r7, #28]
 8002cfa:	f003 0307 	and.w	r3, r3, #7
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d00a      	beq.n	8002d18 <pvPortMalloc+0x19c>
        __asm volatile
 8002d02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d06:	f383 8811 	msr	BASEPRI, r3
 8002d0a:	f3bf 8f6f 	isb	sy
 8002d0e:	f3bf 8f4f 	dsb	sy
 8002d12:	60fb      	str	r3, [r7, #12]
    }
 8002d14:	bf00      	nop
 8002d16:	e7fe      	b.n	8002d16 <pvPortMalloc+0x19a>
    return pvReturn;
 8002d18:	69fb      	ldr	r3, [r7, #28]
}
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	3728      	adds	r7, #40	; 0x28
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bd80      	pop	{r7, pc}
 8002d22:	bf00      	nop
 8002d24:	2001f624 	.word	0x2001f624
 8002d28:	2001f638 	.word	0x2001f638
 8002d2c:	2001f628 	.word	0x2001f628
 8002d30:	2001f61c 	.word	0x2001f61c
 8002d34:	2001f62c 	.word	0x2001f62c
 8002d38:	2001f630 	.word	0x2001f630

08002d3c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b086      	sub	sp, #24
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d04d      	beq.n	8002dea <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8002d4e:	2308      	movs	r3, #8
 8002d50:	425b      	negs	r3, r3
 8002d52:	697a      	ldr	r2, [r7, #20]
 8002d54:	4413      	add	r3, r2
 8002d56:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8002d58:	697b      	ldr	r3, [r7, #20]
 8002d5a:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8002d5c:	693b      	ldr	r3, [r7, #16]
 8002d5e:	685a      	ldr	r2, [r3, #4]
 8002d60:	4b24      	ldr	r3, [pc, #144]	; (8002df4 <vPortFree+0xb8>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4013      	ands	r3, r2
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d10a      	bne.n	8002d80 <vPortFree+0x44>
        __asm volatile
 8002d6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d6e:	f383 8811 	msr	BASEPRI, r3
 8002d72:	f3bf 8f6f 	isb	sy
 8002d76:	f3bf 8f4f 	dsb	sy
 8002d7a:	60fb      	str	r3, [r7, #12]
    }
 8002d7c:	bf00      	nop
 8002d7e:	e7fe      	b.n	8002d7e <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8002d80:	693b      	ldr	r3, [r7, #16]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d00a      	beq.n	8002d9e <vPortFree+0x62>
        __asm volatile
 8002d88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d8c:	f383 8811 	msr	BASEPRI, r3
 8002d90:	f3bf 8f6f 	isb	sy
 8002d94:	f3bf 8f4f 	dsb	sy
 8002d98:	60bb      	str	r3, [r7, #8]
    }
 8002d9a:	bf00      	nop
 8002d9c:	e7fe      	b.n	8002d9c <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8002d9e:	693b      	ldr	r3, [r7, #16]
 8002da0:	685a      	ldr	r2, [r3, #4]
 8002da2:	4b14      	ldr	r3, [pc, #80]	; (8002df4 <vPortFree+0xb8>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4013      	ands	r3, r2
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d01e      	beq.n	8002dea <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8002dac:	693b      	ldr	r3, [r7, #16]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d11a      	bne.n	8002dea <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8002db4:	693b      	ldr	r3, [r7, #16]
 8002db6:	685a      	ldr	r2, [r3, #4]
 8002db8:	4b0e      	ldr	r3, [pc, #56]	; (8002df4 <vPortFree+0xb8>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	43db      	mvns	r3, r3
 8002dbe:	401a      	ands	r2, r3
 8002dc0:	693b      	ldr	r3, [r7, #16]
 8002dc2:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8002dc4:	f7fe fb56 	bl	8001474 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8002dc8:	693b      	ldr	r3, [r7, #16]
 8002dca:	685a      	ldr	r2, [r3, #4]
 8002dcc:	4b0a      	ldr	r3, [pc, #40]	; (8002df8 <vPortFree+0xbc>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4413      	add	r3, r2
 8002dd2:	4a09      	ldr	r2, [pc, #36]	; (8002df8 <vPortFree+0xbc>)
 8002dd4:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8002dd6:	6938      	ldr	r0, [r7, #16]
 8002dd8:	f000 f874 	bl	8002ec4 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8002ddc:	4b07      	ldr	r3, [pc, #28]	; (8002dfc <vPortFree+0xc0>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	3301      	adds	r3, #1
 8002de2:	4a06      	ldr	r2, [pc, #24]	; (8002dfc <vPortFree+0xc0>)
 8002de4:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8002de6:	f7fe fb53 	bl	8001490 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8002dea:	bf00      	nop
 8002dec:	3718      	adds	r7, #24
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bd80      	pop	{r7, pc}
 8002df2:	bf00      	nop
 8002df4:	2001f638 	.word	0x2001f638
 8002df8:	2001f628 	.word	0x2001f628
 8002dfc:	2001f634 	.word	0x2001f634

08002e00 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8002e00:	b480      	push	{r7}
 8002e02:	b085      	sub	sp, #20
 8002e04:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8002e06:	f44f 33fa 	mov.w	r3, #128000	; 0x1f400
 8002e0a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8002e0c:	4b27      	ldr	r3, [pc, #156]	; (8002eac <prvHeapInit+0xac>)
 8002e0e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	f003 0307 	and.w	r3, r3, #7
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d00c      	beq.n	8002e34 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	3307      	adds	r3, #7
 8002e1e:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	f023 0307 	bic.w	r3, r3, #7
 8002e26:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8002e28:	68ba      	ldr	r2, [r7, #8]
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	1ad3      	subs	r3, r2, r3
 8002e2e:	4a1f      	ldr	r2, [pc, #124]	; (8002eac <prvHeapInit+0xac>)
 8002e30:	4413      	add	r3, r2
 8002e32:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8002e38:	4a1d      	ldr	r2, [pc, #116]	; (8002eb0 <prvHeapInit+0xb0>)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8002e3e:	4b1c      	ldr	r3, [pc, #112]	; (8002eb0 <prvHeapInit+0xb0>)
 8002e40:	2200      	movs	r2, #0
 8002e42:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	68ba      	ldr	r2, [r7, #8]
 8002e48:	4413      	add	r3, r2
 8002e4a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8002e4c:	2208      	movs	r2, #8
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	1a9b      	subs	r3, r3, r2
 8002e52:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	f023 0307 	bic.w	r3, r3, #7
 8002e5a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	4a15      	ldr	r2, [pc, #84]	; (8002eb4 <prvHeapInit+0xb4>)
 8002e60:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8002e62:	4b14      	ldr	r3, [pc, #80]	; (8002eb4 <prvHeapInit+0xb4>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	2200      	movs	r2, #0
 8002e68:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8002e6a:	4b12      	ldr	r3, [pc, #72]	; (8002eb4 <prvHeapInit+0xb4>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	2200      	movs	r2, #0
 8002e70:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	68fa      	ldr	r2, [r7, #12]
 8002e7a:	1ad2      	subs	r2, r2, r3
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8002e80:	4b0c      	ldr	r3, [pc, #48]	; (8002eb4 <prvHeapInit+0xb4>)
 8002e82:	681a      	ldr	r2, [r3, #0]
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	685b      	ldr	r3, [r3, #4]
 8002e8c:	4a0a      	ldr	r2, [pc, #40]	; (8002eb8 <prvHeapInit+0xb8>)
 8002e8e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	4a09      	ldr	r2, [pc, #36]	; (8002ebc <prvHeapInit+0xbc>)
 8002e96:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8002e98:	4b09      	ldr	r3, [pc, #36]	; (8002ec0 <prvHeapInit+0xc0>)
 8002e9a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002e9e:	601a      	str	r2, [r3, #0]
}
 8002ea0:	bf00      	nop
 8002ea2:	3714      	adds	r7, #20
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eaa:	4770      	bx	lr
 8002eac:	2000021c 	.word	0x2000021c
 8002eb0:	2001f61c 	.word	0x2001f61c
 8002eb4:	2001f624 	.word	0x2001f624
 8002eb8:	2001f62c 	.word	0x2001f62c
 8002ebc:	2001f628 	.word	0x2001f628
 8002ec0:	2001f638 	.word	0x2001f638

08002ec4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	b085      	sub	sp, #20
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8002ecc:	4b28      	ldr	r3, [pc, #160]	; (8002f70 <prvInsertBlockIntoFreeList+0xac>)
 8002ece:	60fb      	str	r3, [r7, #12]
 8002ed0:	e002      	b.n	8002ed8 <prvInsertBlockIntoFreeList+0x14>
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	60fb      	str	r3, [r7, #12]
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	687a      	ldr	r2, [r7, #4]
 8002ede:	429a      	cmp	r2, r3
 8002ee0:	d8f7      	bhi.n	8002ed2 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	68ba      	ldr	r2, [r7, #8]
 8002eec:	4413      	add	r3, r2
 8002eee:	687a      	ldr	r2, [r7, #4]
 8002ef0:	429a      	cmp	r2, r3
 8002ef2:	d108      	bne.n	8002f06 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	685a      	ldr	r2, [r3, #4]
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	441a      	add	r2, r3
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	68ba      	ldr	r2, [r7, #8]
 8002f10:	441a      	add	r2, r3
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	429a      	cmp	r2, r3
 8002f18:	d118      	bne.n	8002f4c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681a      	ldr	r2, [r3, #0]
 8002f1e:	4b15      	ldr	r3, [pc, #84]	; (8002f74 <prvInsertBlockIntoFreeList+0xb0>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	429a      	cmp	r2, r3
 8002f24:	d00d      	beq.n	8002f42 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	685a      	ldr	r2, [r3, #4]
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	441a      	add	r2, r3
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	681a      	ldr	r2, [r3, #0]
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	601a      	str	r2, [r3, #0]
 8002f40:	e008      	b.n	8002f54 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8002f42:	4b0c      	ldr	r3, [pc, #48]	; (8002f74 <prvInsertBlockIntoFreeList+0xb0>)
 8002f44:	681a      	ldr	r2, [r3, #0]
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	601a      	str	r2, [r3, #0]
 8002f4a:	e003      	b.n	8002f54 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	681a      	ldr	r2, [r3, #0]
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8002f54:	68fa      	ldr	r2, [r7, #12]
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	429a      	cmp	r2, r3
 8002f5a:	d002      	beq.n	8002f62 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	687a      	ldr	r2, [r7, #4]
 8002f60:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002f62:	bf00      	nop
 8002f64:	3714      	adds	r7, #20
 8002f66:	46bd      	mov	sp, r7
 8002f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6c:	4770      	bx	lr
 8002f6e:	bf00      	nop
 8002f70:	2001f61c 	.word	0x2001f61c
 8002f74:	2001f624 	.word	0x2001f624

08002f78 <HAL_GPIO_EXTI_Callback>:
volatile uint8_t receivedDelay = 0;
volatile uint8_t receivedBlinkCount = 0;
TaskHandle_t taskHandle;

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b082      	sub	sp, #8
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	4603      	mov	r3, r0
 8002f80:	80fb      	strh	r3, [r7, #6]
	printf("button pressed\n");
 8002f82:	4817      	ldr	r0, [pc, #92]	; (8002fe0 <HAL_GPIO_EXTI_Callback+0x68>)
 8002f84:	f003 f8a4 	bl	80060d0 <puts>
	if(GPIO_Pin == USER_Btn_Pin)
 8002f88:	88fb      	ldrh	r3, [r7, #6]
 8002f8a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f8e:	d123      	bne.n	8002fd8 <HAL_GPIO_EXTI_Callback+0x60>
	{
		TxData[0]=250;
 8002f90:	4b14      	ldr	r3, [pc, #80]	; (8002fe4 <HAL_GPIO_EXTI_Callback+0x6c>)
 8002f92:	22fa      	movs	r2, #250	; 0xfa
 8002f94:	701a      	strb	r2, [r3, #0]
		TxData[1]=10;
 8002f96:	4b13      	ldr	r3, [pc, #76]	; (8002fe4 <HAL_GPIO_EXTI_Callback+0x6c>)
 8002f98:	220a      	movs	r2, #10
 8002f9a:	705a      	strb	r2, [r3, #1]

		if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK)
 8002f9c:	4b12      	ldr	r3, [pc, #72]	; (8002fe8 <HAL_GPIO_EXTI_Callback+0x70>)
 8002f9e:	4a11      	ldr	r2, [pc, #68]	; (8002fe4 <HAL_GPIO_EXTI_Callback+0x6c>)
 8002fa0:	4912      	ldr	r1, [pc, #72]	; (8002fec <HAL_GPIO_EXTI_Callback+0x74>)
 8002fa2:	4813      	ldr	r0, [pc, #76]	; (8002ff0 <HAL_GPIO_EXTI_Callback+0x78>)
 8002fa4:	f000 ffae 	bl	8003f04 <HAL_CAN_AddTxMessage>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d004      	beq.n	8002fb8 <HAL_GPIO_EXTI_Callback+0x40>
		{
			printf("msg NOT sent \n into the error_handler\n");
 8002fae:	4811      	ldr	r0, [pc, #68]	; (8002ff4 <HAL_GPIO_EXTI_Callback+0x7c>)
 8002fb0:	f003 f88e 	bl	80060d0 <puts>
		    Error_Handler();
 8002fb4:	f000 fb00 	bl	80035b8 <Error_Handler>
		}
		  HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8002fb8:	2101      	movs	r1, #1
 8002fba:	480f      	ldr	r0, [pc, #60]	; (8002ff8 <HAL_GPIO_EXTI_Callback+0x80>)
 8002fbc:	f001 fe8b 	bl	8004cd6 <HAL_GPIO_TogglePin>
		  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8002fc0:	2180      	movs	r1, #128	; 0x80
 8002fc2:	480d      	ldr	r0, [pc, #52]	; (8002ff8 <HAL_GPIO_EXTI_Callback+0x80>)
 8002fc4:	f001 fe87 	bl	8004cd6 <HAL_GPIO_TogglePin>
		  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8002fc8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002fcc:	480a      	ldr	r0, [pc, #40]	; (8002ff8 <HAL_GPIO_EXTI_Callback+0x80>)
 8002fce:	f001 fe82 	bl	8004cd6 <HAL_GPIO_TogglePin>
		printf("msg sent\n");
 8002fd2:	480a      	ldr	r0, [pc, #40]	; (8002ffc <HAL_GPIO_EXTI_Callback+0x84>)
 8002fd4:	f003 f87c 	bl	80060d0 <puts>
	}
}
 8002fd8:	bf00      	nop
 8002fda:	3708      	adds	r7, #8
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	bd80      	pop	{r7, pc}
 8002fe0:	08006ffc 	.word	0x08006ffc
 8002fe4:	2001f698 	.word	0x2001f698
 8002fe8:	2001f6a8 	.word	0x2001f6a8
 8002fec:	2001f664 	.word	0x2001f664
 8002ff0:	2001f63c 	.word	0x2001f63c
 8002ff4:	0800700c 	.word	0x0800700c
 8002ff8:	40020400 	.word	0x40020400
 8002ffc:	08007034 	.word	0x08007034

08003000 <task1_handler>:


static void task1_handler(void* parameters)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b082      	sub	sp, #8
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
    while (1)
    {
        if (HAL_GPIO_ReadPin(USER_Btn_GPIO_Port, USER_Btn_Pin) != GPIO_PIN_RESET)
 8003008:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800300c:	480a      	ldr	r0, [pc, #40]	; (8003038 <task1_handler+0x38>)
 800300e:	f001 fe31 	bl	8004c74 <HAL_GPIO_ReadPin>
 8003012:	4603      	mov	r3, r0
 8003014:	2b00      	cmp	r3, #0
 8003016:	d003      	beq.n	8003020 <task1_handler+0x20>
        {
            HAL_GPIO_EXTI_Callback(USER_Btn_Pin);
 8003018:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800301c:	f7ff ffac 	bl	8002f78 <HAL_GPIO_EXTI_Callback>
        }
        vTaskDelay(pdMS_TO_TICKS(100)); // Delay the task for 100 milliseconds
 8003020:	2064      	movs	r0, #100	; 0x64
 8003022:	f7fe f9a1 	bl	8001368 <vTaskDelay>
    	taskYIELD();
 8003026:	4b05      	ldr	r3, [pc, #20]	; (800303c <task1_handler+0x3c>)
 8003028:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800302c:	601a      	str	r2, [r3, #0]
 800302e:	f3bf 8f4f 	dsb	sy
 8003032:	f3bf 8f6f 	isb	sy
        if (HAL_GPIO_ReadPin(USER_Btn_GPIO_Port, USER_Btn_Pin) != GPIO_PIN_RESET)
 8003036:	e7e7      	b.n	8003008 <task1_handler+0x8>
 8003038:	40020800 	.word	0x40020800
 800303c:	e000ed04 	.word	0xe000ed04

08003040 <HAL_CAN_RxFifo0MsgPendingCallback>:
    }
}


void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b086      	sub	sp, #24
 8003044:	af02      	add	r7, sp, #8
 8003046:	6078      	str	r0, [r7, #4]

    HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, RxData);
 8003048:	4b17      	ldr	r3, [pc, #92]	; (80030a8 <HAL_CAN_RxFifo0MsgPendingCallback+0x68>)
 800304a:	4a18      	ldr	r2, [pc, #96]	; (80030ac <HAL_CAN_RxFifo0MsgPendingCallback+0x6c>)
 800304c:	2100      	movs	r1, #0
 800304e:	4818      	ldr	r0, [pc, #96]	; (80030b0 <HAL_CAN_RxFifo0MsgPendingCallback+0x70>)
 8003050:	f001 f833 	bl	80040ba <HAL_CAN_GetRxMessage>

    if (RxHeader.DLC == 2)
 8003054:	4b15      	ldr	r3, [pc, #84]	; (80030ac <HAL_CAN_RxFifo0MsgPendingCallback+0x6c>)
 8003056:	691b      	ldr	r3, [r3, #16]
 8003058:	2b02      	cmp	r3, #2
 800305a:	d120      	bne.n	800309e <HAL_CAN_RxFifo0MsgPendingCallback+0x5e>
    {
    	receivedDelay = RxData[0];
 800305c:	4b12      	ldr	r3, [pc, #72]	; (80030a8 <HAL_CAN_RxFifo0MsgPendingCallback+0x68>)
 800305e:	781a      	ldrb	r2, [r3, #0]
 8003060:	4b14      	ldr	r3, [pc, #80]	; (80030b4 <HAL_CAN_RxFifo0MsgPendingCallback+0x74>)
 8003062:	701a      	strb	r2, [r3, #0]
    	receivedBlinkCount = RxData[1];
 8003064:	4b10      	ldr	r3, [pc, #64]	; (80030a8 <HAL_CAN_RxFifo0MsgPendingCallback+0x68>)
 8003066:	785a      	ldrb	r2, [r3, #1]
 8003068:	4b13      	ldr	r3, [pc, #76]	; (80030b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x78>)
 800306a:	701a      	strb	r2, [r3, #0]
    	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800306c:	2300      	movs	r3, #0
 800306e:	60fb      	str	r3, [r7, #12]
    	xTaskNotifyFromISR(taskHandle, 0, eNoAction, &xHigherPriorityTaskWoken);
 8003070:	4b12      	ldr	r3, [pc, #72]	; (80030bc <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>)
 8003072:	6818      	ldr	r0, [r3, #0]
 8003074:	f107 030c 	add.w	r3, r7, #12
 8003078:	9301      	str	r3, [sp, #4]
 800307a:	2300      	movs	r3, #0
 800307c:	9300      	str	r3, [sp, #0]
 800307e:	2300      	movs	r3, #0
 8003080:	2200      	movs	r2, #0
 8003082:	2100      	movs	r1, #0
 8003084:	f7fe feb0 	bl	8001de8 <xTaskGenericNotifyFromISR>
    	portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	2b00      	cmp	r3, #0
 800308c:	d007      	beq.n	800309e <HAL_CAN_RxFifo0MsgPendingCallback+0x5e>
 800308e:	4b0c      	ldr	r3, [pc, #48]	; (80030c0 <HAL_CAN_RxFifo0MsgPendingCallback+0x80>)
 8003090:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003094:	601a      	str	r2, [r3, #0]
 8003096:	f3bf 8f4f 	dsb	sy
 800309a:	f3bf 8f6f 	isb	sy

    }
}
 800309e:	bf00      	nop
 80030a0:	3710      	adds	r7, #16
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bd80      	pop	{r7, pc}
 80030a6:	bf00      	nop
 80030a8:	2001f6a0 	.word	0x2001f6a0
 80030ac:	2001f67c 	.word	0x2001f67c
 80030b0:	2001f63c 	.word	0x2001f63c
 80030b4:	2001f6ac 	.word	0x2001f6ac
 80030b8:	2001f6ad 	.word	0x2001f6ad
 80030bc:	2001f6b0 	.word	0x2001f6b0
 80030c0:	e000ed04 	.word	0xe000ed04

080030c4 <LED_Task>:

static void LED_Task(void* parameters)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b084      	sub	sp, #16
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
    while (1)
    {
        ulTaskNotifyTake(pdTRUE, portMAX_DELAY);  // Wait for a notification
 80030cc:	f04f 32ff 	mov.w	r2, #4294967295
 80030d0:	2101      	movs	r1, #1
 80030d2:	2000      	movs	r0, #0
 80030d4:	f7fe fe20 	bl	8001d18 <ulTaskGenericNotifyTake>

        // Toggle LEDs based on receivedBlinkCount and receivedDelay
        for (int i = 0; i < receivedBlinkCount; i++)
 80030d8:	2300      	movs	r3, #0
 80030da:	60fb      	str	r3, [r7, #12]
 80030dc:	e029      	b.n	8003132 <LED_Task+0x6e>
        {
            printf("Rxdata %d, %d\n", receivedDelay, receivedBlinkCount);
 80030de:	4b19      	ldr	r3, [pc, #100]	; (8003144 <LED_Task+0x80>)
 80030e0:	781b      	ldrb	r3, [r3, #0]
 80030e2:	b2db      	uxtb	r3, r3
 80030e4:	4619      	mov	r1, r3
 80030e6:	4b18      	ldr	r3, [pc, #96]	; (8003148 <LED_Task+0x84>)
 80030e8:	781b      	ldrb	r3, [r3, #0]
 80030ea:	b2db      	uxtb	r3, r3
 80030ec:	461a      	mov	r2, r3
 80030ee:	4817      	ldr	r0, [pc, #92]	; (800314c <LED_Task+0x88>)
 80030f0:	f002 ff68 	bl	8005fc4 <iprintf>
            HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 80030f4:	2101      	movs	r1, #1
 80030f6:	4816      	ldr	r0, [pc, #88]	; (8003150 <LED_Task+0x8c>)
 80030f8:	f001 fded 	bl	8004cd6 <HAL_GPIO_TogglePin>
            HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80030fc:	2180      	movs	r1, #128	; 0x80
 80030fe:	4814      	ldr	r0, [pc, #80]	; (8003150 <LED_Task+0x8c>)
 8003100:	f001 fde9 	bl	8004cd6 <HAL_GPIO_TogglePin>
            HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8003104:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003108:	4811      	ldr	r0, [pc, #68]	; (8003150 <LED_Task+0x8c>)
 800310a:	f001 fde4 	bl	8004cd6 <HAL_GPIO_TogglePin>
            vTaskDelay(pdMS_TO_TICKS(receivedDelay));
 800310e:	4b0d      	ldr	r3, [pc, #52]	; (8003144 <LED_Task+0x80>)
 8003110:	781b      	ldrb	r3, [r3, #0]
 8003112:	b2db      	uxtb	r3, r3
 8003114:	461a      	mov	r2, r3
 8003116:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800311a:	fb02 f303 	mul.w	r3, r2, r3
 800311e:	4a0d      	ldr	r2, [pc, #52]	; (8003154 <LED_Task+0x90>)
 8003120:	fba2 2303 	umull	r2, r3, r2, r3
 8003124:	099b      	lsrs	r3, r3, #6
 8003126:	4618      	mov	r0, r3
 8003128:	f7fe f91e 	bl	8001368 <vTaskDelay>
        for (int i = 0; i < receivedBlinkCount; i++)
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	3301      	adds	r3, #1
 8003130:	60fb      	str	r3, [r7, #12]
 8003132:	4b05      	ldr	r3, [pc, #20]	; (8003148 <LED_Task+0x84>)
 8003134:	781b      	ldrb	r3, [r3, #0]
 8003136:	b2db      	uxtb	r3, r3
 8003138:	461a      	mov	r2, r3
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	4293      	cmp	r3, r2
 800313e:	dbce      	blt.n	80030de <LED_Task+0x1a>
        ulTaskNotifyTake(pdTRUE, portMAX_DELAY);  // Wait for a notification
 8003140:	e7c4      	b.n	80030cc <LED_Task+0x8>
 8003142:	bf00      	nop
 8003144:	2001f6ac 	.word	0x2001f6ac
 8003148:	2001f6ad 	.word	0x2001f6ad
 800314c:	08007040 	.word	0x08007040
 8003150:	40020400 	.word	0x40020400
 8003154:	10624dd3 	.word	0x10624dd3

08003158 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b086      	sub	sp, #24
 800315c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800315e:	f000 fc6f 	bl	8003a40 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003162:	f000 f865 	bl	8003230 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003166:	f000 f92d 	bl	80033c4 <MX_GPIO_Init>
  MX_CAN1_Init();
 800316a:	f000 f8d3 	bl	8003314 <MX_CAN1_Init>
  /* USER CODE BEGIN 2 */
  if(HAL_CAN_Start(&hcan1) != HAL_OK)
 800316e:	4829      	ldr	r0, [pc, #164]	; (8003214 <main+0xbc>)
 8003170:	f000 fe84 	bl	8003e7c <HAL_CAN_Start>
 8003174:	4603      	mov	r3, r0
 8003176:	2b00      	cmp	r3, #0
 8003178:	d001      	beq.n	800317e <main+0x26>
   {
 	  Error_Handler();
 800317a:	f000 fa1d 	bl	80035b8 <Error_Handler>
   }
   if(HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 800317e:	2102      	movs	r1, #2
 8003180:	4824      	ldr	r0, [pc, #144]	; (8003214 <main+0xbc>)
 8003182:	f001 f8ac 	bl	80042de <HAL_CAN_ActivateNotification>
 8003186:	4603      	mov	r3, r0
 8003188:	2b00      	cmp	r3, #0
 800318a:	d001      	beq.n	8003190 <main+0x38>
   {
 	  Error_Handler();
 800318c:	f000 fa14 	bl	80035b8 <Error_Handler>
   }

   TxHeader.DLC = 2;
 8003190:	4b21      	ldr	r3, [pc, #132]	; (8003218 <main+0xc0>)
 8003192:	2202      	movs	r2, #2
 8003194:	611a      	str	r2, [r3, #16]
   TxHeader.IDE = CAN_ID_STD;
 8003196:	4b20      	ldr	r3, [pc, #128]	; (8003218 <main+0xc0>)
 8003198:	2200      	movs	r2, #0
 800319a:	609a      	str	r2, [r3, #8]
   TxHeader.RTR = CAN_RTR_DATA;
 800319c:	4b1e      	ldr	r3, [pc, #120]	; (8003218 <main+0xc0>)
 800319e:	2200      	movs	r2, #0
 80031a0:	60da      	str	r2, [r3, #12]
   TxHeader.StdId = 0x446;
 80031a2:	4b1d      	ldr	r3, [pc, #116]	; (8003218 <main+0xc0>)
 80031a4:	f240 4246 	movw	r2, #1094	; 0x446
 80031a8:	601a      	str	r2, [r3, #0]


   status = xTaskCreate(task1_handler, "Task-1", 200, NULL, 2, &task1_handle);
 80031aa:	463b      	mov	r3, r7
 80031ac:	9301      	str	r3, [sp, #4]
 80031ae:	2302      	movs	r3, #2
 80031b0:	9300      	str	r3, [sp, #0]
 80031b2:	2300      	movs	r3, #0
 80031b4:	22c8      	movs	r2, #200	; 0xc8
 80031b6:	4919      	ldr	r1, [pc, #100]	; (800321c <main+0xc4>)
 80031b8:	4819      	ldr	r0, [pc, #100]	; (8003220 <main+0xc8>)
 80031ba:	f7fd ff8f 	bl	80010dc <xTaskCreate>
 80031be:	60f8      	str	r0, [r7, #12]

   configASSERT(status == pdPASS);
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	2b01      	cmp	r3, #1
 80031c4:	d00a      	beq.n	80031dc <main+0x84>
        __asm volatile
 80031c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031ca:	f383 8811 	msr	BASEPRI, r3
 80031ce:	f3bf 8f6f 	isb	sy
 80031d2:	f3bf 8f4f 	dsb	sy
 80031d6:	60bb      	str	r3, [r7, #8]
    }
 80031d8:	bf00      	nop
 80031da:	e7fe      	b.n	80031da <main+0x82>

   status = xTaskCreate(LED_Task, "LED_Task", configMINIMAL_STACK_SIZE, NULL, 1, &taskHandle);
 80031dc:	4b11      	ldr	r3, [pc, #68]	; (8003224 <main+0xcc>)
 80031de:	9301      	str	r3, [sp, #4]
 80031e0:	2301      	movs	r3, #1
 80031e2:	9300      	str	r3, [sp, #0]
 80031e4:	2300      	movs	r3, #0
 80031e6:	2282      	movs	r2, #130	; 0x82
 80031e8:	490f      	ldr	r1, [pc, #60]	; (8003228 <main+0xd0>)
 80031ea:	4810      	ldr	r0, [pc, #64]	; (800322c <main+0xd4>)
 80031ec:	f7fd ff76 	bl	80010dc <xTaskCreate>
 80031f0:	60f8      	str	r0, [r7, #12]

   configASSERT(status == pdPASS);
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	2b01      	cmp	r3, #1
 80031f6:	d00a      	beq.n	800320e <main+0xb6>
        __asm volatile
 80031f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031fc:	f383 8811 	msr	BASEPRI, r3
 8003200:	f3bf 8f6f 	isb	sy
 8003204:	f3bf 8f4f 	dsb	sy
 8003208:	607b      	str	r3, [r7, #4]
    }
 800320a:	bf00      	nop
 800320c:	e7fe      	b.n	800320c <main+0xb4>



   vTaskStartScheduler();
 800320e:	f7fe f8df 	bl	80013d0 <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8003212:	e7fe      	b.n	8003212 <main+0xba>
 8003214:	2001f63c 	.word	0x2001f63c
 8003218:	2001f664 	.word	0x2001f664
 800321c:	08007050 	.word	0x08007050
 8003220:	08003001 	.word	0x08003001
 8003224:	2001f6b0 	.word	0x2001f6b0
 8003228:	08007058 	.word	0x08007058
 800322c:	080030c5 	.word	0x080030c5

08003230 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b094      	sub	sp, #80	; 0x50
 8003234:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003236:	f107 031c 	add.w	r3, r7, #28
 800323a:	2234      	movs	r2, #52	; 0x34
 800323c:	2100      	movs	r1, #0
 800323e:	4618      	mov	r0, r3
 8003240:	f002 feb8 	bl	8005fb4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003244:	f107 0308 	add.w	r3, r7, #8
 8003248:	2200      	movs	r2, #0
 800324a:	601a      	str	r2, [r3, #0]
 800324c:	605a      	str	r2, [r3, #4]
 800324e:	609a      	str	r2, [r3, #8]
 8003250:	60da      	str	r2, [r3, #12]
 8003252:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003254:	2300      	movs	r3, #0
 8003256:	607b      	str	r3, [r7, #4]
 8003258:	4b2c      	ldr	r3, [pc, #176]	; (800330c <SystemClock_Config+0xdc>)
 800325a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800325c:	4a2b      	ldr	r2, [pc, #172]	; (800330c <SystemClock_Config+0xdc>)
 800325e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003262:	6413      	str	r3, [r2, #64]	; 0x40
 8003264:	4b29      	ldr	r3, [pc, #164]	; (800330c <SystemClock_Config+0xdc>)
 8003266:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003268:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800326c:	607b      	str	r3, [r7, #4]
 800326e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003270:	2300      	movs	r3, #0
 8003272:	603b      	str	r3, [r7, #0]
 8003274:	4b26      	ldr	r3, [pc, #152]	; (8003310 <SystemClock_Config+0xe0>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4a25      	ldr	r2, [pc, #148]	; (8003310 <SystemClock_Config+0xe0>)
 800327a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800327e:	6013      	str	r3, [r2, #0]
 8003280:	4b23      	ldr	r3, [pc, #140]	; (8003310 <SystemClock_Config+0xe0>)
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003288:	603b      	str	r3, [r7, #0]
 800328a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800328c:	2301      	movs	r3, #1
 800328e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003290:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003294:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003296:	2302      	movs	r3, #2
 8003298:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800329a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800329e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80032a0:	2304      	movs	r3, #4
 80032a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 80032a4:	23b4      	movs	r3, #180	; 0xb4
 80032a6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80032a8:	2302      	movs	r3, #2
 80032aa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80032ac:	2302      	movs	r3, #2
 80032ae:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80032b0:	2302      	movs	r3, #2
 80032b2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80032b4:	f107 031c 	add.w	r3, r7, #28
 80032b8:	4618      	mov	r0, r3
 80032ba:	f002 f8f7 	bl	80054ac <HAL_RCC_OscConfig>
 80032be:	4603      	mov	r3, r0
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d001      	beq.n	80032c8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80032c4:	f000 f978 	bl	80035b8 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80032c8:	f001 fd38 	bl	8004d3c <HAL_PWREx_EnableOverDrive>
 80032cc:	4603      	mov	r3, r0
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d001      	beq.n	80032d6 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80032d2:	f000 f971 	bl	80035b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80032d6:	230f      	movs	r3, #15
 80032d8:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80032da:	2302      	movs	r3, #2
 80032dc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80032de:	2300      	movs	r3, #0
 80032e0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80032e2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80032e6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 80032e8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80032ec:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80032ee:	f107 0308 	add.w	r3, r7, #8
 80032f2:	2105      	movs	r1, #5
 80032f4:	4618      	mov	r0, r3
 80032f6:	f001 fd71 	bl	8004ddc <HAL_RCC_ClockConfig>
 80032fa:	4603      	mov	r3, r0
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d001      	beq.n	8003304 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8003300:	f000 f95a 	bl	80035b8 <Error_Handler>
  }
}
 8003304:	bf00      	nop
 8003306:	3750      	adds	r7, #80	; 0x50
 8003308:	46bd      	mov	sp, r7
 800330a:	bd80      	pop	{r7, pc}
 800330c:	40023800 	.word	0x40023800
 8003310:	40007000 	.word	0x40007000

08003314 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b08a      	sub	sp, #40	; 0x28
 8003318:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 800331a:	4b28      	ldr	r3, [pc, #160]	; (80033bc <MX_CAN1_Init+0xa8>)
 800331c:	4a28      	ldr	r2, [pc, #160]	; (80033c0 <MX_CAN1_Init+0xac>)
 800331e:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 5;
 8003320:	4b26      	ldr	r3, [pc, #152]	; (80033bc <MX_CAN1_Init+0xa8>)
 8003322:	2205      	movs	r2, #5
 8003324:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8003326:	4b25      	ldr	r3, [pc, #148]	; (80033bc <MX_CAN1_Init+0xa8>)
 8003328:	2200      	movs	r2, #0
 800332a:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800332c:	4b23      	ldr	r3, [pc, #140]	; (80033bc <MX_CAN1_Init+0xa8>)
 800332e:	2200      	movs	r2, #0
 8003330:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_15TQ;
 8003332:	4b22      	ldr	r3, [pc, #136]	; (80033bc <MX_CAN1_Init+0xa8>)
 8003334:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8003338:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 800333a:	4b20      	ldr	r3, [pc, #128]	; (80033bc <MX_CAN1_Init+0xa8>)
 800333c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003340:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8003342:	4b1e      	ldr	r3, [pc, #120]	; (80033bc <MX_CAN1_Init+0xa8>)
 8003344:	2200      	movs	r2, #0
 8003346:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8003348:	4b1c      	ldr	r3, [pc, #112]	; (80033bc <MX_CAN1_Init+0xa8>)
 800334a:	2200      	movs	r2, #0
 800334c:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800334e:	4b1b      	ldr	r3, [pc, #108]	; (80033bc <MX_CAN1_Init+0xa8>)
 8003350:	2200      	movs	r2, #0
 8003352:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8003354:	4b19      	ldr	r3, [pc, #100]	; (80033bc <MX_CAN1_Init+0xa8>)
 8003356:	2200      	movs	r2, #0
 8003358:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800335a:	4b18      	ldr	r3, [pc, #96]	; (80033bc <MX_CAN1_Init+0xa8>)
 800335c:	2200      	movs	r2, #0
 800335e:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8003360:	4b16      	ldr	r3, [pc, #88]	; (80033bc <MX_CAN1_Init+0xa8>)
 8003362:	2200      	movs	r2, #0
 8003364:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8003366:	4815      	ldr	r0, [pc, #84]	; (80033bc <MX_CAN1_Init+0xa8>)
 8003368:	f000 fbac 	bl	8003ac4 <HAL_CAN_Init>
 800336c:	4603      	mov	r3, r0
 800336e:	2b00      	cmp	r3, #0
 8003370:	d001      	beq.n	8003376 <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 8003372:	f000 f921 	bl	80035b8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  CAN_FilterTypeDef filter;

    filter.FilterActivation = CAN_FILTER_ENABLE;
 8003376:	2301      	movs	r3, #1
 8003378:	623b      	str	r3, [r7, #32]
    filter.FilterBank = 0;//18;
 800337a:	2300      	movs	r3, #0
 800337c:	617b      	str	r3, [r7, #20]
    filter.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 800337e:	2300      	movs	r3, #0
 8003380:	613b      	str	r3, [r7, #16]
    filter.FilterIdHigh = 0x0000;//0x103<<5;
 8003382:	2300      	movs	r3, #0
 8003384:	603b      	str	r3, [r7, #0]
    filter.FilterIdLow = 0x0000;
 8003386:	2300      	movs	r3, #0
 8003388:	607b      	str	r3, [r7, #4]
    filter.FilterMaskIdHigh = 0x0000;//0x103<<5;
 800338a:	2300      	movs	r3, #0
 800338c:	60bb      	str	r3, [r7, #8]
    filter.FilterMaskIdLow = 0x0000;
 800338e:	2300      	movs	r3, #0
 8003390:	60fb      	str	r3, [r7, #12]
    filter.FilterMode = CAN_FILTERMODE_IDMASK;
 8003392:	2300      	movs	r3, #0
 8003394:	61bb      	str	r3, [r7, #24]
    filter.FilterScale = CAN_FILTERSCALE_32BIT;
 8003396:	2301      	movs	r3, #1
 8003398:	61fb      	str	r3, [r7, #28]
    filter.SlaveStartFilterBank = 0;//20;
 800339a:	2300      	movs	r3, #0
 800339c:	627b      	str	r3, [r7, #36]	; 0x24

    if(HAL_CAN_ConfigFilter(&hcan1, &filter) != HAL_OK)
 800339e:	463b      	mov	r3, r7
 80033a0:	4619      	mov	r1, r3
 80033a2:	4806      	ldr	r0, [pc, #24]	; (80033bc <MX_CAN1_Init+0xa8>)
 80033a4:	f000 fc8a 	bl	8003cbc <HAL_CAN_ConfigFilter>
 80033a8:	4603      	mov	r3, r0
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d001      	beq.n	80033b2 <MX_CAN1_Init+0x9e>
    {
  	  Error_Handler();
 80033ae:	f000 f903 	bl	80035b8 <Error_Handler>
    }
  /* USER CODE END CAN1_Init 2 */

}
 80033b2:	bf00      	nop
 80033b4:	3728      	adds	r7, #40	; 0x28
 80033b6:	46bd      	mov	sp, r7
 80033b8:	bd80      	pop	{r7, pc}
 80033ba:	bf00      	nop
 80033bc:	2001f63c 	.word	0x2001f63c
 80033c0:	40006400 	.word	0x40006400

080033c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b08c      	sub	sp, #48	; 0x30
 80033c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033ca:	f107 031c 	add.w	r3, r7, #28
 80033ce:	2200      	movs	r2, #0
 80033d0:	601a      	str	r2, [r3, #0]
 80033d2:	605a      	str	r2, [r3, #4]
 80033d4:	609a      	str	r2, [r3, #8]
 80033d6:	60da      	str	r2, [r3, #12]
 80033d8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80033da:	2300      	movs	r3, #0
 80033dc:	61bb      	str	r3, [r7, #24]
 80033de:	4b67      	ldr	r3, [pc, #412]	; (800357c <MX_GPIO_Init+0x1b8>)
 80033e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033e2:	4a66      	ldr	r2, [pc, #408]	; (800357c <MX_GPIO_Init+0x1b8>)
 80033e4:	f043 0304 	orr.w	r3, r3, #4
 80033e8:	6313      	str	r3, [r2, #48]	; 0x30
 80033ea:	4b64      	ldr	r3, [pc, #400]	; (800357c <MX_GPIO_Init+0x1b8>)
 80033ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ee:	f003 0304 	and.w	r3, r3, #4
 80033f2:	61bb      	str	r3, [r7, #24]
 80033f4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80033f6:	2300      	movs	r3, #0
 80033f8:	617b      	str	r3, [r7, #20]
 80033fa:	4b60      	ldr	r3, [pc, #384]	; (800357c <MX_GPIO_Init+0x1b8>)
 80033fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033fe:	4a5f      	ldr	r2, [pc, #380]	; (800357c <MX_GPIO_Init+0x1b8>)
 8003400:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003404:	6313      	str	r3, [r2, #48]	; 0x30
 8003406:	4b5d      	ldr	r3, [pc, #372]	; (800357c <MX_GPIO_Init+0x1b8>)
 8003408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800340a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800340e:	617b      	str	r3, [r7, #20]
 8003410:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003412:	2300      	movs	r3, #0
 8003414:	613b      	str	r3, [r7, #16]
 8003416:	4b59      	ldr	r3, [pc, #356]	; (800357c <MX_GPIO_Init+0x1b8>)
 8003418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800341a:	4a58      	ldr	r2, [pc, #352]	; (800357c <MX_GPIO_Init+0x1b8>)
 800341c:	f043 0302 	orr.w	r3, r3, #2
 8003420:	6313      	str	r3, [r2, #48]	; 0x30
 8003422:	4b56      	ldr	r3, [pc, #344]	; (800357c <MX_GPIO_Init+0x1b8>)
 8003424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003426:	f003 0302 	and.w	r3, r3, #2
 800342a:	613b      	str	r3, [r7, #16]
 800342c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800342e:	2300      	movs	r3, #0
 8003430:	60fb      	str	r3, [r7, #12]
 8003432:	4b52      	ldr	r3, [pc, #328]	; (800357c <MX_GPIO_Init+0x1b8>)
 8003434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003436:	4a51      	ldr	r2, [pc, #324]	; (800357c <MX_GPIO_Init+0x1b8>)
 8003438:	f043 0308 	orr.w	r3, r3, #8
 800343c:	6313      	str	r3, [r2, #48]	; 0x30
 800343e:	4b4f      	ldr	r3, [pc, #316]	; (800357c <MX_GPIO_Init+0x1b8>)
 8003440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003442:	f003 0308 	and.w	r3, r3, #8
 8003446:	60fb      	str	r3, [r7, #12]
 8003448:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800344a:	2300      	movs	r3, #0
 800344c:	60bb      	str	r3, [r7, #8]
 800344e:	4b4b      	ldr	r3, [pc, #300]	; (800357c <MX_GPIO_Init+0x1b8>)
 8003450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003452:	4a4a      	ldr	r2, [pc, #296]	; (800357c <MX_GPIO_Init+0x1b8>)
 8003454:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003458:	6313      	str	r3, [r2, #48]	; 0x30
 800345a:	4b48      	ldr	r3, [pc, #288]	; (800357c <MX_GPIO_Init+0x1b8>)
 800345c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800345e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003462:	60bb      	str	r3, [r7, #8]
 8003464:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003466:	2300      	movs	r3, #0
 8003468:	607b      	str	r3, [r7, #4]
 800346a:	4b44      	ldr	r3, [pc, #272]	; (800357c <MX_GPIO_Init+0x1b8>)
 800346c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800346e:	4a43      	ldr	r2, [pc, #268]	; (800357c <MX_GPIO_Init+0x1b8>)
 8003470:	f043 0301 	orr.w	r3, r3, #1
 8003474:	6313      	str	r3, [r2, #48]	; 0x30
 8003476:	4b41      	ldr	r3, [pc, #260]	; (800357c <MX_GPIO_Init+0x1b8>)
 8003478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800347a:	f003 0301 	and.w	r3, r3, #1
 800347e:	607b      	str	r3, [r7, #4]
 8003480:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8003482:	2200      	movs	r2, #0
 8003484:	f244 0181 	movw	r1, #16513	; 0x4081
 8003488:	483d      	ldr	r0, [pc, #244]	; (8003580 <MX_GPIO_Init+0x1bc>)
 800348a:	f001 fc0b 	bl	8004ca4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800348e:	2200      	movs	r2, #0
 8003490:	2140      	movs	r1, #64	; 0x40
 8003492:	483c      	ldr	r0, [pc, #240]	; (8003584 <MX_GPIO_Init+0x1c0>)
 8003494:	f001 fc06 	bl	8004ca4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8003498:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800349c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800349e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80034a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034a4:	2300      	movs	r3, #0
 80034a6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80034a8:	f107 031c 	add.w	r3, r7, #28
 80034ac:	4619      	mov	r1, r3
 80034ae:	4836      	ldr	r0, [pc, #216]	; (8003588 <MX_GPIO_Init+0x1c4>)
 80034b0:	f001 fa4c 	bl	800494c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80034b4:	f244 0381 	movw	r3, #16513	; 0x4081
 80034b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80034ba:	2301      	movs	r3, #1
 80034bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034be:	2300      	movs	r3, #0
 80034c0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034c2:	2300      	movs	r3, #0
 80034c4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034c6:	f107 031c 	add.w	r3, r7, #28
 80034ca:	4619      	mov	r1, r3
 80034cc:	482c      	ldr	r0, [pc, #176]	; (8003580 <MX_GPIO_Init+0x1bc>)
 80034ce:	f001 fa3d 	bl	800494c <HAL_GPIO_Init>

  /*Configure GPIO pins : STLK_RX_Pin STLK_TX_Pin */
  GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80034d2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80034d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034d8:	2302      	movs	r3, #2
 80034da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034dc:	2300      	movs	r3, #0
 80034de:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034e0:	2303      	movs	r3, #3
 80034e2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80034e4:	2307      	movs	r3, #7
 80034e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80034e8:	f107 031c 	add.w	r3, r7, #28
 80034ec:	4619      	mov	r1, r3
 80034ee:	4827      	ldr	r0, [pc, #156]	; (800358c <MX_GPIO_Init+0x1c8>)
 80034f0:	f001 fa2c 	bl	800494c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80034f4:	2340      	movs	r3, #64	; 0x40
 80034f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80034f8:	2301      	movs	r3, #1
 80034fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034fc:	2300      	movs	r3, #0
 80034fe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003500:	2300      	movs	r3, #0
 8003502:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8003504:	f107 031c 	add.w	r3, r7, #28
 8003508:	4619      	mov	r1, r3
 800350a:	481e      	ldr	r0, [pc, #120]	; (8003584 <MX_GPIO_Init+0x1c0>)
 800350c:	f001 fa1e 	bl	800494c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8003510:	2380      	movs	r3, #128	; 0x80
 8003512:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003514:	2300      	movs	r3, #0
 8003516:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003518:	2300      	movs	r3, #0
 800351a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800351c:	f107 031c 	add.w	r3, r7, #28
 8003520:	4619      	mov	r1, r3
 8003522:	4818      	ldr	r0, [pc, #96]	; (8003584 <MX_GPIO_Init+0x1c0>)
 8003524:	f001 fa12 	bl	800494c <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8003528:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800352c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800352e:	2302      	movs	r3, #2
 8003530:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003532:	2300      	movs	r3, #0
 8003534:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003536:	2303      	movs	r3, #3
 8003538:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800353a:	230a      	movs	r3, #10
 800353c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800353e:	f107 031c 	add.w	r3, r7, #28
 8003542:	4619      	mov	r1, r3
 8003544:	4812      	ldr	r0, [pc, #72]	; (8003590 <MX_GPIO_Init+0x1cc>)
 8003546:	f001 fa01 	bl	800494c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800354a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800354e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003550:	2300      	movs	r3, #0
 8003552:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003554:	2300      	movs	r3, #0
 8003556:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8003558:	f107 031c 	add.w	r3, r7, #28
 800355c:	4619      	mov	r1, r3
 800355e:	480c      	ldr	r0, [pc, #48]	; (8003590 <MX_GPIO_Init+0x1cc>)
 8003560:	f001 f9f4 	bl	800494c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8003564:	2200      	movs	r2, #0
 8003566:	2100      	movs	r1, #0
 8003568:	2028      	movs	r0, #40	; 0x28
 800356a:	f001 f9c5 	bl	80048f8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800356e:	2028      	movs	r0, #40	; 0x28
 8003570:	f001 f9de 	bl	8004930 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003574:	bf00      	nop
 8003576:	3730      	adds	r7, #48	; 0x30
 8003578:	46bd      	mov	sp, r7
 800357a:	bd80      	pop	{r7, pc}
 800357c:	40023800 	.word	0x40023800
 8003580:	40020400 	.word	0x40020400
 8003584:	40021800 	.word	0x40021800
 8003588:	40020800 	.word	0x40020800
 800358c:	40020c00 	.word	0x40020c00
 8003590:	40020000 	.word	0x40020000

08003594 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b082      	sub	sp, #8
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4a04      	ldr	r2, [pc, #16]	; (80035b4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d101      	bne.n	80035aa <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80035a6:	f000 fa6d 	bl	8003a84 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80035aa:	bf00      	nop
 80035ac:	3708      	adds	r7, #8
 80035ae:	46bd      	mov	sp, r7
 80035b0:	bd80      	pop	{r7, pc}
 80035b2:	bf00      	nop
 80035b4:	40001000 	.word	0x40001000

080035b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80035b8:	b480      	push	{r7}
 80035ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80035bc:	b672      	cpsid	i
}
 80035be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80035c0:	e7fe      	b.n	80035c0 <Error_Handler+0x8>
	...

080035c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80035c4:	b480      	push	{r7}
 80035c6:	b083      	sub	sp, #12
 80035c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80035ca:	2300      	movs	r3, #0
 80035cc:	607b      	str	r3, [r7, #4]
 80035ce:	4b10      	ldr	r3, [pc, #64]	; (8003610 <HAL_MspInit+0x4c>)
 80035d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035d2:	4a0f      	ldr	r2, [pc, #60]	; (8003610 <HAL_MspInit+0x4c>)
 80035d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80035d8:	6453      	str	r3, [r2, #68]	; 0x44
 80035da:	4b0d      	ldr	r3, [pc, #52]	; (8003610 <HAL_MspInit+0x4c>)
 80035dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80035e2:	607b      	str	r3, [r7, #4]
 80035e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80035e6:	2300      	movs	r3, #0
 80035e8:	603b      	str	r3, [r7, #0]
 80035ea:	4b09      	ldr	r3, [pc, #36]	; (8003610 <HAL_MspInit+0x4c>)
 80035ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ee:	4a08      	ldr	r2, [pc, #32]	; (8003610 <HAL_MspInit+0x4c>)
 80035f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035f4:	6413      	str	r3, [r2, #64]	; 0x40
 80035f6:	4b06      	ldr	r3, [pc, #24]	; (8003610 <HAL_MspInit+0x4c>)
 80035f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035fe:	603b      	str	r3, [r7, #0]
 8003600:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003602:	bf00      	nop
 8003604:	370c      	adds	r7, #12
 8003606:	46bd      	mov	sp, r7
 8003608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360c:	4770      	bx	lr
 800360e:	bf00      	nop
 8003610:	40023800 	.word	0x40023800

08003614 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b08a      	sub	sp, #40	; 0x28
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800361c:	f107 0314 	add.w	r3, r7, #20
 8003620:	2200      	movs	r2, #0
 8003622:	601a      	str	r2, [r3, #0]
 8003624:	605a      	str	r2, [r3, #4]
 8003626:	609a      	str	r2, [r3, #8]
 8003628:	60da      	str	r2, [r3, #12]
 800362a:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a25      	ldr	r2, [pc, #148]	; (80036c8 <HAL_CAN_MspInit+0xb4>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d143      	bne.n	80036be <HAL_CAN_MspInit+0xaa>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8003636:	2300      	movs	r3, #0
 8003638:	613b      	str	r3, [r7, #16]
 800363a:	4b24      	ldr	r3, [pc, #144]	; (80036cc <HAL_CAN_MspInit+0xb8>)
 800363c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800363e:	4a23      	ldr	r2, [pc, #140]	; (80036cc <HAL_CAN_MspInit+0xb8>)
 8003640:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003644:	6413      	str	r3, [r2, #64]	; 0x40
 8003646:	4b21      	ldr	r3, [pc, #132]	; (80036cc <HAL_CAN_MspInit+0xb8>)
 8003648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800364a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800364e:	613b      	str	r3, [r7, #16]
 8003650:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003652:	2300      	movs	r3, #0
 8003654:	60fb      	str	r3, [r7, #12]
 8003656:	4b1d      	ldr	r3, [pc, #116]	; (80036cc <HAL_CAN_MspInit+0xb8>)
 8003658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800365a:	4a1c      	ldr	r2, [pc, #112]	; (80036cc <HAL_CAN_MspInit+0xb8>)
 800365c:	f043 0308 	orr.w	r3, r3, #8
 8003660:	6313      	str	r3, [r2, #48]	; 0x30
 8003662:	4b1a      	ldr	r3, [pc, #104]	; (80036cc <HAL_CAN_MspInit+0xb8>)
 8003664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003666:	f003 0308 	and.w	r3, r3, #8
 800366a:	60fb      	str	r3, [r7, #12]
 800366c:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800366e:	2301      	movs	r3, #1
 8003670:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003672:	2302      	movs	r3, #2
 8003674:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003676:	2301      	movs	r3, #1
 8003678:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800367a:	2303      	movs	r3, #3
 800367c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800367e:	2309      	movs	r3, #9
 8003680:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003682:	f107 0314 	add.w	r3, r7, #20
 8003686:	4619      	mov	r1, r3
 8003688:	4811      	ldr	r0, [pc, #68]	; (80036d0 <HAL_CAN_MspInit+0xbc>)
 800368a:	f001 f95f 	bl	800494c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800368e:	2302      	movs	r3, #2
 8003690:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003692:	2302      	movs	r3, #2
 8003694:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003696:	2300      	movs	r3, #0
 8003698:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800369a:	2303      	movs	r3, #3
 800369c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800369e:	2309      	movs	r3, #9
 80036a0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80036a2:	f107 0314 	add.w	r3, r7, #20
 80036a6:	4619      	mov	r1, r3
 80036a8:	4809      	ldr	r0, [pc, #36]	; (80036d0 <HAL_CAN_MspInit+0xbc>)
 80036aa:	f001 f94f 	bl	800494c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 7, 0);
 80036ae:	2200      	movs	r2, #0
 80036b0:	2107      	movs	r1, #7
 80036b2:	2014      	movs	r0, #20
 80036b4:	f001 f920 	bl	80048f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80036b8:	2014      	movs	r0, #20
 80036ba:	f001 f939 	bl	8004930 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80036be:	bf00      	nop
 80036c0:	3728      	adds	r7, #40	; 0x28
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bd80      	pop	{r7, pc}
 80036c6:	bf00      	nop
 80036c8:	40006400 	.word	0x40006400
 80036cc:	40023800 	.word	0x40023800
 80036d0:	40020c00 	.word	0x40020c00

080036d4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b08e      	sub	sp, #56	; 0x38
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80036dc:	2300      	movs	r3, #0
 80036de:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80036e0:	2300      	movs	r3, #0
 80036e2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80036e4:	2300      	movs	r3, #0
 80036e6:	60fb      	str	r3, [r7, #12]
 80036e8:	4b33      	ldr	r3, [pc, #204]	; (80037b8 <HAL_InitTick+0xe4>)
 80036ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ec:	4a32      	ldr	r2, [pc, #200]	; (80037b8 <HAL_InitTick+0xe4>)
 80036ee:	f043 0310 	orr.w	r3, r3, #16
 80036f2:	6413      	str	r3, [r2, #64]	; 0x40
 80036f4:	4b30      	ldr	r3, [pc, #192]	; (80037b8 <HAL_InitTick+0xe4>)
 80036f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036f8:	f003 0310 	and.w	r3, r3, #16
 80036fc:	60fb      	str	r3, [r7, #12]
 80036fe:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003700:	f107 0210 	add.w	r2, r7, #16
 8003704:	f107 0314 	add.w	r3, r7, #20
 8003708:	4611      	mov	r1, r2
 800370a:	4618      	mov	r0, r3
 800370c:	f001 fc6c 	bl	8004fe8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8003710:	6a3b      	ldr	r3, [r7, #32]
 8003712:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8003714:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003716:	2b00      	cmp	r3, #0
 8003718:	d103      	bne.n	8003722 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800371a:	f001 fc51 	bl	8004fc0 <HAL_RCC_GetPCLK1Freq>
 800371e:	6378      	str	r0, [r7, #52]	; 0x34
 8003720:	e004      	b.n	800372c <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8003722:	f001 fc4d 	bl	8004fc0 <HAL_RCC_GetPCLK1Freq>
 8003726:	4603      	mov	r3, r0
 8003728:	005b      	lsls	r3, r3, #1
 800372a:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800372c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800372e:	4a23      	ldr	r2, [pc, #140]	; (80037bc <HAL_InitTick+0xe8>)
 8003730:	fba2 2303 	umull	r2, r3, r2, r3
 8003734:	0c9b      	lsrs	r3, r3, #18
 8003736:	3b01      	subs	r3, #1
 8003738:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800373a:	4b21      	ldr	r3, [pc, #132]	; (80037c0 <HAL_InitTick+0xec>)
 800373c:	4a21      	ldr	r2, [pc, #132]	; (80037c4 <HAL_InitTick+0xf0>)
 800373e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8003740:	4b1f      	ldr	r3, [pc, #124]	; (80037c0 <HAL_InitTick+0xec>)
 8003742:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003746:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8003748:	4a1d      	ldr	r2, [pc, #116]	; (80037c0 <HAL_InitTick+0xec>)
 800374a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800374c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800374e:	4b1c      	ldr	r3, [pc, #112]	; (80037c0 <HAL_InitTick+0xec>)
 8003750:	2200      	movs	r2, #0
 8003752:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003754:	4b1a      	ldr	r3, [pc, #104]	; (80037c0 <HAL_InitTick+0xec>)
 8003756:	2200      	movs	r2, #0
 8003758:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800375a:	4b19      	ldr	r3, [pc, #100]	; (80037c0 <HAL_InitTick+0xec>)
 800375c:	2200      	movs	r2, #0
 800375e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8003760:	4817      	ldr	r0, [pc, #92]	; (80037c0 <HAL_InitTick+0xec>)
 8003762:	f002 f941 	bl	80059e8 <HAL_TIM_Base_Init>
 8003766:	4603      	mov	r3, r0
 8003768:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 800376c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003770:	2b00      	cmp	r3, #0
 8003772:	d11b      	bne.n	80037ac <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8003774:	4812      	ldr	r0, [pc, #72]	; (80037c0 <HAL_InitTick+0xec>)
 8003776:	f002 f991 	bl	8005a9c <HAL_TIM_Base_Start_IT>
 800377a:	4603      	mov	r3, r0
 800377c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8003780:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003784:	2b00      	cmp	r3, #0
 8003786:	d111      	bne.n	80037ac <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003788:	2036      	movs	r0, #54	; 0x36
 800378a:	f001 f8d1 	bl	8004930 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2b0f      	cmp	r3, #15
 8003792:	d808      	bhi.n	80037a6 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8003794:	2200      	movs	r2, #0
 8003796:	6879      	ldr	r1, [r7, #4]
 8003798:	2036      	movs	r0, #54	; 0x36
 800379a:	f001 f8ad 	bl	80048f8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800379e:	4a0a      	ldr	r2, [pc, #40]	; (80037c8 <HAL_InitTick+0xf4>)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6013      	str	r3, [r2, #0]
 80037a4:	e002      	b.n	80037ac <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 80037a6:	2301      	movs	r3, #1
 80037a8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80037ac:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80037b0:	4618      	mov	r0, r3
 80037b2:	3738      	adds	r7, #56	; 0x38
 80037b4:	46bd      	mov	sp, r7
 80037b6:	bd80      	pop	{r7, pc}
 80037b8:	40023800 	.word	0x40023800
 80037bc:	431bde83 	.word	0x431bde83
 80037c0:	2001f6b4 	.word	0x2001f6b4
 80037c4:	40001000 	.word	0x40001000
 80037c8:	2000000c 	.word	0x2000000c

080037cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80037cc:	b480      	push	{r7}
 80037ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80037d0:	e7fe      	b.n	80037d0 <NMI_Handler+0x4>

080037d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80037d2:	b480      	push	{r7}
 80037d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80037d6:	e7fe      	b.n	80037d6 <HardFault_Handler+0x4>

080037d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80037d8:	b480      	push	{r7}
 80037da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80037dc:	e7fe      	b.n	80037dc <MemManage_Handler+0x4>

080037de <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80037de:	b480      	push	{r7}
 80037e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80037e2:	e7fe      	b.n	80037e2 <BusFault_Handler+0x4>

080037e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80037e4:	b480      	push	{r7}
 80037e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80037e8:	e7fe      	b.n	80037e8 <UsageFault_Handler+0x4>

080037ea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80037ea:	b480      	push	{r7}
 80037ec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80037ee:	bf00      	nop
 80037f0:	46bd      	mov	sp, r7
 80037f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f6:	4770      	bx	lr

080037f8 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80037fc:	4802      	ldr	r0, [pc, #8]	; (8003808 <CAN1_RX0_IRQHandler+0x10>)
 80037fe:	f000 fd94 	bl	800432a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8003802:	bf00      	nop
 8003804:	bd80      	pop	{r7, pc}
 8003806:	bf00      	nop
 8003808:	2001f63c 	.word	0x2001f63c

0800380c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 8003810:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8003814:	f001 fa7a 	bl	8004d0c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003818:	bf00      	nop
 800381a:	bd80      	pop	{r7, pc}

0800381c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003820:	4802      	ldr	r0, [pc, #8]	; (800382c <TIM6_DAC_IRQHandler+0x10>)
 8003822:	f002 f9ab 	bl	8005b7c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003826:	bf00      	nop
 8003828:	bd80      	pop	{r7, pc}
 800382a:	bf00      	nop
 800382c:	2001f6b4 	.word	0x2001f6b4

08003830 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8003830:	b480      	push	{r7}
 8003832:	b083      	sub	sp, #12
 8003834:	af00      	add	r7, sp, #0
 8003836:	4603      	mov	r3, r0
 8003838:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 800383a:	4b0f      	ldr	r3, [pc, #60]	; (8003878 <ITM_SendChar+0x48>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	4a0e      	ldr	r2, [pc, #56]	; (8003878 <ITM_SendChar+0x48>)
 8003840:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003844:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 8003846:	4b0d      	ldr	r3, [pc, #52]	; (800387c <ITM_SendChar+0x4c>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4a0c      	ldr	r2, [pc, #48]	; (800387c <ITM_SendChar+0x4c>)
 800384c:	f043 0301 	orr.w	r3, r3, #1
 8003850:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 8003852:	bf00      	nop
 8003854:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f003 0301 	and.w	r3, r3, #1
 800385e:	2b00      	cmp	r3, #0
 8003860:	d0f8      	beq.n	8003854 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 8003862:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8003866:	79fb      	ldrb	r3, [r7, #7]
 8003868:	6013      	str	r3, [r2, #0]
}
 800386a:	bf00      	nop
 800386c:	370c      	adds	r7, #12
 800386e:	46bd      	mov	sp, r7
 8003870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003874:	4770      	bx	lr
 8003876:	bf00      	nop
 8003878:	e000edfc 	.word	0xe000edfc
 800387c:	e0000e00 	.word	0xe0000e00

08003880 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	b086      	sub	sp, #24
 8003884:	af00      	add	r7, sp, #0
 8003886:	60f8      	str	r0, [r7, #12]
 8003888:	60b9      	str	r1, [r7, #8]
 800388a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800388c:	2300      	movs	r3, #0
 800388e:	617b      	str	r3, [r7, #20]
 8003890:	e00a      	b.n	80038a8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003892:	f3af 8000 	nop.w
 8003896:	4601      	mov	r1, r0
 8003898:	68bb      	ldr	r3, [r7, #8]
 800389a:	1c5a      	adds	r2, r3, #1
 800389c:	60ba      	str	r2, [r7, #8]
 800389e:	b2ca      	uxtb	r2, r1
 80038a0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80038a2:	697b      	ldr	r3, [r7, #20]
 80038a4:	3301      	adds	r3, #1
 80038a6:	617b      	str	r3, [r7, #20]
 80038a8:	697a      	ldr	r2, [r7, #20]
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	429a      	cmp	r2, r3
 80038ae:	dbf0      	blt.n	8003892 <_read+0x12>
  }

  return len;
 80038b0:	687b      	ldr	r3, [r7, #4]
}
 80038b2:	4618      	mov	r0, r3
 80038b4:	3718      	adds	r7, #24
 80038b6:	46bd      	mov	sp, r7
 80038b8:	bd80      	pop	{r7, pc}

080038ba <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80038ba:	b580      	push	{r7, lr}
 80038bc:	b086      	sub	sp, #24
 80038be:	af00      	add	r7, sp, #0
 80038c0:	60f8      	str	r0, [r7, #12]
 80038c2:	60b9      	str	r1, [r7, #8]
 80038c4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80038c6:	2300      	movs	r3, #0
 80038c8:	617b      	str	r3, [r7, #20]
 80038ca:	e009      	b.n	80038e0 <_write+0x26>
  {
//    __io_putchar(*ptr++);
	  ITM_SendChar(*ptr++);
 80038cc:	68bb      	ldr	r3, [r7, #8]
 80038ce:	1c5a      	adds	r2, r3, #1
 80038d0:	60ba      	str	r2, [r7, #8]
 80038d2:	781b      	ldrb	r3, [r3, #0]
 80038d4:	4618      	mov	r0, r3
 80038d6:	f7ff ffab 	bl	8003830 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80038da:	697b      	ldr	r3, [r7, #20]
 80038dc:	3301      	adds	r3, #1
 80038de:	617b      	str	r3, [r7, #20]
 80038e0:	697a      	ldr	r2, [r7, #20]
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	429a      	cmp	r2, r3
 80038e6:	dbf1      	blt.n	80038cc <_write+0x12>
  }
  return len;
 80038e8:	687b      	ldr	r3, [r7, #4]
}
 80038ea:	4618      	mov	r0, r3
 80038ec:	3718      	adds	r7, #24
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bd80      	pop	{r7, pc}

080038f2 <_close>:

int _close(int file)
{
 80038f2:	b480      	push	{r7}
 80038f4:	b083      	sub	sp, #12
 80038f6:	af00      	add	r7, sp, #0
 80038f8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80038fa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80038fe:	4618      	mov	r0, r3
 8003900:	370c      	adds	r7, #12
 8003902:	46bd      	mov	sp, r7
 8003904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003908:	4770      	bx	lr

0800390a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800390a:	b480      	push	{r7}
 800390c:	b083      	sub	sp, #12
 800390e:	af00      	add	r7, sp, #0
 8003910:	6078      	str	r0, [r7, #4]
 8003912:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800391a:	605a      	str	r2, [r3, #4]
  return 0;
 800391c:	2300      	movs	r3, #0
}
 800391e:	4618      	mov	r0, r3
 8003920:	370c      	adds	r7, #12
 8003922:	46bd      	mov	sp, r7
 8003924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003928:	4770      	bx	lr

0800392a <_isatty>:

int _isatty(int file)
{
 800392a:	b480      	push	{r7}
 800392c:	b083      	sub	sp, #12
 800392e:	af00      	add	r7, sp, #0
 8003930:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003932:	2301      	movs	r3, #1
}
 8003934:	4618      	mov	r0, r3
 8003936:	370c      	adds	r7, #12
 8003938:	46bd      	mov	sp, r7
 800393a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393e:	4770      	bx	lr

08003940 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003940:	b480      	push	{r7}
 8003942:	b085      	sub	sp, #20
 8003944:	af00      	add	r7, sp, #0
 8003946:	60f8      	str	r0, [r7, #12]
 8003948:	60b9      	str	r1, [r7, #8]
 800394a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800394c:	2300      	movs	r3, #0
}
 800394e:	4618      	mov	r0, r3
 8003950:	3714      	adds	r7, #20
 8003952:	46bd      	mov	sp, r7
 8003954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003958:	4770      	bx	lr
	...

0800395c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b086      	sub	sp, #24
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003964:	4a14      	ldr	r2, [pc, #80]	; (80039b8 <_sbrk+0x5c>)
 8003966:	4b15      	ldr	r3, [pc, #84]	; (80039bc <_sbrk+0x60>)
 8003968:	1ad3      	subs	r3, r2, r3
 800396a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800396c:	697b      	ldr	r3, [r7, #20]
 800396e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003970:	4b13      	ldr	r3, [pc, #76]	; (80039c0 <_sbrk+0x64>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	2b00      	cmp	r3, #0
 8003976:	d102      	bne.n	800397e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003978:	4b11      	ldr	r3, [pc, #68]	; (80039c0 <_sbrk+0x64>)
 800397a:	4a12      	ldr	r2, [pc, #72]	; (80039c4 <_sbrk+0x68>)
 800397c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800397e:	4b10      	ldr	r3, [pc, #64]	; (80039c0 <_sbrk+0x64>)
 8003980:	681a      	ldr	r2, [r3, #0]
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	4413      	add	r3, r2
 8003986:	693a      	ldr	r2, [r7, #16]
 8003988:	429a      	cmp	r2, r3
 800398a:	d207      	bcs.n	800399c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800398c:	f002 fada 	bl	8005f44 <__errno>
 8003990:	4603      	mov	r3, r0
 8003992:	220c      	movs	r2, #12
 8003994:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003996:	f04f 33ff 	mov.w	r3, #4294967295
 800399a:	e009      	b.n	80039b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800399c:	4b08      	ldr	r3, [pc, #32]	; (80039c0 <_sbrk+0x64>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80039a2:	4b07      	ldr	r3, [pc, #28]	; (80039c0 <_sbrk+0x64>)
 80039a4:	681a      	ldr	r2, [r3, #0]
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	4413      	add	r3, r2
 80039aa:	4a05      	ldr	r2, [pc, #20]	; (80039c0 <_sbrk+0x64>)
 80039ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80039ae:	68fb      	ldr	r3, [r7, #12]
}
 80039b0:	4618      	mov	r0, r3
 80039b2:	3718      	adds	r7, #24
 80039b4:	46bd      	mov	sp, r7
 80039b6:	bd80      	pop	{r7, pc}
 80039b8:	20020000 	.word	0x20020000
 80039bc:	00000400 	.word	0x00000400
 80039c0:	2001f6fc 	.word	0x2001f6fc
 80039c4:	2001f718 	.word	0x2001f718

080039c8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80039c8:	b480      	push	{r7}
 80039ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80039cc:	4b06      	ldr	r3, [pc, #24]	; (80039e8 <SystemInit+0x20>)
 80039ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039d2:	4a05      	ldr	r2, [pc, #20]	; (80039e8 <SystemInit+0x20>)
 80039d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80039d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80039dc:	bf00      	nop
 80039de:	46bd      	mov	sp, r7
 80039e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e4:	4770      	bx	lr
 80039e6:	bf00      	nop
 80039e8:	e000ed00 	.word	0xe000ed00

080039ec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80039ec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003a24 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80039f0:	480d      	ldr	r0, [pc, #52]	; (8003a28 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80039f2:	490e      	ldr	r1, [pc, #56]	; (8003a2c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80039f4:	4a0e      	ldr	r2, [pc, #56]	; (8003a30 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80039f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80039f8:	e002      	b.n	8003a00 <LoopCopyDataInit>

080039fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80039fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80039fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80039fe:	3304      	adds	r3, #4

08003a00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003a00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003a02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003a04:	d3f9      	bcc.n	80039fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003a06:	4a0b      	ldr	r2, [pc, #44]	; (8003a34 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003a08:	4c0b      	ldr	r4, [pc, #44]	; (8003a38 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003a0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003a0c:	e001      	b.n	8003a12 <LoopFillZerobss>

08003a0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003a0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003a10:	3204      	adds	r2, #4

08003a12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003a12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003a14:	d3fb      	bcc.n	8003a0e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003a16:	f7ff ffd7 	bl	80039c8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003a1a:	f002 fa99 	bl	8005f50 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003a1e:	f7ff fb9b 	bl	8003158 <main>
  bx  lr    
 8003a22:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003a24:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003a28:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003a2c:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8003a30:	08007124 	.word	0x08007124
  ldr r2, =_sbss
 8003a34:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8003a38:	2001f714 	.word	0x2001f714

08003a3c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003a3c:	e7fe      	b.n	8003a3c <ADC_IRQHandler>
	...

08003a40 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003a44:	4b0e      	ldr	r3, [pc, #56]	; (8003a80 <HAL_Init+0x40>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4a0d      	ldr	r2, [pc, #52]	; (8003a80 <HAL_Init+0x40>)
 8003a4a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003a4e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003a50:	4b0b      	ldr	r3, [pc, #44]	; (8003a80 <HAL_Init+0x40>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4a0a      	ldr	r2, [pc, #40]	; (8003a80 <HAL_Init+0x40>)
 8003a56:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003a5a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003a5c:	4b08      	ldr	r3, [pc, #32]	; (8003a80 <HAL_Init+0x40>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4a07      	ldr	r2, [pc, #28]	; (8003a80 <HAL_Init+0x40>)
 8003a62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a66:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003a68:	2003      	movs	r0, #3
 8003a6a:	f000 ff3a 	bl	80048e2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003a6e:	200f      	movs	r0, #15
 8003a70:	f7ff fe30 	bl	80036d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003a74:	f7ff fda6 	bl	80035c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003a78:	2300      	movs	r3, #0
}
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	bd80      	pop	{r7, pc}
 8003a7e:	bf00      	nop
 8003a80:	40023c00 	.word	0x40023c00

08003a84 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003a84:	b480      	push	{r7}
 8003a86:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003a88:	4b06      	ldr	r3, [pc, #24]	; (8003aa4 <HAL_IncTick+0x20>)
 8003a8a:	781b      	ldrb	r3, [r3, #0]
 8003a8c:	461a      	mov	r2, r3
 8003a8e:	4b06      	ldr	r3, [pc, #24]	; (8003aa8 <HAL_IncTick+0x24>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4413      	add	r3, r2
 8003a94:	4a04      	ldr	r2, [pc, #16]	; (8003aa8 <HAL_IncTick+0x24>)
 8003a96:	6013      	str	r3, [r2, #0]
}
 8003a98:	bf00      	nop
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa0:	4770      	bx	lr
 8003aa2:	bf00      	nop
 8003aa4:	20000010 	.word	0x20000010
 8003aa8:	2001f700 	.word	0x2001f700

08003aac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003aac:	b480      	push	{r7}
 8003aae:	af00      	add	r7, sp, #0
  return uwTick;
 8003ab0:	4b03      	ldr	r3, [pc, #12]	; (8003ac0 <HAL_GetTick+0x14>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
}
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abc:	4770      	bx	lr
 8003abe:	bf00      	nop
 8003ac0:	2001f700 	.word	0x2001f700

08003ac4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b084      	sub	sp, #16
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d101      	bne.n	8003ad6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	e0ed      	b.n	8003cb2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003adc:	b2db      	uxtb	r3, r3
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d102      	bne.n	8003ae8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8003ae2:	6878      	ldr	r0, [r7, #4]
 8003ae4:	f7ff fd96 	bl	8003614 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	681a      	ldr	r2, [r3, #0]
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f042 0201 	orr.w	r2, r2, #1
 8003af6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003af8:	f7ff ffd8 	bl	8003aac <HAL_GetTick>
 8003afc:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003afe:	e012      	b.n	8003b26 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003b00:	f7ff ffd4 	bl	8003aac <HAL_GetTick>
 8003b04:	4602      	mov	r2, r0
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	1ad3      	subs	r3, r2, r3
 8003b0a:	2b0a      	cmp	r3, #10
 8003b0c:	d90b      	bls.n	8003b26 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b12:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	2205      	movs	r2, #5
 8003b1e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003b22:	2301      	movs	r3, #1
 8003b24:	e0c5      	b.n	8003cb2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	685b      	ldr	r3, [r3, #4]
 8003b2c:	f003 0301 	and.w	r3, r3, #1
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d0e5      	beq.n	8003b00 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	681a      	ldr	r2, [r3, #0]
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f022 0202 	bic.w	r2, r2, #2
 8003b42:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003b44:	f7ff ffb2 	bl	8003aac <HAL_GetTick>
 8003b48:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003b4a:	e012      	b.n	8003b72 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003b4c:	f7ff ffae 	bl	8003aac <HAL_GetTick>
 8003b50:	4602      	mov	r2, r0
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	1ad3      	subs	r3, r2, r3
 8003b56:	2b0a      	cmp	r3, #10
 8003b58:	d90b      	bls.n	8003b72 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b5e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2205      	movs	r2, #5
 8003b6a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003b6e:	2301      	movs	r3, #1
 8003b70:	e09f      	b.n	8003cb2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	685b      	ldr	r3, [r3, #4]
 8003b78:	f003 0302 	and.w	r3, r3, #2
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d1e5      	bne.n	8003b4c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	7e1b      	ldrb	r3, [r3, #24]
 8003b84:	2b01      	cmp	r3, #1
 8003b86:	d108      	bne.n	8003b9a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	681a      	ldr	r2, [r3, #0]
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003b96:	601a      	str	r2, [r3, #0]
 8003b98:	e007      	b.n	8003baa <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	681a      	ldr	r2, [r3, #0]
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003ba8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	7e5b      	ldrb	r3, [r3, #25]
 8003bae:	2b01      	cmp	r3, #1
 8003bb0:	d108      	bne.n	8003bc4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	681a      	ldr	r2, [r3, #0]
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003bc0:	601a      	str	r2, [r3, #0]
 8003bc2:	e007      	b.n	8003bd4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	681a      	ldr	r2, [r3, #0]
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003bd2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	7e9b      	ldrb	r3, [r3, #26]
 8003bd8:	2b01      	cmp	r3, #1
 8003bda:	d108      	bne.n	8003bee <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	681a      	ldr	r2, [r3, #0]
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f042 0220 	orr.w	r2, r2, #32
 8003bea:	601a      	str	r2, [r3, #0]
 8003bec:	e007      	b.n	8003bfe <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	681a      	ldr	r2, [r3, #0]
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f022 0220 	bic.w	r2, r2, #32
 8003bfc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	7edb      	ldrb	r3, [r3, #27]
 8003c02:	2b01      	cmp	r3, #1
 8003c04:	d108      	bne.n	8003c18 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	681a      	ldr	r2, [r3, #0]
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f022 0210 	bic.w	r2, r2, #16
 8003c14:	601a      	str	r2, [r3, #0]
 8003c16:	e007      	b.n	8003c28 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	681a      	ldr	r2, [r3, #0]
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f042 0210 	orr.w	r2, r2, #16
 8003c26:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	7f1b      	ldrb	r3, [r3, #28]
 8003c2c:	2b01      	cmp	r3, #1
 8003c2e:	d108      	bne.n	8003c42 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	681a      	ldr	r2, [r3, #0]
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f042 0208 	orr.w	r2, r2, #8
 8003c3e:	601a      	str	r2, [r3, #0]
 8003c40:	e007      	b.n	8003c52 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	681a      	ldr	r2, [r3, #0]
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f022 0208 	bic.w	r2, r2, #8
 8003c50:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	7f5b      	ldrb	r3, [r3, #29]
 8003c56:	2b01      	cmp	r3, #1
 8003c58:	d108      	bne.n	8003c6c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	681a      	ldr	r2, [r3, #0]
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f042 0204 	orr.w	r2, r2, #4
 8003c68:	601a      	str	r2, [r3, #0]
 8003c6a:	e007      	b.n	8003c7c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	681a      	ldr	r2, [r3, #0]
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f022 0204 	bic.w	r2, r2, #4
 8003c7a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	689a      	ldr	r2, [r3, #8]
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	68db      	ldr	r3, [r3, #12]
 8003c84:	431a      	orrs	r2, r3
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	691b      	ldr	r3, [r3, #16]
 8003c8a:	431a      	orrs	r2, r3
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	695b      	ldr	r3, [r3, #20]
 8003c90:	ea42 0103 	orr.w	r1, r2, r3
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	685b      	ldr	r3, [r3, #4]
 8003c98:	1e5a      	subs	r2, r3, #1
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	430a      	orrs	r2, r1
 8003ca0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2201      	movs	r2, #1
 8003cac:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003cb0:	2300      	movs	r3, #0
}
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	3710      	adds	r7, #16
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	bd80      	pop	{r7, pc}
	...

08003cbc <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8003cbc:	b480      	push	{r7}
 8003cbe:	b087      	sub	sp, #28
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
 8003cc4:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003cd2:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8003cd4:	7cfb      	ldrb	r3, [r7, #19]
 8003cd6:	2b01      	cmp	r3, #1
 8003cd8:	d003      	beq.n	8003ce2 <HAL_CAN_ConfigFilter+0x26>
 8003cda:	7cfb      	ldrb	r3, [r7, #19]
 8003cdc:	2b02      	cmp	r3, #2
 8003cde:	f040 80be 	bne.w	8003e5e <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8003ce2:	4b65      	ldr	r3, [pc, #404]	; (8003e78 <HAL_CAN_ConfigFilter+0x1bc>)
 8003ce4:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003ce6:	697b      	ldr	r3, [r7, #20]
 8003ce8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003cec:	f043 0201 	orr.w	r2, r3, #1
 8003cf0:	697b      	ldr	r3, [r7, #20]
 8003cf2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8003cf6:	697b      	ldr	r3, [r7, #20]
 8003cf8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003cfc:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003d00:	697b      	ldr	r3, [r7, #20]
 8003d02:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8003d06:	697b      	ldr	r3, [r7, #20]
 8003d08:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d10:	021b      	lsls	r3, r3, #8
 8003d12:	431a      	orrs	r2, r3
 8003d14:	697b      	ldr	r3, [r7, #20]
 8003d16:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	695b      	ldr	r3, [r3, #20]
 8003d1e:	f003 031f 	and.w	r3, r3, #31
 8003d22:	2201      	movs	r2, #1
 8003d24:	fa02 f303 	lsl.w	r3, r2, r3
 8003d28:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8003d2a:	697b      	ldr	r3, [r7, #20]
 8003d2c:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	43db      	mvns	r3, r3
 8003d34:	401a      	ands	r2, r3
 8003d36:	697b      	ldr	r3, [r7, #20]
 8003d38:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	69db      	ldr	r3, [r3, #28]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d123      	bne.n	8003d8c <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8003d44:	697b      	ldr	r3, [r7, #20]
 8003d46:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	43db      	mvns	r3, r3
 8003d4e:	401a      	ands	r2, r3
 8003d50:	697b      	ldr	r3, [r7, #20]
 8003d52:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	68db      	ldr	r3, [r3, #12]
 8003d5a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	685b      	ldr	r3, [r3, #4]
 8003d60:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003d62:	683a      	ldr	r2, [r7, #0]
 8003d64:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003d66:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003d68:	697b      	ldr	r3, [r7, #20]
 8003d6a:	3248      	adds	r2, #72	; 0x48
 8003d6c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	689b      	ldr	r3, [r3, #8]
 8003d74:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003d80:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003d82:	6979      	ldr	r1, [r7, #20]
 8003d84:	3348      	adds	r3, #72	; 0x48
 8003d86:	00db      	lsls	r3, r3, #3
 8003d88:	440b      	add	r3, r1
 8003d8a:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	69db      	ldr	r3, [r3, #28]
 8003d90:	2b01      	cmp	r3, #1
 8003d92:	d122      	bne.n	8003dda <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8003d94:	697b      	ldr	r3, [r7, #20]
 8003d96:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	431a      	orrs	r2, r3
 8003d9e:	697b      	ldr	r3, [r7, #20]
 8003da0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	685b      	ldr	r3, [r3, #4]
 8003dae:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003db0:	683a      	ldr	r2, [r7, #0]
 8003db2:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003db4:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003db6:	697b      	ldr	r3, [r7, #20]
 8003db8:	3248      	adds	r2, #72	; 0x48
 8003dba:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	689b      	ldr	r3, [r3, #8]
 8003dc2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	68db      	ldr	r3, [r3, #12]
 8003dc8:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003dce:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003dd0:	6979      	ldr	r1, [r7, #20]
 8003dd2:	3348      	adds	r3, #72	; 0x48
 8003dd4:	00db      	lsls	r3, r3, #3
 8003dd6:	440b      	add	r3, r1
 8003dd8:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	699b      	ldr	r3, [r3, #24]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d109      	bne.n	8003df6 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8003de2:	697b      	ldr	r3, [r7, #20]
 8003de4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	43db      	mvns	r3, r3
 8003dec:	401a      	ands	r2, r3
 8003dee:	697b      	ldr	r3, [r7, #20]
 8003df0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8003df4:	e007      	b.n	8003e06 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8003df6:	697b      	ldr	r3, [r7, #20]
 8003df8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	431a      	orrs	r2, r3
 8003e00:	697b      	ldr	r3, [r7, #20]
 8003e02:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	691b      	ldr	r3, [r3, #16]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d109      	bne.n	8003e22 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8003e0e:	697b      	ldr	r3, [r7, #20]
 8003e10:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	43db      	mvns	r3, r3
 8003e18:	401a      	ands	r2, r3
 8003e1a:	697b      	ldr	r3, [r7, #20]
 8003e1c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8003e20:	e007      	b.n	8003e32 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8003e22:	697b      	ldr	r3, [r7, #20]
 8003e24:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	431a      	orrs	r2, r3
 8003e2c:	697b      	ldr	r3, [r7, #20]
 8003e2e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	6a1b      	ldr	r3, [r3, #32]
 8003e36:	2b01      	cmp	r3, #1
 8003e38:	d107      	bne.n	8003e4a <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8003e3a:	697b      	ldr	r3, [r7, #20]
 8003e3c:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	431a      	orrs	r2, r3
 8003e44:	697b      	ldr	r3, [r7, #20]
 8003e46:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003e4a:	697b      	ldr	r3, [r7, #20]
 8003e4c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003e50:	f023 0201 	bic.w	r2, r3, #1
 8003e54:	697b      	ldr	r3, [r7, #20]
 8003e56:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	e006      	b.n	8003e6c <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e62:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003e6a:	2301      	movs	r3, #1
  }
}
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	371c      	adds	r7, #28
 8003e70:	46bd      	mov	sp, r7
 8003e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e76:	4770      	bx	lr
 8003e78:	40006400 	.word	0x40006400

08003e7c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b084      	sub	sp, #16
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003e8a:	b2db      	uxtb	r3, r3
 8003e8c:	2b01      	cmp	r3, #1
 8003e8e:	d12e      	bne.n	8003eee <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2202      	movs	r2, #2
 8003e94:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	681a      	ldr	r2, [r3, #0]
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f022 0201 	bic.w	r2, r2, #1
 8003ea6:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003ea8:	f7ff fe00 	bl	8003aac <HAL_GetTick>
 8003eac:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003eae:	e012      	b.n	8003ed6 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003eb0:	f7ff fdfc 	bl	8003aac <HAL_GetTick>
 8003eb4:	4602      	mov	r2, r0
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	1ad3      	subs	r3, r2, r3
 8003eba:	2b0a      	cmp	r3, #10
 8003ebc:	d90b      	bls.n	8003ed6 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ec2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2205      	movs	r2, #5
 8003ece:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	e012      	b.n	8003efc <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	685b      	ldr	r3, [r3, #4]
 8003edc:	f003 0301 	and.w	r3, r3, #1
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d1e5      	bne.n	8003eb0 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8003eea:	2300      	movs	r3, #0
 8003eec:	e006      	b.n	8003efc <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ef2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003efa:	2301      	movs	r3, #1
  }
}
 8003efc:	4618      	mov	r0, r3
 8003efe:	3710      	adds	r7, #16
 8003f00:	46bd      	mov	sp, r7
 8003f02:	bd80      	pop	{r7, pc}

08003f04 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8003f04:	b480      	push	{r7}
 8003f06:	b089      	sub	sp, #36	; 0x24
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	60f8      	str	r0, [r7, #12]
 8003f0c:	60b9      	str	r1, [r7, #8]
 8003f0e:	607a      	str	r2, [r7, #4]
 8003f10:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003f18:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	689b      	ldr	r3, [r3, #8]
 8003f20:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8003f22:	7ffb      	ldrb	r3, [r7, #31]
 8003f24:	2b01      	cmp	r3, #1
 8003f26:	d003      	beq.n	8003f30 <HAL_CAN_AddTxMessage+0x2c>
 8003f28:	7ffb      	ldrb	r3, [r7, #31]
 8003f2a:	2b02      	cmp	r3, #2
 8003f2c:	f040 80b8 	bne.w	80040a0 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003f30:	69bb      	ldr	r3, [r7, #24]
 8003f32:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d10a      	bne.n	8003f50 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003f3a:	69bb      	ldr	r3, [r7, #24]
 8003f3c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d105      	bne.n	8003f50 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8003f44:	69bb      	ldr	r3, [r7, #24]
 8003f46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	f000 80a0 	beq.w	8004090 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8003f50:	69bb      	ldr	r3, [r7, #24]
 8003f52:	0e1b      	lsrs	r3, r3, #24
 8003f54:	f003 0303 	and.w	r3, r3, #3
 8003f58:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8003f5a:	697b      	ldr	r3, [r7, #20]
 8003f5c:	2b02      	cmp	r3, #2
 8003f5e:	d907      	bls.n	8003f70 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f64:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003f6c:	2301      	movs	r3, #1
 8003f6e:	e09e      	b.n	80040ae <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8003f70:	2201      	movs	r2, #1
 8003f72:	697b      	ldr	r3, [r7, #20]
 8003f74:	409a      	lsls	r2, r3
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8003f7a:	68bb      	ldr	r3, [r7, #8]
 8003f7c:	689b      	ldr	r3, [r3, #8]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d10d      	bne.n	8003f9e <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003f82:	68bb      	ldr	r3, [r7, #8]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8003f88:	68bb      	ldr	r3, [r7, #8]
 8003f8a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003f8c:	68f9      	ldr	r1, [r7, #12]
 8003f8e:	6809      	ldr	r1, [r1, #0]
 8003f90:	431a      	orrs	r2, r3
 8003f92:	697b      	ldr	r3, [r7, #20]
 8003f94:	3318      	adds	r3, #24
 8003f96:	011b      	lsls	r3, r3, #4
 8003f98:	440b      	add	r3, r1
 8003f9a:	601a      	str	r2, [r3, #0]
 8003f9c:	e00f      	b.n	8003fbe <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003f9e:	68bb      	ldr	r3, [r7, #8]
 8003fa0:	685b      	ldr	r3, [r3, #4]
 8003fa2:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8003fa4:	68bb      	ldr	r3, [r7, #8]
 8003fa6:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003fa8:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8003faa:	68bb      	ldr	r3, [r7, #8]
 8003fac:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003fae:	68f9      	ldr	r1, [r7, #12]
 8003fb0:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8003fb2:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003fb4:	697b      	ldr	r3, [r7, #20]
 8003fb6:	3318      	adds	r3, #24
 8003fb8:	011b      	lsls	r3, r3, #4
 8003fba:	440b      	add	r3, r1
 8003fbc:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	6819      	ldr	r1, [r3, #0]
 8003fc2:	68bb      	ldr	r3, [r7, #8]
 8003fc4:	691a      	ldr	r2, [r3, #16]
 8003fc6:	697b      	ldr	r3, [r7, #20]
 8003fc8:	3318      	adds	r3, #24
 8003fca:	011b      	lsls	r3, r3, #4
 8003fcc:	440b      	add	r3, r1
 8003fce:	3304      	adds	r3, #4
 8003fd0:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8003fd2:	68bb      	ldr	r3, [r7, #8]
 8003fd4:	7d1b      	ldrb	r3, [r3, #20]
 8003fd6:	2b01      	cmp	r3, #1
 8003fd8:	d111      	bne.n	8003ffe <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681a      	ldr	r2, [r3, #0]
 8003fde:	697b      	ldr	r3, [r7, #20]
 8003fe0:	3318      	adds	r3, #24
 8003fe2:	011b      	lsls	r3, r3, #4
 8003fe4:	4413      	add	r3, r2
 8003fe6:	3304      	adds	r3, #4
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	68fa      	ldr	r2, [r7, #12]
 8003fec:	6811      	ldr	r1, [r2, #0]
 8003fee:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003ff2:	697b      	ldr	r3, [r7, #20]
 8003ff4:	3318      	adds	r3, #24
 8003ff6:	011b      	lsls	r3, r3, #4
 8003ff8:	440b      	add	r3, r1
 8003ffa:	3304      	adds	r3, #4
 8003ffc:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	3307      	adds	r3, #7
 8004002:	781b      	ldrb	r3, [r3, #0]
 8004004:	061a      	lsls	r2, r3, #24
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	3306      	adds	r3, #6
 800400a:	781b      	ldrb	r3, [r3, #0]
 800400c:	041b      	lsls	r3, r3, #16
 800400e:	431a      	orrs	r2, r3
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	3305      	adds	r3, #5
 8004014:	781b      	ldrb	r3, [r3, #0]
 8004016:	021b      	lsls	r3, r3, #8
 8004018:	4313      	orrs	r3, r2
 800401a:	687a      	ldr	r2, [r7, #4]
 800401c:	3204      	adds	r2, #4
 800401e:	7812      	ldrb	r2, [r2, #0]
 8004020:	4610      	mov	r0, r2
 8004022:	68fa      	ldr	r2, [r7, #12]
 8004024:	6811      	ldr	r1, [r2, #0]
 8004026:	ea43 0200 	orr.w	r2, r3, r0
 800402a:	697b      	ldr	r3, [r7, #20]
 800402c:	011b      	lsls	r3, r3, #4
 800402e:	440b      	add	r3, r1
 8004030:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8004034:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	3303      	adds	r3, #3
 800403a:	781b      	ldrb	r3, [r3, #0]
 800403c:	061a      	lsls	r2, r3, #24
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	3302      	adds	r3, #2
 8004042:	781b      	ldrb	r3, [r3, #0]
 8004044:	041b      	lsls	r3, r3, #16
 8004046:	431a      	orrs	r2, r3
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	3301      	adds	r3, #1
 800404c:	781b      	ldrb	r3, [r3, #0]
 800404e:	021b      	lsls	r3, r3, #8
 8004050:	4313      	orrs	r3, r2
 8004052:	687a      	ldr	r2, [r7, #4]
 8004054:	7812      	ldrb	r2, [r2, #0]
 8004056:	4610      	mov	r0, r2
 8004058:	68fa      	ldr	r2, [r7, #12]
 800405a:	6811      	ldr	r1, [r2, #0]
 800405c:	ea43 0200 	orr.w	r2, r3, r0
 8004060:	697b      	ldr	r3, [r7, #20]
 8004062:	011b      	lsls	r3, r3, #4
 8004064:	440b      	add	r3, r1
 8004066:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800406a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	681a      	ldr	r2, [r3, #0]
 8004070:	697b      	ldr	r3, [r7, #20]
 8004072:	3318      	adds	r3, #24
 8004074:	011b      	lsls	r3, r3, #4
 8004076:	4413      	add	r3, r2
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	68fa      	ldr	r2, [r7, #12]
 800407c:	6811      	ldr	r1, [r2, #0]
 800407e:	f043 0201 	orr.w	r2, r3, #1
 8004082:	697b      	ldr	r3, [r7, #20]
 8004084:	3318      	adds	r3, #24
 8004086:	011b      	lsls	r3, r3, #4
 8004088:	440b      	add	r3, r1
 800408a:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800408c:	2300      	movs	r3, #0
 800408e:	e00e      	b.n	80040ae <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004094:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 800409c:	2301      	movs	r3, #1
 800409e:	e006      	b.n	80040ae <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040a4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80040ac:	2301      	movs	r3, #1
  }
}
 80040ae:	4618      	mov	r0, r3
 80040b0:	3724      	adds	r7, #36	; 0x24
 80040b2:	46bd      	mov	sp, r7
 80040b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b8:	4770      	bx	lr

080040ba <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80040ba:	b480      	push	{r7}
 80040bc:	b087      	sub	sp, #28
 80040be:	af00      	add	r7, sp, #0
 80040c0:	60f8      	str	r0, [r7, #12]
 80040c2:	60b9      	str	r1, [r7, #8]
 80040c4:	607a      	str	r2, [r7, #4]
 80040c6:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	f893 3020 	ldrb.w	r3, [r3, #32]
 80040ce:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80040d0:	7dfb      	ldrb	r3, [r7, #23]
 80040d2:	2b01      	cmp	r3, #1
 80040d4:	d003      	beq.n	80040de <HAL_CAN_GetRxMessage+0x24>
 80040d6:	7dfb      	ldrb	r3, [r7, #23]
 80040d8:	2b02      	cmp	r3, #2
 80040da:	f040 80f3 	bne.w	80042c4 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80040de:	68bb      	ldr	r3, [r7, #8]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d10e      	bne.n	8004102 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	68db      	ldr	r3, [r3, #12]
 80040ea:	f003 0303 	and.w	r3, r3, #3
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d116      	bne.n	8004120 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040f6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80040fe:	2301      	movs	r3, #1
 8004100:	e0e7      	b.n	80042d2 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	691b      	ldr	r3, [r3, #16]
 8004108:	f003 0303 	and.w	r3, r3, #3
 800410c:	2b00      	cmp	r3, #0
 800410e:	d107      	bne.n	8004120 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004114:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800411c:	2301      	movs	r3, #1
 800411e:	e0d8      	b.n	80042d2 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681a      	ldr	r2, [r3, #0]
 8004124:	68bb      	ldr	r3, [r7, #8]
 8004126:	331b      	adds	r3, #27
 8004128:	011b      	lsls	r3, r3, #4
 800412a:	4413      	add	r3, r2
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f003 0204 	and.w	r2, r3, #4
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	689b      	ldr	r3, [r3, #8]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d10c      	bne.n	8004158 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681a      	ldr	r2, [r3, #0]
 8004142:	68bb      	ldr	r3, [r7, #8]
 8004144:	331b      	adds	r3, #27
 8004146:	011b      	lsls	r3, r3, #4
 8004148:	4413      	add	r3, r2
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	0d5b      	lsrs	r3, r3, #21
 800414e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	601a      	str	r2, [r3, #0]
 8004156:	e00b      	b.n	8004170 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	681a      	ldr	r2, [r3, #0]
 800415c:	68bb      	ldr	r3, [r7, #8]
 800415e:	331b      	adds	r3, #27
 8004160:	011b      	lsls	r3, r3, #4
 8004162:	4413      	add	r3, r2
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	08db      	lsrs	r3, r3, #3
 8004168:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681a      	ldr	r2, [r3, #0]
 8004174:	68bb      	ldr	r3, [r7, #8]
 8004176:	331b      	adds	r3, #27
 8004178:	011b      	lsls	r3, r3, #4
 800417a:	4413      	add	r3, r2
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f003 0202 	and.w	r2, r3, #2
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681a      	ldr	r2, [r3, #0]
 800418a:	68bb      	ldr	r3, [r7, #8]
 800418c:	331b      	adds	r3, #27
 800418e:	011b      	lsls	r3, r3, #4
 8004190:	4413      	add	r3, r2
 8004192:	3304      	adds	r3, #4
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f003 020f 	and.w	r2, r3, #15
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681a      	ldr	r2, [r3, #0]
 80041a2:	68bb      	ldr	r3, [r7, #8]
 80041a4:	331b      	adds	r3, #27
 80041a6:	011b      	lsls	r3, r3, #4
 80041a8:	4413      	add	r3, r2
 80041aa:	3304      	adds	r3, #4
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	0a1b      	lsrs	r3, r3, #8
 80041b0:	b2da      	uxtb	r2, r3
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681a      	ldr	r2, [r3, #0]
 80041ba:	68bb      	ldr	r3, [r7, #8]
 80041bc:	331b      	adds	r3, #27
 80041be:	011b      	lsls	r3, r3, #4
 80041c0:	4413      	add	r3, r2
 80041c2:	3304      	adds	r3, #4
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	0c1b      	lsrs	r3, r3, #16
 80041c8:	b29a      	uxth	r2, r3
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681a      	ldr	r2, [r3, #0]
 80041d2:	68bb      	ldr	r3, [r7, #8]
 80041d4:	011b      	lsls	r3, r3, #4
 80041d6:	4413      	add	r3, r2
 80041d8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	b2da      	uxtb	r2, r3
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681a      	ldr	r2, [r3, #0]
 80041e8:	68bb      	ldr	r3, [r7, #8]
 80041ea:	011b      	lsls	r3, r3, #4
 80041ec:	4413      	add	r3, r2
 80041ee:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	0a1a      	lsrs	r2, r3, #8
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	3301      	adds	r3, #1
 80041fa:	b2d2      	uxtb	r2, r2
 80041fc:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681a      	ldr	r2, [r3, #0]
 8004202:	68bb      	ldr	r3, [r7, #8]
 8004204:	011b      	lsls	r3, r3, #4
 8004206:	4413      	add	r3, r2
 8004208:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	0c1a      	lsrs	r2, r3, #16
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	3302      	adds	r3, #2
 8004214:	b2d2      	uxtb	r2, r2
 8004216:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681a      	ldr	r2, [r3, #0]
 800421c:	68bb      	ldr	r3, [r7, #8]
 800421e:	011b      	lsls	r3, r3, #4
 8004220:	4413      	add	r3, r2
 8004222:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	0e1a      	lsrs	r2, r3, #24
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	3303      	adds	r3, #3
 800422e:	b2d2      	uxtb	r2, r2
 8004230:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681a      	ldr	r2, [r3, #0]
 8004236:	68bb      	ldr	r3, [r7, #8]
 8004238:	011b      	lsls	r3, r3, #4
 800423a:	4413      	add	r3, r2
 800423c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004240:	681a      	ldr	r2, [r3, #0]
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	3304      	adds	r3, #4
 8004246:	b2d2      	uxtb	r2, r2
 8004248:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681a      	ldr	r2, [r3, #0]
 800424e:	68bb      	ldr	r3, [r7, #8]
 8004250:	011b      	lsls	r3, r3, #4
 8004252:	4413      	add	r3, r2
 8004254:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	0a1a      	lsrs	r2, r3, #8
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	3305      	adds	r3, #5
 8004260:	b2d2      	uxtb	r2, r2
 8004262:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	681a      	ldr	r2, [r3, #0]
 8004268:	68bb      	ldr	r3, [r7, #8]
 800426a:	011b      	lsls	r3, r3, #4
 800426c:	4413      	add	r3, r2
 800426e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	0c1a      	lsrs	r2, r3, #16
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	3306      	adds	r3, #6
 800427a:	b2d2      	uxtb	r2, r2
 800427c:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681a      	ldr	r2, [r3, #0]
 8004282:	68bb      	ldr	r3, [r7, #8]
 8004284:	011b      	lsls	r3, r3, #4
 8004286:	4413      	add	r3, r2
 8004288:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	0e1a      	lsrs	r2, r3, #24
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	3307      	adds	r3, #7
 8004294:	b2d2      	uxtb	r2, r2
 8004296:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8004298:	68bb      	ldr	r3, [r7, #8]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d108      	bne.n	80042b0 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	68da      	ldr	r2, [r3, #12]
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f042 0220 	orr.w	r2, r2, #32
 80042ac:	60da      	str	r2, [r3, #12]
 80042ae:	e007      	b.n	80042c0 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	691a      	ldr	r2, [r3, #16]
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f042 0220 	orr.w	r2, r2, #32
 80042be:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80042c0:	2300      	movs	r3, #0
 80042c2:	e006      	b.n	80042d2 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042c8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80042d0:	2301      	movs	r3, #1
  }
}
 80042d2:	4618      	mov	r0, r3
 80042d4:	371c      	adds	r7, #28
 80042d6:	46bd      	mov	sp, r7
 80042d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042dc:	4770      	bx	lr

080042de <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80042de:	b480      	push	{r7}
 80042e0:	b085      	sub	sp, #20
 80042e2:	af00      	add	r7, sp, #0
 80042e4:	6078      	str	r0, [r7, #4]
 80042e6:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	f893 3020 	ldrb.w	r3, [r3, #32]
 80042ee:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80042f0:	7bfb      	ldrb	r3, [r7, #15]
 80042f2:	2b01      	cmp	r3, #1
 80042f4:	d002      	beq.n	80042fc <HAL_CAN_ActivateNotification+0x1e>
 80042f6:	7bfb      	ldrb	r3, [r7, #15]
 80042f8:	2b02      	cmp	r3, #2
 80042fa:	d109      	bne.n	8004310 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	6959      	ldr	r1, [r3, #20]
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	683a      	ldr	r2, [r7, #0]
 8004308:	430a      	orrs	r2, r1
 800430a:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800430c:	2300      	movs	r3, #0
 800430e:	e006      	b.n	800431e <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004314:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800431c:	2301      	movs	r3, #1
  }
}
 800431e:	4618      	mov	r0, r3
 8004320:	3714      	adds	r7, #20
 8004322:	46bd      	mov	sp, r7
 8004324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004328:	4770      	bx	lr

0800432a <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800432a:	b580      	push	{r7, lr}
 800432c:	b08a      	sub	sp, #40	; 0x28
 800432e:	af00      	add	r7, sp, #0
 8004330:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8004332:	2300      	movs	r3, #0
 8004334:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	695b      	ldr	r3, [r3, #20]
 800433c:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	685b      	ldr	r3, [r3, #4]
 8004344:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	689b      	ldr	r3, [r3, #8]
 800434c:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	68db      	ldr	r3, [r3, #12]
 8004354:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	691b      	ldr	r3, [r3, #16]
 800435c:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	699b      	ldr	r3, [r3, #24]
 8004364:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8004366:	6a3b      	ldr	r3, [r7, #32]
 8004368:	f003 0301 	and.w	r3, r3, #1
 800436c:	2b00      	cmp	r3, #0
 800436e:	d07c      	beq.n	800446a <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8004370:	69bb      	ldr	r3, [r7, #24]
 8004372:	f003 0301 	and.w	r3, r3, #1
 8004376:	2b00      	cmp	r3, #0
 8004378:	d023      	beq.n	80043c2 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	2201      	movs	r2, #1
 8004380:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8004382:	69bb      	ldr	r3, [r7, #24]
 8004384:	f003 0302 	and.w	r3, r3, #2
 8004388:	2b00      	cmp	r3, #0
 800438a:	d003      	beq.n	8004394 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800438c:	6878      	ldr	r0, [r7, #4]
 800438e:	f000 f983 	bl	8004698 <HAL_CAN_TxMailbox0CompleteCallback>
 8004392:	e016      	b.n	80043c2 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8004394:	69bb      	ldr	r3, [r7, #24]
 8004396:	f003 0304 	and.w	r3, r3, #4
 800439a:	2b00      	cmp	r3, #0
 800439c:	d004      	beq.n	80043a8 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800439e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043a0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80043a4:	627b      	str	r3, [r7, #36]	; 0x24
 80043a6:	e00c      	b.n	80043c2 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80043a8:	69bb      	ldr	r3, [r7, #24]
 80043aa:	f003 0308 	and.w	r3, r3, #8
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d004      	beq.n	80043bc <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80043b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043b4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80043b8:	627b      	str	r3, [r7, #36]	; 0x24
 80043ba:	e002      	b.n	80043c2 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80043bc:	6878      	ldr	r0, [r7, #4]
 80043be:	f000 f989 	bl	80046d4 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80043c2:	69bb      	ldr	r3, [r7, #24]
 80043c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d024      	beq.n	8004416 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80043d4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80043d6:	69bb      	ldr	r3, [r7, #24]
 80043d8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d003      	beq.n	80043e8 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80043e0:	6878      	ldr	r0, [r7, #4]
 80043e2:	f000 f963 	bl	80046ac <HAL_CAN_TxMailbox1CompleteCallback>
 80043e6:	e016      	b.n	8004416 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80043e8:	69bb      	ldr	r3, [r7, #24]
 80043ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d004      	beq.n	80043fc <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80043f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043f4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80043f8:	627b      	str	r3, [r7, #36]	; 0x24
 80043fa:	e00c      	b.n	8004416 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80043fc:	69bb      	ldr	r3, [r7, #24]
 80043fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004402:	2b00      	cmp	r3, #0
 8004404:	d004      	beq.n	8004410 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8004406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004408:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800440c:	627b      	str	r3, [r7, #36]	; 0x24
 800440e:	e002      	b.n	8004416 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8004410:	6878      	ldr	r0, [r7, #4]
 8004412:	f000 f969 	bl	80046e8 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8004416:	69bb      	ldr	r3, [r7, #24]
 8004418:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800441c:	2b00      	cmp	r3, #0
 800441e:	d024      	beq.n	800446a <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004428:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800442a:	69bb      	ldr	r3, [r7, #24]
 800442c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004430:	2b00      	cmp	r3, #0
 8004432:	d003      	beq.n	800443c <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8004434:	6878      	ldr	r0, [r7, #4]
 8004436:	f000 f943 	bl	80046c0 <HAL_CAN_TxMailbox2CompleteCallback>
 800443a:	e016      	b.n	800446a <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800443c:	69bb      	ldr	r3, [r7, #24]
 800443e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004442:	2b00      	cmp	r3, #0
 8004444:	d004      	beq.n	8004450 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8004446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004448:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800444c:	627b      	str	r3, [r7, #36]	; 0x24
 800444e:	e00c      	b.n	800446a <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8004450:	69bb      	ldr	r3, [r7, #24]
 8004452:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004456:	2b00      	cmp	r3, #0
 8004458:	d004      	beq.n	8004464 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800445a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800445c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004460:	627b      	str	r3, [r7, #36]	; 0x24
 8004462:	e002      	b.n	800446a <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8004464:	6878      	ldr	r0, [r7, #4]
 8004466:	f000 f949 	bl	80046fc <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800446a:	6a3b      	ldr	r3, [r7, #32]
 800446c:	f003 0308 	and.w	r3, r3, #8
 8004470:	2b00      	cmp	r3, #0
 8004472:	d00c      	beq.n	800448e <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8004474:	697b      	ldr	r3, [r7, #20]
 8004476:	f003 0310 	and.w	r3, r3, #16
 800447a:	2b00      	cmp	r3, #0
 800447c:	d007      	beq.n	800448e <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800447e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004480:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004484:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	2210      	movs	r2, #16
 800448c:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800448e:	6a3b      	ldr	r3, [r7, #32]
 8004490:	f003 0304 	and.w	r3, r3, #4
 8004494:	2b00      	cmp	r3, #0
 8004496:	d00b      	beq.n	80044b0 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8004498:	697b      	ldr	r3, [r7, #20]
 800449a:	f003 0308 	and.w	r3, r3, #8
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d006      	beq.n	80044b0 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	2208      	movs	r2, #8
 80044a8:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80044aa:	6878      	ldr	r0, [r7, #4]
 80044ac:	f000 f930 	bl	8004710 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80044b0:	6a3b      	ldr	r3, [r7, #32]
 80044b2:	f003 0302 	and.w	r3, r3, #2
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d009      	beq.n	80044ce <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	68db      	ldr	r3, [r3, #12]
 80044c0:	f003 0303 	and.w	r3, r3, #3
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d002      	beq.n	80044ce <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80044c8:	6878      	ldr	r0, [r7, #4]
 80044ca:	f7fe fdb9 	bl	8003040 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80044ce:	6a3b      	ldr	r3, [r7, #32]
 80044d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d00c      	beq.n	80044f2 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80044d8:	693b      	ldr	r3, [r7, #16]
 80044da:	f003 0310 	and.w	r3, r3, #16
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d007      	beq.n	80044f2 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80044e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044e4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80044e8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	2210      	movs	r2, #16
 80044f0:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80044f2:	6a3b      	ldr	r3, [r7, #32]
 80044f4:	f003 0320 	and.w	r3, r3, #32
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d00b      	beq.n	8004514 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80044fc:	693b      	ldr	r3, [r7, #16]
 80044fe:	f003 0308 	and.w	r3, r3, #8
 8004502:	2b00      	cmp	r3, #0
 8004504:	d006      	beq.n	8004514 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	2208      	movs	r2, #8
 800450c:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800450e:	6878      	ldr	r0, [r7, #4]
 8004510:	f000 f912 	bl	8004738 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8004514:	6a3b      	ldr	r3, [r7, #32]
 8004516:	f003 0310 	and.w	r3, r3, #16
 800451a:	2b00      	cmp	r3, #0
 800451c:	d009      	beq.n	8004532 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	691b      	ldr	r3, [r3, #16]
 8004524:	f003 0303 	and.w	r3, r3, #3
 8004528:	2b00      	cmp	r3, #0
 800452a:	d002      	beq.n	8004532 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800452c:	6878      	ldr	r0, [r7, #4]
 800452e:	f000 f8f9 	bl	8004724 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8004532:	6a3b      	ldr	r3, [r7, #32]
 8004534:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004538:	2b00      	cmp	r3, #0
 800453a:	d00b      	beq.n	8004554 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800453c:	69fb      	ldr	r3, [r7, #28]
 800453e:	f003 0310 	and.w	r3, r3, #16
 8004542:	2b00      	cmp	r3, #0
 8004544:	d006      	beq.n	8004554 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	2210      	movs	r2, #16
 800454c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800454e:	6878      	ldr	r0, [r7, #4]
 8004550:	f000 f8fc 	bl	800474c <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8004554:	6a3b      	ldr	r3, [r7, #32]
 8004556:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800455a:	2b00      	cmp	r3, #0
 800455c:	d00b      	beq.n	8004576 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800455e:	69fb      	ldr	r3, [r7, #28]
 8004560:	f003 0308 	and.w	r3, r3, #8
 8004564:	2b00      	cmp	r3, #0
 8004566:	d006      	beq.n	8004576 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	2208      	movs	r2, #8
 800456e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8004570:	6878      	ldr	r0, [r7, #4]
 8004572:	f000 f8f5 	bl	8004760 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8004576:	6a3b      	ldr	r3, [r7, #32]
 8004578:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800457c:	2b00      	cmp	r3, #0
 800457e:	d07b      	beq.n	8004678 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8004580:	69fb      	ldr	r3, [r7, #28]
 8004582:	f003 0304 	and.w	r3, r3, #4
 8004586:	2b00      	cmp	r3, #0
 8004588:	d072      	beq.n	8004670 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800458a:	6a3b      	ldr	r3, [r7, #32]
 800458c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004590:	2b00      	cmp	r3, #0
 8004592:	d008      	beq.n	80045a6 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800459a:	2b00      	cmp	r3, #0
 800459c:	d003      	beq.n	80045a6 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800459e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045a0:	f043 0301 	orr.w	r3, r3, #1
 80045a4:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80045a6:	6a3b      	ldr	r3, [r7, #32]
 80045a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d008      	beq.n	80045c2 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d003      	beq.n	80045c2 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80045ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045bc:	f043 0302 	orr.w	r3, r3, #2
 80045c0:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80045c2:	6a3b      	ldr	r3, [r7, #32]
 80045c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d008      	beq.n	80045de <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d003      	beq.n	80045de <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80045d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045d8:	f043 0304 	orr.w	r3, r3, #4
 80045dc:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80045de:	6a3b      	ldr	r3, [r7, #32]
 80045e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d043      	beq.n	8004670 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d03e      	beq.n	8004670 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80045f8:	2b60      	cmp	r3, #96	; 0x60
 80045fa:	d02b      	beq.n	8004654 <HAL_CAN_IRQHandler+0x32a>
 80045fc:	2b60      	cmp	r3, #96	; 0x60
 80045fe:	d82e      	bhi.n	800465e <HAL_CAN_IRQHandler+0x334>
 8004600:	2b50      	cmp	r3, #80	; 0x50
 8004602:	d022      	beq.n	800464a <HAL_CAN_IRQHandler+0x320>
 8004604:	2b50      	cmp	r3, #80	; 0x50
 8004606:	d82a      	bhi.n	800465e <HAL_CAN_IRQHandler+0x334>
 8004608:	2b40      	cmp	r3, #64	; 0x40
 800460a:	d019      	beq.n	8004640 <HAL_CAN_IRQHandler+0x316>
 800460c:	2b40      	cmp	r3, #64	; 0x40
 800460e:	d826      	bhi.n	800465e <HAL_CAN_IRQHandler+0x334>
 8004610:	2b30      	cmp	r3, #48	; 0x30
 8004612:	d010      	beq.n	8004636 <HAL_CAN_IRQHandler+0x30c>
 8004614:	2b30      	cmp	r3, #48	; 0x30
 8004616:	d822      	bhi.n	800465e <HAL_CAN_IRQHandler+0x334>
 8004618:	2b10      	cmp	r3, #16
 800461a:	d002      	beq.n	8004622 <HAL_CAN_IRQHandler+0x2f8>
 800461c:	2b20      	cmp	r3, #32
 800461e:	d005      	beq.n	800462c <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8004620:	e01d      	b.n	800465e <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8004622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004624:	f043 0308 	orr.w	r3, r3, #8
 8004628:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800462a:	e019      	b.n	8004660 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800462c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800462e:	f043 0310 	orr.w	r3, r3, #16
 8004632:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004634:	e014      	b.n	8004660 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8004636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004638:	f043 0320 	orr.w	r3, r3, #32
 800463c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800463e:	e00f      	b.n	8004660 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8004640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004642:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004646:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004648:	e00a      	b.n	8004660 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800464a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800464c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004650:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004652:	e005      	b.n	8004660 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8004654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004656:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800465a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800465c:	e000      	b.n	8004660 <HAL_CAN_IRQHandler+0x336>
            break;
 800465e:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	699a      	ldr	r2, [r3, #24]
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800466e:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	2204      	movs	r2, #4
 8004676:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8004678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800467a:	2b00      	cmp	r3, #0
 800467c:	d008      	beq.n	8004690 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004684:	431a      	orrs	r2, r3
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800468a:	6878      	ldr	r0, [r7, #4]
 800468c:	f000 f872 	bl	8004774 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8004690:	bf00      	nop
 8004692:	3728      	adds	r7, #40	; 0x28
 8004694:	46bd      	mov	sp, r7
 8004696:	bd80      	pop	{r7, pc}

08004698 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004698:	b480      	push	{r7}
 800469a:	b083      	sub	sp, #12
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80046a0:	bf00      	nop
 80046a2:	370c      	adds	r7, #12
 80046a4:	46bd      	mov	sp, r7
 80046a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046aa:	4770      	bx	lr

080046ac <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80046ac:	b480      	push	{r7}
 80046ae:	b083      	sub	sp, #12
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80046b4:	bf00      	nop
 80046b6:	370c      	adds	r7, #12
 80046b8:	46bd      	mov	sp, r7
 80046ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046be:	4770      	bx	lr

080046c0 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80046c0:	b480      	push	{r7}
 80046c2:	b083      	sub	sp, #12
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80046c8:	bf00      	nop
 80046ca:	370c      	adds	r7, #12
 80046cc:	46bd      	mov	sp, r7
 80046ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d2:	4770      	bx	lr

080046d4 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80046d4:	b480      	push	{r7}
 80046d6:	b083      	sub	sp, #12
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80046dc:	bf00      	nop
 80046de:	370c      	adds	r7, #12
 80046e0:	46bd      	mov	sp, r7
 80046e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e6:	4770      	bx	lr

080046e8 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80046e8:	b480      	push	{r7}
 80046ea:	b083      	sub	sp, #12
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80046f0:	bf00      	nop
 80046f2:	370c      	adds	r7, #12
 80046f4:	46bd      	mov	sp, r7
 80046f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fa:	4770      	bx	lr

080046fc <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80046fc:	b480      	push	{r7}
 80046fe:	b083      	sub	sp, #12
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8004704:	bf00      	nop
 8004706:	370c      	adds	r7, #12
 8004708:	46bd      	mov	sp, r7
 800470a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470e:	4770      	bx	lr

08004710 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8004710:	b480      	push	{r7}
 8004712:	b083      	sub	sp, #12
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8004718:	bf00      	nop
 800471a:	370c      	adds	r7, #12
 800471c:	46bd      	mov	sp, r7
 800471e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004722:	4770      	bx	lr

08004724 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8004724:	b480      	push	{r7}
 8004726:	b083      	sub	sp, #12
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800472c:	bf00      	nop
 800472e:	370c      	adds	r7, #12
 8004730:	46bd      	mov	sp, r7
 8004732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004736:	4770      	bx	lr

08004738 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8004738:	b480      	push	{r7}
 800473a:	b083      	sub	sp, #12
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8004740:	bf00      	nop
 8004742:	370c      	adds	r7, #12
 8004744:	46bd      	mov	sp, r7
 8004746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474a:	4770      	bx	lr

0800474c <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800474c:	b480      	push	{r7}
 800474e:	b083      	sub	sp, #12
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8004754:	bf00      	nop
 8004756:	370c      	adds	r7, #12
 8004758:	46bd      	mov	sp, r7
 800475a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475e:	4770      	bx	lr

08004760 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8004760:	b480      	push	{r7}
 8004762:	b083      	sub	sp, #12
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8004768:	bf00      	nop
 800476a:	370c      	adds	r7, #12
 800476c:	46bd      	mov	sp, r7
 800476e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004772:	4770      	bx	lr

08004774 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8004774:	b480      	push	{r7}
 8004776:	b083      	sub	sp, #12
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800477c:	bf00      	nop
 800477e:	370c      	adds	r7, #12
 8004780:	46bd      	mov	sp, r7
 8004782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004786:	4770      	bx	lr

08004788 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004788:	b480      	push	{r7}
 800478a:	b085      	sub	sp, #20
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	f003 0307 	and.w	r3, r3, #7
 8004796:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004798:	4b0c      	ldr	r3, [pc, #48]	; (80047cc <__NVIC_SetPriorityGrouping+0x44>)
 800479a:	68db      	ldr	r3, [r3, #12]
 800479c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800479e:	68ba      	ldr	r2, [r7, #8]
 80047a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80047a4:	4013      	ands	r3, r2
 80047a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80047ac:	68bb      	ldr	r3, [r7, #8]
 80047ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80047b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80047b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80047b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80047ba:	4a04      	ldr	r2, [pc, #16]	; (80047cc <__NVIC_SetPriorityGrouping+0x44>)
 80047bc:	68bb      	ldr	r3, [r7, #8]
 80047be:	60d3      	str	r3, [r2, #12]
}
 80047c0:	bf00      	nop
 80047c2:	3714      	adds	r7, #20
 80047c4:	46bd      	mov	sp, r7
 80047c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ca:	4770      	bx	lr
 80047cc:	e000ed00 	.word	0xe000ed00

080047d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80047d0:	b480      	push	{r7}
 80047d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80047d4:	4b04      	ldr	r3, [pc, #16]	; (80047e8 <__NVIC_GetPriorityGrouping+0x18>)
 80047d6:	68db      	ldr	r3, [r3, #12]
 80047d8:	0a1b      	lsrs	r3, r3, #8
 80047da:	f003 0307 	and.w	r3, r3, #7
}
 80047de:	4618      	mov	r0, r3
 80047e0:	46bd      	mov	sp, r7
 80047e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e6:	4770      	bx	lr
 80047e8:	e000ed00 	.word	0xe000ed00

080047ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80047ec:	b480      	push	{r7}
 80047ee:	b083      	sub	sp, #12
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	4603      	mov	r3, r0
 80047f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80047f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	db0b      	blt.n	8004816 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80047fe:	79fb      	ldrb	r3, [r7, #7]
 8004800:	f003 021f 	and.w	r2, r3, #31
 8004804:	4907      	ldr	r1, [pc, #28]	; (8004824 <__NVIC_EnableIRQ+0x38>)
 8004806:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800480a:	095b      	lsrs	r3, r3, #5
 800480c:	2001      	movs	r0, #1
 800480e:	fa00 f202 	lsl.w	r2, r0, r2
 8004812:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004816:	bf00      	nop
 8004818:	370c      	adds	r7, #12
 800481a:	46bd      	mov	sp, r7
 800481c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004820:	4770      	bx	lr
 8004822:	bf00      	nop
 8004824:	e000e100 	.word	0xe000e100

08004828 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004828:	b480      	push	{r7}
 800482a:	b083      	sub	sp, #12
 800482c:	af00      	add	r7, sp, #0
 800482e:	4603      	mov	r3, r0
 8004830:	6039      	str	r1, [r7, #0]
 8004832:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004834:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004838:	2b00      	cmp	r3, #0
 800483a:	db0a      	blt.n	8004852 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	b2da      	uxtb	r2, r3
 8004840:	490c      	ldr	r1, [pc, #48]	; (8004874 <__NVIC_SetPriority+0x4c>)
 8004842:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004846:	0112      	lsls	r2, r2, #4
 8004848:	b2d2      	uxtb	r2, r2
 800484a:	440b      	add	r3, r1
 800484c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004850:	e00a      	b.n	8004868 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	b2da      	uxtb	r2, r3
 8004856:	4908      	ldr	r1, [pc, #32]	; (8004878 <__NVIC_SetPriority+0x50>)
 8004858:	79fb      	ldrb	r3, [r7, #7]
 800485a:	f003 030f 	and.w	r3, r3, #15
 800485e:	3b04      	subs	r3, #4
 8004860:	0112      	lsls	r2, r2, #4
 8004862:	b2d2      	uxtb	r2, r2
 8004864:	440b      	add	r3, r1
 8004866:	761a      	strb	r2, [r3, #24]
}
 8004868:	bf00      	nop
 800486a:	370c      	adds	r7, #12
 800486c:	46bd      	mov	sp, r7
 800486e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004872:	4770      	bx	lr
 8004874:	e000e100 	.word	0xe000e100
 8004878:	e000ed00 	.word	0xe000ed00

0800487c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800487c:	b480      	push	{r7}
 800487e:	b089      	sub	sp, #36	; 0x24
 8004880:	af00      	add	r7, sp, #0
 8004882:	60f8      	str	r0, [r7, #12]
 8004884:	60b9      	str	r1, [r7, #8]
 8004886:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	f003 0307 	and.w	r3, r3, #7
 800488e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004890:	69fb      	ldr	r3, [r7, #28]
 8004892:	f1c3 0307 	rsb	r3, r3, #7
 8004896:	2b04      	cmp	r3, #4
 8004898:	bf28      	it	cs
 800489a:	2304      	movcs	r3, #4
 800489c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800489e:	69fb      	ldr	r3, [r7, #28]
 80048a0:	3304      	adds	r3, #4
 80048a2:	2b06      	cmp	r3, #6
 80048a4:	d902      	bls.n	80048ac <NVIC_EncodePriority+0x30>
 80048a6:	69fb      	ldr	r3, [r7, #28]
 80048a8:	3b03      	subs	r3, #3
 80048aa:	e000      	b.n	80048ae <NVIC_EncodePriority+0x32>
 80048ac:	2300      	movs	r3, #0
 80048ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80048b0:	f04f 32ff 	mov.w	r2, #4294967295
 80048b4:	69bb      	ldr	r3, [r7, #24]
 80048b6:	fa02 f303 	lsl.w	r3, r2, r3
 80048ba:	43da      	mvns	r2, r3
 80048bc:	68bb      	ldr	r3, [r7, #8]
 80048be:	401a      	ands	r2, r3
 80048c0:	697b      	ldr	r3, [r7, #20]
 80048c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80048c4:	f04f 31ff 	mov.w	r1, #4294967295
 80048c8:	697b      	ldr	r3, [r7, #20]
 80048ca:	fa01 f303 	lsl.w	r3, r1, r3
 80048ce:	43d9      	mvns	r1, r3
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80048d4:	4313      	orrs	r3, r2
         );
}
 80048d6:	4618      	mov	r0, r3
 80048d8:	3724      	adds	r7, #36	; 0x24
 80048da:	46bd      	mov	sp, r7
 80048dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e0:	4770      	bx	lr

080048e2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80048e2:	b580      	push	{r7, lr}
 80048e4:	b082      	sub	sp, #8
 80048e6:	af00      	add	r7, sp, #0
 80048e8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80048ea:	6878      	ldr	r0, [r7, #4]
 80048ec:	f7ff ff4c 	bl	8004788 <__NVIC_SetPriorityGrouping>
}
 80048f0:	bf00      	nop
 80048f2:	3708      	adds	r7, #8
 80048f4:	46bd      	mov	sp, r7
 80048f6:	bd80      	pop	{r7, pc}

080048f8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b086      	sub	sp, #24
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	4603      	mov	r3, r0
 8004900:	60b9      	str	r1, [r7, #8]
 8004902:	607a      	str	r2, [r7, #4]
 8004904:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004906:	2300      	movs	r3, #0
 8004908:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800490a:	f7ff ff61 	bl	80047d0 <__NVIC_GetPriorityGrouping>
 800490e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004910:	687a      	ldr	r2, [r7, #4]
 8004912:	68b9      	ldr	r1, [r7, #8]
 8004914:	6978      	ldr	r0, [r7, #20]
 8004916:	f7ff ffb1 	bl	800487c <NVIC_EncodePriority>
 800491a:	4602      	mov	r2, r0
 800491c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004920:	4611      	mov	r1, r2
 8004922:	4618      	mov	r0, r3
 8004924:	f7ff ff80 	bl	8004828 <__NVIC_SetPriority>
}
 8004928:	bf00      	nop
 800492a:	3718      	adds	r7, #24
 800492c:	46bd      	mov	sp, r7
 800492e:	bd80      	pop	{r7, pc}

08004930 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004930:	b580      	push	{r7, lr}
 8004932:	b082      	sub	sp, #8
 8004934:	af00      	add	r7, sp, #0
 8004936:	4603      	mov	r3, r0
 8004938:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800493a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800493e:	4618      	mov	r0, r3
 8004940:	f7ff ff54 	bl	80047ec <__NVIC_EnableIRQ>
}
 8004944:	bf00      	nop
 8004946:	3708      	adds	r7, #8
 8004948:	46bd      	mov	sp, r7
 800494a:	bd80      	pop	{r7, pc}

0800494c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800494c:	b480      	push	{r7}
 800494e:	b089      	sub	sp, #36	; 0x24
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
 8004954:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004956:	2300      	movs	r3, #0
 8004958:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800495a:	2300      	movs	r3, #0
 800495c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800495e:	2300      	movs	r3, #0
 8004960:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004962:	2300      	movs	r3, #0
 8004964:	61fb      	str	r3, [r7, #28]
 8004966:	e165      	b.n	8004c34 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004968:	2201      	movs	r2, #1
 800496a:	69fb      	ldr	r3, [r7, #28]
 800496c:	fa02 f303 	lsl.w	r3, r2, r3
 8004970:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	697a      	ldr	r2, [r7, #20]
 8004978:	4013      	ands	r3, r2
 800497a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800497c:	693a      	ldr	r2, [r7, #16]
 800497e:	697b      	ldr	r3, [r7, #20]
 8004980:	429a      	cmp	r2, r3
 8004982:	f040 8154 	bne.w	8004c2e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	685b      	ldr	r3, [r3, #4]
 800498a:	f003 0303 	and.w	r3, r3, #3
 800498e:	2b01      	cmp	r3, #1
 8004990:	d005      	beq.n	800499e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	685b      	ldr	r3, [r3, #4]
 8004996:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800499a:	2b02      	cmp	r3, #2
 800499c:	d130      	bne.n	8004a00 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	689b      	ldr	r3, [r3, #8]
 80049a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80049a4:	69fb      	ldr	r3, [r7, #28]
 80049a6:	005b      	lsls	r3, r3, #1
 80049a8:	2203      	movs	r2, #3
 80049aa:	fa02 f303 	lsl.w	r3, r2, r3
 80049ae:	43db      	mvns	r3, r3
 80049b0:	69ba      	ldr	r2, [r7, #24]
 80049b2:	4013      	ands	r3, r2
 80049b4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	68da      	ldr	r2, [r3, #12]
 80049ba:	69fb      	ldr	r3, [r7, #28]
 80049bc:	005b      	lsls	r3, r3, #1
 80049be:	fa02 f303 	lsl.w	r3, r2, r3
 80049c2:	69ba      	ldr	r2, [r7, #24]
 80049c4:	4313      	orrs	r3, r2
 80049c6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	69ba      	ldr	r2, [r7, #24]
 80049cc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	685b      	ldr	r3, [r3, #4]
 80049d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80049d4:	2201      	movs	r2, #1
 80049d6:	69fb      	ldr	r3, [r7, #28]
 80049d8:	fa02 f303 	lsl.w	r3, r2, r3
 80049dc:	43db      	mvns	r3, r3
 80049de:	69ba      	ldr	r2, [r7, #24]
 80049e0:	4013      	ands	r3, r2
 80049e2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	685b      	ldr	r3, [r3, #4]
 80049e8:	091b      	lsrs	r3, r3, #4
 80049ea:	f003 0201 	and.w	r2, r3, #1
 80049ee:	69fb      	ldr	r3, [r7, #28]
 80049f0:	fa02 f303 	lsl.w	r3, r2, r3
 80049f4:	69ba      	ldr	r2, [r7, #24]
 80049f6:	4313      	orrs	r3, r2
 80049f8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	69ba      	ldr	r2, [r7, #24]
 80049fe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	685b      	ldr	r3, [r3, #4]
 8004a04:	f003 0303 	and.w	r3, r3, #3
 8004a08:	2b03      	cmp	r3, #3
 8004a0a:	d017      	beq.n	8004a3c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	68db      	ldr	r3, [r3, #12]
 8004a10:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004a12:	69fb      	ldr	r3, [r7, #28]
 8004a14:	005b      	lsls	r3, r3, #1
 8004a16:	2203      	movs	r2, #3
 8004a18:	fa02 f303 	lsl.w	r3, r2, r3
 8004a1c:	43db      	mvns	r3, r3
 8004a1e:	69ba      	ldr	r2, [r7, #24]
 8004a20:	4013      	ands	r3, r2
 8004a22:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	689a      	ldr	r2, [r3, #8]
 8004a28:	69fb      	ldr	r3, [r7, #28]
 8004a2a:	005b      	lsls	r3, r3, #1
 8004a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8004a30:	69ba      	ldr	r2, [r7, #24]
 8004a32:	4313      	orrs	r3, r2
 8004a34:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	69ba      	ldr	r2, [r7, #24]
 8004a3a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	685b      	ldr	r3, [r3, #4]
 8004a40:	f003 0303 	and.w	r3, r3, #3
 8004a44:	2b02      	cmp	r3, #2
 8004a46:	d123      	bne.n	8004a90 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004a48:	69fb      	ldr	r3, [r7, #28]
 8004a4a:	08da      	lsrs	r2, r3, #3
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	3208      	adds	r2, #8
 8004a50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a54:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004a56:	69fb      	ldr	r3, [r7, #28]
 8004a58:	f003 0307 	and.w	r3, r3, #7
 8004a5c:	009b      	lsls	r3, r3, #2
 8004a5e:	220f      	movs	r2, #15
 8004a60:	fa02 f303 	lsl.w	r3, r2, r3
 8004a64:	43db      	mvns	r3, r3
 8004a66:	69ba      	ldr	r2, [r7, #24]
 8004a68:	4013      	ands	r3, r2
 8004a6a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	691a      	ldr	r2, [r3, #16]
 8004a70:	69fb      	ldr	r3, [r7, #28]
 8004a72:	f003 0307 	and.w	r3, r3, #7
 8004a76:	009b      	lsls	r3, r3, #2
 8004a78:	fa02 f303 	lsl.w	r3, r2, r3
 8004a7c:	69ba      	ldr	r2, [r7, #24]
 8004a7e:	4313      	orrs	r3, r2
 8004a80:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004a82:	69fb      	ldr	r3, [r7, #28]
 8004a84:	08da      	lsrs	r2, r3, #3
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	3208      	adds	r2, #8
 8004a8a:	69b9      	ldr	r1, [r7, #24]
 8004a8c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004a96:	69fb      	ldr	r3, [r7, #28]
 8004a98:	005b      	lsls	r3, r3, #1
 8004a9a:	2203      	movs	r2, #3
 8004a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8004aa0:	43db      	mvns	r3, r3
 8004aa2:	69ba      	ldr	r2, [r7, #24]
 8004aa4:	4013      	ands	r3, r2
 8004aa6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	685b      	ldr	r3, [r3, #4]
 8004aac:	f003 0203 	and.w	r2, r3, #3
 8004ab0:	69fb      	ldr	r3, [r7, #28]
 8004ab2:	005b      	lsls	r3, r3, #1
 8004ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ab8:	69ba      	ldr	r2, [r7, #24]
 8004aba:	4313      	orrs	r3, r2
 8004abc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	69ba      	ldr	r2, [r7, #24]
 8004ac2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004ac4:	683b      	ldr	r3, [r7, #0]
 8004ac6:	685b      	ldr	r3, [r3, #4]
 8004ac8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	f000 80ae 	beq.w	8004c2e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	60fb      	str	r3, [r7, #12]
 8004ad6:	4b5d      	ldr	r3, [pc, #372]	; (8004c4c <HAL_GPIO_Init+0x300>)
 8004ad8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ada:	4a5c      	ldr	r2, [pc, #368]	; (8004c4c <HAL_GPIO_Init+0x300>)
 8004adc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004ae0:	6453      	str	r3, [r2, #68]	; 0x44
 8004ae2:	4b5a      	ldr	r3, [pc, #360]	; (8004c4c <HAL_GPIO_Init+0x300>)
 8004ae4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ae6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004aea:	60fb      	str	r3, [r7, #12]
 8004aec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004aee:	4a58      	ldr	r2, [pc, #352]	; (8004c50 <HAL_GPIO_Init+0x304>)
 8004af0:	69fb      	ldr	r3, [r7, #28]
 8004af2:	089b      	lsrs	r3, r3, #2
 8004af4:	3302      	adds	r3, #2
 8004af6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004afa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004afc:	69fb      	ldr	r3, [r7, #28]
 8004afe:	f003 0303 	and.w	r3, r3, #3
 8004b02:	009b      	lsls	r3, r3, #2
 8004b04:	220f      	movs	r2, #15
 8004b06:	fa02 f303 	lsl.w	r3, r2, r3
 8004b0a:	43db      	mvns	r3, r3
 8004b0c:	69ba      	ldr	r2, [r7, #24]
 8004b0e:	4013      	ands	r3, r2
 8004b10:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	4a4f      	ldr	r2, [pc, #316]	; (8004c54 <HAL_GPIO_Init+0x308>)
 8004b16:	4293      	cmp	r3, r2
 8004b18:	d025      	beq.n	8004b66 <HAL_GPIO_Init+0x21a>
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	4a4e      	ldr	r2, [pc, #312]	; (8004c58 <HAL_GPIO_Init+0x30c>)
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	d01f      	beq.n	8004b62 <HAL_GPIO_Init+0x216>
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	4a4d      	ldr	r2, [pc, #308]	; (8004c5c <HAL_GPIO_Init+0x310>)
 8004b26:	4293      	cmp	r3, r2
 8004b28:	d019      	beq.n	8004b5e <HAL_GPIO_Init+0x212>
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	4a4c      	ldr	r2, [pc, #304]	; (8004c60 <HAL_GPIO_Init+0x314>)
 8004b2e:	4293      	cmp	r3, r2
 8004b30:	d013      	beq.n	8004b5a <HAL_GPIO_Init+0x20e>
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	4a4b      	ldr	r2, [pc, #300]	; (8004c64 <HAL_GPIO_Init+0x318>)
 8004b36:	4293      	cmp	r3, r2
 8004b38:	d00d      	beq.n	8004b56 <HAL_GPIO_Init+0x20a>
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	4a4a      	ldr	r2, [pc, #296]	; (8004c68 <HAL_GPIO_Init+0x31c>)
 8004b3e:	4293      	cmp	r3, r2
 8004b40:	d007      	beq.n	8004b52 <HAL_GPIO_Init+0x206>
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	4a49      	ldr	r2, [pc, #292]	; (8004c6c <HAL_GPIO_Init+0x320>)
 8004b46:	4293      	cmp	r3, r2
 8004b48:	d101      	bne.n	8004b4e <HAL_GPIO_Init+0x202>
 8004b4a:	2306      	movs	r3, #6
 8004b4c:	e00c      	b.n	8004b68 <HAL_GPIO_Init+0x21c>
 8004b4e:	2307      	movs	r3, #7
 8004b50:	e00a      	b.n	8004b68 <HAL_GPIO_Init+0x21c>
 8004b52:	2305      	movs	r3, #5
 8004b54:	e008      	b.n	8004b68 <HAL_GPIO_Init+0x21c>
 8004b56:	2304      	movs	r3, #4
 8004b58:	e006      	b.n	8004b68 <HAL_GPIO_Init+0x21c>
 8004b5a:	2303      	movs	r3, #3
 8004b5c:	e004      	b.n	8004b68 <HAL_GPIO_Init+0x21c>
 8004b5e:	2302      	movs	r3, #2
 8004b60:	e002      	b.n	8004b68 <HAL_GPIO_Init+0x21c>
 8004b62:	2301      	movs	r3, #1
 8004b64:	e000      	b.n	8004b68 <HAL_GPIO_Init+0x21c>
 8004b66:	2300      	movs	r3, #0
 8004b68:	69fa      	ldr	r2, [r7, #28]
 8004b6a:	f002 0203 	and.w	r2, r2, #3
 8004b6e:	0092      	lsls	r2, r2, #2
 8004b70:	4093      	lsls	r3, r2
 8004b72:	69ba      	ldr	r2, [r7, #24]
 8004b74:	4313      	orrs	r3, r2
 8004b76:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004b78:	4935      	ldr	r1, [pc, #212]	; (8004c50 <HAL_GPIO_Init+0x304>)
 8004b7a:	69fb      	ldr	r3, [r7, #28]
 8004b7c:	089b      	lsrs	r3, r3, #2
 8004b7e:	3302      	adds	r3, #2
 8004b80:	69ba      	ldr	r2, [r7, #24]
 8004b82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004b86:	4b3a      	ldr	r3, [pc, #232]	; (8004c70 <HAL_GPIO_Init+0x324>)
 8004b88:	689b      	ldr	r3, [r3, #8]
 8004b8a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004b8c:	693b      	ldr	r3, [r7, #16]
 8004b8e:	43db      	mvns	r3, r3
 8004b90:	69ba      	ldr	r2, [r7, #24]
 8004b92:	4013      	ands	r3, r2
 8004b94:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	685b      	ldr	r3, [r3, #4]
 8004b9a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d003      	beq.n	8004baa <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8004ba2:	69ba      	ldr	r2, [r7, #24]
 8004ba4:	693b      	ldr	r3, [r7, #16]
 8004ba6:	4313      	orrs	r3, r2
 8004ba8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004baa:	4a31      	ldr	r2, [pc, #196]	; (8004c70 <HAL_GPIO_Init+0x324>)
 8004bac:	69bb      	ldr	r3, [r7, #24]
 8004bae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004bb0:	4b2f      	ldr	r3, [pc, #188]	; (8004c70 <HAL_GPIO_Init+0x324>)
 8004bb2:	68db      	ldr	r3, [r3, #12]
 8004bb4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004bb6:	693b      	ldr	r3, [r7, #16]
 8004bb8:	43db      	mvns	r3, r3
 8004bba:	69ba      	ldr	r2, [r7, #24]
 8004bbc:	4013      	ands	r3, r2
 8004bbe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	685b      	ldr	r3, [r3, #4]
 8004bc4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d003      	beq.n	8004bd4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8004bcc:	69ba      	ldr	r2, [r7, #24]
 8004bce:	693b      	ldr	r3, [r7, #16]
 8004bd0:	4313      	orrs	r3, r2
 8004bd2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004bd4:	4a26      	ldr	r2, [pc, #152]	; (8004c70 <HAL_GPIO_Init+0x324>)
 8004bd6:	69bb      	ldr	r3, [r7, #24]
 8004bd8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004bda:	4b25      	ldr	r3, [pc, #148]	; (8004c70 <HAL_GPIO_Init+0x324>)
 8004bdc:	685b      	ldr	r3, [r3, #4]
 8004bde:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004be0:	693b      	ldr	r3, [r7, #16]
 8004be2:	43db      	mvns	r3, r3
 8004be4:	69ba      	ldr	r2, [r7, #24]
 8004be6:	4013      	ands	r3, r2
 8004be8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	685b      	ldr	r3, [r3, #4]
 8004bee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d003      	beq.n	8004bfe <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8004bf6:	69ba      	ldr	r2, [r7, #24]
 8004bf8:	693b      	ldr	r3, [r7, #16]
 8004bfa:	4313      	orrs	r3, r2
 8004bfc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004bfe:	4a1c      	ldr	r2, [pc, #112]	; (8004c70 <HAL_GPIO_Init+0x324>)
 8004c00:	69bb      	ldr	r3, [r7, #24]
 8004c02:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004c04:	4b1a      	ldr	r3, [pc, #104]	; (8004c70 <HAL_GPIO_Init+0x324>)
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004c0a:	693b      	ldr	r3, [r7, #16]
 8004c0c:	43db      	mvns	r3, r3
 8004c0e:	69ba      	ldr	r2, [r7, #24]
 8004c10:	4013      	ands	r3, r2
 8004c12:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	685b      	ldr	r3, [r3, #4]
 8004c18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d003      	beq.n	8004c28 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004c20:	69ba      	ldr	r2, [r7, #24]
 8004c22:	693b      	ldr	r3, [r7, #16]
 8004c24:	4313      	orrs	r3, r2
 8004c26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004c28:	4a11      	ldr	r2, [pc, #68]	; (8004c70 <HAL_GPIO_Init+0x324>)
 8004c2a:	69bb      	ldr	r3, [r7, #24]
 8004c2c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004c2e:	69fb      	ldr	r3, [r7, #28]
 8004c30:	3301      	adds	r3, #1
 8004c32:	61fb      	str	r3, [r7, #28]
 8004c34:	69fb      	ldr	r3, [r7, #28]
 8004c36:	2b0f      	cmp	r3, #15
 8004c38:	f67f ae96 	bls.w	8004968 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004c3c:	bf00      	nop
 8004c3e:	bf00      	nop
 8004c40:	3724      	adds	r7, #36	; 0x24
 8004c42:	46bd      	mov	sp, r7
 8004c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c48:	4770      	bx	lr
 8004c4a:	bf00      	nop
 8004c4c:	40023800 	.word	0x40023800
 8004c50:	40013800 	.word	0x40013800
 8004c54:	40020000 	.word	0x40020000
 8004c58:	40020400 	.word	0x40020400
 8004c5c:	40020800 	.word	0x40020800
 8004c60:	40020c00 	.word	0x40020c00
 8004c64:	40021000 	.word	0x40021000
 8004c68:	40021400 	.word	0x40021400
 8004c6c:	40021800 	.word	0x40021800
 8004c70:	40013c00 	.word	0x40013c00

08004c74 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004c74:	b480      	push	{r7}
 8004c76:	b085      	sub	sp, #20
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
 8004c7c:	460b      	mov	r3, r1
 8004c7e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	691a      	ldr	r2, [r3, #16]
 8004c84:	887b      	ldrh	r3, [r7, #2]
 8004c86:	4013      	ands	r3, r2
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d002      	beq.n	8004c92 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004c8c:	2301      	movs	r3, #1
 8004c8e:	73fb      	strb	r3, [r7, #15]
 8004c90:	e001      	b.n	8004c96 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004c92:	2300      	movs	r3, #0
 8004c94:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004c96:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c98:	4618      	mov	r0, r3
 8004c9a:	3714      	adds	r7, #20
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca2:	4770      	bx	lr

08004ca4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004ca4:	b480      	push	{r7}
 8004ca6:	b083      	sub	sp, #12
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
 8004cac:	460b      	mov	r3, r1
 8004cae:	807b      	strh	r3, [r7, #2]
 8004cb0:	4613      	mov	r3, r2
 8004cb2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004cb4:	787b      	ldrb	r3, [r7, #1]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d003      	beq.n	8004cc2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004cba:	887a      	ldrh	r2, [r7, #2]
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004cc0:	e003      	b.n	8004cca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004cc2:	887b      	ldrh	r3, [r7, #2]
 8004cc4:	041a      	lsls	r2, r3, #16
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	619a      	str	r2, [r3, #24]
}
 8004cca:	bf00      	nop
 8004ccc:	370c      	adds	r7, #12
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd4:	4770      	bx	lr

08004cd6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004cd6:	b480      	push	{r7}
 8004cd8:	b085      	sub	sp, #20
 8004cda:	af00      	add	r7, sp, #0
 8004cdc:	6078      	str	r0, [r7, #4]
 8004cde:	460b      	mov	r3, r1
 8004ce0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	695b      	ldr	r3, [r3, #20]
 8004ce6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004ce8:	887a      	ldrh	r2, [r7, #2]
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	4013      	ands	r3, r2
 8004cee:	041a      	lsls	r2, r3, #16
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	43d9      	mvns	r1, r3
 8004cf4:	887b      	ldrh	r3, [r7, #2]
 8004cf6:	400b      	ands	r3, r1
 8004cf8:	431a      	orrs	r2, r3
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	619a      	str	r2, [r3, #24]
}
 8004cfe:	bf00      	nop
 8004d00:	3714      	adds	r7, #20
 8004d02:	46bd      	mov	sp, r7
 8004d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d08:	4770      	bx	lr
	...

08004d0c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b082      	sub	sp, #8
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	4603      	mov	r3, r0
 8004d14:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004d16:	4b08      	ldr	r3, [pc, #32]	; (8004d38 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004d18:	695a      	ldr	r2, [r3, #20]
 8004d1a:	88fb      	ldrh	r3, [r7, #6]
 8004d1c:	4013      	ands	r3, r2
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d006      	beq.n	8004d30 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004d22:	4a05      	ldr	r2, [pc, #20]	; (8004d38 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004d24:	88fb      	ldrh	r3, [r7, #6]
 8004d26:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004d28:	88fb      	ldrh	r3, [r7, #6]
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	f7fe f924 	bl	8002f78 <HAL_GPIO_EXTI_Callback>
  }
}
 8004d30:	bf00      	nop
 8004d32:	3708      	adds	r7, #8
 8004d34:	46bd      	mov	sp, r7
 8004d36:	bd80      	pop	{r7, pc}
 8004d38:	40013c00 	.word	0x40013c00

08004d3c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b082      	sub	sp, #8
 8004d40:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8004d42:	2300      	movs	r3, #0
 8004d44:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004d46:	2300      	movs	r3, #0
 8004d48:	603b      	str	r3, [r7, #0]
 8004d4a:	4b20      	ldr	r3, [pc, #128]	; (8004dcc <HAL_PWREx_EnableOverDrive+0x90>)
 8004d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d4e:	4a1f      	ldr	r2, [pc, #124]	; (8004dcc <HAL_PWREx_EnableOverDrive+0x90>)
 8004d50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d54:	6413      	str	r3, [r2, #64]	; 0x40
 8004d56:	4b1d      	ldr	r3, [pc, #116]	; (8004dcc <HAL_PWREx_EnableOverDrive+0x90>)
 8004d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d5e:	603b      	str	r3, [r7, #0]
 8004d60:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004d62:	4b1b      	ldr	r3, [pc, #108]	; (8004dd0 <HAL_PWREx_EnableOverDrive+0x94>)
 8004d64:	2201      	movs	r2, #1
 8004d66:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004d68:	f7fe fea0 	bl	8003aac <HAL_GetTick>
 8004d6c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004d6e:	e009      	b.n	8004d84 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004d70:	f7fe fe9c 	bl	8003aac <HAL_GetTick>
 8004d74:	4602      	mov	r2, r0
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	1ad3      	subs	r3, r2, r3
 8004d7a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004d7e:	d901      	bls.n	8004d84 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8004d80:	2303      	movs	r3, #3
 8004d82:	e01f      	b.n	8004dc4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004d84:	4b13      	ldr	r3, [pc, #76]	; (8004dd4 <HAL_PWREx_EnableOverDrive+0x98>)
 8004d86:	685b      	ldr	r3, [r3, #4]
 8004d88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d90:	d1ee      	bne.n	8004d70 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004d92:	4b11      	ldr	r3, [pc, #68]	; (8004dd8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004d94:	2201      	movs	r2, #1
 8004d96:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004d98:	f7fe fe88 	bl	8003aac <HAL_GetTick>
 8004d9c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004d9e:	e009      	b.n	8004db4 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004da0:	f7fe fe84 	bl	8003aac <HAL_GetTick>
 8004da4:	4602      	mov	r2, r0
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	1ad3      	subs	r3, r2, r3
 8004daa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004dae:	d901      	bls.n	8004db4 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8004db0:	2303      	movs	r3, #3
 8004db2:	e007      	b.n	8004dc4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004db4:	4b07      	ldr	r3, [pc, #28]	; (8004dd4 <HAL_PWREx_EnableOverDrive+0x98>)
 8004db6:	685b      	ldr	r3, [r3, #4]
 8004db8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004dbc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004dc0:	d1ee      	bne.n	8004da0 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8004dc2:	2300      	movs	r3, #0
}
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	3708      	adds	r7, #8
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	bd80      	pop	{r7, pc}
 8004dcc:	40023800 	.word	0x40023800
 8004dd0:	420e0040 	.word	0x420e0040
 8004dd4:	40007000 	.word	0x40007000
 8004dd8:	420e0044 	.word	0x420e0044

08004ddc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b084      	sub	sp, #16
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
 8004de4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d101      	bne.n	8004df0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004dec:	2301      	movs	r3, #1
 8004dee:	e0cc      	b.n	8004f8a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004df0:	4b68      	ldr	r3, [pc, #416]	; (8004f94 <HAL_RCC_ClockConfig+0x1b8>)
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f003 030f 	and.w	r3, r3, #15
 8004df8:	683a      	ldr	r2, [r7, #0]
 8004dfa:	429a      	cmp	r2, r3
 8004dfc:	d90c      	bls.n	8004e18 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004dfe:	4b65      	ldr	r3, [pc, #404]	; (8004f94 <HAL_RCC_ClockConfig+0x1b8>)
 8004e00:	683a      	ldr	r2, [r7, #0]
 8004e02:	b2d2      	uxtb	r2, r2
 8004e04:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e06:	4b63      	ldr	r3, [pc, #396]	; (8004f94 <HAL_RCC_ClockConfig+0x1b8>)
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f003 030f 	and.w	r3, r3, #15
 8004e0e:	683a      	ldr	r2, [r7, #0]
 8004e10:	429a      	cmp	r2, r3
 8004e12:	d001      	beq.n	8004e18 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004e14:	2301      	movs	r3, #1
 8004e16:	e0b8      	b.n	8004f8a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f003 0302 	and.w	r3, r3, #2
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d020      	beq.n	8004e66 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f003 0304 	and.w	r3, r3, #4
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d005      	beq.n	8004e3c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004e30:	4b59      	ldr	r3, [pc, #356]	; (8004f98 <HAL_RCC_ClockConfig+0x1bc>)
 8004e32:	689b      	ldr	r3, [r3, #8]
 8004e34:	4a58      	ldr	r2, [pc, #352]	; (8004f98 <HAL_RCC_ClockConfig+0x1bc>)
 8004e36:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004e3a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f003 0308 	and.w	r3, r3, #8
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d005      	beq.n	8004e54 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004e48:	4b53      	ldr	r3, [pc, #332]	; (8004f98 <HAL_RCC_ClockConfig+0x1bc>)
 8004e4a:	689b      	ldr	r3, [r3, #8]
 8004e4c:	4a52      	ldr	r2, [pc, #328]	; (8004f98 <HAL_RCC_ClockConfig+0x1bc>)
 8004e4e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004e52:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004e54:	4b50      	ldr	r3, [pc, #320]	; (8004f98 <HAL_RCC_ClockConfig+0x1bc>)
 8004e56:	689b      	ldr	r3, [r3, #8]
 8004e58:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	689b      	ldr	r3, [r3, #8]
 8004e60:	494d      	ldr	r1, [pc, #308]	; (8004f98 <HAL_RCC_ClockConfig+0x1bc>)
 8004e62:	4313      	orrs	r3, r2
 8004e64:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f003 0301 	and.w	r3, r3, #1
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d044      	beq.n	8004efc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	685b      	ldr	r3, [r3, #4]
 8004e76:	2b01      	cmp	r3, #1
 8004e78:	d107      	bne.n	8004e8a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e7a:	4b47      	ldr	r3, [pc, #284]	; (8004f98 <HAL_RCC_ClockConfig+0x1bc>)
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d119      	bne.n	8004eba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e86:	2301      	movs	r3, #1
 8004e88:	e07f      	b.n	8004f8a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	685b      	ldr	r3, [r3, #4]
 8004e8e:	2b02      	cmp	r3, #2
 8004e90:	d003      	beq.n	8004e9a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004e96:	2b03      	cmp	r3, #3
 8004e98:	d107      	bne.n	8004eaa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e9a:	4b3f      	ldr	r3, [pc, #252]	; (8004f98 <HAL_RCC_ClockConfig+0x1bc>)
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d109      	bne.n	8004eba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ea6:	2301      	movs	r3, #1
 8004ea8:	e06f      	b.n	8004f8a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004eaa:	4b3b      	ldr	r3, [pc, #236]	; (8004f98 <HAL_RCC_ClockConfig+0x1bc>)
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f003 0302 	and.w	r3, r3, #2
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d101      	bne.n	8004eba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004eb6:	2301      	movs	r3, #1
 8004eb8:	e067      	b.n	8004f8a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004eba:	4b37      	ldr	r3, [pc, #220]	; (8004f98 <HAL_RCC_ClockConfig+0x1bc>)
 8004ebc:	689b      	ldr	r3, [r3, #8]
 8004ebe:	f023 0203 	bic.w	r2, r3, #3
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	685b      	ldr	r3, [r3, #4]
 8004ec6:	4934      	ldr	r1, [pc, #208]	; (8004f98 <HAL_RCC_ClockConfig+0x1bc>)
 8004ec8:	4313      	orrs	r3, r2
 8004eca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004ecc:	f7fe fdee 	bl	8003aac <HAL_GetTick>
 8004ed0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ed2:	e00a      	b.n	8004eea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ed4:	f7fe fdea 	bl	8003aac <HAL_GetTick>
 8004ed8:	4602      	mov	r2, r0
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	1ad3      	subs	r3, r2, r3
 8004ede:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	d901      	bls.n	8004eea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004ee6:	2303      	movs	r3, #3
 8004ee8:	e04f      	b.n	8004f8a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004eea:	4b2b      	ldr	r3, [pc, #172]	; (8004f98 <HAL_RCC_ClockConfig+0x1bc>)
 8004eec:	689b      	ldr	r3, [r3, #8]
 8004eee:	f003 020c 	and.w	r2, r3, #12
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	685b      	ldr	r3, [r3, #4]
 8004ef6:	009b      	lsls	r3, r3, #2
 8004ef8:	429a      	cmp	r2, r3
 8004efa:	d1eb      	bne.n	8004ed4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004efc:	4b25      	ldr	r3, [pc, #148]	; (8004f94 <HAL_RCC_ClockConfig+0x1b8>)
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f003 030f 	and.w	r3, r3, #15
 8004f04:	683a      	ldr	r2, [r7, #0]
 8004f06:	429a      	cmp	r2, r3
 8004f08:	d20c      	bcs.n	8004f24 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f0a:	4b22      	ldr	r3, [pc, #136]	; (8004f94 <HAL_RCC_ClockConfig+0x1b8>)
 8004f0c:	683a      	ldr	r2, [r7, #0]
 8004f0e:	b2d2      	uxtb	r2, r2
 8004f10:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f12:	4b20      	ldr	r3, [pc, #128]	; (8004f94 <HAL_RCC_ClockConfig+0x1b8>)
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f003 030f 	and.w	r3, r3, #15
 8004f1a:	683a      	ldr	r2, [r7, #0]
 8004f1c:	429a      	cmp	r2, r3
 8004f1e:	d001      	beq.n	8004f24 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004f20:	2301      	movs	r3, #1
 8004f22:	e032      	b.n	8004f8a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f003 0304 	and.w	r3, r3, #4
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d008      	beq.n	8004f42 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004f30:	4b19      	ldr	r3, [pc, #100]	; (8004f98 <HAL_RCC_ClockConfig+0x1bc>)
 8004f32:	689b      	ldr	r3, [r3, #8]
 8004f34:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	68db      	ldr	r3, [r3, #12]
 8004f3c:	4916      	ldr	r1, [pc, #88]	; (8004f98 <HAL_RCC_ClockConfig+0x1bc>)
 8004f3e:	4313      	orrs	r3, r2
 8004f40:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f003 0308 	and.w	r3, r3, #8
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d009      	beq.n	8004f62 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004f4e:	4b12      	ldr	r3, [pc, #72]	; (8004f98 <HAL_RCC_ClockConfig+0x1bc>)
 8004f50:	689b      	ldr	r3, [r3, #8]
 8004f52:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	691b      	ldr	r3, [r3, #16]
 8004f5a:	00db      	lsls	r3, r3, #3
 8004f5c:	490e      	ldr	r1, [pc, #56]	; (8004f98 <HAL_RCC_ClockConfig+0x1bc>)
 8004f5e:	4313      	orrs	r3, r2
 8004f60:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004f62:	f000 f873 	bl	800504c <HAL_RCC_GetSysClockFreq>
 8004f66:	4602      	mov	r2, r0
 8004f68:	4b0b      	ldr	r3, [pc, #44]	; (8004f98 <HAL_RCC_ClockConfig+0x1bc>)
 8004f6a:	689b      	ldr	r3, [r3, #8]
 8004f6c:	091b      	lsrs	r3, r3, #4
 8004f6e:	f003 030f 	and.w	r3, r3, #15
 8004f72:	490a      	ldr	r1, [pc, #40]	; (8004f9c <HAL_RCC_ClockConfig+0x1c0>)
 8004f74:	5ccb      	ldrb	r3, [r1, r3]
 8004f76:	fa22 f303 	lsr.w	r3, r2, r3
 8004f7a:	4a09      	ldr	r2, [pc, #36]	; (8004fa0 <HAL_RCC_ClockConfig+0x1c4>)
 8004f7c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004f7e:	4b09      	ldr	r3, [pc, #36]	; (8004fa4 <HAL_RCC_ClockConfig+0x1c8>)
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	4618      	mov	r0, r3
 8004f84:	f7fe fba6 	bl	80036d4 <HAL_InitTick>

  return HAL_OK;
 8004f88:	2300      	movs	r3, #0
}
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	3710      	adds	r7, #16
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	bd80      	pop	{r7, pc}
 8004f92:	bf00      	nop
 8004f94:	40023c00 	.word	0x40023c00
 8004f98:	40023800 	.word	0x40023800
 8004f9c:	08007064 	.word	0x08007064
 8004fa0:	20000008 	.word	0x20000008
 8004fa4:	2000000c 	.word	0x2000000c

08004fa8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004fa8:	b480      	push	{r7}
 8004faa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004fac:	4b03      	ldr	r3, [pc, #12]	; (8004fbc <HAL_RCC_GetHCLKFreq+0x14>)
 8004fae:	681b      	ldr	r3, [r3, #0]
}
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb8:	4770      	bx	lr
 8004fba:	bf00      	nop
 8004fbc:	20000008 	.word	0x20000008

08004fc0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004fc4:	f7ff fff0 	bl	8004fa8 <HAL_RCC_GetHCLKFreq>
 8004fc8:	4602      	mov	r2, r0
 8004fca:	4b05      	ldr	r3, [pc, #20]	; (8004fe0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004fcc:	689b      	ldr	r3, [r3, #8]
 8004fce:	0a9b      	lsrs	r3, r3, #10
 8004fd0:	f003 0307 	and.w	r3, r3, #7
 8004fd4:	4903      	ldr	r1, [pc, #12]	; (8004fe4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004fd6:	5ccb      	ldrb	r3, [r1, r3]
 8004fd8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004fdc:	4618      	mov	r0, r3
 8004fde:	bd80      	pop	{r7, pc}
 8004fe0:	40023800 	.word	0x40023800
 8004fe4:	08007074 	.word	0x08007074

08004fe8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004fe8:	b480      	push	{r7}
 8004fea:	b083      	sub	sp, #12
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
 8004ff0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	220f      	movs	r2, #15
 8004ff6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004ff8:	4b12      	ldr	r3, [pc, #72]	; (8005044 <HAL_RCC_GetClockConfig+0x5c>)
 8004ffa:	689b      	ldr	r3, [r3, #8]
 8004ffc:	f003 0203 	and.w	r2, r3, #3
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005004:	4b0f      	ldr	r3, [pc, #60]	; (8005044 <HAL_RCC_GetClockConfig+0x5c>)
 8005006:	689b      	ldr	r3, [r3, #8]
 8005008:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005010:	4b0c      	ldr	r3, [pc, #48]	; (8005044 <HAL_RCC_GetClockConfig+0x5c>)
 8005012:	689b      	ldr	r3, [r3, #8]
 8005014:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800501c:	4b09      	ldr	r3, [pc, #36]	; (8005044 <HAL_RCC_GetClockConfig+0x5c>)
 800501e:	689b      	ldr	r3, [r3, #8]
 8005020:	08db      	lsrs	r3, r3, #3
 8005022:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800502a:	4b07      	ldr	r3, [pc, #28]	; (8005048 <HAL_RCC_GetClockConfig+0x60>)
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f003 020f 	and.w	r2, r3, #15
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	601a      	str	r2, [r3, #0]
}
 8005036:	bf00      	nop
 8005038:	370c      	adds	r7, #12
 800503a:	46bd      	mov	sp, r7
 800503c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005040:	4770      	bx	lr
 8005042:	bf00      	nop
 8005044:	40023800 	.word	0x40023800
 8005048:	40023c00 	.word	0x40023c00

0800504c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800504c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005050:	b0ae      	sub	sp, #184	; 0xb8
 8005052:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005054:	2300      	movs	r3, #0
 8005056:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 800505a:	2300      	movs	r3, #0
 800505c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8005060:	2300      	movs	r3, #0
 8005062:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8005066:	2300      	movs	r3, #0
 8005068:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 800506c:	2300      	movs	r3, #0
 800506e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005072:	4bcb      	ldr	r3, [pc, #812]	; (80053a0 <HAL_RCC_GetSysClockFreq+0x354>)
 8005074:	689b      	ldr	r3, [r3, #8]
 8005076:	f003 030c 	and.w	r3, r3, #12
 800507a:	2b0c      	cmp	r3, #12
 800507c:	f200 8206 	bhi.w	800548c <HAL_RCC_GetSysClockFreq+0x440>
 8005080:	a201      	add	r2, pc, #4	; (adr r2, 8005088 <HAL_RCC_GetSysClockFreq+0x3c>)
 8005082:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005086:	bf00      	nop
 8005088:	080050bd 	.word	0x080050bd
 800508c:	0800548d 	.word	0x0800548d
 8005090:	0800548d 	.word	0x0800548d
 8005094:	0800548d 	.word	0x0800548d
 8005098:	080050c5 	.word	0x080050c5
 800509c:	0800548d 	.word	0x0800548d
 80050a0:	0800548d 	.word	0x0800548d
 80050a4:	0800548d 	.word	0x0800548d
 80050a8:	080050cd 	.word	0x080050cd
 80050ac:	0800548d 	.word	0x0800548d
 80050b0:	0800548d 	.word	0x0800548d
 80050b4:	0800548d 	.word	0x0800548d
 80050b8:	080052bd 	.word	0x080052bd
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80050bc:	4bb9      	ldr	r3, [pc, #740]	; (80053a4 <HAL_RCC_GetSysClockFreq+0x358>)
 80050be:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 80050c2:	e1e7      	b.n	8005494 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80050c4:	4bb8      	ldr	r3, [pc, #736]	; (80053a8 <HAL_RCC_GetSysClockFreq+0x35c>)
 80050c6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80050ca:	e1e3      	b.n	8005494 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80050cc:	4bb4      	ldr	r3, [pc, #720]	; (80053a0 <HAL_RCC_GetSysClockFreq+0x354>)
 80050ce:	685b      	ldr	r3, [r3, #4]
 80050d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80050d4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80050d8:	4bb1      	ldr	r3, [pc, #708]	; (80053a0 <HAL_RCC_GetSysClockFreq+0x354>)
 80050da:	685b      	ldr	r3, [r3, #4]
 80050dc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d071      	beq.n	80051c8 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80050e4:	4bae      	ldr	r3, [pc, #696]	; (80053a0 <HAL_RCC_GetSysClockFreq+0x354>)
 80050e6:	685b      	ldr	r3, [r3, #4]
 80050e8:	099b      	lsrs	r3, r3, #6
 80050ea:	2200      	movs	r2, #0
 80050ec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80050f0:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80050f4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80050f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050fc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005100:	2300      	movs	r3, #0
 8005102:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005106:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800510a:	4622      	mov	r2, r4
 800510c:	462b      	mov	r3, r5
 800510e:	f04f 0000 	mov.w	r0, #0
 8005112:	f04f 0100 	mov.w	r1, #0
 8005116:	0159      	lsls	r1, r3, #5
 8005118:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800511c:	0150      	lsls	r0, r2, #5
 800511e:	4602      	mov	r2, r0
 8005120:	460b      	mov	r3, r1
 8005122:	4621      	mov	r1, r4
 8005124:	1a51      	subs	r1, r2, r1
 8005126:	6439      	str	r1, [r7, #64]	; 0x40
 8005128:	4629      	mov	r1, r5
 800512a:	eb63 0301 	sbc.w	r3, r3, r1
 800512e:	647b      	str	r3, [r7, #68]	; 0x44
 8005130:	f04f 0200 	mov.w	r2, #0
 8005134:	f04f 0300 	mov.w	r3, #0
 8005138:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 800513c:	4649      	mov	r1, r9
 800513e:	018b      	lsls	r3, r1, #6
 8005140:	4641      	mov	r1, r8
 8005142:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005146:	4641      	mov	r1, r8
 8005148:	018a      	lsls	r2, r1, #6
 800514a:	4641      	mov	r1, r8
 800514c:	1a51      	subs	r1, r2, r1
 800514e:	63b9      	str	r1, [r7, #56]	; 0x38
 8005150:	4649      	mov	r1, r9
 8005152:	eb63 0301 	sbc.w	r3, r3, r1
 8005156:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005158:	f04f 0200 	mov.w	r2, #0
 800515c:	f04f 0300 	mov.w	r3, #0
 8005160:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8005164:	4649      	mov	r1, r9
 8005166:	00cb      	lsls	r3, r1, #3
 8005168:	4641      	mov	r1, r8
 800516a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800516e:	4641      	mov	r1, r8
 8005170:	00ca      	lsls	r2, r1, #3
 8005172:	4610      	mov	r0, r2
 8005174:	4619      	mov	r1, r3
 8005176:	4603      	mov	r3, r0
 8005178:	4622      	mov	r2, r4
 800517a:	189b      	adds	r3, r3, r2
 800517c:	633b      	str	r3, [r7, #48]	; 0x30
 800517e:	462b      	mov	r3, r5
 8005180:	460a      	mov	r2, r1
 8005182:	eb42 0303 	adc.w	r3, r2, r3
 8005186:	637b      	str	r3, [r7, #52]	; 0x34
 8005188:	f04f 0200 	mov.w	r2, #0
 800518c:	f04f 0300 	mov.w	r3, #0
 8005190:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005194:	4629      	mov	r1, r5
 8005196:	024b      	lsls	r3, r1, #9
 8005198:	4621      	mov	r1, r4
 800519a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800519e:	4621      	mov	r1, r4
 80051a0:	024a      	lsls	r2, r1, #9
 80051a2:	4610      	mov	r0, r2
 80051a4:	4619      	mov	r1, r3
 80051a6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80051aa:	2200      	movs	r2, #0
 80051ac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80051b0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80051b4:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80051b8:	f7fb f87a 	bl	80002b0 <__aeabi_uldivmod>
 80051bc:	4602      	mov	r2, r0
 80051be:	460b      	mov	r3, r1
 80051c0:	4613      	mov	r3, r2
 80051c2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80051c6:	e067      	b.n	8005298 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80051c8:	4b75      	ldr	r3, [pc, #468]	; (80053a0 <HAL_RCC_GetSysClockFreq+0x354>)
 80051ca:	685b      	ldr	r3, [r3, #4]
 80051cc:	099b      	lsrs	r3, r3, #6
 80051ce:	2200      	movs	r2, #0
 80051d0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80051d4:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80051d8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80051dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051e0:	67bb      	str	r3, [r7, #120]	; 0x78
 80051e2:	2300      	movs	r3, #0
 80051e4:	67fb      	str	r3, [r7, #124]	; 0x7c
 80051e6:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 80051ea:	4622      	mov	r2, r4
 80051ec:	462b      	mov	r3, r5
 80051ee:	f04f 0000 	mov.w	r0, #0
 80051f2:	f04f 0100 	mov.w	r1, #0
 80051f6:	0159      	lsls	r1, r3, #5
 80051f8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80051fc:	0150      	lsls	r0, r2, #5
 80051fe:	4602      	mov	r2, r0
 8005200:	460b      	mov	r3, r1
 8005202:	4621      	mov	r1, r4
 8005204:	1a51      	subs	r1, r2, r1
 8005206:	62b9      	str	r1, [r7, #40]	; 0x28
 8005208:	4629      	mov	r1, r5
 800520a:	eb63 0301 	sbc.w	r3, r3, r1
 800520e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005210:	f04f 0200 	mov.w	r2, #0
 8005214:	f04f 0300 	mov.w	r3, #0
 8005218:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 800521c:	4649      	mov	r1, r9
 800521e:	018b      	lsls	r3, r1, #6
 8005220:	4641      	mov	r1, r8
 8005222:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005226:	4641      	mov	r1, r8
 8005228:	018a      	lsls	r2, r1, #6
 800522a:	4641      	mov	r1, r8
 800522c:	ebb2 0a01 	subs.w	sl, r2, r1
 8005230:	4649      	mov	r1, r9
 8005232:	eb63 0b01 	sbc.w	fp, r3, r1
 8005236:	f04f 0200 	mov.w	r2, #0
 800523a:	f04f 0300 	mov.w	r3, #0
 800523e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005242:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005246:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800524a:	4692      	mov	sl, r2
 800524c:	469b      	mov	fp, r3
 800524e:	4623      	mov	r3, r4
 8005250:	eb1a 0303 	adds.w	r3, sl, r3
 8005254:	623b      	str	r3, [r7, #32]
 8005256:	462b      	mov	r3, r5
 8005258:	eb4b 0303 	adc.w	r3, fp, r3
 800525c:	627b      	str	r3, [r7, #36]	; 0x24
 800525e:	f04f 0200 	mov.w	r2, #0
 8005262:	f04f 0300 	mov.w	r3, #0
 8005266:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800526a:	4629      	mov	r1, r5
 800526c:	028b      	lsls	r3, r1, #10
 800526e:	4621      	mov	r1, r4
 8005270:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005274:	4621      	mov	r1, r4
 8005276:	028a      	lsls	r2, r1, #10
 8005278:	4610      	mov	r0, r2
 800527a:	4619      	mov	r1, r3
 800527c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005280:	2200      	movs	r2, #0
 8005282:	673b      	str	r3, [r7, #112]	; 0x70
 8005284:	677a      	str	r2, [r7, #116]	; 0x74
 8005286:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800528a:	f7fb f811 	bl	80002b0 <__aeabi_uldivmod>
 800528e:	4602      	mov	r2, r0
 8005290:	460b      	mov	r3, r1
 8005292:	4613      	mov	r3, r2
 8005294:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005298:	4b41      	ldr	r3, [pc, #260]	; (80053a0 <HAL_RCC_GetSysClockFreq+0x354>)
 800529a:	685b      	ldr	r3, [r3, #4]
 800529c:	0c1b      	lsrs	r3, r3, #16
 800529e:	f003 0303 	and.w	r3, r3, #3
 80052a2:	3301      	adds	r3, #1
 80052a4:	005b      	lsls	r3, r3, #1
 80052a6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 80052aa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80052ae:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80052b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80052b6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80052ba:	e0eb      	b.n	8005494 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80052bc:	4b38      	ldr	r3, [pc, #224]	; (80053a0 <HAL_RCC_GetSysClockFreq+0x354>)
 80052be:	685b      	ldr	r3, [r3, #4]
 80052c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80052c4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80052c8:	4b35      	ldr	r3, [pc, #212]	; (80053a0 <HAL_RCC_GetSysClockFreq+0x354>)
 80052ca:	685b      	ldr	r3, [r3, #4]
 80052cc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d06b      	beq.n	80053ac <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80052d4:	4b32      	ldr	r3, [pc, #200]	; (80053a0 <HAL_RCC_GetSysClockFreq+0x354>)
 80052d6:	685b      	ldr	r3, [r3, #4]
 80052d8:	099b      	lsrs	r3, r3, #6
 80052da:	2200      	movs	r2, #0
 80052dc:	66bb      	str	r3, [r7, #104]	; 0x68
 80052de:	66fa      	str	r2, [r7, #108]	; 0x6c
 80052e0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80052e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052e6:	663b      	str	r3, [r7, #96]	; 0x60
 80052e8:	2300      	movs	r3, #0
 80052ea:	667b      	str	r3, [r7, #100]	; 0x64
 80052ec:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80052f0:	4622      	mov	r2, r4
 80052f2:	462b      	mov	r3, r5
 80052f4:	f04f 0000 	mov.w	r0, #0
 80052f8:	f04f 0100 	mov.w	r1, #0
 80052fc:	0159      	lsls	r1, r3, #5
 80052fe:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005302:	0150      	lsls	r0, r2, #5
 8005304:	4602      	mov	r2, r0
 8005306:	460b      	mov	r3, r1
 8005308:	4621      	mov	r1, r4
 800530a:	1a51      	subs	r1, r2, r1
 800530c:	61b9      	str	r1, [r7, #24]
 800530e:	4629      	mov	r1, r5
 8005310:	eb63 0301 	sbc.w	r3, r3, r1
 8005314:	61fb      	str	r3, [r7, #28]
 8005316:	f04f 0200 	mov.w	r2, #0
 800531a:	f04f 0300 	mov.w	r3, #0
 800531e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8005322:	4659      	mov	r1, fp
 8005324:	018b      	lsls	r3, r1, #6
 8005326:	4651      	mov	r1, sl
 8005328:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800532c:	4651      	mov	r1, sl
 800532e:	018a      	lsls	r2, r1, #6
 8005330:	4651      	mov	r1, sl
 8005332:	ebb2 0801 	subs.w	r8, r2, r1
 8005336:	4659      	mov	r1, fp
 8005338:	eb63 0901 	sbc.w	r9, r3, r1
 800533c:	f04f 0200 	mov.w	r2, #0
 8005340:	f04f 0300 	mov.w	r3, #0
 8005344:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005348:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800534c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005350:	4690      	mov	r8, r2
 8005352:	4699      	mov	r9, r3
 8005354:	4623      	mov	r3, r4
 8005356:	eb18 0303 	adds.w	r3, r8, r3
 800535a:	613b      	str	r3, [r7, #16]
 800535c:	462b      	mov	r3, r5
 800535e:	eb49 0303 	adc.w	r3, r9, r3
 8005362:	617b      	str	r3, [r7, #20]
 8005364:	f04f 0200 	mov.w	r2, #0
 8005368:	f04f 0300 	mov.w	r3, #0
 800536c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8005370:	4629      	mov	r1, r5
 8005372:	024b      	lsls	r3, r1, #9
 8005374:	4621      	mov	r1, r4
 8005376:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800537a:	4621      	mov	r1, r4
 800537c:	024a      	lsls	r2, r1, #9
 800537e:	4610      	mov	r0, r2
 8005380:	4619      	mov	r1, r3
 8005382:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005386:	2200      	movs	r2, #0
 8005388:	65bb      	str	r3, [r7, #88]	; 0x58
 800538a:	65fa      	str	r2, [r7, #92]	; 0x5c
 800538c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005390:	f7fa ff8e 	bl	80002b0 <__aeabi_uldivmod>
 8005394:	4602      	mov	r2, r0
 8005396:	460b      	mov	r3, r1
 8005398:	4613      	mov	r3, r2
 800539a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800539e:	e065      	b.n	800546c <HAL_RCC_GetSysClockFreq+0x420>
 80053a0:	40023800 	.word	0x40023800
 80053a4:	00f42400 	.word	0x00f42400
 80053a8:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80053ac:	4b3d      	ldr	r3, [pc, #244]	; (80054a4 <HAL_RCC_GetSysClockFreq+0x458>)
 80053ae:	685b      	ldr	r3, [r3, #4]
 80053b0:	099b      	lsrs	r3, r3, #6
 80053b2:	2200      	movs	r2, #0
 80053b4:	4618      	mov	r0, r3
 80053b6:	4611      	mov	r1, r2
 80053b8:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80053bc:	653b      	str	r3, [r7, #80]	; 0x50
 80053be:	2300      	movs	r3, #0
 80053c0:	657b      	str	r3, [r7, #84]	; 0x54
 80053c2:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 80053c6:	4642      	mov	r2, r8
 80053c8:	464b      	mov	r3, r9
 80053ca:	f04f 0000 	mov.w	r0, #0
 80053ce:	f04f 0100 	mov.w	r1, #0
 80053d2:	0159      	lsls	r1, r3, #5
 80053d4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80053d8:	0150      	lsls	r0, r2, #5
 80053da:	4602      	mov	r2, r0
 80053dc:	460b      	mov	r3, r1
 80053de:	4641      	mov	r1, r8
 80053e0:	1a51      	subs	r1, r2, r1
 80053e2:	60b9      	str	r1, [r7, #8]
 80053e4:	4649      	mov	r1, r9
 80053e6:	eb63 0301 	sbc.w	r3, r3, r1
 80053ea:	60fb      	str	r3, [r7, #12]
 80053ec:	f04f 0200 	mov.w	r2, #0
 80053f0:	f04f 0300 	mov.w	r3, #0
 80053f4:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80053f8:	4659      	mov	r1, fp
 80053fa:	018b      	lsls	r3, r1, #6
 80053fc:	4651      	mov	r1, sl
 80053fe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005402:	4651      	mov	r1, sl
 8005404:	018a      	lsls	r2, r1, #6
 8005406:	4651      	mov	r1, sl
 8005408:	1a54      	subs	r4, r2, r1
 800540a:	4659      	mov	r1, fp
 800540c:	eb63 0501 	sbc.w	r5, r3, r1
 8005410:	f04f 0200 	mov.w	r2, #0
 8005414:	f04f 0300 	mov.w	r3, #0
 8005418:	00eb      	lsls	r3, r5, #3
 800541a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800541e:	00e2      	lsls	r2, r4, #3
 8005420:	4614      	mov	r4, r2
 8005422:	461d      	mov	r5, r3
 8005424:	4643      	mov	r3, r8
 8005426:	18e3      	adds	r3, r4, r3
 8005428:	603b      	str	r3, [r7, #0]
 800542a:	464b      	mov	r3, r9
 800542c:	eb45 0303 	adc.w	r3, r5, r3
 8005430:	607b      	str	r3, [r7, #4]
 8005432:	f04f 0200 	mov.w	r2, #0
 8005436:	f04f 0300 	mov.w	r3, #0
 800543a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800543e:	4629      	mov	r1, r5
 8005440:	028b      	lsls	r3, r1, #10
 8005442:	4621      	mov	r1, r4
 8005444:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005448:	4621      	mov	r1, r4
 800544a:	028a      	lsls	r2, r1, #10
 800544c:	4610      	mov	r0, r2
 800544e:	4619      	mov	r1, r3
 8005450:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005454:	2200      	movs	r2, #0
 8005456:	64bb      	str	r3, [r7, #72]	; 0x48
 8005458:	64fa      	str	r2, [r7, #76]	; 0x4c
 800545a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800545e:	f7fa ff27 	bl	80002b0 <__aeabi_uldivmod>
 8005462:	4602      	mov	r2, r0
 8005464:	460b      	mov	r3, r1
 8005466:	4613      	mov	r3, r2
 8005468:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800546c:	4b0d      	ldr	r3, [pc, #52]	; (80054a4 <HAL_RCC_GetSysClockFreq+0x458>)
 800546e:	685b      	ldr	r3, [r3, #4]
 8005470:	0f1b      	lsrs	r3, r3, #28
 8005472:	f003 0307 	and.w	r3, r3, #7
 8005476:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 800547a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800547e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005482:	fbb2 f3f3 	udiv	r3, r2, r3
 8005486:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800548a:	e003      	b.n	8005494 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800548c:	4b06      	ldr	r3, [pc, #24]	; (80054a8 <HAL_RCC_GetSysClockFreq+0x45c>)
 800548e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8005492:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005494:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8005498:	4618      	mov	r0, r3
 800549a:	37b8      	adds	r7, #184	; 0xb8
 800549c:	46bd      	mov	sp, r7
 800549e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80054a2:	bf00      	nop
 80054a4:	40023800 	.word	0x40023800
 80054a8:	00f42400 	.word	0x00f42400

080054ac <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80054ac:	b580      	push	{r7, lr}
 80054ae:	b086      	sub	sp, #24
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d101      	bne.n	80054be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80054ba:	2301      	movs	r3, #1
 80054bc:	e28d      	b.n	80059da <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f003 0301 	and.w	r3, r3, #1
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	f000 8083 	beq.w	80055d2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80054cc:	4b94      	ldr	r3, [pc, #592]	; (8005720 <HAL_RCC_OscConfig+0x274>)
 80054ce:	689b      	ldr	r3, [r3, #8]
 80054d0:	f003 030c 	and.w	r3, r3, #12
 80054d4:	2b04      	cmp	r3, #4
 80054d6:	d019      	beq.n	800550c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80054d8:	4b91      	ldr	r3, [pc, #580]	; (8005720 <HAL_RCC_OscConfig+0x274>)
 80054da:	689b      	ldr	r3, [r3, #8]
 80054dc:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80054e0:	2b08      	cmp	r3, #8
 80054e2:	d106      	bne.n	80054f2 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80054e4:	4b8e      	ldr	r3, [pc, #568]	; (8005720 <HAL_RCC_OscConfig+0x274>)
 80054e6:	685b      	ldr	r3, [r3, #4]
 80054e8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80054ec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80054f0:	d00c      	beq.n	800550c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80054f2:	4b8b      	ldr	r3, [pc, #556]	; (8005720 <HAL_RCC_OscConfig+0x274>)
 80054f4:	689b      	ldr	r3, [r3, #8]
 80054f6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80054fa:	2b0c      	cmp	r3, #12
 80054fc:	d112      	bne.n	8005524 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80054fe:	4b88      	ldr	r3, [pc, #544]	; (8005720 <HAL_RCC_OscConfig+0x274>)
 8005500:	685b      	ldr	r3, [r3, #4]
 8005502:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005506:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800550a:	d10b      	bne.n	8005524 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800550c:	4b84      	ldr	r3, [pc, #528]	; (8005720 <HAL_RCC_OscConfig+0x274>)
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005514:	2b00      	cmp	r3, #0
 8005516:	d05b      	beq.n	80055d0 <HAL_RCC_OscConfig+0x124>
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	685b      	ldr	r3, [r3, #4]
 800551c:	2b00      	cmp	r3, #0
 800551e:	d157      	bne.n	80055d0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8005520:	2301      	movs	r3, #1
 8005522:	e25a      	b.n	80059da <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	685b      	ldr	r3, [r3, #4]
 8005528:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800552c:	d106      	bne.n	800553c <HAL_RCC_OscConfig+0x90>
 800552e:	4b7c      	ldr	r3, [pc, #496]	; (8005720 <HAL_RCC_OscConfig+0x274>)
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	4a7b      	ldr	r2, [pc, #492]	; (8005720 <HAL_RCC_OscConfig+0x274>)
 8005534:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005538:	6013      	str	r3, [r2, #0]
 800553a:	e01d      	b.n	8005578 <HAL_RCC_OscConfig+0xcc>
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	685b      	ldr	r3, [r3, #4]
 8005540:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005544:	d10c      	bne.n	8005560 <HAL_RCC_OscConfig+0xb4>
 8005546:	4b76      	ldr	r3, [pc, #472]	; (8005720 <HAL_RCC_OscConfig+0x274>)
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	4a75      	ldr	r2, [pc, #468]	; (8005720 <HAL_RCC_OscConfig+0x274>)
 800554c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005550:	6013      	str	r3, [r2, #0]
 8005552:	4b73      	ldr	r3, [pc, #460]	; (8005720 <HAL_RCC_OscConfig+0x274>)
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	4a72      	ldr	r2, [pc, #456]	; (8005720 <HAL_RCC_OscConfig+0x274>)
 8005558:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800555c:	6013      	str	r3, [r2, #0]
 800555e:	e00b      	b.n	8005578 <HAL_RCC_OscConfig+0xcc>
 8005560:	4b6f      	ldr	r3, [pc, #444]	; (8005720 <HAL_RCC_OscConfig+0x274>)
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	4a6e      	ldr	r2, [pc, #440]	; (8005720 <HAL_RCC_OscConfig+0x274>)
 8005566:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800556a:	6013      	str	r3, [r2, #0]
 800556c:	4b6c      	ldr	r3, [pc, #432]	; (8005720 <HAL_RCC_OscConfig+0x274>)
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	4a6b      	ldr	r2, [pc, #428]	; (8005720 <HAL_RCC_OscConfig+0x274>)
 8005572:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005576:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	685b      	ldr	r3, [r3, #4]
 800557c:	2b00      	cmp	r3, #0
 800557e:	d013      	beq.n	80055a8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005580:	f7fe fa94 	bl	8003aac <HAL_GetTick>
 8005584:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005586:	e008      	b.n	800559a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005588:	f7fe fa90 	bl	8003aac <HAL_GetTick>
 800558c:	4602      	mov	r2, r0
 800558e:	693b      	ldr	r3, [r7, #16]
 8005590:	1ad3      	subs	r3, r2, r3
 8005592:	2b64      	cmp	r3, #100	; 0x64
 8005594:	d901      	bls.n	800559a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8005596:	2303      	movs	r3, #3
 8005598:	e21f      	b.n	80059da <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800559a:	4b61      	ldr	r3, [pc, #388]	; (8005720 <HAL_RCC_OscConfig+0x274>)
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d0f0      	beq.n	8005588 <HAL_RCC_OscConfig+0xdc>
 80055a6:	e014      	b.n	80055d2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055a8:	f7fe fa80 	bl	8003aac <HAL_GetTick>
 80055ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80055ae:	e008      	b.n	80055c2 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80055b0:	f7fe fa7c 	bl	8003aac <HAL_GetTick>
 80055b4:	4602      	mov	r2, r0
 80055b6:	693b      	ldr	r3, [r7, #16]
 80055b8:	1ad3      	subs	r3, r2, r3
 80055ba:	2b64      	cmp	r3, #100	; 0x64
 80055bc:	d901      	bls.n	80055c2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80055be:	2303      	movs	r3, #3
 80055c0:	e20b      	b.n	80059da <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80055c2:	4b57      	ldr	r3, [pc, #348]	; (8005720 <HAL_RCC_OscConfig+0x274>)
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d1f0      	bne.n	80055b0 <HAL_RCC_OscConfig+0x104>
 80055ce:	e000      	b.n	80055d2 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80055d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f003 0302 	and.w	r3, r3, #2
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d06f      	beq.n	80056be <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80055de:	4b50      	ldr	r3, [pc, #320]	; (8005720 <HAL_RCC_OscConfig+0x274>)
 80055e0:	689b      	ldr	r3, [r3, #8]
 80055e2:	f003 030c 	and.w	r3, r3, #12
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d017      	beq.n	800561a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80055ea:	4b4d      	ldr	r3, [pc, #308]	; (8005720 <HAL_RCC_OscConfig+0x274>)
 80055ec:	689b      	ldr	r3, [r3, #8]
 80055ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80055f2:	2b08      	cmp	r3, #8
 80055f4:	d105      	bne.n	8005602 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80055f6:	4b4a      	ldr	r3, [pc, #296]	; (8005720 <HAL_RCC_OscConfig+0x274>)
 80055f8:	685b      	ldr	r3, [r3, #4]
 80055fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d00b      	beq.n	800561a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005602:	4b47      	ldr	r3, [pc, #284]	; (8005720 <HAL_RCC_OscConfig+0x274>)
 8005604:	689b      	ldr	r3, [r3, #8]
 8005606:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800560a:	2b0c      	cmp	r3, #12
 800560c:	d11c      	bne.n	8005648 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800560e:	4b44      	ldr	r3, [pc, #272]	; (8005720 <HAL_RCC_OscConfig+0x274>)
 8005610:	685b      	ldr	r3, [r3, #4]
 8005612:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005616:	2b00      	cmp	r3, #0
 8005618:	d116      	bne.n	8005648 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800561a:	4b41      	ldr	r3, [pc, #260]	; (8005720 <HAL_RCC_OscConfig+0x274>)
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f003 0302 	and.w	r3, r3, #2
 8005622:	2b00      	cmp	r3, #0
 8005624:	d005      	beq.n	8005632 <HAL_RCC_OscConfig+0x186>
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	68db      	ldr	r3, [r3, #12]
 800562a:	2b01      	cmp	r3, #1
 800562c:	d001      	beq.n	8005632 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800562e:	2301      	movs	r3, #1
 8005630:	e1d3      	b.n	80059da <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005632:	4b3b      	ldr	r3, [pc, #236]	; (8005720 <HAL_RCC_OscConfig+0x274>)
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	691b      	ldr	r3, [r3, #16]
 800563e:	00db      	lsls	r3, r3, #3
 8005640:	4937      	ldr	r1, [pc, #220]	; (8005720 <HAL_RCC_OscConfig+0x274>)
 8005642:	4313      	orrs	r3, r2
 8005644:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005646:	e03a      	b.n	80056be <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	68db      	ldr	r3, [r3, #12]
 800564c:	2b00      	cmp	r3, #0
 800564e:	d020      	beq.n	8005692 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005650:	4b34      	ldr	r3, [pc, #208]	; (8005724 <HAL_RCC_OscConfig+0x278>)
 8005652:	2201      	movs	r2, #1
 8005654:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005656:	f7fe fa29 	bl	8003aac <HAL_GetTick>
 800565a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800565c:	e008      	b.n	8005670 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800565e:	f7fe fa25 	bl	8003aac <HAL_GetTick>
 8005662:	4602      	mov	r2, r0
 8005664:	693b      	ldr	r3, [r7, #16]
 8005666:	1ad3      	subs	r3, r2, r3
 8005668:	2b02      	cmp	r3, #2
 800566a:	d901      	bls.n	8005670 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800566c:	2303      	movs	r3, #3
 800566e:	e1b4      	b.n	80059da <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005670:	4b2b      	ldr	r3, [pc, #172]	; (8005720 <HAL_RCC_OscConfig+0x274>)
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f003 0302 	and.w	r3, r3, #2
 8005678:	2b00      	cmp	r3, #0
 800567a:	d0f0      	beq.n	800565e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800567c:	4b28      	ldr	r3, [pc, #160]	; (8005720 <HAL_RCC_OscConfig+0x274>)
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	691b      	ldr	r3, [r3, #16]
 8005688:	00db      	lsls	r3, r3, #3
 800568a:	4925      	ldr	r1, [pc, #148]	; (8005720 <HAL_RCC_OscConfig+0x274>)
 800568c:	4313      	orrs	r3, r2
 800568e:	600b      	str	r3, [r1, #0]
 8005690:	e015      	b.n	80056be <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005692:	4b24      	ldr	r3, [pc, #144]	; (8005724 <HAL_RCC_OscConfig+0x278>)
 8005694:	2200      	movs	r2, #0
 8005696:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005698:	f7fe fa08 	bl	8003aac <HAL_GetTick>
 800569c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800569e:	e008      	b.n	80056b2 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80056a0:	f7fe fa04 	bl	8003aac <HAL_GetTick>
 80056a4:	4602      	mov	r2, r0
 80056a6:	693b      	ldr	r3, [r7, #16]
 80056a8:	1ad3      	subs	r3, r2, r3
 80056aa:	2b02      	cmp	r3, #2
 80056ac:	d901      	bls.n	80056b2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80056ae:	2303      	movs	r3, #3
 80056b0:	e193      	b.n	80059da <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80056b2:	4b1b      	ldr	r3, [pc, #108]	; (8005720 <HAL_RCC_OscConfig+0x274>)
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f003 0302 	and.w	r3, r3, #2
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d1f0      	bne.n	80056a0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f003 0308 	and.w	r3, r3, #8
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d036      	beq.n	8005738 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	695b      	ldr	r3, [r3, #20]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d016      	beq.n	8005700 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80056d2:	4b15      	ldr	r3, [pc, #84]	; (8005728 <HAL_RCC_OscConfig+0x27c>)
 80056d4:	2201      	movs	r2, #1
 80056d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056d8:	f7fe f9e8 	bl	8003aac <HAL_GetTick>
 80056dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80056de:	e008      	b.n	80056f2 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80056e0:	f7fe f9e4 	bl	8003aac <HAL_GetTick>
 80056e4:	4602      	mov	r2, r0
 80056e6:	693b      	ldr	r3, [r7, #16]
 80056e8:	1ad3      	subs	r3, r2, r3
 80056ea:	2b02      	cmp	r3, #2
 80056ec:	d901      	bls.n	80056f2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80056ee:	2303      	movs	r3, #3
 80056f0:	e173      	b.n	80059da <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80056f2:	4b0b      	ldr	r3, [pc, #44]	; (8005720 <HAL_RCC_OscConfig+0x274>)
 80056f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80056f6:	f003 0302 	and.w	r3, r3, #2
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d0f0      	beq.n	80056e0 <HAL_RCC_OscConfig+0x234>
 80056fe:	e01b      	b.n	8005738 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005700:	4b09      	ldr	r3, [pc, #36]	; (8005728 <HAL_RCC_OscConfig+0x27c>)
 8005702:	2200      	movs	r2, #0
 8005704:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005706:	f7fe f9d1 	bl	8003aac <HAL_GetTick>
 800570a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800570c:	e00e      	b.n	800572c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800570e:	f7fe f9cd 	bl	8003aac <HAL_GetTick>
 8005712:	4602      	mov	r2, r0
 8005714:	693b      	ldr	r3, [r7, #16]
 8005716:	1ad3      	subs	r3, r2, r3
 8005718:	2b02      	cmp	r3, #2
 800571a:	d907      	bls.n	800572c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800571c:	2303      	movs	r3, #3
 800571e:	e15c      	b.n	80059da <HAL_RCC_OscConfig+0x52e>
 8005720:	40023800 	.word	0x40023800
 8005724:	42470000 	.word	0x42470000
 8005728:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800572c:	4b8a      	ldr	r3, [pc, #552]	; (8005958 <HAL_RCC_OscConfig+0x4ac>)
 800572e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005730:	f003 0302 	and.w	r3, r3, #2
 8005734:	2b00      	cmp	r3, #0
 8005736:	d1ea      	bne.n	800570e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f003 0304 	and.w	r3, r3, #4
 8005740:	2b00      	cmp	r3, #0
 8005742:	f000 8097 	beq.w	8005874 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005746:	2300      	movs	r3, #0
 8005748:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800574a:	4b83      	ldr	r3, [pc, #524]	; (8005958 <HAL_RCC_OscConfig+0x4ac>)
 800574c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800574e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005752:	2b00      	cmp	r3, #0
 8005754:	d10f      	bne.n	8005776 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005756:	2300      	movs	r3, #0
 8005758:	60bb      	str	r3, [r7, #8]
 800575a:	4b7f      	ldr	r3, [pc, #508]	; (8005958 <HAL_RCC_OscConfig+0x4ac>)
 800575c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800575e:	4a7e      	ldr	r2, [pc, #504]	; (8005958 <HAL_RCC_OscConfig+0x4ac>)
 8005760:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005764:	6413      	str	r3, [r2, #64]	; 0x40
 8005766:	4b7c      	ldr	r3, [pc, #496]	; (8005958 <HAL_RCC_OscConfig+0x4ac>)
 8005768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800576a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800576e:	60bb      	str	r3, [r7, #8]
 8005770:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005772:	2301      	movs	r3, #1
 8005774:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005776:	4b79      	ldr	r3, [pc, #484]	; (800595c <HAL_RCC_OscConfig+0x4b0>)
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800577e:	2b00      	cmp	r3, #0
 8005780:	d118      	bne.n	80057b4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005782:	4b76      	ldr	r3, [pc, #472]	; (800595c <HAL_RCC_OscConfig+0x4b0>)
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	4a75      	ldr	r2, [pc, #468]	; (800595c <HAL_RCC_OscConfig+0x4b0>)
 8005788:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800578c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800578e:	f7fe f98d 	bl	8003aac <HAL_GetTick>
 8005792:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005794:	e008      	b.n	80057a8 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005796:	f7fe f989 	bl	8003aac <HAL_GetTick>
 800579a:	4602      	mov	r2, r0
 800579c:	693b      	ldr	r3, [r7, #16]
 800579e:	1ad3      	subs	r3, r2, r3
 80057a0:	2b02      	cmp	r3, #2
 80057a2:	d901      	bls.n	80057a8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80057a4:	2303      	movs	r3, #3
 80057a6:	e118      	b.n	80059da <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80057a8:	4b6c      	ldr	r3, [pc, #432]	; (800595c <HAL_RCC_OscConfig+0x4b0>)
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d0f0      	beq.n	8005796 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	689b      	ldr	r3, [r3, #8]
 80057b8:	2b01      	cmp	r3, #1
 80057ba:	d106      	bne.n	80057ca <HAL_RCC_OscConfig+0x31e>
 80057bc:	4b66      	ldr	r3, [pc, #408]	; (8005958 <HAL_RCC_OscConfig+0x4ac>)
 80057be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057c0:	4a65      	ldr	r2, [pc, #404]	; (8005958 <HAL_RCC_OscConfig+0x4ac>)
 80057c2:	f043 0301 	orr.w	r3, r3, #1
 80057c6:	6713      	str	r3, [r2, #112]	; 0x70
 80057c8:	e01c      	b.n	8005804 <HAL_RCC_OscConfig+0x358>
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	689b      	ldr	r3, [r3, #8]
 80057ce:	2b05      	cmp	r3, #5
 80057d0:	d10c      	bne.n	80057ec <HAL_RCC_OscConfig+0x340>
 80057d2:	4b61      	ldr	r3, [pc, #388]	; (8005958 <HAL_RCC_OscConfig+0x4ac>)
 80057d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057d6:	4a60      	ldr	r2, [pc, #384]	; (8005958 <HAL_RCC_OscConfig+0x4ac>)
 80057d8:	f043 0304 	orr.w	r3, r3, #4
 80057dc:	6713      	str	r3, [r2, #112]	; 0x70
 80057de:	4b5e      	ldr	r3, [pc, #376]	; (8005958 <HAL_RCC_OscConfig+0x4ac>)
 80057e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057e2:	4a5d      	ldr	r2, [pc, #372]	; (8005958 <HAL_RCC_OscConfig+0x4ac>)
 80057e4:	f043 0301 	orr.w	r3, r3, #1
 80057e8:	6713      	str	r3, [r2, #112]	; 0x70
 80057ea:	e00b      	b.n	8005804 <HAL_RCC_OscConfig+0x358>
 80057ec:	4b5a      	ldr	r3, [pc, #360]	; (8005958 <HAL_RCC_OscConfig+0x4ac>)
 80057ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057f0:	4a59      	ldr	r2, [pc, #356]	; (8005958 <HAL_RCC_OscConfig+0x4ac>)
 80057f2:	f023 0301 	bic.w	r3, r3, #1
 80057f6:	6713      	str	r3, [r2, #112]	; 0x70
 80057f8:	4b57      	ldr	r3, [pc, #348]	; (8005958 <HAL_RCC_OscConfig+0x4ac>)
 80057fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057fc:	4a56      	ldr	r2, [pc, #344]	; (8005958 <HAL_RCC_OscConfig+0x4ac>)
 80057fe:	f023 0304 	bic.w	r3, r3, #4
 8005802:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	689b      	ldr	r3, [r3, #8]
 8005808:	2b00      	cmp	r3, #0
 800580a:	d015      	beq.n	8005838 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800580c:	f7fe f94e 	bl	8003aac <HAL_GetTick>
 8005810:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005812:	e00a      	b.n	800582a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005814:	f7fe f94a 	bl	8003aac <HAL_GetTick>
 8005818:	4602      	mov	r2, r0
 800581a:	693b      	ldr	r3, [r7, #16]
 800581c:	1ad3      	subs	r3, r2, r3
 800581e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005822:	4293      	cmp	r3, r2
 8005824:	d901      	bls.n	800582a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8005826:	2303      	movs	r3, #3
 8005828:	e0d7      	b.n	80059da <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800582a:	4b4b      	ldr	r3, [pc, #300]	; (8005958 <HAL_RCC_OscConfig+0x4ac>)
 800582c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800582e:	f003 0302 	and.w	r3, r3, #2
 8005832:	2b00      	cmp	r3, #0
 8005834:	d0ee      	beq.n	8005814 <HAL_RCC_OscConfig+0x368>
 8005836:	e014      	b.n	8005862 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005838:	f7fe f938 	bl	8003aac <HAL_GetTick>
 800583c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800583e:	e00a      	b.n	8005856 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005840:	f7fe f934 	bl	8003aac <HAL_GetTick>
 8005844:	4602      	mov	r2, r0
 8005846:	693b      	ldr	r3, [r7, #16]
 8005848:	1ad3      	subs	r3, r2, r3
 800584a:	f241 3288 	movw	r2, #5000	; 0x1388
 800584e:	4293      	cmp	r3, r2
 8005850:	d901      	bls.n	8005856 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8005852:	2303      	movs	r3, #3
 8005854:	e0c1      	b.n	80059da <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005856:	4b40      	ldr	r3, [pc, #256]	; (8005958 <HAL_RCC_OscConfig+0x4ac>)
 8005858:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800585a:	f003 0302 	and.w	r3, r3, #2
 800585e:	2b00      	cmp	r3, #0
 8005860:	d1ee      	bne.n	8005840 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005862:	7dfb      	ldrb	r3, [r7, #23]
 8005864:	2b01      	cmp	r3, #1
 8005866:	d105      	bne.n	8005874 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005868:	4b3b      	ldr	r3, [pc, #236]	; (8005958 <HAL_RCC_OscConfig+0x4ac>)
 800586a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800586c:	4a3a      	ldr	r2, [pc, #232]	; (8005958 <HAL_RCC_OscConfig+0x4ac>)
 800586e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005872:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	699b      	ldr	r3, [r3, #24]
 8005878:	2b00      	cmp	r3, #0
 800587a:	f000 80ad 	beq.w	80059d8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800587e:	4b36      	ldr	r3, [pc, #216]	; (8005958 <HAL_RCC_OscConfig+0x4ac>)
 8005880:	689b      	ldr	r3, [r3, #8]
 8005882:	f003 030c 	and.w	r3, r3, #12
 8005886:	2b08      	cmp	r3, #8
 8005888:	d060      	beq.n	800594c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	699b      	ldr	r3, [r3, #24]
 800588e:	2b02      	cmp	r3, #2
 8005890:	d145      	bne.n	800591e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005892:	4b33      	ldr	r3, [pc, #204]	; (8005960 <HAL_RCC_OscConfig+0x4b4>)
 8005894:	2200      	movs	r2, #0
 8005896:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005898:	f7fe f908 	bl	8003aac <HAL_GetTick>
 800589c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800589e:	e008      	b.n	80058b2 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80058a0:	f7fe f904 	bl	8003aac <HAL_GetTick>
 80058a4:	4602      	mov	r2, r0
 80058a6:	693b      	ldr	r3, [r7, #16]
 80058a8:	1ad3      	subs	r3, r2, r3
 80058aa:	2b02      	cmp	r3, #2
 80058ac:	d901      	bls.n	80058b2 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80058ae:	2303      	movs	r3, #3
 80058b0:	e093      	b.n	80059da <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80058b2:	4b29      	ldr	r3, [pc, #164]	; (8005958 <HAL_RCC_OscConfig+0x4ac>)
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d1f0      	bne.n	80058a0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	69da      	ldr	r2, [r3, #28]
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6a1b      	ldr	r3, [r3, #32]
 80058c6:	431a      	orrs	r2, r3
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058cc:	019b      	lsls	r3, r3, #6
 80058ce:	431a      	orrs	r2, r3
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058d4:	085b      	lsrs	r3, r3, #1
 80058d6:	3b01      	subs	r3, #1
 80058d8:	041b      	lsls	r3, r3, #16
 80058da:	431a      	orrs	r2, r3
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058e0:	061b      	lsls	r3, r3, #24
 80058e2:	431a      	orrs	r2, r3
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058e8:	071b      	lsls	r3, r3, #28
 80058ea:	491b      	ldr	r1, [pc, #108]	; (8005958 <HAL_RCC_OscConfig+0x4ac>)
 80058ec:	4313      	orrs	r3, r2
 80058ee:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80058f0:	4b1b      	ldr	r3, [pc, #108]	; (8005960 <HAL_RCC_OscConfig+0x4b4>)
 80058f2:	2201      	movs	r2, #1
 80058f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058f6:	f7fe f8d9 	bl	8003aac <HAL_GetTick>
 80058fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80058fc:	e008      	b.n	8005910 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80058fe:	f7fe f8d5 	bl	8003aac <HAL_GetTick>
 8005902:	4602      	mov	r2, r0
 8005904:	693b      	ldr	r3, [r7, #16]
 8005906:	1ad3      	subs	r3, r2, r3
 8005908:	2b02      	cmp	r3, #2
 800590a:	d901      	bls.n	8005910 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800590c:	2303      	movs	r3, #3
 800590e:	e064      	b.n	80059da <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005910:	4b11      	ldr	r3, [pc, #68]	; (8005958 <HAL_RCC_OscConfig+0x4ac>)
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005918:	2b00      	cmp	r3, #0
 800591a:	d0f0      	beq.n	80058fe <HAL_RCC_OscConfig+0x452>
 800591c:	e05c      	b.n	80059d8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800591e:	4b10      	ldr	r3, [pc, #64]	; (8005960 <HAL_RCC_OscConfig+0x4b4>)
 8005920:	2200      	movs	r2, #0
 8005922:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005924:	f7fe f8c2 	bl	8003aac <HAL_GetTick>
 8005928:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800592a:	e008      	b.n	800593e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800592c:	f7fe f8be 	bl	8003aac <HAL_GetTick>
 8005930:	4602      	mov	r2, r0
 8005932:	693b      	ldr	r3, [r7, #16]
 8005934:	1ad3      	subs	r3, r2, r3
 8005936:	2b02      	cmp	r3, #2
 8005938:	d901      	bls.n	800593e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800593a:	2303      	movs	r3, #3
 800593c:	e04d      	b.n	80059da <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800593e:	4b06      	ldr	r3, [pc, #24]	; (8005958 <HAL_RCC_OscConfig+0x4ac>)
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005946:	2b00      	cmp	r3, #0
 8005948:	d1f0      	bne.n	800592c <HAL_RCC_OscConfig+0x480>
 800594a:	e045      	b.n	80059d8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	699b      	ldr	r3, [r3, #24]
 8005950:	2b01      	cmp	r3, #1
 8005952:	d107      	bne.n	8005964 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8005954:	2301      	movs	r3, #1
 8005956:	e040      	b.n	80059da <HAL_RCC_OscConfig+0x52e>
 8005958:	40023800 	.word	0x40023800
 800595c:	40007000 	.word	0x40007000
 8005960:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005964:	4b1f      	ldr	r3, [pc, #124]	; (80059e4 <HAL_RCC_OscConfig+0x538>)
 8005966:	685b      	ldr	r3, [r3, #4]
 8005968:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	699b      	ldr	r3, [r3, #24]
 800596e:	2b01      	cmp	r3, #1
 8005970:	d030      	beq.n	80059d4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800597c:	429a      	cmp	r2, r3
 800597e:	d129      	bne.n	80059d4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800598a:	429a      	cmp	r2, r3
 800598c:	d122      	bne.n	80059d4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800598e:	68fa      	ldr	r2, [r7, #12]
 8005990:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005994:	4013      	ands	r3, r2
 8005996:	687a      	ldr	r2, [r7, #4]
 8005998:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800599a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800599c:	4293      	cmp	r3, r2
 800599e:	d119      	bne.n	80059d4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059aa:	085b      	lsrs	r3, r3, #1
 80059ac:	3b01      	subs	r3, #1
 80059ae:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80059b0:	429a      	cmp	r2, r3
 80059b2:	d10f      	bne.n	80059d4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059be:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80059c0:	429a      	cmp	r2, r3
 80059c2:	d107      	bne.n	80059d4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059ce:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80059d0:	429a      	cmp	r2, r3
 80059d2:	d001      	beq.n	80059d8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80059d4:	2301      	movs	r3, #1
 80059d6:	e000      	b.n	80059da <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80059d8:	2300      	movs	r3, #0
}
 80059da:	4618      	mov	r0, r3
 80059dc:	3718      	adds	r7, #24
 80059de:	46bd      	mov	sp, r7
 80059e0:	bd80      	pop	{r7, pc}
 80059e2:	bf00      	nop
 80059e4:	40023800 	.word	0x40023800

080059e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80059e8:	b580      	push	{r7, lr}
 80059ea:	b082      	sub	sp, #8
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d101      	bne.n	80059fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80059f6:	2301      	movs	r3, #1
 80059f8:	e041      	b.n	8005a7e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a00:	b2db      	uxtb	r3, r3
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d106      	bne.n	8005a14 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	2200      	movs	r2, #0
 8005a0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005a0e:	6878      	ldr	r0, [r7, #4]
 8005a10:	f000 f839 	bl	8005a86 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2202      	movs	r2, #2
 8005a18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681a      	ldr	r2, [r3, #0]
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	3304      	adds	r3, #4
 8005a24:	4619      	mov	r1, r3
 8005a26:	4610      	mov	r0, r2
 8005a28:	f000 f9d8 	bl	8005ddc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2201      	movs	r2, #1
 8005a30:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2201      	movs	r2, #1
 8005a38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2201      	movs	r2, #1
 8005a40:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2201      	movs	r2, #1
 8005a48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2201      	movs	r2, #1
 8005a50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2201      	movs	r2, #1
 8005a58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2201      	movs	r2, #1
 8005a60:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2201      	movs	r2, #1
 8005a68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2201      	movs	r2, #1
 8005a70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2201      	movs	r2, #1
 8005a78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005a7c:	2300      	movs	r3, #0
}
 8005a7e:	4618      	mov	r0, r3
 8005a80:	3708      	adds	r7, #8
 8005a82:	46bd      	mov	sp, r7
 8005a84:	bd80      	pop	{r7, pc}

08005a86 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005a86:	b480      	push	{r7}
 8005a88:	b083      	sub	sp, #12
 8005a8a:	af00      	add	r7, sp, #0
 8005a8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005a8e:	bf00      	nop
 8005a90:	370c      	adds	r7, #12
 8005a92:	46bd      	mov	sp, r7
 8005a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a98:	4770      	bx	lr
	...

08005a9c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005a9c:	b480      	push	{r7}
 8005a9e:	b085      	sub	sp, #20
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005aaa:	b2db      	uxtb	r3, r3
 8005aac:	2b01      	cmp	r3, #1
 8005aae:	d001      	beq.n	8005ab4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005ab0:	2301      	movs	r3, #1
 8005ab2:	e04e      	b.n	8005b52 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2202      	movs	r2, #2
 8005ab8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	68da      	ldr	r2, [r3, #12]
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	f042 0201 	orr.w	r2, r2, #1
 8005aca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	4a23      	ldr	r2, [pc, #140]	; (8005b60 <HAL_TIM_Base_Start_IT+0xc4>)
 8005ad2:	4293      	cmp	r3, r2
 8005ad4:	d022      	beq.n	8005b1c <HAL_TIM_Base_Start_IT+0x80>
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ade:	d01d      	beq.n	8005b1c <HAL_TIM_Base_Start_IT+0x80>
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	4a1f      	ldr	r2, [pc, #124]	; (8005b64 <HAL_TIM_Base_Start_IT+0xc8>)
 8005ae6:	4293      	cmp	r3, r2
 8005ae8:	d018      	beq.n	8005b1c <HAL_TIM_Base_Start_IT+0x80>
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	4a1e      	ldr	r2, [pc, #120]	; (8005b68 <HAL_TIM_Base_Start_IT+0xcc>)
 8005af0:	4293      	cmp	r3, r2
 8005af2:	d013      	beq.n	8005b1c <HAL_TIM_Base_Start_IT+0x80>
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	4a1c      	ldr	r2, [pc, #112]	; (8005b6c <HAL_TIM_Base_Start_IT+0xd0>)
 8005afa:	4293      	cmp	r3, r2
 8005afc:	d00e      	beq.n	8005b1c <HAL_TIM_Base_Start_IT+0x80>
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	4a1b      	ldr	r2, [pc, #108]	; (8005b70 <HAL_TIM_Base_Start_IT+0xd4>)
 8005b04:	4293      	cmp	r3, r2
 8005b06:	d009      	beq.n	8005b1c <HAL_TIM_Base_Start_IT+0x80>
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	4a19      	ldr	r2, [pc, #100]	; (8005b74 <HAL_TIM_Base_Start_IT+0xd8>)
 8005b0e:	4293      	cmp	r3, r2
 8005b10:	d004      	beq.n	8005b1c <HAL_TIM_Base_Start_IT+0x80>
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	4a18      	ldr	r2, [pc, #96]	; (8005b78 <HAL_TIM_Base_Start_IT+0xdc>)
 8005b18:	4293      	cmp	r3, r2
 8005b1a:	d111      	bne.n	8005b40 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	689b      	ldr	r3, [r3, #8]
 8005b22:	f003 0307 	and.w	r3, r3, #7
 8005b26:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	2b06      	cmp	r3, #6
 8005b2c:	d010      	beq.n	8005b50 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	681a      	ldr	r2, [r3, #0]
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f042 0201 	orr.w	r2, r2, #1
 8005b3c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b3e:	e007      	b.n	8005b50 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	681a      	ldr	r2, [r3, #0]
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f042 0201 	orr.w	r2, r2, #1
 8005b4e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005b50:	2300      	movs	r3, #0
}
 8005b52:	4618      	mov	r0, r3
 8005b54:	3714      	adds	r7, #20
 8005b56:	46bd      	mov	sp, r7
 8005b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5c:	4770      	bx	lr
 8005b5e:	bf00      	nop
 8005b60:	40010000 	.word	0x40010000
 8005b64:	40000400 	.word	0x40000400
 8005b68:	40000800 	.word	0x40000800
 8005b6c:	40000c00 	.word	0x40000c00
 8005b70:	40010400 	.word	0x40010400
 8005b74:	40014000 	.word	0x40014000
 8005b78:	40001800 	.word	0x40001800

08005b7c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005b7c:	b580      	push	{r7, lr}
 8005b7e:	b082      	sub	sp, #8
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	691b      	ldr	r3, [r3, #16]
 8005b8a:	f003 0302 	and.w	r3, r3, #2
 8005b8e:	2b02      	cmp	r3, #2
 8005b90:	d122      	bne.n	8005bd8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	68db      	ldr	r3, [r3, #12]
 8005b98:	f003 0302 	and.w	r3, r3, #2
 8005b9c:	2b02      	cmp	r3, #2
 8005b9e:	d11b      	bne.n	8005bd8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f06f 0202 	mvn.w	r2, #2
 8005ba8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	2201      	movs	r2, #1
 8005bae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	699b      	ldr	r3, [r3, #24]
 8005bb6:	f003 0303 	and.w	r3, r3, #3
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d003      	beq.n	8005bc6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005bbe:	6878      	ldr	r0, [r7, #4]
 8005bc0:	f000 f8ee 	bl	8005da0 <HAL_TIM_IC_CaptureCallback>
 8005bc4:	e005      	b.n	8005bd2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005bc6:	6878      	ldr	r0, [r7, #4]
 8005bc8:	f000 f8e0 	bl	8005d8c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005bcc:	6878      	ldr	r0, [r7, #4]
 8005bce:	f000 f8f1 	bl	8005db4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	2200      	movs	r2, #0
 8005bd6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	691b      	ldr	r3, [r3, #16]
 8005bde:	f003 0304 	and.w	r3, r3, #4
 8005be2:	2b04      	cmp	r3, #4
 8005be4:	d122      	bne.n	8005c2c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	68db      	ldr	r3, [r3, #12]
 8005bec:	f003 0304 	and.w	r3, r3, #4
 8005bf0:	2b04      	cmp	r3, #4
 8005bf2:	d11b      	bne.n	8005c2c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f06f 0204 	mvn.w	r2, #4
 8005bfc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	2202      	movs	r2, #2
 8005c02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	699b      	ldr	r3, [r3, #24]
 8005c0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d003      	beq.n	8005c1a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c12:	6878      	ldr	r0, [r7, #4]
 8005c14:	f000 f8c4 	bl	8005da0 <HAL_TIM_IC_CaptureCallback>
 8005c18:	e005      	b.n	8005c26 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c1a:	6878      	ldr	r0, [r7, #4]
 8005c1c:	f000 f8b6 	bl	8005d8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c20:	6878      	ldr	r0, [r7, #4]
 8005c22:	f000 f8c7 	bl	8005db4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	2200      	movs	r2, #0
 8005c2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	691b      	ldr	r3, [r3, #16]
 8005c32:	f003 0308 	and.w	r3, r3, #8
 8005c36:	2b08      	cmp	r3, #8
 8005c38:	d122      	bne.n	8005c80 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	68db      	ldr	r3, [r3, #12]
 8005c40:	f003 0308 	and.w	r3, r3, #8
 8005c44:	2b08      	cmp	r3, #8
 8005c46:	d11b      	bne.n	8005c80 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	f06f 0208 	mvn.w	r2, #8
 8005c50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	2204      	movs	r2, #4
 8005c56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	69db      	ldr	r3, [r3, #28]
 8005c5e:	f003 0303 	and.w	r3, r3, #3
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d003      	beq.n	8005c6e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c66:	6878      	ldr	r0, [r7, #4]
 8005c68:	f000 f89a 	bl	8005da0 <HAL_TIM_IC_CaptureCallback>
 8005c6c:	e005      	b.n	8005c7a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c6e:	6878      	ldr	r0, [r7, #4]
 8005c70:	f000 f88c 	bl	8005d8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c74:	6878      	ldr	r0, [r7, #4]
 8005c76:	f000 f89d 	bl	8005db4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	691b      	ldr	r3, [r3, #16]
 8005c86:	f003 0310 	and.w	r3, r3, #16
 8005c8a:	2b10      	cmp	r3, #16
 8005c8c:	d122      	bne.n	8005cd4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	68db      	ldr	r3, [r3, #12]
 8005c94:	f003 0310 	and.w	r3, r3, #16
 8005c98:	2b10      	cmp	r3, #16
 8005c9a:	d11b      	bne.n	8005cd4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f06f 0210 	mvn.w	r2, #16
 8005ca4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	2208      	movs	r2, #8
 8005caa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	69db      	ldr	r3, [r3, #28]
 8005cb2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d003      	beq.n	8005cc2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005cba:	6878      	ldr	r0, [r7, #4]
 8005cbc:	f000 f870 	bl	8005da0 <HAL_TIM_IC_CaptureCallback>
 8005cc0:	e005      	b.n	8005cce <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005cc2:	6878      	ldr	r0, [r7, #4]
 8005cc4:	f000 f862 	bl	8005d8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005cc8:	6878      	ldr	r0, [r7, #4]
 8005cca:	f000 f873 	bl	8005db4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	691b      	ldr	r3, [r3, #16]
 8005cda:	f003 0301 	and.w	r3, r3, #1
 8005cde:	2b01      	cmp	r3, #1
 8005ce0:	d10e      	bne.n	8005d00 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	68db      	ldr	r3, [r3, #12]
 8005ce8:	f003 0301 	and.w	r3, r3, #1
 8005cec:	2b01      	cmp	r3, #1
 8005cee:	d107      	bne.n	8005d00 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	f06f 0201 	mvn.w	r2, #1
 8005cf8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005cfa:	6878      	ldr	r0, [r7, #4]
 8005cfc:	f7fd fc4a 	bl	8003594 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	691b      	ldr	r3, [r3, #16]
 8005d06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d0a:	2b80      	cmp	r3, #128	; 0x80
 8005d0c:	d10e      	bne.n	8005d2c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	68db      	ldr	r3, [r3, #12]
 8005d14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d18:	2b80      	cmp	r3, #128	; 0x80
 8005d1a:	d107      	bne.n	8005d2c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005d24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005d26:	6878      	ldr	r0, [r7, #4]
 8005d28:	f000 f902 	bl	8005f30 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	691b      	ldr	r3, [r3, #16]
 8005d32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d36:	2b40      	cmp	r3, #64	; 0x40
 8005d38:	d10e      	bne.n	8005d58 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	68db      	ldr	r3, [r3, #12]
 8005d40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d44:	2b40      	cmp	r3, #64	; 0x40
 8005d46:	d107      	bne.n	8005d58 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005d50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005d52:	6878      	ldr	r0, [r7, #4]
 8005d54:	f000 f838 	bl	8005dc8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	691b      	ldr	r3, [r3, #16]
 8005d5e:	f003 0320 	and.w	r3, r3, #32
 8005d62:	2b20      	cmp	r3, #32
 8005d64:	d10e      	bne.n	8005d84 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	68db      	ldr	r3, [r3, #12]
 8005d6c:	f003 0320 	and.w	r3, r3, #32
 8005d70:	2b20      	cmp	r3, #32
 8005d72:	d107      	bne.n	8005d84 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	f06f 0220 	mvn.w	r2, #32
 8005d7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005d7e:	6878      	ldr	r0, [r7, #4]
 8005d80:	f000 f8cc 	bl	8005f1c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005d84:	bf00      	nop
 8005d86:	3708      	adds	r7, #8
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	bd80      	pop	{r7, pc}

08005d8c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005d8c:	b480      	push	{r7}
 8005d8e:	b083      	sub	sp, #12
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005d94:	bf00      	nop
 8005d96:	370c      	adds	r7, #12
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9e:	4770      	bx	lr

08005da0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005da0:	b480      	push	{r7}
 8005da2:	b083      	sub	sp, #12
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005da8:	bf00      	nop
 8005daa:	370c      	adds	r7, #12
 8005dac:	46bd      	mov	sp, r7
 8005dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db2:	4770      	bx	lr

08005db4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005db4:	b480      	push	{r7}
 8005db6:	b083      	sub	sp, #12
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005dbc:	bf00      	nop
 8005dbe:	370c      	adds	r7, #12
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc6:	4770      	bx	lr

08005dc8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005dc8:	b480      	push	{r7}
 8005dca:	b083      	sub	sp, #12
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005dd0:	bf00      	nop
 8005dd2:	370c      	adds	r7, #12
 8005dd4:	46bd      	mov	sp, r7
 8005dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dda:	4770      	bx	lr

08005ddc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005ddc:	b480      	push	{r7}
 8005dde:	b085      	sub	sp, #20
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	6078      	str	r0, [r7, #4]
 8005de4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	4a40      	ldr	r2, [pc, #256]	; (8005ef0 <TIM_Base_SetConfig+0x114>)
 8005df0:	4293      	cmp	r3, r2
 8005df2:	d013      	beq.n	8005e1c <TIM_Base_SetConfig+0x40>
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005dfa:	d00f      	beq.n	8005e1c <TIM_Base_SetConfig+0x40>
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	4a3d      	ldr	r2, [pc, #244]	; (8005ef4 <TIM_Base_SetConfig+0x118>)
 8005e00:	4293      	cmp	r3, r2
 8005e02:	d00b      	beq.n	8005e1c <TIM_Base_SetConfig+0x40>
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	4a3c      	ldr	r2, [pc, #240]	; (8005ef8 <TIM_Base_SetConfig+0x11c>)
 8005e08:	4293      	cmp	r3, r2
 8005e0a:	d007      	beq.n	8005e1c <TIM_Base_SetConfig+0x40>
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	4a3b      	ldr	r2, [pc, #236]	; (8005efc <TIM_Base_SetConfig+0x120>)
 8005e10:	4293      	cmp	r3, r2
 8005e12:	d003      	beq.n	8005e1c <TIM_Base_SetConfig+0x40>
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	4a3a      	ldr	r2, [pc, #232]	; (8005f00 <TIM_Base_SetConfig+0x124>)
 8005e18:	4293      	cmp	r3, r2
 8005e1a:	d108      	bne.n	8005e2e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e22:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005e24:	683b      	ldr	r3, [r7, #0]
 8005e26:	685b      	ldr	r3, [r3, #4]
 8005e28:	68fa      	ldr	r2, [r7, #12]
 8005e2a:	4313      	orrs	r3, r2
 8005e2c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	4a2f      	ldr	r2, [pc, #188]	; (8005ef0 <TIM_Base_SetConfig+0x114>)
 8005e32:	4293      	cmp	r3, r2
 8005e34:	d02b      	beq.n	8005e8e <TIM_Base_SetConfig+0xb2>
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e3c:	d027      	beq.n	8005e8e <TIM_Base_SetConfig+0xb2>
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	4a2c      	ldr	r2, [pc, #176]	; (8005ef4 <TIM_Base_SetConfig+0x118>)
 8005e42:	4293      	cmp	r3, r2
 8005e44:	d023      	beq.n	8005e8e <TIM_Base_SetConfig+0xb2>
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	4a2b      	ldr	r2, [pc, #172]	; (8005ef8 <TIM_Base_SetConfig+0x11c>)
 8005e4a:	4293      	cmp	r3, r2
 8005e4c:	d01f      	beq.n	8005e8e <TIM_Base_SetConfig+0xb2>
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	4a2a      	ldr	r2, [pc, #168]	; (8005efc <TIM_Base_SetConfig+0x120>)
 8005e52:	4293      	cmp	r3, r2
 8005e54:	d01b      	beq.n	8005e8e <TIM_Base_SetConfig+0xb2>
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	4a29      	ldr	r2, [pc, #164]	; (8005f00 <TIM_Base_SetConfig+0x124>)
 8005e5a:	4293      	cmp	r3, r2
 8005e5c:	d017      	beq.n	8005e8e <TIM_Base_SetConfig+0xb2>
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	4a28      	ldr	r2, [pc, #160]	; (8005f04 <TIM_Base_SetConfig+0x128>)
 8005e62:	4293      	cmp	r3, r2
 8005e64:	d013      	beq.n	8005e8e <TIM_Base_SetConfig+0xb2>
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	4a27      	ldr	r2, [pc, #156]	; (8005f08 <TIM_Base_SetConfig+0x12c>)
 8005e6a:	4293      	cmp	r3, r2
 8005e6c:	d00f      	beq.n	8005e8e <TIM_Base_SetConfig+0xb2>
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	4a26      	ldr	r2, [pc, #152]	; (8005f0c <TIM_Base_SetConfig+0x130>)
 8005e72:	4293      	cmp	r3, r2
 8005e74:	d00b      	beq.n	8005e8e <TIM_Base_SetConfig+0xb2>
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	4a25      	ldr	r2, [pc, #148]	; (8005f10 <TIM_Base_SetConfig+0x134>)
 8005e7a:	4293      	cmp	r3, r2
 8005e7c:	d007      	beq.n	8005e8e <TIM_Base_SetConfig+0xb2>
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	4a24      	ldr	r2, [pc, #144]	; (8005f14 <TIM_Base_SetConfig+0x138>)
 8005e82:	4293      	cmp	r3, r2
 8005e84:	d003      	beq.n	8005e8e <TIM_Base_SetConfig+0xb2>
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	4a23      	ldr	r2, [pc, #140]	; (8005f18 <TIM_Base_SetConfig+0x13c>)
 8005e8a:	4293      	cmp	r3, r2
 8005e8c:	d108      	bne.n	8005ea0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e94:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005e96:	683b      	ldr	r3, [r7, #0]
 8005e98:	68db      	ldr	r3, [r3, #12]
 8005e9a:	68fa      	ldr	r2, [r7, #12]
 8005e9c:	4313      	orrs	r3, r2
 8005e9e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005ea6:	683b      	ldr	r3, [r7, #0]
 8005ea8:	695b      	ldr	r3, [r3, #20]
 8005eaa:	4313      	orrs	r3, r2
 8005eac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	68fa      	ldr	r2, [r7, #12]
 8005eb2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005eb4:	683b      	ldr	r3, [r7, #0]
 8005eb6:	689a      	ldr	r2, [r3, #8]
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005ebc:	683b      	ldr	r3, [r7, #0]
 8005ebe:	681a      	ldr	r2, [r3, #0]
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	4a0a      	ldr	r2, [pc, #40]	; (8005ef0 <TIM_Base_SetConfig+0x114>)
 8005ec8:	4293      	cmp	r3, r2
 8005eca:	d003      	beq.n	8005ed4 <TIM_Base_SetConfig+0xf8>
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	4a0c      	ldr	r2, [pc, #48]	; (8005f00 <TIM_Base_SetConfig+0x124>)
 8005ed0:	4293      	cmp	r3, r2
 8005ed2:	d103      	bne.n	8005edc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005ed4:	683b      	ldr	r3, [r7, #0]
 8005ed6:	691a      	ldr	r2, [r3, #16]
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	2201      	movs	r2, #1
 8005ee0:	615a      	str	r2, [r3, #20]
}
 8005ee2:	bf00      	nop
 8005ee4:	3714      	adds	r7, #20
 8005ee6:	46bd      	mov	sp, r7
 8005ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eec:	4770      	bx	lr
 8005eee:	bf00      	nop
 8005ef0:	40010000 	.word	0x40010000
 8005ef4:	40000400 	.word	0x40000400
 8005ef8:	40000800 	.word	0x40000800
 8005efc:	40000c00 	.word	0x40000c00
 8005f00:	40010400 	.word	0x40010400
 8005f04:	40014000 	.word	0x40014000
 8005f08:	40014400 	.word	0x40014400
 8005f0c:	40014800 	.word	0x40014800
 8005f10:	40001800 	.word	0x40001800
 8005f14:	40001c00 	.word	0x40001c00
 8005f18:	40002000 	.word	0x40002000

08005f1c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005f1c:	b480      	push	{r7}
 8005f1e:	b083      	sub	sp, #12
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005f24:	bf00      	nop
 8005f26:	370c      	adds	r7, #12
 8005f28:	46bd      	mov	sp, r7
 8005f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2e:	4770      	bx	lr

08005f30 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005f30:	b480      	push	{r7}
 8005f32:	b083      	sub	sp, #12
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005f38:	bf00      	nop
 8005f3a:	370c      	adds	r7, #12
 8005f3c:	46bd      	mov	sp, r7
 8005f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f42:	4770      	bx	lr

08005f44 <__errno>:
 8005f44:	4b01      	ldr	r3, [pc, #4]	; (8005f4c <__errno+0x8>)
 8005f46:	6818      	ldr	r0, [r3, #0]
 8005f48:	4770      	bx	lr
 8005f4a:	bf00      	nop
 8005f4c:	20000014 	.word	0x20000014

08005f50 <__libc_init_array>:
 8005f50:	b570      	push	{r4, r5, r6, lr}
 8005f52:	4d0d      	ldr	r5, [pc, #52]	; (8005f88 <__libc_init_array+0x38>)
 8005f54:	4c0d      	ldr	r4, [pc, #52]	; (8005f8c <__libc_init_array+0x3c>)
 8005f56:	1b64      	subs	r4, r4, r5
 8005f58:	10a4      	asrs	r4, r4, #2
 8005f5a:	2600      	movs	r6, #0
 8005f5c:	42a6      	cmp	r6, r4
 8005f5e:	d109      	bne.n	8005f74 <__libc_init_array+0x24>
 8005f60:	4d0b      	ldr	r5, [pc, #44]	; (8005f90 <__libc_init_array+0x40>)
 8005f62:	4c0c      	ldr	r4, [pc, #48]	; (8005f94 <__libc_init_array+0x44>)
 8005f64:	f001 f832 	bl	8006fcc <_init>
 8005f68:	1b64      	subs	r4, r4, r5
 8005f6a:	10a4      	asrs	r4, r4, #2
 8005f6c:	2600      	movs	r6, #0
 8005f6e:	42a6      	cmp	r6, r4
 8005f70:	d105      	bne.n	8005f7e <__libc_init_array+0x2e>
 8005f72:	bd70      	pop	{r4, r5, r6, pc}
 8005f74:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f78:	4798      	blx	r3
 8005f7a:	3601      	adds	r6, #1
 8005f7c:	e7ee      	b.n	8005f5c <__libc_init_array+0xc>
 8005f7e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f82:	4798      	blx	r3
 8005f84:	3601      	adds	r6, #1
 8005f86:	e7f2      	b.n	8005f6e <__libc_init_array+0x1e>
 8005f88:	0800711c 	.word	0x0800711c
 8005f8c:	0800711c 	.word	0x0800711c
 8005f90:	0800711c 	.word	0x0800711c
 8005f94:	08007120 	.word	0x08007120

08005f98 <memcpy>:
 8005f98:	440a      	add	r2, r1
 8005f9a:	4291      	cmp	r1, r2
 8005f9c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005fa0:	d100      	bne.n	8005fa4 <memcpy+0xc>
 8005fa2:	4770      	bx	lr
 8005fa4:	b510      	push	{r4, lr}
 8005fa6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005faa:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005fae:	4291      	cmp	r1, r2
 8005fb0:	d1f9      	bne.n	8005fa6 <memcpy+0xe>
 8005fb2:	bd10      	pop	{r4, pc}

08005fb4 <memset>:
 8005fb4:	4402      	add	r2, r0
 8005fb6:	4603      	mov	r3, r0
 8005fb8:	4293      	cmp	r3, r2
 8005fba:	d100      	bne.n	8005fbe <memset+0xa>
 8005fbc:	4770      	bx	lr
 8005fbe:	f803 1b01 	strb.w	r1, [r3], #1
 8005fc2:	e7f9      	b.n	8005fb8 <memset+0x4>

08005fc4 <iprintf>:
 8005fc4:	b40f      	push	{r0, r1, r2, r3}
 8005fc6:	4b0a      	ldr	r3, [pc, #40]	; (8005ff0 <iprintf+0x2c>)
 8005fc8:	b513      	push	{r0, r1, r4, lr}
 8005fca:	681c      	ldr	r4, [r3, #0]
 8005fcc:	b124      	cbz	r4, 8005fd8 <iprintf+0x14>
 8005fce:	69a3      	ldr	r3, [r4, #24]
 8005fd0:	b913      	cbnz	r3, 8005fd8 <iprintf+0x14>
 8005fd2:	4620      	mov	r0, r4
 8005fd4:	f000 fa5e 	bl	8006494 <__sinit>
 8005fd8:	ab05      	add	r3, sp, #20
 8005fda:	9a04      	ldr	r2, [sp, #16]
 8005fdc:	68a1      	ldr	r1, [r4, #8]
 8005fde:	9301      	str	r3, [sp, #4]
 8005fe0:	4620      	mov	r0, r4
 8005fe2:	f000 fc67 	bl	80068b4 <_vfiprintf_r>
 8005fe6:	b002      	add	sp, #8
 8005fe8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005fec:	b004      	add	sp, #16
 8005fee:	4770      	bx	lr
 8005ff0:	20000014 	.word	0x20000014

08005ff4 <_puts_r>:
 8005ff4:	b570      	push	{r4, r5, r6, lr}
 8005ff6:	460e      	mov	r6, r1
 8005ff8:	4605      	mov	r5, r0
 8005ffa:	b118      	cbz	r0, 8006004 <_puts_r+0x10>
 8005ffc:	6983      	ldr	r3, [r0, #24]
 8005ffe:	b90b      	cbnz	r3, 8006004 <_puts_r+0x10>
 8006000:	f000 fa48 	bl	8006494 <__sinit>
 8006004:	69ab      	ldr	r3, [r5, #24]
 8006006:	68ac      	ldr	r4, [r5, #8]
 8006008:	b913      	cbnz	r3, 8006010 <_puts_r+0x1c>
 800600a:	4628      	mov	r0, r5
 800600c:	f000 fa42 	bl	8006494 <__sinit>
 8006010:	4b2c      	ldr	r3, [pc, #176]	; (80060c4 <_puts_r+0xd0>)
 8006012:	429c      	cmp	r4, r3
 8006014:	d120      	bne.n	8006058 <_puts_r+0x64>
 8006016:	686c      	ldr	r4, [r5, #4]
 8006018:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800601a:	07db      	lsls	r3, r3, #31
 800601c:	d405      	bmi.n	800602a <_puts_r+0x36>
 800601e:	89a3      	ldrh	r3, [r4, #12]
 8006020:	0598      	lsls	r0, r3, #22
 8006022:	d402      	bmi.n	800602a <_puts_r+0x36>
 8006024:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006026:	f000 fad3 	bl	80065d0 <__retarget_lock_acquire_recursive>
 800602a:	89a3      	ldrh	r3, [r4, #12]
 800602c:	0719      	lsls	r1, r3, #28
 800602e:	d51d      	bpl.n	800606c <_puts_r+0x78>
 8006030:	6923      	ldr	r3, [r4, #16]
 8006032:	b1db      	cbz	r3, 800606c <_puts_r+0x78>
 8006034:	3e01      	subs	r6, #1
 8006036:	68a3      	ldr	r3, [r4, #8]
 8006038:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800603c:	3b01      	subs	r3, #1
 800603e:	60a3      	str	r3, [r4, #8]
 8006040:	bb39      	cbnz	r1, 8006092 <_puts_r+0x9e>
 8006042:	2b00      	cmp	r3, #0
 8006044:	da38      	bge.n	80060b8 <_puts_r+0xc4>
 8006046:	4622      	mov	r2, r4
 8006048:	210a      	movs	r1, #10
 800604a:	4628      	mov	r0, r5
 800604c:	f000 f848 	bl	80060e0 <__swbuf_r>
 8006050:	3001      	adds	r0, #1
 8006052:	d011      	beq.n	8006078 <_puts_r+0x84>
 8006054:	250a      	movs	r5, #10
 8006056:	e011      	b.n	800607c <_puts_r+0x88>
 8006058:	4b1b      	ldr	r3, [pc, #108]	; (80060c8 <_puts_r+0xd4>)
 800605a:	429c      	cmp	r4, r3
 800605c:	d101      	bne.n	8006062 <_puts_r+0x6e>
 800605e:	68ac      	ldr	r4, [r5, #8]
 8006060:	e7da      	b.n	8006018 <_puts_r+0x24>
 8006062:	4b1a      	ldr	r3, [pc, #104]	; (80060cc <_puts_r+0xd8>)
 8006064:	429c      	cmp	r4, r3
 8006066:	bf08      	it	eq
 8006068:	68ec      	ldreq	r4, [r5, #12]
 800606a:	e7d5      	b.n	8006018 <_puts_r+0x24>
 800606c:	4621      	mov	r1, r4
 800606e:	4628      	mov	r0, r5
 8006070:	f000 f888 	bl	8006184 <__swsetup_r>
 8006074:	2800      	cmp	r0, #0
 8006076:	d0dd      	beq.n	8006034 <_puts_r+0x40>
 8006078:	f04f 35ff 	mov.w	r5, #4294967295
 800607c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800607e:	07da      	lsls	r2, r3, #31
 8006080:	d405      	bmi.n	800608e <_puts_r+0x9a>
 8006082:	89a3      	ldrh	r3, [r4, #12]
 8006084:	059b      	lsls	r3, r3, #22
 8006086:	d402      	bmi.n	800608e <_puts_r+0x9a>
 8006088:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800608a:	f000 faa2 	bl	80065d2 <__retarget_lock_release_recursive>
 800608e:	4628      	mov	r0, r5
 8006090:	bd70      	pop	{r4, r5, r6, pc}
 8006092:	2b00      	cmp	r3, #0
 8006094:	da04      	bge.n	80060a0 <_puts_r+0xac>
 8006096:	69a2      	ldr	r2, [r4, #24]
 8006098:	429a      	cmp	r2, r3
 800609a:	dc06      	bgt.n	80060aa <_puts_r+0xb6>
 800609c:	290a      	cmp	r1, #10
 800609e:	d004      	beq.n	80060aa <_puts_r+0xb6>
 80060a0:	6823      	ldr	r3, [r4, #0]
 80060a2:	1c5a      	adds	r2, r3, #1
 80060a4:	6022      	str	r2, [r4, #0]
 80060a6:	7019      	strb	r1, [r3, #0]
 80060a8:	e7c5      	b.n	8006036 <_puts_r+0x42>
 80060aa:	4622      	mov	r2, r4
 80060ac:	4628      	mov	r0, r5
 80060ae:	f000 f817 	bl	80060e0 <__swbuf_r>
 80060b2:	3001      	adds	r0, #1
 80060b4:	d1bf      	bne.n	8006036 <_puts_r+0x42>
 80060b6:	e7df      	b.n	8006078 <_puts_r+0x84>
 80060b8:	6823      	ldr	r3, [r4, #0]
 80060ba:	250a      	movs	r5, #10
 80060bc:	1c5a      	adds	r2, r3, #1
 80060be:	6022      	str	r2, [r4, #0]
 80060c0:	701d      	strb	r5, [r3, #0]
 80060c2:	e7db      	b.n	800607c <_puts_r+0x88>
 80060c4:	080070a0 	.word	0x080070a0
 80060c8:	080070c0 	.word	0x080070c0
 80060cc:	08007080 	.word	0x08007080

080060d0 <puts>:
 80060d0:	4b02      	ldr	r3, [pc, #8]	; (80060dc <puts+0xc>)
 80060d2:	4601      	mov	r1, r0
 80060d4:	6818      	ldr	r0, [r3, #0]
 80060d6:	f7ff bf8d 	b.w	8005ff4 <_puts_r>
 80060da:	bf00      	nop
 80060dc:	20000014 	.word	0x20000014

080060e0 <__swbuf_r>:
 80060e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060e2:	460e      	mov	r6, r1
 80060e4:	4614      	mov	r4, r2
 80060e6:	4605      	mov	r5, r0
 80060e8:	b118      	cbz	r0, 80060f2 <__swbuf_r+0x12>
 80060ea:	6983      	ldr	r3, [r0, #24]
 80060ec:	b90b      	cbnz	r3, 80060f2 <__swbuf_r+0x12>
 80060ee:	f000 f9d1 	bl	8006494 <__sinit>
 80060f2:	4b21      	ldr	r3, [pc, #132]	; (8006178 <__swbuf_r+0x98>)
 80060f4:	429c      	cmp	r4, r3
 80060f6:	d12b      	bne.n	8006150 <__swbuf_r+0x70>
 80060f8:	686c      	ldr	r4, [r5, #4]
 80060fa:	69a3      	ldr	r3, [r4, #24]
 80060fc:	60a3      	str	r3, [r4, #8]
 80060fe:	89a3      	ldrh	r3, [r4, #12]
 8006100:	071a      	lsls	r2, r3, #28
 8006102:	d52f      	bpl.n	8006164 <__swbuf_r+0x84>
 8006104:	6923      	ldr	r3, [r4, #16]
 8006106:	b36b      	cbz	r3, 8006164 <__swbuf_r+0x84>
 8006108:	6923      	ldr	r3, [r4, #16]
 800610a:	6820      	ldr	r0, [r4, #0]
 800610c:	1ac0      	subs	r0, r0, r3
 800610e:	6963      	ldr	r3, [r4, #20]
 8006110:	b2f6      	uxtb	r6, r6
 8006112:	4283      	cmp	r3, r0
 8006114:	4637      	mov	r7, r6
 8006116:	dc04      	bgt.n	8006122 <__swbuf_r+0x42>
 8006118:	4621      	mov	r1, r4
 800611a:	4628      	mov	r0, r5
 800611c:	f000 f926 	bl	800636c <_fflush_r>
 8006120:	bb30      	cbnz	r0, 8006170 <__swbuf_r+0x90>
 8006122:	68a3      	ldr	r3, [r4, #8]
 8006124:	3b01      	subs	r3, #1
 8006126:	60a3      	str	r3, [r4, #8]
 8006128:	6823      	ldr	r3, [r4, #0]
 800612a:	1c5a      	adds	r2, r3, #1
 800612c:	6022      	str	r2, [r4, #0]
 800612e:	701e      	strb	r6, [r3, #0]
 8006130:	6963      	ldr	r3, [r4, #20]
 8006132:	3001      	adds	r0, #1
 8006134:	4283      	cmp	r3, r0
 8006136:	d004      	beq.n	8006142 <__swbuf_r+0x62>
 8006138:	89a3      	ldrh	r3, [r4, #12]
 800613a:	07db      	lsls	r3, r3, #31
 800613c:	d506      	bpl.n	800614c <__swbuf_r+0x6c>
 800613e:	2e0a      	cmp	r6, #10
 8006140:	d104      	bne.n	800614c <__swbuf_r+0x6c>
 8006142:	4621      	mov	r1, r4
 8006144:	4628      	mov	r0, r5
 8006146:	f000 f911 	bl	800636c <_fflush_r>
 800614a:	b988      	cbnz	r0, 8006170 <__swbuf_r+0x90>
 800614c:	4638      	mov	r0, r7
 800614e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006150:	4b0a      	ldr	r3, [pc, #40]	; (800617c <__swbuf_r+0x9c>)
 8006152:	429c      	cmp	r4, r3
 8006154:	d101      	bne.n	800615a <__swbuf_r+0x7a>
 8006156:	68ac      	ldr	r4, [r5, #8]
 8006158:	e7cf      	b.n	80060fa <__swbuf_r+0x1a>
 800615a:	4b09      	ldr	r3, [pc, #36]	; (8006180 <__swbuf_r+0xa0>)
 800615c:	429c      	cmp	r4, r3
 800615e:	bf08      	it	eq
 8006160:	68ec      	ldreq	r4, [r5, #12]
 8006162:	e7ca      	b.n	80060fa <__swbuf_r+0x1a>
 8006164:	4621      	mov	r1, r4
 8006166:	4628      	mov	r0, r5
 8006168:	f000 f80c 	bl	8006184 <__swsetup_r>
 800616c:	2800      	cmp	r0, #0
 800616e:	d0cb      	beq.n	8006108 <__swbuf_r+0x28>
 8006170:	f04f 37ff 	mov.w	r7, #4294967295
 8006174:	e7ea      	b.n	800614c <__swbuf_r+0x6c>
 8006176:	bf00      	nop
 8006178:	080070a0 	.word	0x080070a0
 800617c:	080070c0 	.word	0x080070c0
 8006180:	08007080 	.word	0x08007080

08006184 <__swsetup_r>:
 8006184:	4b32      	ldr	r3, [pc, #200]	; (8006250 <__swsetup_r+0xcc>)
 8006186:	b570      	push	{r4, r5, r6, lr}
 8006188:	681d      	ldr	r5, [r3, #0]
 800618a:	4606      	mov	r6, r0
 800618c:	460c      	mov	r4, r1
 800618e:	b125      	cbz	r5, 800619a <__swsetup_r+0x16>
 8006190:	69ab      	ldr	r3, [r5, #24]
 8006192:	b913      	cbnz	r3, 800619a <__swsetup_r+0x16>
 8006194:	4628      	mov	r0, r5
 8006196:	f000 f97d 	bl	8006494 <__sinit>
 800619a:	4b2e      	ldr	r3, [pc, #184]	; (8006254 <__swsetup_r+0xd0>)
 800619c:	429c      	cmp	r4, r3
 800619e:	d10f      	bne.n	80061c0 <__swsetup_r+0x3c>
 80061a0:	686c      	ldr	r4, [r5, #4]
 80061a2:	89a3      	ldrh	r3, [r4, #12]
 80061a4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80061a8:	0719      	lsls	r1, r3, #28
 80061aa:	d42c      	bmi.n	8006206 <__swsetup_r+0x82>
 80061ac:	06dd      	lsls	r5, r3, #27
 80061ae:	d411      	bmi.n	80061d4 <__swsetup_r+0x50>
 80061b0:	2309      	movs	r3, #9
 80061b2:	6033      	str	r3, [r6, #0]
 80061b4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80061b8:	81a3      	strh	r3, [r4, #12]
 80061ba:	f04f 30ff 	mov.w	r0, #4294967295
 80061be:	e03e      	b.n	800623e <__swsetup_r+0xba>
 80061c0:	4b25      	ldr	r3, [pc, #148]	; (8006258 <__swsetup_r+0xd4>)
 80061c2:	429c      	cmp	r4, r3
 80061c4:	d101      	bne.n	80061ca <__swsetup_r+0x46>
 80061c6:	68ac      	ldr	r4, [r5, #8]
 80061c8:	e7eb      	b.n	80061a2 <__swsetup_r+0x1e>
 80061ca:	4b24      	ldr	r3, [pc, #144]	; (800625c <__swsetup_r+0xd8>)
 80061cc:	429c      	cmp	r4, r3
 80061ce:	bf08      	it	eq
 80061d0:	68ec      	ldreq	r4, [r5, #12]
 80061d2:	e7e6      	b.n	80061a2 <__swsetup_r+0x1e>
 80061d4:	0758      	lsls	r0, r3, #29
 80061d6:	d512      	bpl.n	80061fe <__swsetup_r+0x7a>
 80061d8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80061da:	b141      	cbz	r1, 80061ee <__swsetup_r+0x6a>
 80061dc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80061e0:	4299      	cmp	r1, r3
 80061e2:	d002      	beq.n	80061ea <__swsetup_r+0x66>
 80061e4:	4630      	mov	r0, r6
 80061e6:	f000 fa5b 	bl	80066a0 <_free_r>
 80061ea:	2300      	movs	r3, #0
 80061ec:	6363      	str	r3, [r4, #52]	; 0x34
 80061ee:	89a3      	ldrh	r3, [r4, #12]
 80061f0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80061f4:	81a3      	strh	r3, [r4, #12]
 80061f6:	2300      	movs	r3, #0
 80061f8:	6063      	str	r3, [r4, #4]
 80061fa:	6923      	ldr	r3, [r4, #16]
 80061fc:	6023      	str	r3, [r4, #0]
 80061fe:	89a3      	ldrh	r3, [r4, #12]
 8006200:	f043 0308 	orr.w	r3, r3, #8
 8006204:	81a3      	strh	r3, [r4, #12]
 8006206:	6923      	ldr	r3, [r4, #16]
 8006208:	b94b      	cbnz	r3, 800621e <__swsetup_r+0x9a>
 800620a:	89a3      	ldrh	r3, [r4, #12]
 800620c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006210:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006214:	d003      	beq.n	800621e <__swsetup_r+0x9a>
 8006216:	4621      	mov	r1, r4
 8006218:	4630      	mov	r0, r6
 800621a:	f000 fa01 	bl	8006620 <__smakebuf_r>
 800621e:	89a0      	ldrh	r0, [r4, #12]
 8006220:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006224:	f010 0301 	ands.w	r3, r0, #1
 8006228:	d00a      	beq.n	8006240 <__swsetup_r+0xbc>
 800622a:	2300      	movs	r3, #0
 800622c:	60a3      	str	r3, [r4, #8]
 800622e:	6963      	ldr	r3, [r4, #20]
 8006230:	425b      	negs	r3, r3
 8006232:	61a3      	str	r3, [r4, #24]
 8006234:	6923      	ldr	r3, [r4, #16]
 8006236:	b943      	cbnz	r3, 800624a <__swsetup_r+0xc6>
 8006238:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800623c:	d1ba      	bne.n	80061b4 <__swsetup_r+0x30>
 800623e:	bd70      	pop	{r4, r5, r6, pc}
 8006240:	0781      	lsls	r1, r0, #30
 8006242:	bf58      	it	pl
 8006244:	6963      	ldrpl	r3, [r4, #20]
 8006246:	60a3      	str	r3, [r4, #8]
 8006248:	e7f4      	b.n	8006234 <__swsetup_r+0xb0>
 800624a:	2000      	movs	r0, #0
 800624c:	e7f7      	b.n	800623e <__swsetup_r+0xba>
 800624e:	bf00      	nop
 8006250:	20000014 	.word	0x20000014
 8006254:	080070a0 	.word	0x080070a0
 8006258:	080070c0 	.word	0x080070c0
 800625c:	08007080 	.word	0x08007080

08006260 <__sflush_r>:
 8006260:	898a      	ldrh	r2, [r1, #12]
 8006262:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006266:	4605      	mov	r5, r0
 8006268:	0710      	lsls	r0, r2, #28
 800626a:	460c      	mov	r4, r1
 800626c:	d458      	bmi.n	8006320 <__sflush_r+0xc0>
 800626e:	684b      	ldr	r3, [r1, #4]
 8006270:	2b00      	cmp	r3, #0
 8006272:	dc05      	bgt.n	8006280 <__sflush_r+0x20>
 8006274:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006276:	2b00      	cmp	r3, #0
 8006278:	dc02      	bgt.n	8006280 <__sflush_r+0x20>
 800627a:	2000      	movs	r0, #0
 800627c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006280:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006282:	2e00      	cmp	r6, #0
 8006284:	d0f9      	beq.n	800627a <__sflush_r+0x1a>
 8006286:	2300      	movs	r3, #0
 8006288:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800628c:	682f      	ldr	r7, [r5, #0]
 800628e:	602b      	str	r3, [r5, #0]
 8006290:	d032      	beq.n	80062f8 <__sflush_r+0x98>
 8006292:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006294:	89a3      	ldrh	r3, [r4, #12]
 8006296:	075a      	lsls	r2, r3, #29
 8006298:	d505      	bpl.n	80062a6 <__sflush_r+0x46>
 800629a:	6863      	ldr	r3, [r4, #4]
 800629c:	1ac0      	subs	r0, r0, r3
 800629e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80062a0:	b10b      	cbz	r3, 80062a6 <__sflush_r+0x46>
 80062a2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80062a4:	1ac0      	subs	r0, r0, r3
 80062a6:	2300      	movs	r3, #0
 80062a8:	4602      	mov	r2, r0
 80062aa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80062ac:	6a21      	ldr	r1, [r4, #32]
 80062ae:	4628      	mov	r0, r5
 80062b0:	47b0      	blx	r6
 80062b2:	1c43      	adds	r3, r0, #1
 80062b4:	89a3      	ldrh	r3, [r4, #12]
 80062b6:	d106      	bne.n	80062c6 <__sflush_r+0x66>
 80062b8:	6829      	ldr	r1, [r5, #0]
 80062ba:	291d      	cmp	r1, #29
 80062bc:	d82c      	bhi.n	8006318 <__sflush_r+0xb8>
 80062be:	4a2a      	ldr	r2, [pc, #168]	; (8006368 <__sflush_r+0x108>)
 80062c0:	40ca      	lsrs	r2, r1
 80062c2:	07d6      	lsls	r6, r2, #31
 80062c4:	d528      	bpl.n	8006318 <__sflush_r+0xb8>
 80062c6:	2200      	movs	r2, #0
 80062c8:	6062      	str	r2, [r4, #4]
 80062ca:	04d9      	lsls	r1, r3, #19
 80062cc:	6922      	ldr	r2, [r4, #16]
 80062ce:	6022      	str	r2, [r4, #0]
 80062d0:	d504      	bpl.n	80062dc <__sflush_r+0x7c>
 80062d2:	1c42      	adds	r2, r0, #1
 80062d4:	d101      	bne.n	80062da <__sflush_r+0x7a>
 80062d6:	682b      	ldr	r3, [r5, #0]
 80062d8:	b903      	cbnz	r3, 80062dc <__sflush_r+0x7c>
 80062da:	6560      	str	r0, [r4, #84]	; 0x54
 80062dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80062de:	602f      	str	r7, [r5, #0]
 80062e0:	2900      	cmp	r1, #0
 80062e2:	d0ca      	beq.n	800627a <__sflush_r+0x1a>
 80062e4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80062e8:	4299      	cmp	r1, r3
 80062ea:	d002      	beq.n	80062f2 <__sflush_r+0x92>
 80062ec:	4628      	mov	r0, r5
 80062ee:	f000 f9d7 	bl	80066a0 <_free_r>
 80062f2:	2000      	movs	r0, #0
 80062f4:	6360      	str	r0, [r4, #52]	; 0x34
 80062f6:	e7c1      	b.n	800627c <__sflush_r+0x1c>
 80062f8:	6a21      	ldr	r1, [r4, #32]
 80062fa:	2301      	movs	r3, #1
 80062fc:	4628      	mov	r0, r5
 80062fe:	47b0      	blx	r6
 8006300:	1c41      	adds	r1, r0, #1
 8006302:	d1c7      	bne.n	8006294 <__sflush_r+0x34>
 8006304:	682b      	ldr	r3, [r5, #0]
 8006306:	2b00      	cmp	r3, #0
 8006308:	d0c4      	beq.n	8006294 <__sflush_r+0x34>
 800630a:	2b1d      	cmp	r3, #29
 800630c:	d001      	beq.n	8006312 <__sflush_r+0xb2>
 800630e:	2b16      	cmp	r3, #22
 8006310:	d101      	bne.n	8006316 <__sflush_r+0xb6>
 8006312:	602f      	str	r7, [r5, #0]
 8006314:	e7b1      	b.n	800627a <__sflush_r+0x1a>
 8006316:	89a3      	ldrh	r3, [r4, #12]
 8006318:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800631c:	81a3      	strh	r3, [r4, #12]
 800631e:	e7ad      	b.n	800627c <__sflush_r+0x1c>
 8006320:	690f      	ldr	r7, [r1, #16]
 8006322:	2f00      	cmp	r7, #0
 8006324:	d0a9      	beq.n	800627a <__sflush_r+0x1a>
 8006326:	0793      	lsls	r3, r2, #30
 8006328:	680e      	ldr	r6, [r1, #0]
 800632a:	bf08      	it	eq
 800632c:	694b      	ldreq	r3, [r1, #20]
 800632e:	600f      	str	r7, [r1, #0]
 8006330:	bf18      	it	ne
 8006332:	2300      	movne	r3, #0
 8006334:	eba6 0807 	sub.w	r8, r6, r7
 8006338:	608b      	str	r3, [r1, #8]
 800633a:	f1b8 0f00 	cmp.w	r8, #0
 800633e:	dd9c      	ble.n	800627a <__sflush_r+0x1a>
 8006340:	6a21      	ldr	r1, [r4, #32]
 8006342:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006344:	4643      	mov	r3, r8
 8006346:	463a      	mov	r2, r7
 8006348:	4628      	mov	r0, r5
 800634a:	47b0      	blx	r6
 800634c:	2800      	cmp	r0, #0
 800634e:	dc06      	bgt.n	800635e <__sflush_r+0xfe>
 8006350:	89a3      	ldrh	r3, [r4, #12]
 8006352:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006356:	81a3      	strh	r3, [r4, #12]
 8006358:	f04f 30ff 	mov.w	r0, #4294967295
 800635c:	e78e      	b.n	800627c <__sflush_r+0x1c>
 800635e:	4407      	add	r7, r0
 8006360:	eba8 0800 	sub.w	r8, r8, r0
 8006364:	e7e9      	b.n	800633a <__sflush_r+0xda>
 8006366:	bf00      	nop
 8006368:	20400001 	.word	0x20400001

0800636c <_fflush_r>:
 800636c:	b538      	push	{r3, r4, r5, lr}
 800636e:	690b      	ldr	r3, [r1, #16]
 8006370:	4605      	mov	r5, r0
 8006372:	460c      	mov	r4, r1
 8006374:	b913      	cbnz	r3, 800637c <_fflush_r+0x10>
 8006376:	2500      	movs	r5, #0
 8006378:	4628      	mov	r0, r5
 800637a:	bd38      	pop	{r3, r4, r5, pc}
 800637c:	b118      	cbz	r0, 8006386 <_fflush_r+0x1a>
 800637e:	6983      	ldr	r3, [r0, #24]
 8006380:	b90b      	cbnz	r3, 8006386 <_fflush_r+0x1a>
 8006382:	f000 f887 	bl	8006494 <__sinit>
 8006386:	4b14      	ldr	r3, [pc, #80]	; (80063d8 <_fflush_r+0x6c>)
 8006388:	429c      	cmp	r4, r3
 800638a:	d11b      	bne.n	80063c4 <_fflush_r+0x58>
 800638c:	686c      	ldr	r4, [r5, #4]
 800638e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006392:	2b00      	cmp	r3, #0
 8006394:	d0ef      	beq.n	8006376 <_fflush_r+0xa>
 8006396:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006398:	07d0      	lsls	r0, r2, #31
 800639a:	d404      	bmi.n	80063a6 <_fflush_r+0x3a>
 800639c:	0599      	lsls	r1, r3, #22
 800639e:	d402      	bmi.n	80063a6 <_fflush_r+0x3a>
 80063a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80063a2:	f000 f915 	bl	80065d0 <__retarget_lock_acquire_recursive>
 80063a6:	4628      	mov	r0, r5
 80063a8:	4621      	mov	r1, r4
 80063aa:	f7ff ff59 	bl	8006260 <__sflush_r>
 80063ae:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80063b0:	07da      	lsls	r2, r3, #31
 80063b2:	4605      	mov	r5, r0
 80063b4:	d4e0      	bmi.n	8006378 <_fflush_r+0xc>
 80063b6:	89a3      	ldrh	r3, [r4, #12]
 80063b8:	059b      	lsls	r3, r3, #22
 80063ba:	d4dd      	bmi.n	8006378 <_fflush_r+0xc>
 80063bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80063be:	f000 f908 	bl	80065d2 <__retarget_lock_release_recursive>
 80063c2:	e7d9      	b.n	8006378 <_fflush_r+0xc>
 80063c4:	4b05      	ldr	r3, [pc, #20]	; (80063dc <_fflush_r+0x70>)
 80063c6:	429c      	cmp	r4, r3
 80063c8:	d101      	bne.n	80063ce <_fflush_r+0x62>
 80063ca:	68ac      	ldr	r4, [r5, #8]
 80063cc:	e7df      	b.n	800638e <_fflush_r+0x22>
 80063ce:	4b04      	ldr	r3, [pc, #16]	; (80063e0 <_fflush_r+0x74>)
 80063d0:	429c      	cmp	r4, r3
 80063d2:	bf08      	it	eq
 80063d4:	68ec      	ldreq	r4, [r5, #12]
 80063d6:	e7da      	b.n	800638e <_fflush_r+0x22>
 80063d8:	080070a0 	.word	0x080070a0
 80063dc:	080070c0 	.word	0x080070c0
 80063e0:	08007080 	.word	0x08007080

080063e4 <std>:
 80063e4:	2300      	movs	r3, #0
 80063e6:	b510      	push	{r4, lr}
 80063e8:	4604      	mov	r4, r0
 80063ea:	e9c0 3300 	strd	r3, r3, [r0]
 80063ee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80063f2:	6083      	str	r3, [r0, #8]
 80063f4:	8181      	strh	r1, [r0, #12]
 80063f6:	6643      	str	r3, [r0, #100]	; 0x64
 80063f8:	81c2      	strh	r2, [r0, #14]
 80063fa:	6183      	str	r3, [r0, #24]
 80063fc:	4619      	mov	r1, r3
 80063fe:	2208      	movs	r2, #8
 8006400:	305c      	adds	r0, #92	; 0x5c
 8006402:	f7ff fdd7 	bl	8005fb4 <memset>
 8006406:	4b05      	ldr	r3, [pc, #20]	; (800641c <std+0x38>)
 8006408:	6263      	str	r3, [r4, #36]	; 0x24
 800640a:	4b05      	ldr	r3, [pc, #20]	; (8006420 <std+0x3c>)
 800640c:	62a3      	str	r3, [r4, #40]	; 0x28
 800640e:	4b05      	ldr	r3, [pc, #20]	; (8006424 <std+0x40>)
 8006410:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006412:	4b05      	ldr	r3, [pc, #20]	; (8006428 <std+0x44>)
 8006414:	6224      	str	r4, [r4, #32]
 8006416:	6323      	str	r3, [r4, #48]	; 0x30
 8006418:	bd10      	pop	{r4, pc}
 800641a:	bf00      	nop
 800641c:	08006e5d 	.word	0x08006e5d
 8006420:	08006e7f 	.word	0x08006e7f
 8006424:	08006eb7 	.word	0x08006eb7
 8006428:	08006edb 	.word	0x08006edb

0800642c <_cleanup_r>:
 800642c:	4901      	ldr	r1, [pc, #4]	; (8006434 <_cleanup_r+0x8>)
 800642e:	f000 b8af 	b.w	8006590 <_fwalk_reent>
 8006432:	bf00      	nop
 8006434:	0800636d 	.word	0x0800636d

08006438 <__sfmoreglue>:
 8006438:	b570      	push	{r4, r5, r6, lr}
 800643a:	2268      	movs	r2, #104	; 0x68
 800643c:	1e4d      	subs	r5, r1, #1
 800643e:	4355      	muls	r5, r2
 8006440:	460e      	mov	r6, r1
 8006442:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006446:	f000 f997 	bl	8006778 <_malloc_r>
 800644a:	4604      	mov	r4, r0
 800644c:	b140      	cbz	r0, 8006460 <__sfmoreglue+0x28>
 800644e:	2100      	movs	r1, #0
 8006450:	e9c0 1600 	strd	r1, r6, [r0]
 8006454:	300c      	adds	r0, #12
 8006456:	60a0      	str	r0, [r4, #8]
 8006458:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800645c:	f7ff fdaa 	bl	8005fb4 <memset>
 8006460:	4620      	mov	r0, r4
 8006462:	bd70      	pop	{r4, r5, r6, pc}

08006464 <__sfp_lock_acquire>:
 8006464:	4801      	ldr	r0, [pc, #4]	; (800646c <__sfp_lock_acquire+0x8>)
 8006466:	f000 b8b3 	b.w	80065d0 <__retarget_lock_acquire_recursive>
 800646a:	bf00      	nop
 800646c:	2001f705 	.word	0x2001f705

08006470 <__sfp_lock_release>:
 8006470:	4801      	ldr	r0, [pc, #4]	; (8006478 <__sfp_lock_release+0x8>)
 8006472:	f000 b8ae 	b.w	80065d2 <__retarget_lock_release_recursive>
 8006476:	bf00      	nop
 8006478:	2001f705 	.word	0x2001f705

0800647c <__sinit_lock_acquire>:
 800647c:	4801      	ldr	r0, [pc, #4]	; (8006484 <__sinit_lock_acquire+0x8>)
 800647e:	f000 b8a7 	b.w	80065d0 <__retarget_lock_acquire_recursive>
 8006482:	bf00      	nop
 8006484:	2001f706 	.word	0x2001f706

08006488 <__sinit_lock_release>:
 8006488:	4801      	ldr	r0, [pc, #4]	; (8006490 <__sinit_lock_release+0x8>)
 800648a:	f000 b8a2 	b.w	80065d2 <__retarget_lock_release_recursive>
 800648e:	bf00      	nop
 8006490:	2001f706 	.word	0x2001f706

08006494 <__sinit>:
 8006494:	b510      	push	{r4, lr}
 8006496:	4604      	mov	r4, r0
 8006498:	f7ff fff0 	bl	800647c <__sinit_lock_acquire>
 800649c:	69a3      	ldr	r3, [r4, #24]
 800649e:	b11b      	cbz	r3, 80064a8 <__sinit+0x14>
 80064a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80064a4:	f7ff bff0 	b.w	8006488 <__sinit_lock_release>
 80064a8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80064ac:	6523      	str	r3, [r4, #80]	; 0x50
 80064ae:	4b13      	ldr	r3, [pc, #76]	; (80064fc <__sinit+0x68>)
 80064b0:	4a13      	ldr	r2, [pc, #76]	; (8006500 <__sinit+0x6c>)
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	62a2      	str	r2, [r4, #40]	; 0x28
 80064b6:	42a3      	cmp	r3, r4
 80064b8:	bf04      	itt	eq
 80064ba:	2301      	moveq	r3, #1
 80064bc:	61a3      	streq	r3, [r4, #24]
 80064be:	4620      	mov	r0, r4
 80064c0:	f000 f820 	bl	8006504 <__sfp>
 80064c4:	6060      	str	r0, [r4, #4]
 80064c6:	4620      	mov	r0, r4
 80064c8:	f000 f81c 	bl	8006504 <__sfp>
 80064cc:	60a0      	str	r0, [r4, #8]
 80064ce:	4620      	mov	r0, r4
 80064d0:	f000 f818 	bl	8006504 <__sfp>
 80064d4:	2200      	movs	r2, #0
 80064d6:	60e0      	str	r0, [r4, #12]
 80064d8:	2104      	movs	r1, #4
 80064da:	6860      	ldr	r0, [r4, #4]
 80064dc:	f7ff ff82 	bl	80063e4 <std>
 80064e0:	68a0      	ldr	r0, [r4, #8]
 80064e2:	2201      	movs	r2, #1
 80064e4:	2109      	movs	r1, #9
 80064e6:	f7ff ff7d 	bl	80063e4 <std>
 80064ea:	68e0      	ldr	r0, [r4, #12]
 80064ec:	2202      	movs	r2, #2
 80064ee:	2112      	movs	r1, #18
 80064f0:	f7ff ff78 	bl	80063e4 <std>
 80064f4:	2301      	movs	r3, #1
 80064f6:	61a3      	str	r3, [r4, #24]
 80064f8:	e7d2      	b.n	80064a0 <__sinit+0xc>
 80064fa:	bf00      	nop
 80064fc:	0800707c 	.word	0x0800707c
 8006500:	0800642d 	.word	0x0800642d

08006504 <__sfp>:
 8006504:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006506:	4607      	mov	r7, r0
 8006508:	f7ff ffac 	bl	8006464 <__sfp_lock_acquire>
 800650c:	4b1e      	ldr	r3, [pc, #120]	; (8006588 <__sfp+0x84>)
 800650e:	681e      	ldr	r6, [r3, #0]
 8006510:	69b3      	ldr	r3, [r6, #24]
 8006512:	b913      	cbnz	r3, 800651a <__sfp+0x16>
 8006514:	4630      	mov	r0, r6
 8006516:	f7ff ffbd 	bl	8006494 <__sinit>
 800651a:	3648      	adds	r6, #72	; 0x48
 800651c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006520:	3b01      	subs	r3, #1
 8006522:	d503      	bpl.n	800652c <__sfp+0x28>
 8006524:	6833      	ldr	r3, [r6, #0]
 8006526:	b30b      	cbz	r3, 800656c <__sfp+0x68>
 8006528:	6836      	ldr	r6, [r6, #0]
 800652a:	e7f7      	b.n	800651c <__sfp+0x18>
 800652c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006530:	b9d5      	cbnz	r5, 8006568 <__sfp+0x64>
 8006532:	4b16      	ldr	r3, [pc, #88]	; (800658c <__sfp+0x88>)
 8006534:	60e3      	str	r3, [r4, #12]
 8006536:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800653a:	6665      	str	r5, [r4, #100]	; 0x64
 800653c:	f000 f847 	bl	80065ce <__retarget_lock_init_recursive>
 8006540:	f7ff ff96 	bl	8006470 <__sfp_lock_release>
 8006544:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006548:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800654c:	6025      	str	r5, [r4, #0]
 800654e:	61a5      	str	r5, [r4, #24]
 8006550:	2208      	movs	r2, #8
 8006552:	4629      	mov	r1, r5
 8006554:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006558:	f7ff fd2c 	bl	8005fb4 <memset>
 800655c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006560:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006564:	4620      	mov	r0, r4
 8006566:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006568:	3468      	adds	r4, #104	; 0x68
 800656a:	e7d9      	b.n	8006520 <__sfp+0x1c>
 800656c:	2104      	movs	r1, #4
 800656e:	4638      	mov	r0, r7
 8006570:	f7ff ff62 	bl	8006438 <__sfmoreglue>
 8006574:	4604      	mov	r4, r0
 8006576:	6030      	str	r0, [r6, #0]
 8006578:	2800      	cmp	r0, #0
 800657a:	d1d5      	bne.n	8006528 <__sfp+0x24>
 800657c:	f7ff ff78 	bl	8006470 <__sfp_lock_release>
 8006580:	230c      	movs	r3, #12
 8006582:	603b      	str	r3, [r7, #0]
 8006584:	e7ee      	b.n	8006564 <__sfp+0x60>
 8006586:	bf00      	nop
 8006588:	0800707c 	.word	0x0800707c
 800658c:	ffff0001 	.word	0xffff0001

08006590 <_fwalk_reent>:
 8006590:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006594:	4606      	mov	r6, r0
 8006596:	4688      	mov	r8, r1
 8006598:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800659c:	2700      	movs	r7, #0
 800659e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80065a2:	f1b9 0901 	subs.w	r9, r9, #1
 80065a6:	d505      	bpl.n	80065b4 <_fwalk_reent+0x24>
 80065a8:	6824      	ldr	r4, [r4, #0]
 80065aa:	2c00      	cmp	r4, #0
 80065ac:	d1f7      	bne.n	800659e <_fwalk_reent+0xe>
 80065ae:	4638      	mov	r0, r7
 80065b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80065b4:	89ab      	ldrh	r3, [r5, #12]
 80065b6:	2b01      	cmp	r3, #1
 80065b8:	d907      	bls.n	80065ca <_fwalk_reent+0x3a>
 80065ba:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80065be:	3301      	adds	r3, #1
 80065c0:	d003      	beq.n	80065ca <_fwalk_reent+0x3a>
 80065c2:	4629      	mov	r1, r5
 80065c4:	4630      	mov	r0, r6
 80065c6:	47c0      	blx	r8
 80065c8:	4307      	orrs	r7, r0
 80065ca:	3568      	adds	r5, #104	; 0x68
 80065cc:	e7e9      	b.n	80065a2 <_fwalk_reent+0x12>

080065ce <__retarget_lock_init_recursive>:
 80065ce:	4770      	bx	lr

080065d0 <__retarget_lock_acquire_recursive>:
 80065d0:	4770      	bx	lr

080065d2 <__retarget_lock_release_recursive>:
 80065d2:	4770      	bx	lr

080065d4 <__swhatbuf_r>:
 80065d4:	b570      	push	{r4, r5, r6, lr}
 80065d6:	460e      	mov	r6, r1
 80065d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80065dc:	2900      	cmp	r1, #0
 80065de:	b096      	sub	sp, #88	; 0x58
 80065e0:	4614      	mov	r4, r2
 80065e2:	461d      	mov	r5, r3
 80065e4:	da08      	bge.n	80065f8 <__swhatbuf_r+0x24>
 80065e6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80065ea:	2200      	movs	r2, #0
 80065ec:	602a      	str	r2, [r5, #0]
 80065ee:	061a      	lsls	r2, r3, #24
 80065f0:	d410      	bmi.n	8006614 <__swhatbuf_r+0x40>
 80065f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80065f6:	e00e      	b.n	8006616 <__swhatbuf_r+0x42>
 80065f8:	466a      	mov	r2, sp
 80065fa:	f000 fc95 	bl	8006f28 <_fstat_r>
 80065fe:	2800      	cmp	r0, #0
 8006600:	dbf1      	blt.n	80065e6 <__swhatbuf_r+0x12>
 8006602:	9a01      	ldr	r2, [sp, #4]
 8006604:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006608:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800660c:	425a      	negs	r2, r3
 800660e:	415a      	adcs	r2, r3
 8006610:	602a      	str	r2, [r5, #0]
 8006612:	e7ee      	b.n	80065f2 <__swhatbuf_r+0x1e>
 8006614:	2340      	movs	r3, #64	; 0x40
 8006616:	2000      	movs	r0, #0
 8006618:	6023      	str	r3, [r4, #0]
 800661a:	b016      	add	sp, #88	; 0x58
 800661c:	bd70      	pop	{r4, r5, r6, pc}
	...

08006620 <__smakebuf_r>:
 8006620:	898b      	ldrh	r3, [r1, #12]
 8006622:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006624:	079d      	lsls	r5, r3, #30
 8006626:	4606      	mov	r6, r0
 8006628:	460c      	mov	r4, r1
 800662a:	d507      	bpl.n	800663c <__smakebuf_r+0x1c>
 800662c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006630:	6023      	str	r3, [r4, #0]
 8006632:	6123      	str	r3, [r4, #16]
 8006634:	2301      	movs	r3, #1
 8006636:	6163      	str	r3, [r4, #20]
 8006638:	b002      	add	sp, #8
 800663a:	bd70      	pop	{r4, r5, r6, pc}
 800663c:	ab01      	add	r3, sp, #4
 800663e:	466a      	mov	r2, sp
 8006640:	f7ff ffc8 	bl	80065d4 <__swhatbuf_r>
 8006644:	9900      	ldr	r1, [sp, #0]
 8006646:	4605      	mov	r5, r0
 8006648:	4630      	mov	r0, r6
 800664a:	f000 f895 	bl	8006778 <_malloc_r>
 800664e:	b948      	cbnz	r0, 8006664 <__smakebuf_r+0x44>
 8006650:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006654:	059a      	lsls	r2, r3, #22
 8006656:	d4ef      	bmi.n	8006638 <__smakebuf_r+0x18>
 8006658:	f023 0303 	bic.w	r3, r3, #3
 800665c:	f043 0302 	orr.w	r3, r3, #2
 8006660:	81a3      	strh	r3, [r4, #12]
 8006662:	e7e3      	b.n	800662c <__smakebuf_r+0xc>
 8006664:	4b0d      	ldr	r3, [pc, #52]	; (800669c <__smakebuf_r+0x7c>)
 8006666:	62b3      	str	r3, [r6, #40]	; 0x28
 8006668:	89a3      	ldrh	r3, [r4, #12]
 800666a:	6020      	str	r0, [r4, #0]
 800666c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006670:	81a3      	strh	r3, [r4, #12]
 8006672:	9b00      	ldr	r3, [sp, #0]
 8006674:	6163      	str	r3, [r4, #20]
 8006676:	9b01      	ldr	r3, [sp, #4]
 8006678:	6120      	str	r0, [r4, #16]
 800667a:	b15b      	cbz	r3, 8006694 <__smakebuf_r+0x74>
 800667c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006680:	4630      	mov	r0, r6
 8006682:	f000 fc63 	bl	8006f4c <_isatty_r>
 8006686:	b128      	cbz	r0, 8006694 <__smakebuf_r+0x74>
 8006688:	89a3      	ldrh	r3, [r4, #12]
 800668a:	f023 0303 	bic.w	r3, r3, #3
 800668e:	f043 0301 	orr.w	r3, r3, #1
 8006692:	81a3      	strh	r3, [r4, #12]
 8006694:	89a0      	ldrh	r0, [r4, #12]
 8006696:	4305      	orrs	r5, r0
 8006698:	81a5      	strh	r5, [r4, #12]
 800669a:	e7cd      	b.n	8006638 <__smakebuf_r+0x18>
 800669c:	0800642d 	.word	0x0800642d

080066a0 <_free_r>:
 80066a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80066a2:	2900      	cmp	r1, #0
 80066a4:	d044      	beq.n	8006730 <_free_r+0x90>
 80066a6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80066aa:	9001      	str	r0, [sp, #4]
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	f1a1 0404 	sub.w	r4, r1, #4
 80066b2:	bfb8      	it	lt
 80066b4:	18e4      	addlt	r4, r4, r3
 80066b6:	f000 fc6b 	bl	8006f90 <__malloc_lock>
 80066ba:	4a1e      	ldr	r2, [pc, #120]	; (8006734 <_free_r+0x94>)
 80066bc:	9801      	ldr	r0, [sp, #4]
 80066be:	6813      	ldr	r3, [r2, #0]
 80066c0:	b933      	cbnz	r3, 80066d0 <_free_r+0x30>
 80066c2:	6063      	str	r3, [r4, #4]
 80066c4:	6014      	str	r4, [r2, #0]
 80066c6:	b003      	add	sp, #12
 80066c8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80066cc:	f000 bc66 	b.w	8006f9c <__malloc_unlock>
 80066d0:	42a3      	cmp	r3, r4
 80066d2:	d908      	bls.n	80066e6 <_free_r+0x46>
 80066d4:	6825      	ldr	r5, [r4, #0]
 80066d6:	1961      	adds	r1, r4, r5
 80066d8:	428b      	cmp	r3, r1
 80066da:	bf01      	itttt	eq
 80066dc:	6819      	ldreq	r1, [r3, #0]
 80066de:	685b      	ldreq	r3, [r3, #4]
 80066e0:	1949      	addeq	r1, r1, r5
 80066e2:	6021      	streq	r1, [r4, #0]
 80066e4:	e7ed      	b.n	80066c2 <_free_r+0x22>
 80066e6:	461a      	mov	r2, r3
 80066e8:	685b      	ldr	r3, [r3, #4]
 80066ea:	b10b      	cbz	r3, 80066f0 <_free_r+0x50>
 80066ec:	42a3      	cmp	r3, r4
 80066ee:	d9fa      	bls.n	80066e6 <_free_r+0x46>
 80066f0:	6811      	ldr	r1, [r2, #0]
 80066f2:	1855      	adds	r5, r2, r1
 80066f4:	42a5      	cmp	r5, r4
 80066f6:	d10b      	bne.n	8006710 <_free_r+0x70>
 80066f8:	6824      	ldr	r4, [r4, #0]
 80066fa:	4421      	add	r1, r4
 80066fc:	1854      	adds	r4, r2, r1
 80066fe:	42a3      	cmp	r3, r4
 8006700:	6011      	str	r1, [r2, #0]
 8006702:	d1e0      	bne.n	80066c6 <_free_r+0x26>
 8006704:	681c      	ldr	r4, [r3, #0]
 8006706:	685b      	ldr	r3, [r3, #4]
 8006708:	6053      	str	r3, [r2, #4]
 800670a:	4421      	add	r1, r4
 800670c:	6011      	str	r1, [r2, #0]
 800670e:	e7da      	b.n	80066c6 <_free_r+0x26>
 8006710:	d902      	bls.n	8006718 <_free_r+0x78>
 8006712:	230c      	movs	r3, #12
 8006714:	6003      	str	r3, [r0, #0]
 8006716:	e7d6      	b.n	80066c6 <_free_r+0x26>
 8006718:	6825      	ldr	r5, [r4, #0]
 800671a:	1961      	adds	r1, r4, r5
 800671c:	428b      	cmp	r3, r1
 800671e:	bf04      	itt	eq
 8006720:	6819      	ldreq	r1, [r3, #0]
 8006722:	685b      	ldreq	r3, [r3, #4]
 8006724:	6063      	str	r3, [r4, #4]
 8006726:	bf04      	itt	eq
 8006728:	1949      	addeq	r1, r1, r5
 800672a:	6021      	streq	r1, [r4, #0]
 800672c:	6054      	str	r4, [r2, #4]
 800672e:	e7ca      	b.n	80066c6 <_free_r+0x26>
 8006730:	b003      	add	sp, #12
 8006732:	bd30      	pop	{r4, r5, pc}
 8006734:	2001f708 	.word	0x2001f708

08006738 <sbrk_aligned>:
 8006738:	b570      	push	{r4, r5, r6, lr}
 800673a:	4e0e      	ldr	r6, [pc, #56]	; (8006774 <sbrk_aligned+0x3c>)
 800673c:	460c      	mov	r4, r1
 800673e:	6831      	ldr	r1, [r6, #0]
 8006740:	4605      	mov	r5, r0
 8006742:	b911      	cbnz	r1, 800674a <sbrk_aligned+0x12>
 8006744:	f000 fb7a 	bl	8006e3c <_sbrk_r>
 8006748:	6030      	str	r0, [r6, #0]
 800674a:	4621      	mov	r1, r4
 800674c:	4628      	mov	r0, r5
 800674e:	f000 fb75 	bl	8006e3c <_sbrk_r>
 8006752:	1c43      	adds	r3, r0, #1
 8006754:	d00a      	beq.n	800676c <sbrk_aligned+0x34>
 8006756:	1cc4      	adds	r4, r0, #3
 8006758:	f024 0403 	bic.w	r4, r4, #3
 800675c:	42a0      	cmp	r0, r4
 800675e:	d007      	beq.n	8006770 <sbrk_aligned+0x38>
 8006760:	1a21      	subs	r1, r4, r0
 8006762:	4628      	mov	r0, r5
 8006764:	f000 fb6a 	bl	8006e3c <_sbrk_r>
 8006768:	3001      	adds	r0, #1
 800676a:	d101      	bne.n	8006770 <sbrk_aligned+0x38>
 800676c:	f04f 34ff 	mov.w	r4, #4294967295
 8006770:	4620      	mov	r0, r4
 8006772:	bd70      	pop	{r4, r5, r6, pc}
 8006774:	2001f70c 	.word	0x2001f70c

08006778 <_malloc_r>:
 8006778:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800677c:	1ccd      	adds	r5, r1, #3
 800677e:	f025 0503 	bic.w	r5, r5, #3
 8006782:	3508      	adds	r5, #8
 8006784:	2d0c      	cmp	r5, #12
 8006786:	bf38      	it	cc
 8006788:	250c      	movcc	r5, #12
 800678a:	2d00      	cmp	r5, #0
 800678c:	4607      	mov	r7, r0
 800678e:	db01      	blt.n	8006794 <_malloc_r+0x1c>
 8006790:	42a9      	cmp	r1, r5
 8006792:	d905      	bls.n	80067a0 <_malloc_r+0x28>
 8006794:	230c      	movs	r3, #12
 8006796:	603b      	str	r3, [r7, #0]
 8006798:	2600      	movs	r6, #0
 800679a:	4630      	mov	r0, r6
 800679c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80067a0:	4e2e      	ldr	r6, [pc, #184]	; (800685c <_malloc_r+0xe4>)
 80067a2:	f000 fbf5 	bl	8006f90 <__malloc_lock>
 80067a6:	6833      	ldr	r3, [r6, #0]
 80067a8:	461c      	mov	r4, r3
 80067aa:	bb34      	cbnz	r4, 80067fa <_malloc_r+0x82>
 80067ac:	4629      	mov	r1, r5
 80067ae:	4638      	mov	r0, r7
 80067b0:	f7ff ffc2 	bl	8006738 <sbrk_aligned>
 80067b4:	1c43      	adds	r3, r0, #1
 80067b6:	4604      	mov	r4, r0
 80067b8:	d14d      	bne.n	8006856 <_malloc_r+0xde>
 80067ba:	6834      	ldr	r4, [r6, #0]
 80067bc:	4626      	mov	r6, r4
 80067be:	2e00      	cmp	r6, #0
 80067c0:	d140      	bne.n	8006844 <_malloc_r+0xcc>
 80067c2:	6823      	ldr	r3, [r4, #0]
 80067c4:	4631      	mov	r1, r6
 80067c6:	4638      	mov	r0, r7
 80067c8:	eb04 0803 	add.w	r8, r4, r3
 80067cc:	f000 fb36 	bl	8006e3c <_sbrk_r>
 80067d0:	4580      	cmp	r8, r0
 80067d2:	d13a      	bne.n	800684a <_malloc_r+0xd2>
 80067d4:	6821      	ldr	r1, [r4, #0]
 80067d6:	3503      	adds	r5, #3
 80067d8:	1a6d      	subs	r5, r5, r1
 80067da:	f025 0503 	bic.w	r5, r5, #3
 80067de:	3508      	adds	r5, #8
 80067e0:	2d0c      	cmp	r5, #12
 80067e2:	bf38      	it	cc
 80067e4:	250c      	movcc	r5, #12
 80067e6:	4629      	mov	r1, r5
 80067e8:	4638      	mov	r0, r7
 80067ea:	f7ff ffa5 	bl	8006738 <sbrk_aligned>
 80067ee:	3001      	adds	r0, #1
 80067f0:	d02b      	beq.n	800684a <_malloc_r+0xd2>
 80067f2:	6823      	ldr	r3, [r4, #0]
 80067f4:	442b      	add	r3, r5
 80067f6:	6023      	str	r3, [r4, #0]
 80067f8:	e00e      	b.n	8006818 <_malloc_r+0xa0>
 80067fa:	6822      	ldr	r2, [r4, #0]
 80067fc:	1b52      	subs	r2, r2, r5
 80067fe:	d41e      	bmi.n	800683e <_malloc_r+0xc6>
 8006800:	2a0b      	cmp	r2, #11
 8006802:	d916      	bls.n	8006832 <_malloc_r+0xba>
 8006804:	1961      	adds	r1, r4, r5
 8006806:	42a3      	cmp	r3, r4
 8006808:	6025      	str	r5, [r4, #0]
 800680a:	bf18      	it	ne
 800680c:	6059      	strne	r1, [r3, #4]
 800680e:	6863      	ldr	r3, [r4, #4]
 8006810:	bf08      	it	eq
 8006812:	6031      	streq	r1, [r6, #0]
 8006814:	5162      	str	r2, [r4, r5]
 8006816:	604b      	str	r3, [r1, #4]
 8006818:	4638      	mov	r0, r7
 800681a:	f104 060b 	add.w	r6, r4, #11
 800681e:	f000 fbbd 	bl	8006f9c <__malloc_unlock>
 8006822:	f026 0607 	bic.w	r6, r6, #7
 8006826:	1d23      	adds	r3, r4, #4
 8006828:	1af2      	subs	r2, r6, r3
 800682a:	d0b6      	beq.n	800679a <_malloc_r+0x22>
 800682c:	1b9b      	subs	r3, r3, r6
 800682e:	50a3      	str	r3, [r4, r2]
 8006830:	e7b3      	b.n	800679a <_malloc_r+0x22>
 8006832:	6862      	ldr	r2, [r4, #4]
 8006834:	42a3      	cmp	r3, r4
 8006836:	bf0c      	ite	eq
 8006838:	6032      	streq	r2, [r6, #0]
 800683a:	605a      	strne	r2, [r3, #4]
 800683c:	e7ec      	b.n	8006818 <_malloc_r+0xa0>
 800683e:	4623      	mov	r3, r4
 8006840:	6864      	ldr	r4, [r4, #4]
 8006842:	e7b2      	b.n	80067aa <_malloc_r+0x32>
 8006844:	4634      	mov	r4, r6
 8006846:	6876      	ldr	r6, [r6, #4]
 8006848:	e7b9      	b.n	80067be <_malloc_r+0x46>
 800684a:	230c      	movs	r3, #12
 800684c:	603b      	str	r3, [r7, #0]
 800684e:	4638      	mov	r0, r7
 8006850:	f000 fba4 	bl	8006f9c <__malloc_unlock>
 8006854:	e7a1      	b.n	800679a <_malloc_r+0x22>
 8006856:	6025      	str	r5, [r4, #0]
 8006858:	e7de      	b.n	8006818 <_malloc_r+0xa0>
 800685a:	bf00      	nop
 800685c:	2001f708 	.word	0x2001f708

08006860 <__sfputc_r>:
 8006860:	6893      	ldr	r3, [r2, #8]
 8006862:	3b01      	subs	r3, #1
 8006864:	2b00      	cmp	r3, #0
 8006866:	b410      	push	{r4}
 8006868:	6093      	str	r3, [r2, #8]
 800686a:	da08      	bge.n	800687e <__sfputc_r+0x1e>
 800686c:	6994      	ldr	r4, [r2, #24]
 800686e:	42a3      	cmp	r3, r4
 8006870:	db01      	blt.n	8006876 <__sfputc_r+0x16>
 8006872:	290a      	cmp	r1, #10
 8006874:	d103      	bne.n	800687e <__sfputc_r+0x1e>
 8006876:	f85d 4b04 	ldr.w	r4, [sp], #4
 800687a:	f7ff bc31 	b.w	80060e0 <__swbuf_r>
 800687e:	6813      	ldr	r3, [r2, #0]
 8006880:	1c58      	adds	r0, r3, #1
 8006882:	6010      	str	r0, [r2, #0]
 8006884:	7019      	strb	r1, [r3, #0]
 8006886:	4608      	mov	r0, r1
 8006888:	f85d 4b04 	ldr.w	r4, [sp], #4
 800688c:	4770      	bx	lr

0800688e <__sfputs_r>:
 800688e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006890:	4606      	mov	r6, r0
 8006892:	460f      	mov	r7, r1
 8006894:	4614      	mov	r4, r2
 8006896:	18d5      	adds	r5, r2, r3
 8006898:	42ac      	cmp	r4, r5
 800689a:	d101      	bne.n	80068a0 <__sfputs_r+0x12>
 800689c:	2000      	movs	r0, #0
 800689e:	e007      	b.n	80068b0 <__sfputs_r+0x22>
 80068a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80068a4:	463a      	mov	r2, r7
 80068a6:	4630      	mov	r0, r6
 80068a8:	f7ff ffda 	bl	8006860 <__sfputc_r>
 80068ac:	1c43      	adds	r3, r0, #1
 80068ae:	d1f3      	bne.n	8006898 <__sfputs_r+0xa>
 80068b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080068b4 <_vfiprintf_r>:
 80068b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068b8:	460d      	mov	r5, r1
 80068ba:	b09d      	sub	sp, #116	; 0x74
 80068bc:	4614      	mov	r4, r2
 80068be:	4698      	mov	r8, r3
 80068c0:	4606      	mov	r6, r0
 80068c2:	b118      	cbz	r0, 80068cc <_vfiprintf_r+0x18>
 80068c4:	6983      	ldr	r3, [r0, #24]
 80068c6:	b90b      	cbnz	r3, 80068cc <_vfiprintf_r+0x18>
 80068c8:	f7ff fde4 	bl	8006494 <__sinit>
 80068cc:	4b89      	ldr	r3, [pc, #548]	; (8006af4 <_vfiprintf_r+0x240>)
 80068ce:	429d      	cmp	r5, r3
 80068d0:	d11b      	bne.n	800690a <_vfiprintf_r+0x56>
 80068d2:	6875      	ldr	r5, [r6, #4]
 80068d4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80068d6:	07d9      	lsls	r1, r3, #31
 80068d8:	d405      	bmi.n	80068e6 <_vfiprintf_r+0x32>
 80068da:	89ab      	ldrh	r3, [r5, #12]
 80068dc:	059a      	lsls	r2, r3, #22
 80068de:	d402      	bmi.n	80068e6 <_vfiprintf_r+0x32>
 80068e0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80068e2:	f7ff fe75 	bl	80065d0 <__retarget_lock_acquire_recursive>
 80068e6:	89ab      	ldrh	r3, [r5, #12]
 80068e8:	071b      	lsls	r3, r3, #28
 80068ea:	d501      	bpl.n	80068f0 <_vfiprintf_r+0x3c>
 80068ec:	692b      	ldr	r3, [r5, #16]
 80068ee:	b9eb      	cbnz	r3, 800692c <_vfiprintf_r+0x78>
 80068f0:	4629      	mov	r1, r5
 80068f2:	4630      	mov	r0, r6
 80068f4:	f7ff fc46 	bl	8006184 <__swsetup_r>
 80068f8:	b1c0      	cbz	r0, 800692c <_vfiprintf_r+0x78>
 80068fa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80068fc:	07dc      	lsls	r4, r3, #31
 80068fe:	d50e      	bpl.n	800691e <_vfiprintf_r+0x6a>
 8006900:	f04f 30ff 	mov.w	r0, #4294967295
 8006904:	b01d      	add	sp, #116	; 0x74
 8006906:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800690a:	4b7b      	ldr	r3, [pc, #492]	; (8006af8 <_vfiprintf_r+0x244>)
 800690c:	429d      	cmp	r5, r3
 800690e:	d101      	bne.n	8006914 <_vfiprintf_r+0x60>
 8006910:	68b5      	ldr	r5, [r6, #8]
 8006912:	e7df      	b.n	80068d4 <_vfiprintf_r+0x20>
 8006914:	4b79      	ldr	r3, [pc, #484]	; (8006afc <_vfiprintf_r+0x248>)
 8006916:	429d      	cmp	r5, r3
 8006918:	bf08      	it	eq
 800691a:	68f5      	ldreq	r5, [r6, #12]
 800691c:	e7da      	b.n	80068d4 <_vfiprintf_r+0x20>
 800691e:	89ab      	ldrh	r3, [r5, #12]
 8006920:	0598      	lsls	r0, r3, #22
 8006922:	d4ed      	bmi.n	8006900 <_vfiprintf_r+0x4c>
 8006924:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006926:	f7ff fe54 	bl	80065d2 <__retarget_lock_release_recursive>
 800692a:	e7e9      	b.n	8006900 <_vfiprintf_r+0x4c>
 800692c:	2300      	movs	r3, #0
 800692e:	9309      	str	r3, [sp, #36]	; 0x24
 8006930:	2320      	movs	r3, #32
 8006932:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006936:	f8cd 800c 	str.w	r8, [sp, #12]
 800693a:	2330      	movs	r3, #48	; 0x30
 800693c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006b00 <_vfiprintf_r+0x24c>
 8006940:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006944:	f04f 0901 	mov.w	r9, #1
 8006948:	4623      	mov	r3, r4
 800694a:	469a      	mov	sl, r3
 800694c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006950:	b10a      	cbz	r2, 8006956 <_vfiprintf_r+0xa2>
 8006952:	2a25      	cmp	r2, #37	; 0x25
 8006954:	d1f9      	bne.n	800694a <_vfiprintf_r+0x96>
 8006956:	ebba 0b04 	subs.w	fp, sl, r4
 800695a:	d00b      	beq.n	8006974 <_vfiprintf_r+0xc0>
 800695c:	465b      	mov	r3, fp
 800695e:	4622      	mov	r2, r4
 8006960:	4629      	mov	r1, r5
 8006962:	4630      	mov	r0, r6
 8006964:	f7ff ff93 	bl	800688e <__sfputs_r>
 8006968:	3001      	adds	r0, #1
 800696a:	f000 80aa 	beq.w	8006ac2 <_vfiprintf_r+0x20e>
 800696e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006970:	445a      	add	r2, fp
 8006972:	9209      	str	r2, [sp, #36]	; 0x24
 8006974:	f89a 3000 	ldrb.w	r3, [sl]
 8006978:	2b00      	cmp	r3, #0
 800697a:	f000 80a2 	beq.w	8006ac2 <_vfiprintf_r+0x20e>
 800697e:	2300      	movs	r3, #0
 8006980:	f04f 32ff 	mov.w	r2, #4294967295
 8006984:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006988:	f10a 0a01 	add.w	sl, sl, #1
 800698c:	9304      	str	r3, [sp, #16]
 800698e:	9307      	str	r3, [sp, #28]
 8006990:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006994:	931a      	str	r3, [sp, #104]	; 0x68
 8006996:	4654      	mov	r4, sl
 8006998:	2205      	movs	r2, #5
 800699a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800699e:	4858      	ldr	r0, [pc, #352]	; (8006b00 <_vfiprintf_r+0x24c>)
 80069a0:	f7f9 fc36 	bl	8000210 <memchr>
 80069a4:	9a04      	ldr	r2, [sp, #16]
 80069a6:	b9d8      	cbnz	r0, 80069e0 <_vfiprintf_r+0x12c>
 80069a8:	06d1      	lsls	r1, r2, #27
 80069aa:	bf44      	itt	mi
 80069ac:	2320      	movmi	r3, #32
 80069ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80069b2:	0713      	lsls	r3, r2, #28
 80069b4:	bf44      	itt	mi
 80069b6:	232b      	movmi	r3, #43	; 0x2b
 80069b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80069bc:	f89a 3000 	ldrb.w	r3, [sl]
 80069c0:	2b2a      	cmp	r3, #42	; 0x2a
 80069c2:	d015      	beq.n	80069f0 <_vfiprintf_r+0x13c>
 80069c4:	9a07      	ldr	r2, [sp, #28]
 80069c6:	4654      	mov	r4, sl
 80069c8:	2000      	movs	r0, #0
 80069ca:	f04f 0c0a 	mov.w	ip, #10
 80069ce:	4621      	mov	r1, r4
 80069d0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80069d4:	3b30      	subs	r3, #48	; 0x30
 80069d6:	2b09      	cmp	r3, #9
 80069d8:	d94e      	bls.n	8006a78 <_vfiprintf_r+0x1c4>
 80069da:	b1b0      	cbz	r0, 8006a0a <_vfiprintf_r+0x156>
 80069dc:	9207      	str	r2, [sp, #28]
 80069de:	e014      	b.n	8006a0a <_vfiprintf_r+0x156>
 80069e0:	eba0 0308 	sub.w	r3, r0, r8
 80069e4:	fa09 f303 	lsl.w	r3, r9, r3
 80069e8:	4313      	orrs	r3, r2
 80069ea:	9304      	str	r3, [sp, #16]
 80069ec:	46a2      	mov	sl, r4
 80069ee:	e7d2      	b.n	8006996 <_vfiprintf_r+0xe2>
 80069f0:	9b03      	ldr	r3, [sp, #12]
 80069f2:	1d19      	adds	r1, r3, #4
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	9103      	str	r1, [sp, #12]
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	bfbb      	ittet	lt
 80069fc:	425b      	neglt	r3, r3
 80069fe:	f042 0202 	orrlt.w	r2, r2, #2
 8006a02:	9307      	strge	r3, [sp, #28]
 8006a04:	9307      	strlt	r3, [sp, #28]
 8006a06:	bfb8      	it	lt
 8006a08:	9204      	strlt	r2, [sp, #16]
 8006a0a:	7823      	ldrb	r3, [r4, #0]
 8006a0c:	2b2e      	cmp	r3, #46	; 0x2e
 8006a0e:	d10c      	bne.n	8006a2a <_vfiprintf_r+0x176>
 8006a10:	7863      	ldrb	r3, [r4, #1]
 8006a12:	2b2a      	cmp	r3, #42	; 0x2a
 8006a14:	d135      	bne.n	8006a82 <_vfiprintf_r+0x1ce>
 8006a16:	9b03      	ldr	r3, [sp, #12]
 8006a18:	1d1a      	adds	r2, r3, #4
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	9203      	str	r2, [sp, #12]
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	bfb8      	it	lt
 8006a22:	f04f 33ff 	movlt.w	r3, #4294967295
 8006a26:	3402      	adds	r4, #2
 8006a28:	9305      	str	r3, [sp, #20]
 8006a2a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006b10 <_vfiprintf_r+0x25c>
 8006a2e:	7821      	ldrb	r1, [r4, #0]
 8006a30:	2203      	movs	r2, #3
 8006a32:	4650      	mov	r0, sl
 8006a34:	f7f9 fbec 	bl	8000210 <memchr>
 8006a38:	b140      	cbz	r0, 8006a4c <_vfiprintf_r+0x198>
 8006a3a:	2340      	movs	r3, #64	; 0x40
 8006a3c:	eba0 000a 	sub.w	r0, r0, sl
 8006a40:	fa03 f000 	lsl.w	r0, r3, r0
 8006a44:	9b04      	ldr	r3, [sp, #16]
 8006a46:	4303      	orrs	r3, r0
 8006a48:	3401      	adds	r4, #1
 8006a4a:	9304      	str	r3, [sp, #16]
 8006a4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006a50:	482c      	ldr	r0, [pc, #176]	; (8006b04 <_vfiprintf_r+0x250>)
 8006a52:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006a56:	2206      	movs	r2, #6
 8006a58:	f7f9 fbda 	bl	8000210 <memchr>
 8006a5c:	2800      	cmp	r0, #0
 8006a5e:	d03f      	beq.n	8006ae0 <_vfiprintf_r+0x22c>
 8006a60:	4b29      	ldr	r3, [pc, #164]	; (8006b08 <_vfiprintf_r+0x254>)
 8006a62:	bb1b      	cbnz	r3, 8006aac <_vfiprintf_r+0x1f8>
 8006a64:	9b03      	ldr	r3, [sp, #12]
 8006a66:	3307      	adds	r3, #7
 8006a68:	f023 0307 	bic.w	r3, r3, #7
 8006a6c:	3308      	adds	r3, #8
 8006a6e:	9303      	str	r3, [sp, #12]
 8006a70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a72:	443b      	add	r3, r7
 8006a74:	9309      	str	r3, [sp, #36]	; 0x24
 8006a76:	e767      	b.n	8006948 <_vfiprintf_r+0x94>
 8006a78:	fb0c 3202 	mla	r2, ip, r2, r3
 8006a7c:	460c      	mov	r4, r1
 8006a7e:	2001      	movs	r0, #1
 8006a80:	e7a5      	b.n	80069ce <_vfiprintf_r+0x11a>
 8006a82:	2300      	movs	r3, #0
 8006a84:	3401      	adds	r4, #1
 8006a86:	9305      	str	r3, [sp, #20]
 8006a88:	4619      	mov	r1, r3
 8006a8a:	f04f 0c0a 	mov.w	ip, #10
 8006a8e:	4620      	mov	r0, r4
 8006a90:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006a94:	3a30      	subs	r2, #48	; 0x30
 8006a96:	2a09      	cmp	r2, #9
 8006a98:	d903      	bls.n	8006aa2 <_vfiprintf_r+0x1ee>
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d0c5      	beq.n	8006a2a <_vfiprintf_r+0x176>
 8006a9e:	9105      	str	r1, [sp, #20]
 8006aa0:	e7c3      	b.n	8006a2a <_vfiprintf_r+0x176>
 8006aa2:	fb0c 2101 	mla	r1, ip, r1, r2
 8006aa6:	4604      	mov	r4, r0
 8006aa8:	2301      	movs	r3, #1
 8006aaa:	e7f0      	b.n	8006a8e <_vfiprintf_r+0x1da>
 8006aac:	ab03      	add	r3, sp, #12
 8006aae:	9300      	str	r3, [sp, #0]
 8006ab0:	462a      	mov	r2, r5
 8006ab2:	4b16      	ldr	r3, [pc, #88]	; (8006b0c <_vfiprintf_r+0x258>)
 8006ab4:	a904      	add	r1, sp, #16
 8006ab6:	4630      	mov	r0, r6
 8006ab8:	f3af 8000 	nop.w
 8006abc:	4607      	mov	r7, r0
 8006abe:	1c78      	adds	r0, r7, #1
 8006ac0:	d1d6      	bne.n	8006a70 <_vfiprintf_r+0x1bc>
 8006ac2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006ac4:	07d9      	lsls	r1, r3, #31
 8006ac6:	d405      	bmi.n	8006ad4 <_vfiprintf_r+0x220>
 8006ac8:	89ab      	ldrh	r3, [r5, #12]
 8006aca:	059a      	lsls	r2, r3, #22
 8006acc:	d402      	bmi.n	8006ad4 <_vfiprintf_r+0x220>
 8006ace:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006ad0:	f7ff fd7f 	bl	80065d2 <__retarget_lock_release_recursive>
 8006ad4:	89ab      	ldrh	r3, [r5, #12]
 8006ad6:	065b      	lsls	r3, r3, #25
 8006ad8:	f53f af12 	bmi.w	8006900 <_vfiprintf_r+0x4c>
 8006adc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006ade:	e711      	b.n	8006904 <_vfiprintf_r+0x50>
 8006ae0:	ab03      	add	r3, sp, #12
 8006ae2:	9300      	str	r3, [sp, #0]
 8006ae4:	462a      	mov	r2, r5
 8006ae6:	4b09      	ldr	r3, [pc, #36]	; (8006b0c <_vfiprintf_r+0x258>)
 8006ae8:	a904      	add	r1, sp, #16
 8006aea:	4630      	mov	r0, r6
 8006aec:	f000 f880 	bl	8006bf0 <_printf_i>
 8006af0:	e7e4      	b.n	8006abc <_vfiprintf_r+0x208>
 8006af2:	bf00      	nop
 8006af4:	080070a0 	.word	0x080070a0
 8006af8:	080070c0 	.word	0x080070c0
 8006afc:	08007080 	.word	0x08007080
 8006b00:	080070e0 	.word	0x080070e0
 8006b04:	080070ea 	.word	0x080070ea
 8006b08:	00000000 	.word	0x00000000
 8006b0c:	0800688f 	.word	0x0800688f
 8006b10:	080070e6 	.word	0x080070e6

08006b14 <_printf_common>:
 8006b14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b18:	4616      	mov	r6, r2
 8006b1a:	4699      	mov	r9, r3
 8006b1c:	688a      	ldr	r2, [r1, #8]
 8006b1e:	690b      	ldr	r3, [r1, #16]
 8006b20:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006b24:	4293      	cmp	r3, r2
 8006b26:	bfb8      	it	lt
 8006b28:	4613      	movlt	r3, r2
 8006b2a:	6033      	str	r3, [r6, #0]
 8006b2c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006b30:	4607      	mov	r7, r0
 8006b32:	460c      	mov	r4, r1
 8006b34:	b10a      	cbz	r2, 8006b3a <_printf_common+0x26>
 8006b36:	3301      	adds	r3, #1
 8006b38:	6033      	str	r3, [r6, #0]
 8006b3a:	6823      	ldr	r3, [r4, #0]
 8006b3c:	0699      	lsls	r1, r3, #26
 8006b3e:	bf42      	ittt	mi
 8006b40:	6833      	ldrmi	r3, [r6, #0]
 8006b42:	3302      	addmi	r3, #2
 8006b44:	6033      	strmi	r3, [r6, #0]
 8006b46:	6825      	ldr	r5, [r4, #0]
 8006b48:	f015 0506 	ands.w	r5, r5, #6
 8006b4c:	d106      	bne.n	8006b5c <_printf_common+0x48>
 8006b4e:	f104 0a19 	add.w	sl, r4, #25
 8006b52:	68e3      	ldr	r3, [r4, #12]
 8006b54:	6832      	ldr	r2, [r6, #0]
 8006b56:	1a9b      	subs	r3, r3, r2
 8006b58:	42ab      	cmp	r3, r5
 8006b5a:	dc26      	bgt.n	8006baa <_printf_common+0x96>
 8006b5c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006b60:	1e13      	subs	r3, r2, #0
 8006b62:	6822      	ldr	r2, [r4, #0]
 8006b64:	bf18      	it	ne
 8006b66:	2301      	movne	r3, #1
 8006b68:	0692      	lsls	r2, r2, #26
 8006b6a:	d42b      	bmi.n	8006bc4 <_printf_common+0xb0>
 8006b6c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006b70:	4649      	mov	r1, r9
 8006b72:	4638      	mov	r0, r7
 8006b74:	47c0      	blx	r8
 8006b76:	3001      	adds	r0, #1
 8006b78:	d01e      	beq.n	8006bb8 <_printf_common+0xa4>
 8006b7a:	6823      	ldr	r3, [r4, #0]
 8006b7c:	68e5      	ldr	r5, [r4, #12]
 8006b7e:	6832      	ldr	r2, [r6, #0]
 8006b80:	f003 0306 	and.w	r3, r3, #6
 8006b84:	2b04      	cmp	r3, #4
 8006b86:	bf08      	it	eq
 8006b88:	1aad      	subeq	r5, r5, r2
 8006b8a:	68a3      	ldr	r3, [r4, #8]
 8006b8c:	6922      	ldr	r2, [r4, #16]
 8006b8e:	bf0c      	ite	eq
 8006b90:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006b94:	2500      	movne	r5, #0
 8006b96:	4293      	cmp	r3, r2
 8006b98:	bfc4      	itt	gt
 8006b9a:	1a9b      	subgt	r3, r3, r2
 8006b9c:	18ed      	addgt	r5, r5, r3
 8006b9e:	2600      	movs	r6, #0
 8006ba0:	341a      	adds	r4, #26
 8006ba2:	42b5      	cmp	r5, r6
 8006ba4:	d11a      	bne.n	8006bdc <_printf_common+0xc8>
 8006ba6:	2000      	movs	r0, #0
 8006ba8:	e008      	b.n	8006bbc <_printf_common+0xa8>
 8006baa:	2301      	movs	r3, #1
 8006bac:	4652      	mov	r2, sl
 8006bae:	4649      	mov	r1, r9
 8006bb0:	4638      	mov	r0, r7
 8006bb2:	47c0      	blx	r8
 8006bb4:	3001      	adds	r0, #1
 8006bb6:	d103      	bne.n	8006bc0 <_printf_common+0xac>
 8006bb8:	f04f 30ff 	mov.w	r0, #4294967295
 8006bbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006bc0:	3501      	adds	r5, #1
 8006bc2:	e7c6      	b.n	8006b52 <_printf_common+0x3e>
 8006bc4:	18e1      	adds	r1, r4, r3
 8006bc6:	1c5a      	adds	r2, r3, #1
 8006bc8:	2030      	movs	r0, #48	; 0x30
 8006bca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006bce:	4422      	add	r2, r4
 8006bd0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006bd4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006bd8:	3302      	adds	r3, #2
 8006bda:	e7c7      	b.n	8006b6c <_printf_common+0x58>
 8006bdc:	2301      	movs	r3, #1
 8006bde:	4622      	mov	r2, r4
 8006be0:	4649      	mov	r1, r9
 8006be2:	4638      	mov	r0, r7
 8006be4:	47c0      	blx	r8
 8006be6:	3001      	adds	r0, #1
 8006be8:	d0e6      	beq.n	8006bb8 <_printf_common+0xa4>
 8006bea:	3601      	adds	r6, #1
 8006bec:	e7d9      	b.n	8006ba2 <_printf_common+0x8e>
	...

08006bf0 <_printf_i>:
 8006bf0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006bf4:	7e0f      	ldrb	r7, [r1, #24]
 8006bf6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006bf8:	2f78      	cmp	r7, #120	; 0x78
 8006bfa:	4691      	mov	r9, r2
 8006bfc:	4680      	mov	r8, r0
 8006bfe:	460c      	mov	r4, r1
 8006c00:	469a      	mov	sl, r3
 8006c02:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006c06:	d807      	bhi.n	8006c18 <_printf_i+0x28>
 8006c08:	2f62      	cmp	r7, #98	; 0x62
 8006c0a:	d80a      	bhi.n	8006c22 <_printf_i+0x32>
 8006c0c:	2f00      	cmp	r7, #0
 8006c0e:	f000 80d8 	beq.w	8006dc2 <_printf_i+0x1d2>
 8006c12:	2f58      	cmp	r7, #88	; 0x58
 8006c14:	f000 80a3 	beq.w	8006d5e <_printf_i+0x16e>
 8006c18:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006c1c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006c20:	e03a      	b.n	8006c98 <_printf_i+0xa8>
 8006c22:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006c26:	2b15      	cmp	r3, #21
 8006c28:	d8f6      	bhi.n	8006c18 <_printf_i+0x28>
 8006c2a:	a101      	add	r1, pc, #4	; (adr r1, 8006c30 <_printf_i+0x40>)
 8006c2c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006c30:	08006c89 	.word	0x08006c89
 8006c34:	08006c9d 	.word	0x08006c9d
 8006c38:	08006c19 	.word	0x08006c19
 8006c3c:	08006c19 	.word	0x08006c19
 8006c40:	08006c19 	.word	0x08006c19
 8006c44:	08006c19 	.word	0x08006c19
 8006c48:	08006c9d 	.word	0x08006c9d
 8006c4c:	08006c19 	.word	0x08006c19
 8006c50:	08006c19 	.word	0x08006c19
 8006c54:	08006c19 	.word	0x08006c19
 8006c58:	08006c19 	.word	0x08006c19
 8006c5c:	08006da9 	.word	0x08006da9
 8006c60:	08006ccd 	.word	0x08006ccd
 8006c64:	08006d8b 	.word	0x08006d8b
 8006c68:	08006c19 	.word	0x08006c19
 8006c6c:	08006c19 	.word	0x08006c19
 8006c70:	08006dcb 	.word	0x08006dcb
 8006c74:	08006c19 	.word	0x08006c19
 8006c78:	08006ccd 	.word	0x08006ccd
 8006c7c:	08006c19 	.word	0x08006c19
 8006c80:	08006c19 	.word	0x08006c19
 8006c84:	08006d93 	.word	0x08006d93
 8006c88:	682b      	ldr	r3, [r5, #0]
 8006c8a:	1d1a      	adds	r2, r3, #4
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	602a      	str	r2, [r5, #0]
 8006c90:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006c94:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006c98:	2301      	movs	r3, #1
 8006c9a:	e0a3      	b.n	8006de4 <_printf_i+0x1f4>
 8006c9c:	6820      	ldr	r0, [r4, #0]
 8006c9e:	6829      	ldr	r1, [r5, #0]
 8006ca0:	0606      	lsls	r6, r0, #24
 8006ca2:	f101 0304 	add.w	r3, r1, #4
 8006ca6:	d50a      	bpl.n	8006cbe <_printf_i+0xce>
 8006ca8:	680e      	ldr	r6, [r1, #0]
 8006caa:	602b      	str	r3, [r5, #0]
 8006cac:	2e00      	cmp	r6, #0
 8006cae:	da03      	bge.n	8006cb8 <_printf_i+0xc8>
 8006cb0:	232d      	movs	r3, #45	; 0x2d
 8006cb2:	4276      	negs	r6, r6
 8006cb4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006cb8:	485e      	ldr	r0, [pc, #376]	; (8006e34 <_printf_i+0x244>)
 8006cba:	230a      	movs	r3, #10
 8006cbc:	e019      	b.n	8006cf2 <_printf_i+0x102>
 8006cbe:	680e      	ldr	r6, [r1, #0]
 8006cc0:	602b      	str	r3, [r5, #0]
 8006cc2:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006cc6:	bf18      	it	ne
 8006cc8:	b236      	sxthne	r6, r6
 8006cca:	e7ef      	b.n	8006cac <_printf_i+0xbc>
 8006ccc:	682b      	ldr	r3, [r5, #0]
 8006cce:	6820      	ldr	r0, [r4, #0]
 8006cd0:	1d19      	adds	r1, r3, #4
 8006cd2:	6029      	str	r1, [r5, #0]
 8006cd4:	0601      	lsls	r1, r0, #24
 8006cd6:	d501      	bpl.n	8006cdc <_printf_i+0xec>
 8006cd8:	681e      	ldr	r6, [r3, #0]
 8006cda:	e002      	b.n	8006ce2 <_printf_i+0xf2>
 8006cdc:	0646      	lsls	r6, r0, #25
 8006cde:	d5fb      	bpl.n	8006cd8 <_printf_i+0xe8>
 8006ce0:	881e      	ldrh	r6, [r3, #0]
 8006ce2:	4854      	ldr	r0, [pc, #336]	; (8006e34 <_printf_i+0x244>)
 8006ce4:	2f6f      	cmp	r7, #111	; 0x6f
 8006ce6:	bf0c      	ite	eq
 8006ce8:	2308      	moveq	r3, #8
 8006cea:	230a      	movne	r3, #10
 8006cec:	2100      	movs	r1, #0
 8006cee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006cf2:	6865      	ldr	r5, [r4, #4]
 8006cf4:	60a5      	str	r5, [r4, #8]
 8006cf6:	2d00      	cmp	r5, #0
 8006cf8:	bfa2      	ittt	ge
 8006cfa:	6821      	ldrge	r1, [r4, #0]
 8006cfc:	f021 0104 	bicge.w	r1, r1, #4
 8006d00:	6021      	strge	r1, [r4, #0]
 8006d02:	b90e      	cbnz	r6, 8006d08 <_printf_i+0x118>
 8006d04:	2d00      	cmp	r5, #0
 8006d06:	d04d      	beq.n	8006da4 <_printf_i+0x1b4>
 8006d08:	4615      	mov	r5, r2
 8006d0a:	fbb6 f1f3 	udiv	r1, r6, r3
 8006d0e:	fb03 6711 	mls	r7, r3, r1, r6
 8006d12:	5dc7      	ldrb	r7, [r0, r7]
 8006d14:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006d18:	4637      	mov	r7, r6
 8006d1a:	42bb      	cmp	r3, r7
 8006d1c:	460e      	mov	r6, r1
 8006d1e:	d9f4      	bls.n	8006d0a <_printf_i+0x11a>
 8006d20:	2b08      	cmp	r3, #8
 8006d22:	d10b      	bne.n	8006d3c <_printf_i+0x14c>
 8006d24:	6823      	ldr	r3, [r4, #0]
 8006d26:	07de      	lsls	r6, r3, #31
 8006d28:	d508      	bpl.n	8006d3c <_printf_i+0x14c>
 8006d2a:	6923      	ldr	r3, [r4, #16]
 8006d2c:	6861      	ldr	r1, [r4, #4]
 8006d2e:	4299      	cmp	r1, r3
 8006d30:	bfde      	ittt	le
 8006d32:	2330      	movle	r3, #48	; 0x30
 8006d34:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006d38:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006d3c:	1b52      	subs	r2, r2, r5
 8006d3e:	6122      	str	r2, [r4, #16]
 8006d40:	f8cd a000 	str.w	sl, [sp]
 8006d44:	464b      	mov	r3, r9
 8006d46:	aa03      	add	r2, sp, #12
 8006d48:	4621      	mov	r1, r4
 8006d4a:	4640      	mov	r0, r8
 8006d4c:	f7ff fee2 	bl	8006b14 <_printf_common>
 8006d50:	3001      	adds	r0, #1
 8006d52:	d14c      	bne.n	8006dee <_printf_i+0x1fe>
 8006d54:	f04f 30ff 	mov.w	r0, #4294967295
 8006d58:	b004      	add	sp, #16
 8006d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d5e:	4835      	ldr	r0, [pc, #212]	; (8006e34 <_printf_i+0x244>)
 8006d60:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006d64:	6829      	ldr	r1, [r5, #0]
 8006d66:	6823      	ldr	r3, [r4, #0]
 8006d68:	f851 6b04 	ldr.w	r6, [r1], #4
 8006d6c:	6029      	str	r1, [r5, #0]
 8006d6e:	061d      	lsls	r5, r3, #24
 8006d70:	d514      	bpl.n	8006d9c <_printf_i+0x1ac>
 8006d72:	07df      	lsls	r7, r3, #31
 8006d74:	bf44      	itt	mi
 8006d76:	f043 0320 	orrmi.w	r3, r3, #32
 8006d7a:	6023      	strmi	r3, [r4, #0]
 8006d7c:	b91e      	cbnz	r6, 8006d86 <_printf_i+0x196>
 8006d7e:	6823      	ldr	r3, [r4, #0]
 8006d80:	f023 0320 	bic.w	r3, r3, #32
 8006d84:	6023      	str	r3, [r4, #0]
 8006d86:	2310      	movs	r3, #16
 8006d88:	e7b0      	b.n	8006cec <_printf_i+0xfc>
 8006d8a:	6823      	ldr	r3, [r4, #0]
 8006d8c:	f043 0320 	orr.w	r3, r3, #32
 8006d90:	6023      	str	r3, [r4, #0]
 8006d92:	2378      	movs	r3, #120	; 0x78
 8006d94:	4828      	ldr	r0, [pc, #160]	; (8006e38 <_printf_i+0x248>)
 8006d96:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006d9a:	e7e3      	b.n	8006d64 <_printf_i+0x174>
 8006d9c:	0659      	lsls	r1, r3, #25
 8006d9e:	bf48      	it	mi
 8006da0:	b2b6      	uxthmi	r6, r6
 8006da2:	e7e6      	b.n	8006d72 <_printf_i+0x182>
 8006da4:	4615      	mov	r5, r2
 8006da6:	e7bb      	b.n	8006d20 <_printf_i+0x130>
 8006da8:	682b      	ldr	r3, [r5, #0]
 8006daa:	6826      	ldr	r6, [r4, #0]
 8006dac:	6961      	ldr	r1, [r4, #20]
 8006dae:	1d18      	adds	r0, r3, #4
 8006db0:	6028      	str	r0, [r5, #0]
 8006db2:	0635      	lsls	r5, r6, #24
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	d501      	bpl.n	8006dbc <_printf_i+0x1cc>
 8006db8:	6019      	str	r1, [r3, #0]
 8006dba:	e002      	b.n	8006dc2 <_printf_i+0x1d2>
 8006dbc:	0670      	lsls	r0, r6, #25
 8006dbe:	d5fb      	bpl.n	8006db8 <_printf_i+0x1c8>
 8006dc0:	8019      	strh	r1, [r3, #0]
 8006dc2:	2300      	movs	r3, #0
 8006dc4:	6123      	str	r3, [r4, #16]
 8006dc6:	4615      	mov	r5, r2
 8006dc8:	e7ba      	b.n	8006d40 <_printf_i+0x150>
 8006dca:	682b      	ldr	r3, [r5, #0]
 8006dcc:	1d1a      	adds	r2, r3, #4
 8006dce:	602a      	str	r2, [r5, #0]
 8006dd0:	681d      	ldr	r5, [r3, #0]
 8006dd2:	6862      	ldr	r2, [r4, #4]
 8006dd4:	2100      	movs	r1, #0
 8006dd6:	4628      	mov	r0, r5
 8006dd8:	f7f9 fa1a 	bl	8000210 <memchr>
 8006ddc:	b108      	cbz	r0, 8006de2 <_printf_i+0x1f2>
 8006dde:	1b40      	subs	r0, r0, r5
 8006de0:	6060      	str	r0, [r4, #4]
 8006de2:	6863      	ldr	r3, [r4, #4]
 8006de4:	6123      	str	r3, [r4, #16]
 8006de6:	2300      	movs	r3, #0
 8006de8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006dec:	e7a8      	b.n	8006d40 <_printf_i+0x150>
 8006dee:	6923      	ldr	r3, [r4, #16]
 8006df0:	462a      	mov	r2, r5
 8006df2:	4649      	mov	r1, r9
 8006df4:	4640      	mov	r0, r8
 8006df6:	47d0      	blx	sl
 8006df8:	3001      	adds	r0, #1
 8006dfa:	d0ab      	beq.n	8006d54 <_printf_i+0x164>
 8006dfc:	6823      	ldr	r3, [r4, #0]
 8006dfe:	079b      	lsls	r3, r3, #30
 8006e00:	d413      	bmi.n	8006e2a <_printf_i+0x23a>
 8006e02:	68e0      	ldr	r0, [r4, #12]
 8006e04:	9b03      	ldr	r3, [sp, #12]
 8006e06:	4298      	cmp	r0, r3
 8006e08:	bfb8      	it	lt
 8006e0a:	4618      	movlt	r0, r3
 8006e0c:	e7a4      	b.n	8006d58 <_printf_i+0x168>
 8006e0e:	2301      	movs	r3, #1
 8006e10:	4632      	mov	r2, r6
 8006e12:	4649      	mov	r1, r9
 8006e14:	4640      	mov	r0, r8
 8006e16:	47d0      	blx	sl
 8006e18:	3001      	adds	r0, #1
 8006e1a:	d09b      	beq.n	8006d54 <_printf_i+0x164>
 8006e1c:	3501      	adds	r5, #1
 8006e1e:	68e3      	ldr	r3, [r4, #12]
 8006e20:	9903      	ldr	r1, [sp, #12]
 8006e22:	1a5b      	subs	r3, r3, r1
 8006e24:	42ab      	cmp	r3, r5
 8006e26:	dcf2      	bgt.n	8006e0e <_printf_i+0x21e>
 8006e28:	e7eb      	b.n	8006e02 <_printf_i+0x212>
 8006e2a:	2500      	movs	r5, #0
 8006e2c:	f104 0619 	add.w	r6, r4, #25
 8006e30:	e7f5      	b.n	8006e1e <_printf_i+0x22e>
 8006e32:	bf00      	nop
 8006e34:	080070f1 	.word	0x080070f1
 8006e38:	08007102 	.word	0x08007102

08006e3c <_sbrk_r>:
 8006e3c:	b538      	push	{r3, r4, r5, lr}
 8006e3e:	4d06      	ldr	r5, [pc, #24]	; (8006e58 <_sbrk_r+0x1c>)
 8006e40:	2300      	movs	r3, #0
 8006e42:	4604      	mov	r4, r0
 8006e44:	4608      	mov	r0, r1
 8006e46:	602b      	str	r3, [r5, #0]
 8006e48:	f7fc fd88 	bl	800395c <_sbrk>
 8006e4c:	1c43      	adds	r3, r0, #1
 8006e4e:	d102      	bne.n	8006e56 <_sbrk_r+0x1a>
 8006e50:	682b      	ldr	r3, [r5, #0]
 8006e52:	b103      	cbz	r3, 8006e56 <_sbrk_r+0x1a>
 8006e54:	6023      	str	r3, [r4, #0]
 8006e56:	bd38      	pop	{r3, r4, r5, pc}
 8006e58:	2001f710 	.word	0x2001f710

08006e5c <__sread>:
 8006e5c:	b510      	push	{r4, lr}
 8006e5e:	460c      	mov	r4, r1
 8006e60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e64:	f000 f8a0 	bl	8006fa8 <_read_r>
 8006e68:	2800      	cmp	r0, #0
 8006e6a:	bfab      	itete	ge
 8006e6c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006e6e:	89a3      	ldrhlt	r3, [r4, #12]
 8006e70:	181b      	addge	r3, r3, r0
 8006e72:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006e76:	bfac      	ite	ge
 8006e78:	6563      	strge	r3, [r4, #84]	; 0x54
 8006e7a:	81a3      	strhlt	r3, [r4, #12]
 8006e7c:	bd10      	pop	{r4, pc}

08006e7e <__swrite>:
 8006e7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e82:	461f      	mov	r7, r3
 8006e84:	898b      	ldrh	r3, [r1, #12]
 8006e86:	05db      	lsls	r3, r3, #23
 8006e88:	4605      	mov	r5, r0
 8006e8a:	460c      	mov	r4, r1
 8006e8c:	4616      	mov	r6, r2
 8006e8e:	d505      	bpl.n	8006e9c <__swrite+0x1e>
 8006e90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e94:	2302      	movs	r3, #2
 8006e96:	2200      	movs	r2, #0
 8006e98:	f000 f868 	bl	8006f6c <_lseek_r>
 8006e9c:	89a3      	ldrh	r3, [r4, #12]
 8006e9e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006ea2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006ea6:	81a3      	strh	r3, [r4, #12]
 8006ea8:	4632      	mov	r2, r6
 8006eaa:	463b      	mov	r3, r7
 8006eac:	4628      	mov	r0, r5
 8006eae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006eb2:	f000 b817 	b.w	8006ee4 <_write_r>

08006eb6 <__sseek>:
 8006eb6:	b510      	push	{r4, lr}
 8006eb8:	460c      	mov	r4, r1
 8006eba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ebe:	f000 f855 	bl	8006f6c <_lseek_r>
 8006ec2:	1c43      	adds	r3, r0, #1
 8006ec4:	89a3      	ldrh	r3, [r4, #12]
 8006ec6:	bf15      	itete	ne
 8006ec8:	6560      	strne	r0, [r4, #84]	; 0x54
 8006eca:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006ece:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006ed2:	81a3      	strheq	r3, [r4, #12]
 8006ed4:	bf18      	it	ne
 8006ed6:	81a3      	strhne	r3, [r4, #12]
 8006ed8:	bd10      	pop	{r4, pc}

08006eda <__sclose>:
 8006eda:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ede:	f000 b813 	b.w	8006f08 <_close_r>
	...

08006ee4 <_write_r>:
 8006ee4:	b538      	push	{r3, r4, r5, lr}
 8006ee6:	4d07      	ldr	r5, [pc, #28]	; (8006f04 <_write_r+0x20>)
 8006ee8:	4604      	mov	r4, r0
 8006eea:	4608      	mov	r0, r1
 8006eec:	4611      	mov	r1, r2
 8006eee:	2200      	movs	r2, #0
 8006ef0:	602a      	str	r2, [r5, #0]
 8006ef2:	461a      	mov	r2, r3
 8006ef4:	f7fc fce1 	bl	80038ba <_write>
 8006ef8:	1c43      	adds	r3, r0, #1
 8006efa:	d102      	bne.n	8006f02 <_write_r+0x1e>
 8006efc:	682b      	ldr	r3, [r5, #0]
 8006efe:	b103      	cbz	r3, 8006f02 <_write_r+0x1e>
 8006f00:	6023      	str	r3, [r4, #0]
 8006f02:	bd38      	pop	{r3, r4, r5, pc}
 8006f04:	2001f710 	.word	0x2001f710

08006f08 <_close_r>:
 8006f08:	b538      	push	{r3, r4, r5, lr}
 8006f0a:	4d06      	ldr	r5, [pc, #24]	; (8006f24 <_close_r+0x1c>)
 8006f0c:	2300      	movs	r3, #0
 8006f0e:	4604      	mov	r4, r0
 8006f10:	4608      	mov	r0, r1
 8006f12:	602b      	str	r3, [r5, #0]
 8006f14:	f7fc fced 	bl	80038f2 <_close>
 8006f18:	1c43      	adds	r3, r0, #1
 8006f1a:	d102      	bne.n	8006f22 <_close_r+0x1a>
 8006f1c:	682b      	ldr	r3, [r5, #0]
 8006f1e:	b103      	cbz	r3, 8006f22 <_close_r+0x1a>
 8006f20:	6023      	str	r3, [r4, #0]
 8006f22:	bd38      	pop	{r3, r4, r5, pc}
 8006f24:	2001f710 	.word	0x2001f710

08006f28 <_fstat_r>:
 8006f28:	b538      	push	{r3, r4, r5, lr}
 8006f2a:	4d07      	ldr	r5, [pc, #28]	; (8006f48 <_fstat_r+0x20>)
 8006f2c:	2300      	movs	r3, #0
 8006f2e:	4604      	mov	r4, r0
 8006f30:	4608      	mov	r0, r1
 8006f32:	4611      	mov	r1, r2
 8006f34:	602b      	str	r3, [r5, #0]
 8006f36:	f7fc fce8 	bl	800390a <_fstat>
 8006f3a:	1c43      	adds	r3, r0, #1
 8006f3c:	d102      	bne.n	8006f44 <_fstat_r+0x1c>
 8006f3e:	682b      	ldr	r3, [r5, #0]
 8006f40:	b103      	cbz	r3, 8006f44 <_fstat_r+0x1c>
 8006f42:	6023      	str	r3, [r4, #0]
 8006f44:	bd38      	pop	{r3, r4, r5, pc}
 8006f46:	bf00      	nop
 8006f48:	2001f710 	.word	0x2001f710

08006f4c <_isatty_r>:
 8006f4c:	b538      	push	{r3, r4, r5, lr}
 8006f4e:	4d06      	ldr	r5, [pc, #24]	; (8006f68 <_isatty_r+0x1c>)
 8006f50:	2300      	movs	r3, #0
 8006f52:	4604      	mov	r4, r0
 8006f54:	4608      	mov	r0, r1
 8006f56:	602b      	str	r3, [r5, #0]
 8006f58:	f7fc fce7 	bl	800392a <_isatty>
 8006f5c:	1c43      	adds	r3, r0, #1
 8006f5e:	d102      	bne.n	8006f66 <_isatty_r+0x1a>
 8006f60:	682b      	ldr	r3, [r5, #0]
 8006f62:	b103      	cbz	r3, 8006f66 <_isatty_r+0x1a>
 8006f64:	6023      	str	r3, [r4, #0]
 8006f66:	bd38      	pop	{r3, r4, r5, pc}
 8006f68:	2001f710 	.word	0x2001f710

08006f6c <_lseek_r>:
 8006f6c:	b538      	push	{r3, r4, r5, lr}
 8006f6e:	4d07      	ldr	r5, [pc, #28]	; (8006f8c <_lseek_r+0x20>)
 8006f70:	4604      	mov	r4, r0
 8006f72:	4608      	mov	r0, r1
 8006f74:	4611      	mov	r1, r2
 8006f76:	2200      	movs	r2, #0
 8006f78:	602a      	str	r2, [r5, #0]
 8006f7a:	461a      	mov	r2, r3
 8006f7c:	f7fc fce0 	bl	8003940 <_lseek>
 8006f80:	1c43      	adds	r3, r0, #1
 8006f82:	d102      	bne.n	8006f8a <_lseek_r+0x1e>
 8006f84:	682b      	ldr	r3, [r5, #0]
 8006f86:	b103      	cbz	r3, 8006f8a <_lseek_r+0x1e>
 8006f88:	6023      	str	r3, [r4, #0]
 8006f8a:	bd38      	pop	{r3, r4, r5, pc}
 8006f8c:	2001f710 	.word	0x2001f710

08006f90 <__malloc_lock>:
 8006f90:	4801      	ldr	r0, [pc, #4]	; (8006f98 <__malloc_lock+0x8>)
 8006f92:	f7ff bb1d 	b.w	80065d0 <__retarget_lock_acquire_recursive>
 8006f96:	bf00      	nop
 8006f98:	2001f704 	.word	0x2001f704

08006f9c <__malloc_unlock>:
 8006f9c:	4801      	ldr	r0, [pc, #4]	; (8006fa4 <__malloc_unlock+0x8>)
 8006f9e:	f7ff bb18 	b.w	80065d2 <__retarget_lock_release_recursive>
 8006fa2:	bf00      	nop
 8006fa4:	2001f704 	.word	0x2001f704

08006fa8 <_read_r>:
 8006fa8:	b538      	push	{r3, r4, r5, lr}
 8006faa:	4d07      	ldr	r5, [pc, #28]	; (8006fc8 <_read_r+0x20>)
 8006fac:	4604      	mov	r4, r0
 8006fae:	4608      	mov	r0, r1
 8006fb0:	4611      	mov	r1, r2
 8006fb2:	2200      	movs	r2, #0
 8006fb4:	602a      	str	r2, [r5, #0]
 8006fb6:	461a      	mov	r2, r3
 8006fb8:	f7fc fc62 	bl	8003880 <_read>
 8006fbc:	1c43      	adds	r3, r0, #1
 8006fbe:	d102      	bne.n	8006fc6 <_read_r+0x1e>
 8006fc0:	682b      	ldr	r3, [r5, #0]
 8006fc2:	b103      	cbz	r3, 8006fc6 <_read_r+0x1e>
 8006fc4:	6023      	str	r3, [r4, #0]
 8006fc6:	bd38      	pop	{r3, r4, r5, pc}
 8006fc8:	2001f710 	.word	0x2001f710

08006fcc <_init>:
 8006fcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fce:	bf00      	nop
 8006fd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006fd2:	bc08      	pop	{r3}
 8006fd4:	469e      	mov	lr, r3
 8006fd6:	4770      	bx	lr

08006fd8 <_fini>:
 8006fd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fda:	bf00      	nop
 8006fdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006fde:	bc08      	pop	{r3}
 8006fe0:	469e      	mov	lr, r3
 8006fe2:	4770      	bx	lr
