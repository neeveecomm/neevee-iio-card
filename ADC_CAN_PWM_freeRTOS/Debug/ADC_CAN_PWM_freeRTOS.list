
ADC_CAN_PWM_freeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009d9c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000168  08009f6c  08009f6c  00019f6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a0d4  0800a0d4  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  0800a0d4  0800a0d4  0001a0d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a0dc  0800a0dc  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a0dc  0800a0dc  0001a0dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a0e0  0800a0e0  0001a0e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800a0e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001324c  20000070  0800a154  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200132bc  0800a154  000232bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 13 .debug_info   000141f3  00000000  00000000  000200e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003375  00000000  00000000  000342d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001370  00000000  00000000  00037650  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ef3  00000000  00000000  000389c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000238d2  00000000  00000000  000398b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016f3b  00000000  00000000  0005d185  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e7f5d  00000000  00000000  000740c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000059c0  00000000  00000000  0015c020  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007b  00000000  00000000  001619e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08009f54 	.word	0x08009f54

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	08009f54 	.word	0x08009f54

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_dmul>:
 80002b0:	b570      	push	{r4, r5, r6, lr}
 80002b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80002b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80002ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80002be:	bf1d      	ittte	ne
 80002c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002c4:	ea94 0f0c 	teqne	r4, ip
 80002c8:	ea95 0f0c 	teqne	r5, ip
 80002cc:	f000 f8de 	bleq	800048c <__aeabi_dmul+0x1dc>
 80002d0:	442c      	add	r4, r5
 80002d2:	ea81 0603 	eor.w	r6, r1, r3
 80002d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002e2:	bf18      	it	ne
 80002e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002f0:	d038      	beq.n	8000364 <__aeabi_dmul+0xb4>
 80002f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002f6:	f04f 0500 	mov.w	r5, #0
 80002fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002fe:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000302:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000306:	f04f 0600 	mov.w	r6, #0
 800030a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800030e:	f09c 0f00 	teq	ip, #0
 8000312:	bf18      	it	ne
 8000314:	f04e 0e01 	orrne.w	lr, lr, #1
 8000318:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800031c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000320:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000324:	d204      	bcs.n	8000330 <__aeabi_dmul+0x80>
 8000326:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800032a:	416d      	adcs	r5, r5
 800032c:	eb46 0606 	adc.w	r6, r6, r6
 8000330:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000334:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000338:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800033c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000340:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000344:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000348:	bf88      	it	hi
 800034a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800034e:	d81e      	bhi.n	800038e <__aeabi_dmul+0xde>
 8000350:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	bd70      	pop	{r4, r5, r6, pc}
 8000364:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000368:	ea46 0101 	orr.w	r1, r6, r1
 800036c:	ea40 0002 	orr.w	r0, r0, r2
 8000370:	ea81 0103 	eor.w	r1, r1, r3
 8000374:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000378:	bfc2      	ittt	gt
 800037a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800037e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000382:	bd70      	popgt	{r4, r5, r6, pc}
 8000384:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000388:	f04f 0e00 	mov.w	lr, #0
 800038c:	3c01      	subs	r4, #1
 800038e:	f300 80ab 	bgt.w	80004e8 <__aeabi_dmul+0x238>
 8000392:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000396:	bfde      	ittt	le
 8000398:	2000      	movle	r0, #0
 800039a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800039e:	bd70      	pople	{r4, r5, r6, pc}
 80003a0:	f1c4 0400 	rsb	r4, r4, #0
 80003a4:	3c20      	subs	r4, #32
 80003a6:	da35      	bge.n	8000414 <__aeabi_dmul+0x164>
 80003a8:	340c      	adds	r4, #12
 80003aa:	dc1b      	bgt.n	80003e4 <__aeabi_dmul+0x134>
 80003ac:	f104 0414 	add.w	r4, r4, #20
 80003b0:	f1c4 0520 	rsb	r5, r4, #32
 80003b4:	fa00 f305 	lsl.w	r3, r0, r5
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f205 	lsl.w	r2, r1, r5
 80003c0:	ea40 0002 	orr.w	r0, r0, r2
 80003c4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80003c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80003cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003d0:	fa21 f604 	lsr.w	r6, r1, r4
 80003d4:	eb42 0106 	adc.w	r1, r2, r6
 80003d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003dc:	bf08      	it	eq
 80003de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003e2:	bd70      	pop	{r4, r5, r6, pc}
 80003e4:	f1c4 040c 	rsb	r4, r4, #12
 80003e8:	f1c4 0520 	rsb	r5, r4, #32
 80003ec:	fa00 f304 	lsl.w	r3, r0, r4
 80003f0:	fa20 f005 	lsr.w	r0, r0, r5
 80003f4:	fa01 f204 	lsl.w	r2, r1, r4
 80003f8:	ea40 0002 	orr.w	r0, r0, r2
 80003fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000400:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000404:	f141 0100 	adc.w	r1, r1, #0
 8000408:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800040c:	bf08      	it	eq
 800040e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000412:	bd70      	pop	{r4, r5, r6, pc}
 8000414:	f1c4 0520 	rsb	r5, r4, #32
 8000418:	fa00 f205 	lsl.w	r2, r0, r5
 800041c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000420:	fa20 f304 	lsr.w	r3, r0, r4
 8000424:	fa01 f205 	lsl.w	r2, r1, r5
 8000428:	ea43 0302 	orr.w	r3, r3, r2
 800042c:	fa21 f004 	lsr.w	r0, r1, r4
 8000430:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000434:	fa21 f204 	lsr.w	r2, r1, r4
 8000438:	ea20 0002 	bic.w	r0, r0, r2
 800043c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000440:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000444:	bf08      	it	eq
 8000446:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800044a:	bd70      	pop	{r4, r5, r6, pc}
 800044c:	f094 0f00 	teq	r4, #0
 8000450:	d10f      	bne.n	8000472 <__aeabi_dmul+0x1c2>
 8000452:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000456:	0040      	lsls	r0, r0, #1
 8000458:	eb41 0101 	adc.w	r1, r1, r1
 800045c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000460:	bf08      	it	eq
 8000462:	3c01      	subeq	r4, #1
 8000464:	d0f7      	beq.n	8000456 <__aeabi_dmul+0x1a6>
 8000466:	ea41 0106 	orr.w	r1, r1, r6
 800046a:	f095 0f00 	teq	r5, #0
 800046e:	bf18      	it	ne
 8000470:	4770      	bxne	lr
 8000472:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000476:	0052      	lsls	r2, r2, #1
 8000478:	eb43 0303 	adc.w	r3, r3, r3
 800047c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000480:	bf08      	it	eq
 8000482:	3d01      	subeq	r5, #1
 8000484:	d0f7      	beq.n	8000476 <__aeabi_dmul+0x1c6>
 8000486:	ea43 0306 	orr.w	r3, r3, r6
 800048a:	4770      	bx	lr
 800048c:	ea94 0f0c 	teq	r4, ip
 8000490:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000494:	bf18      	it	ne
 8000496:	ea95 0f0c 	teqne	r5, ip
 800049a:	d00c      	beq.n	80004b6 <__aeabi_dmul+0x206>
 800049c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004a0:	bf18      	it	ne
 80004a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004a6:	d1d1      	bne.n	800044c <__aeabi_dmul+0x19c>
 80004a8:	ea81 0103 	eor.w	r1, r1, r3
 80004ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004b0:	f04f 0000 	mov.w	r0, #0
 80004b4:	bd70      	pop	{r4, r5, r6, pc}
 80004b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004ba:	bf06      	itte	eq
 80004bc:	4610      	moveq	r0, r2
 80004be:	4619      	moveq	r1, r3
 80004c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004c4:	d019      	beq.n	80004fa <__aeabi_dmul+0x24a>
 80004c6:	ea94 0f0c 	teq	r4, ip
 80004ca:	d102      	bne.n	80004d2 <__aeabi_dmul+0x222>
 80004cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004d0:	d113      	bne.n	80004fa <__aeabi_dmul+0x24a>
 80004d2:	ea95 0f0c 	teq	r5, ip
 80004d6:	d105      	bne.n	80004e4 <__aeabi_dmul+0x234>
 80004d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004dc:	bf1c      	itt	ne
 80004de:	4610      	movne	r0, r2
 80004e0:	4619      	movne	r1, r3
 80004e2:	d10a      	bne.n	80004fa <__aeabi_dmul+0x24a>
 80004e4:	ea81 0103 	eor.w	r1, r1, r3
 80004e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004ec:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd70      	pop	{r4, r5, r6, pc}
 80004fa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004fe:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000502:	bd70      	pop	{r4, r5, r6, pc}

08000504 <__aeabi_drsub>:
 8000504:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000508:	e002      	b.n	8000510 <__adddf3>
 800050a:	bf00      	nop

0800050c <__aeabi_dsub>:
 800050c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000510 <__adddf3>:
 8000510:	b530      	push	{r4, r5, lr}
 8000512:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000516:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800051a:	ea94 0f05 	teq	r4, r5
 800051e:	bf08      	it	eq
 8000520:	ea90 0f02 	teqeq	r0, r2
 8000524:	bf1f      	itttt	ne
 8000526:	ea54 0c00 	orrsne.w	ip, r4, r0
 800052a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800052e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000532:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000536:	f000 80e2 	beq.w	80006fe <__adddf3+0x1ee>
 800053a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800053e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000542:	bfb8      	it	lt
 8000544:	426d      	neglt	r5, r5
 8000546:	dd0c      	ble.n	8000562 <__adddf3+0x52>
 8000548:	442c      	add	r4, r5
 800054a:	ea80 0202 	eor.w	r2, r0, r2
 800054e:	ea81 0303 	eor.w	r3, r1, r3
 8000552:	ea82 0000 	eor.w	r0, r2, r0
 8000556:	ea83 0101 	eor.w	r1, r3, r1
 800055a:	ea80 0202 	eor.w	r2, r0, r2
 800055e:	ea81 0303 	eor.w	r3, r1, r3
 8000562:	2d36      	cmp	r5, #54	; 0x36
 8000564:	bf88      	it	hi
 8000566:	bd30      	pophi	{r4, r5, pc}
 8000568:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800056c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000570:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000574:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000578:	d002      	beq.n	8000580 <__adddf3+0x70>
 800057a:	4240      	negs	r0, r0
 800057c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000580:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000584:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000588:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800058c:	d002      	beq.n	8000594 <__adddf3+0x84>
 800058e:	4252      	negs	r2, r2
 8000590:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000594:	ea94 0f05 	teq	r4, r5
 8000598:	f000 80a7 	beq.w	80006ea <__adddf3+0x1da>
 800059c:	f1a4 0401 	sub.w	r4, r4, #1
 80005a0:	f1d5 0e20 	rsbs	lr, r5, #32
 80005a4:	db0d      	blt.n	80005c2 <__adddf3+0xb2>
 80005a6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80005aa:	fa22 f205 	lsr.w	r2, r2, r5
 80005ae:	1880      	adds	r0, r0, r2
 80005b0:	f141 0100 	adc.w	r1, r1, #0
 80005b4:	fa03 f20e 	lsl.w	r2, r3, lr
 80005b8:	1880      	adds	r0, r0, r2
 80005ba:	fa43 f305 	asr.w	r3, r3, r5
 80005be:	4159      	adcs	r1, r3
 80005c0:	e00e      	b.n	80005e0 <__adddf3+0xd0>
 80005c2:	f1a5 0520 	sub.w	r5, r5, #32
 80005c6:	f10e 0e20 	add.w	lr, lr, #32
 80005ca:	2a01      	cmp	r2, #1
 80005cc:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005d0:	bf28      	it	cs
 80005d2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005d6:	fa43 f305 	asr.w	r3, r3, r5
 80005da:	18c0      	adds	r0, r0, r3
 80005dc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005e4:	d507      	bpl.n	80005f6 <__adddf3+0xe6>
 80005e6:	f04f 0e00 	mov.w	lr, #0
 80005ea:	f1dc 0c00 	rsbs	ip, ip, #0
 80005ee:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005f2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005f6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005fa:	d31b      	bcc.n	8000634 <__adddf3+0x124>
 80005fc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000600:	d30c      	bcc.n	800061c <__adddf3+0x10c>
 8000602:	0849      	lsrs	r1, r1, #1
 8000604:	ea5f 0030 	movs.w	r0, r0, rrx
 8000608:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800060c:	f104 0401 	add.w	r4, r4, #1
 8000610:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000614:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000618:	f080 809a 	bcs.w	8000750 <__adddf3+0x240>
 800061c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000620:	bf08      	it	eq
 8000622:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000626:	f150 0000 	adcs.w	r0, r0, #0
 800062a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800062e:	ea41 0105 	orr.w	r1, r1, r5
 8000632:	bd30      	pop	{r4, r5, pc}
 8000634:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000638:	4140      	adcs	r0, r0
 800063a:	eb41 0101 	adc.w	r1, r1, r1
 800063e:	3c01      	subs	r4, #1
 8000640:	bf28      	it	cs
 8000642:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000646:	d2e9      	bcs.n	800061c <__adddf3+0x10c>
 8000648:	f091 0f00 	teq	r1, #0
 800064c:	bf04      	itt	eq
 800064e:	4601      	moveq	r1, r0
 8000650:	2000      	moveq	r0, #0
 8000652:	fab1 f381 	clz	r3, r1
 8000656:	bf08      	it	eq
 8000658:	3320      	addeq	r3, #32
 800065a:	f1a3 030b 	sub.w	r3, r3, #11
 800065e:	f1b3 0220 	subs.w	r2, r3, #32
 8000662:	da0c      	bge.n	800067e <__adddf3+0x16e>
 8000664:	320c      	adds	r2, #12
 8000666:	dd08      	ble.n	800067a <__adddf3+0x16a>
 8000668:	f102 0c14 	add.w	ip, r2, #20
 800066c:	f1c2 020c 	rsb	r2, r2, #12
 8000670:	fa01 f00c 	lsl.w	r0, r1, ip
 8000674:	fa21 f102 	lsr.w	r1, r1, r2
 8000678:	e00c      	b.n	8000694 <__adddf3+0x184>
 800067a:	f102 0214 	add.w	r2, r2, #20
 800067e:	bfd8      	it	le
 8000680:	f1c2 0c20 	rsble	ip, r2, #32
 8000684:	fa01 f102 	lsl.w	r1, r1, r2
 8000688:	fa20 fc0c 	lsr.w	ip, r0, ip
 800068c:	bfdc      	itt	le
 800068e:	ea41 010c 	orrle.w	r1, r1, ip
 8000692:	4090      	lslle	r0, r2
 8000694:	1ae4      	subs	r4, r4, r3
 8000696:	bfa2      	ittt	ge
 8000698:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800069c:	4329      	orrge	r1, r5
 800069e:	bd30      	popge	{r4, r5, pc}
 80006a0:	ea6f 0404 	mvn.w	r4, r4
 80006a4:	3c1f      	subs	r4, #31
 80006a6:	da1c      	bge.n	80006e2 <__adddf3+0x1d2>
 80006a8:	340c      	adds	r4, #12
 80006aa:	dc0e      	bgt.n	80006ca <__adddf3+0x1ba>
 80006ac:	f104 0414 	add.w	r4, r4, #20
 80006b0:	f1c4 0220 	rsb	r2, r4, #32
 80006b4:	fa20 f004 	lsr.w	r0, r0, r4
 80006b8:	fa01 f302 	lsl.w	r3, r1, r2
 80006bc:	ea40 0003 	orr.w	r0, r0, r3
 80006c0:	fa21 f304 	lsr.w	r3, r1, r4
 80006c4:	ea45 0103 	orr.w	r1, r5, r3
 80006c8:	bd30      	pop	{r4, r5, pc}
 80006ca:	f1c4 040c 	rsb	r4, r4, #12
 80006ce:	f1c4 0220 	rsb	r2, r4, #32
 80006d2:	fa20 f002 	lsr.w	r0, r0, r2
 80006d6:	fa01 f304 	lsl.w	r3, r1, r4
 80006da:	ea40 0003 	orr.w	r0, r0, r3
 80006de:	4629      	mov	r1, r5
 80006e0:	bd30      	pop	{r4, r5, pc}
 80006e2:	fa21 f004 	lsr.w	r0, r1, r4
 80006e6:	4629      	mov	r1, r5
 80006e8:	bd30      	pop	{r4, r5, pc}
 80006ea:	f094 0f00 	teq	r4, #0
 80006ee:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006f2:	bf06      	itte	eq
 80006f4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006f8:	3401      	addeq	r4, #1
 80006fa:	3d01      	subne	r5, #1
 80006fc:	e74e      	b.n	800059c <__adddf3+0x8c>
 80006fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000702:	bf18      	it	ne
 8000704:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000708:	d029      	beq.n	800075e <__adddf3+0x24e>
 800070a:	ea94 0f05 	teq	r4, r5
 800070e:	bf08      	it	eq
 8000710:	ea90 0f02 	teqeq	r0, r2
 8000714:	d005      	beq.n	8000722 <__adddf3+0x212>
 8000716:	ea54 0c00 	orrs.w	ip, r4, r0
 800071a:	bf04      	itt	eq
 800071c:	4619      	moveq	r1, r3
 800071e:	4610      	moveq	r0, r2
 8000720:	bd30      	pop	{r4, r5, pc}
 8000722:	ea91 0f03 	teq	r1, r3
 8000726:	bf1e      	ittt	ne
 8000728:	2100      	movne	r1, #0
 800072a:	2000      	movne	r0, #0
 800072c:	bd30      	popne	{r4, r5, pc}
 800072e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000732:	d105      	bne.n	8000740 <__adddf3+0x230>
 8000734:	0040      	lsls	r0, r0, #1
 8000736:	4149      	adcs	r1, r1
 8000738:	bf28      	it	cs
 800073a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800073e:	bd30      	pop	{r4, r5, pc}
 8000740:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000744:	bf3c      	itt	cc
 8000746:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800074a:	bd30      	popcc	{r4, r5, pc}
 800074c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000750:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000754:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000758:	f04f 0000 	mov.w	r0, #0
 800075c:	bd30      	pop	{r4, r5, pc}
 800075e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000762:	bf1a      	itte	ne
 8000764:	4619      	movne	r1, r3
 8000766:	4610      	movne	r0, r2
 8000768:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800076c:	bf1c      	itt	ne
 800076e:	460b      	movne	r3, r1
 8000770:	4602      	movne	r2, r0
 8000772:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000776:	bf06      	itte	eq
 8000778:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800077c:	ea91 0f03 	teqeq	r1, r3
 8000780:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000784:	bd30      	pop	{r4, r5, pc}
 8000786:	bf00      	nop

08000788 <__aeabi_ui2d>:
 8000788:	f090 0f00 	teq	r0, #0
 800078c:	bf04      	itt	eq
 800078e:	2100      	moveq	r1, #0
 8000790:	4770      	bxeq	lr
 8000792:	b530      	push	{r4, r5, lr}
 8000794:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000798:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800079c:	f04f 0500 	mov.w	r5, #0
 80007a0:	f04f 0100 	mov.w	r1, #0
 80007a4:	e750      	b.n	8000648 <__adddf3+0x138>
 80007a6:	bf00      	nop

080007a8 <__aeabi_i2d>:
 80007a8:	f090 0f00 	teq	r0, #0
 80007ac:	bf04      	itt	eq
 80007ae:	2100      	moveq	r1, #0
 80007b0:	4770      	bxeq	lr
 80007b2:	b530      	push	{r4, r5, lr}
 80007b4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007b8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007bc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80007c0:	bf48      	it	mi
 80007c2:	4240      	negmi	r0, r0
 80007c4:	f04f 0100 	mov.w	r1, #0
 80007c8:	e73e      	b.n	8000648 <__adddf3+0x138>
 80007ca:	bf00      	nop

080007cc <__aeabi_f2d>:
 80007cc:	0042      	lsls	r2, r0, #1
 80007ce:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007d2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007d6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007da:	bf1f      	itttt	ne
 80007dc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007e0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007e4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007e8:	4770      	bxne	lr
 80007ea:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007ee:	bf08      	it	eq
 80007f0:	4770      	bxeq	lr
 80007f2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007f6:	bf04      	itt	eq
 80007f8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007fc:	4770      	bxeq	lr
 80007fe:	b530      	push	{r4, r5, lr}
 8000800:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000804:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000808:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800080c:	e71c      	b.n	8000648 <__adddf3+0x138>
 800080e:	bf00      	nop

08000810 <__aeabi_ul2d>:
 8000810:	ea50 0201 	orrs.w	r2, r0, r1
 8000814:	bf08      	it	eq
 8000816:	4770      	bxeq	lr
 8000818:	b530      	push	{r4, r5, lr}
 800081a:	f04f 0500 	mov.w	r5, #0
 800081e:	e00a      	b.n	8000836 <__aeabi_l2d+0x16>

08000820 <__aeabi_l2d>:
 8000820:	ea50 0201 	orrs.w	r2, r0, r1
 8000824:	bf08      	it	eq
 8000826:	4770      	bxeq	lr
 8000828:	b530      	push	{r4, r5, lr}
 800082a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800082e:	d502      	bpl.n	8000836 <__aeabi_l2d+0x16>
 8000830:	4240      	negs	r0, r0
 8000832:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000836:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800083a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800083e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000842:	f43f aed8 	beq.w	80005f6 <__adddf3+0xe6>
 8000846:	f04f 0203 	mov.w	r2, #3
 800084a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800084e:	bf18      	it	ne
 8000850:	3203      	addne	r2, #3
 8000852:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000856:	bf18      	it	ne
 8000858:	3203      	addne	r2, #3
 800085a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800085e:	f1c2 0320 	rsb	r3, r2, #32
 8000862:	fa00 fc03 	lsl.w	ip, r0, r3
 8000866:	fa20 f002 	lsr.w	r0, r0, r2
 800086a:	fa01 fe03 	lsl.w	lr, r1, r3
 800086e:	ea40 000e 	orr.w	r0, r0, lr
 8000872:	fa21 f102 	lsr.w	r1, r1, r2
 8000876:	4414      	add	r4, r2
 8000878:	e6bd      	b.n	80005f6 <__adddf3+0xe6>
 800087a:	bf00      	nop

0800087c <__aeabi_d2f>:
 800087c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000880:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000884:	bf24      	itt	cs
 8000886:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800088a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800088e:	d90d      	bls.n	80008ac <__aeabi_d2f+0x30>
 8000890:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000894:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000898:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800089c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80008a0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80008a4:	bf08      	it	eq
 80008a6:	f020 0001 	biceq.w	r0, r0, #1
 80008aa:	4770      	bx	lr
 80008ac:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80008b0:	d121      	bne.n	80008f6 <__aeabi_d2f+0x7a>
 80008b2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80008b6:	bfbc      	itt	lt
 80008b8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80008bc:	4770      	bxlt	lr
 80008be:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008c2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80008c6:	f1c2 0218 	rsb	r2, r2, #24
 80008ca:	f1c2 0c20 	rsb	ip, r2, #32
 80008ce:	fa10 f30c 	lsls.w	r3, r0, ip
 80008d2:	fa20 f002 	lsr.w	r0, r0, r2
 80008d6:	bf18      	it	ne
 80008d8:	f040 0001 	orrne.w	r0, r0, #1
 80008dc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80008e0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80008e4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80008e8:	ea40 000c 	orr.w	r0, r0, ip
 80008ec:	fa23 f302 	lsr.w	r3, r3, r2
 80008f0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80008f4:	e7cc      	b.n	8000890 <__aeabi_d2f+0x14>
 80008f6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80008fa:	d107      	bne.n	800090c <__aeabi_d2f+0x90>
 80008fc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000900:	bf1e      	ittt	ne
 8000902:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000906:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 800090a:	4770      	bxne	lr
 800090c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000910:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000914:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000918:	4770      	bx	lr
 800091a:	bf00      	nop

0800091c <__aeabi_uldivmod>:
 800091c:	b953      	cbnz	r3, 8000934 <__aeabi_uldivmod+0x18>
 800091e:	b94a      	cbnz	r2, 8000934 <__aeabi_uldivmod+0x18>
 8000920:	2900      	cmp	r1, #0
 8000922:	bf08      	it	eq
 8000924:	2800      	cmpeq	r0, #0
 8000926:	bf1c      	itt	ne
 8000928:	f04f 31ff 	movne.w	r1, #4294967295
 800092c:	f04f 30ff 	movne.w	r0, #4294967295
 8000930:	f000 b970 	b.w	8000c14 <__aeabi_idiv0>
 8000934:	f1ad 0c08 	sub.w	ip, sp, #8
 8000938:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800093c:	f000 f806 	bl	800094c <__udivmoddi4>
 8000940:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000944:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000948:	b004      	add	sp, #16
 800094a:	4770      	bx	lr

0800094c <__udivmoddi4>:
 800094c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000950:	9e08      	ldr	r6, [sp, #32]
 8000952:	460d      	mov	r5, r1
 8000954:	4604      	mov	r4, r0
 8000956:	460f      	mov	r7, r1
 8000958:	2b00      	cmp	r3, #0
 800095a:	d14a      	bne.n	80009f2 <__udivmoddi4+0xa6>
 800095c:	428a      	cmp	r2, r1
 800095e:	4694      	mov	ip, r2
 8000960:	d965      	bls.n	8000a2e <__udivmoddi4+0xe2>
 8000962:	fab2 f382 	clz	r3, r2
 8000966:	b143      	cbz	r3, 800097a <__udivmoddi4+0x2e>
 8000968:	fa02 fc03 	lsl.w	ip, r2, r3
 800096c:	f1c3 0220 	rsb	r2, r3, #32
 8000970:	409f      	lsls	r7, r3
 8000972:	fa20 f202 	lsr.w	r2, r0, r2
 8000976:	4317      	orrs	r7, r2
 8000978:	409c      	lsls	r4, r3
 800097a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800097e:	fa1f f58c 	uxth.w	r5, ip
 8000982:	fbb7 f1fe 	udiv	r1, r7, lr
 8000986:	0c22      	lsrs	r2, r4, #16
 8000988:	fb0e 7711 	mls	r7, lr, r1, r7
 800098c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000990:	fb01 f005 	mul.w	r0, r1, r5
 8000994:	4290      	cmp	r0, r2
 8000996:	d90a      	bls.n	80009ae <__udivmoddi4+0x62>
 8000998:	eb1c 0202 	adds.w	r2, ip, r2
 800099c:	f101 37ff 	add.w	r7, r1, #4294967295
 80009a0:	f080 811c 	bcs.w	8000bdc <__udivmoddi4+0x290>
 80009a4:	4290      	cmp	r0, r2
 80009a6:	f240 8119 	bls.w	8000bdc <__udivmoddi4+0x290>
 80009aa:	3902      	subs	r1, #2
 80009ac:	4462      	add	r2, ip
 80009ae:	1a12      	subs	r2, r2, r0
 80009b0:	b2a4      	uxth	r4, r4
 80009b2:	fbb2 f0fe 	udiv	r0, r2, lr
 80009b6:	fb0e 2210 	mls	r2, lr, r0, r2
 80009ba:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80009be:	fb00 f505 	mul.w	r5, r0, r5
 80009c2:	42a5      	cmp	r5, r4
 80009c4:	d90a      	bls.n	80009dc <__udivmoddi4+0x90>
 80009c6:	eb1c 0404 	adds.w	r4, ip, r4
 80009ca:	f100 32ff 	add.w	r2, r0, #4294967295
 80009ce:	f080 8107 	bcs.w	8000be0 <__udivmoddi4+0x294>
 80009d2:	42a5      	cmp	r5, r4
 80009d4:	f240 8104 	bls.w	8000be0 <__udivmoddi4+0x294>
 80009d8:	4464      	add	r4, ip
 80009da:	3802      	subs	r0, #2
 80009dc:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80009e0:	1b64      	subs	r4, r4, r5
 80009e2:	2100      	movs	r1, #0
 80009e4:	b11e      	cbz	r6, 80009ee <__udivmoddi4+0xa2>
 80009e6:	40dc      	lsrs	r4, r3
 80009e8:	2300      	movs	r3, #0
 80009ea:	e9c6 4300 	strd	r4, r3, [r6]
 80009ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009f2:	428b      	cmp	r3, r1
 80009f4:	d908      	bls.n	8000a08 <__udivmoddi4+0xbc>
 80009f6:	2e00      	cmp	r6, #0
 80009f8:	f000 80ed 	beq.w	8000bd6 <__udivmoddi4+0x28a>
 80009fc:	2100      	movs	r1, #0
 80009fe:	e9c6 0500 	strd	r0, r5, [r6]
 8000a02:	4608      	mov	r0, r1
 8000a04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a08:	fab3 f183 	clz	r1, r3
 8000a0c:	2900      	cmp	r1, #0
 8000a0e:	d149      	bne.n	8000aa4 <__udivmoddi4+0x158>
 8000a10:	42ab      	cmp	r3, r5
 8000a12:	d302      	bcc.n	8000a1a <__udivmoddi4+0xce>
 8000a14:	4282      	cmp	r2, r0
 8000a16:	f200 80f8 	bhi.w	8000c0a <__udivmoddi4+0x2be>
 8000a1a:	1a84      	subs	r4, r0, r2
 8000a1c:	eb65 0203 	sbc.w	r2, r5, r3
 8000a20:	2001      	movs	r0, #1
 8000a22:	4617      	mov	r7, r2
 8000a24:	2e00      	cmp	r6, #0
 8000a26:	d0e2      	beq.n	80009ee <__udivmoddi4+0xa2>
 8000a28:	e9c6 4700 	strd	r4, r7, [r6]
 8000a2c:	e7df      	b.n	80009ee <__udivmoddi4+0xa2>
 8000a2e:	b902      	cbnz	r2, 8000a32 <__udivmoddi4+0xe6>
 8000a30:	deff      	udf	#255	; 0xff
 8000a32:	fab2 f382 	clz	r3, r2
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	f040 8090 	bne.w	8000b5c <__udivmoddi4+0x210>
 8000a3c:	1a8a      	subs	r2, r1, r2
 8000a3e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a42:	fa1f fe8c 	uxth.w	lr, ip
 8000a46:	2101      	movs	r1, #1
 8000a48:	fbb2 f5f7 	udiv	r5, r2, r7
 8000a4c:	fb07 2015 	mls	r0, r7, r5, r2
 8000a50:	0c22      	lsrs	r2, r4, #16
 8000a52:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000a56:	fb0e f005 	mul.w	r0, lr, r5
 8000a5a:	4290      	cmp	r0, r2
 8000a5c:	d908      	bls.n	8000a70 <__udivmoddi4+0x124>
 8000a5e:	eb1c 0202 	adds.w	r2, ip, r2
 8000a62:	f105 38ff 	add.w	r8, r5, #4294967295
 8000a66:	d202      	bcs.n	8000a6e <__udivmoddi4+0x122>
 8000a68:	4290      	cmp	r0, r2
 8000a6a:	f200 80cb 	bhi.w	8000c04 <__udivmoddi4+0x2b8>
 8000a6e:	4645      	mov	r5, r8
 8000a70:	1a12      	subs	r2, r2, r0
 8000a72:	b2a4      	uxth	r4, r4
 8000a74:	fbb2 f0f7 	udiv	r0, r2, r7
 8000a78:	fb07 2210 	mls	r2, r7, r0, r2
 8000a7c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000a80:	fb0e fe00 	mul.w	lr, lr, r0
 8000a84:	45a6      	cmp	lr, r4
 8000a86:	d908      	bls.n	8000a9a <__udivmoddi4+0x14e>
 8000a88:	eb1c 0404 	adds.w	r4, ip, r4
 8000a8c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000a90:	d202      	bcs.n	8000a98 <__udivmoddi4+0x14c>
 8000a92:	45a6      	cmp	lr, r4
 8000a94:	f200 80bb 	bhi.w	8000c0e <__udivmoddi4+0x2c2>
 8000a98:	4610      	mov	r0, r2
 8000a9a:	eba4 040e 	sub.w	r4, r4, lr
 8000a9e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000aa2:	e79f      	b.n	80009e4 <__udivmoddi4+0x98>
 8000aa4:	f1c1 0720 	rsb	r7, r1, #32
 8000aa8:	408b      	lsls	r3, r1
 8000aaa:	fa22 fc07 	lsr.w	ip, r2, r7
 8000aae:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ab2:	fa05 f401 	lsl.w	r4, r5, r1
 8000ab6:	fa20 f307 	lsr.w	r3, r0, r7
 8000aba:	40fd      	lsrs	r5, r7
 8000abc:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ac0:	4323      	orrs	r3, r4
 8000ac2:	fbb5 f8f9 	udiv	r8, r5, r9
 8000ac6:	fa1f fe8c 	uxth.w	lr, ip
 8000aca:	fb09 5518 	mls	r5, r9, r8, r5
 8000ace:	0c1c      	lsrs	r4, r3, #16
 8000ad0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000ad4:	fb08 f50e 	mul.w	r5, r8, lr
 8000ad8:	42a5      	cmp	r5, r4
 8000ada:	fa02 f201 	lsl.w	r2, r2, r1
 8000ade:	fa00 f001 	lsl.w	r0, r0, r1
 8000ae2:	d90b      	bls.n	8000afc <__udivmoddi4+0x1b0>
 8000ae4:	eb1c 0404 	adds.w	r4, ip, r4
 8000ae8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000aec:	f080 8088 	bcs.w	8000c00 <__udivmoddi4+0x2b4>
 8000af0:	42a5      	cmp	r5, r4
 8000af2:	f240 8085 	bls.w	8000c00 <__udivmoddi4+0x2b4>
 8000af6:	f1a8 0802 	sub.w	r8, r8, #2
 8000afa:	4464      	add	r4, ip
 8000afc:	1b64      	subs	r4, r4, r5
 8000afe:	b29d      	uxth	r5, r3
 8000b00:	fbb4 f3f9 	udiv	r3, r4, r9
 8000b04:	fb09 4413 	mls	r4, r9, r3, r4
 8000b08:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000b0c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000b10:	45a6      	cmp	lr, r4
 8000b12:	d908      	bls.n	8000b26 <__udivmoddi4+0x1da>
 8000b14:	eb1c 0404 	adds.w	r4, ip, r4
 8000b18:	f103 35ff 	add.w	r5, r3, #4294967295
 8000b1c:	d26c      	bcs.n	8000bf8 <__udivmoddi4+0x2ac>
 8000b1e:	45a6      	cmp	lr, r4
 8000b20:	d96a      	bls.n	8000bf8 <__udivmoddi4+0x2ac>
 8000b22:	3b02      	subs	r3, #2
 8000b24:	4464      	add	r4, ip
 8000b26:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b2a:	fba3 9502 	umull	r9, r5, r3, r2
 8000b2e:	eba4 040e 	sub.w	r4, r4, lr
 8000b32:	42ac      	cmp	r4, r5
 8000b34:	46c8      	mov	r8, r9
 8000b36:	46ae      	mov	lr, r5
 8000b38:	d356      	bcc.n	8000be8 <__udivmoddi4+0x29c>
 8000b3a:	d053      	beq.n	8000be4 <__udivmoddi4+0x298>
 8000b3c:	b156      	cbz	r6, 8000b54 <__udivmoddi4+0x208>
 8000b3e:	ebb0 0208 	subs.w	r2, r0, r8
 8000b42:	eb64 040e 	sbc.w	r4, r4, lr
 8000b46:	fa04 f707 	lsl.w	r7, r4, r7
 8000b4a:	40ca      	lsrs	r2, r1
 8000b4c:	40cc      	lsrs	r4, r1
 8000b4e:	4317      	orrs	r7, r2
 8000b50:	e9c6 7400 	strd	r7, r4, [r6]
 8000b54:	4618      	mov	r0, r3
 8000b56:	2100      	movs	r1, #0
 8000b58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b5c:	f1c3 0120 	rsb	r1, r3, #32
 8000b60:	fa02 fc03 	lsl.w	ip, r2, r3
 8000b64:	fa20 f201 	lsr.w	r2, r0, r1
 8000b68:	fa25 f101 	lsr.w	r1, r5, r1
 8000b6c:	409d      	lsls	r5, r3
 8000b6e:	432a      	orrs	r2, r5
 8000b70:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b74:	fa1f fe8c 	uxth.w	lr, ip
 8000b78:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b7c:	fb07 1510 	mls	r5, r7, r0, r1
 8000b80:	0c11      	lsrs	r1, r2, #16
 8000b82:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000b86:	fb00 f50e 	mul.w	r5, r0, lr
 8000b8a:	428d      	cmp	r5, r1
 8000b8c:	fa04 f403 	lsl.w	r4, r4, r3
 8000b90:	d908      	bls.n	8000ba4 <__udivmoddi4+0x258>
 8000b92:	eb1c 0101 	adds.w	r1, ip, r1
 8000b96:	f100 38ff 	add.w	r8, r0, #4294967295
 8000b9a:	d22f      	bcs.n	8000bfc <__udivmoddi4+0x2b0>
 8000b9c:	428d      	cmp	r5, r1
 8000b9e:	d92d      	bls.n	8000bfc <__udivmoddi4+0x2b0>
 8000ba0:	3802      	subs	r0, #2
 8000ba2:	4461      	add	r1, ip
 8000ba4:	1b49      	subs	r1, r1, r5
 8000ba6:	b292      	uxth	r2, r2
 8000ba8:	fbb1 f5f7 	udiv	r5, r1, r7
 8000bac:	fb07 1115 	mls	r1, r7, r5, r1
 8000bb0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000bb4:	fb05 f10e 	mul.w	r1, r5, lr
 8000bb8:	4291      	cmp	r1, r2
 8000bba:	d908      	bls.n	8000bce <__udivmoddi4+0x282>
 8000bbc:	eb1c 0202 	adds.w	r2, ip, r2
 8000bc0:	f105 38ff 	add.w	r8, r5, #4294967295
 8000bc4:	d216      	bcs.n	8000bf4 <__udivmoddi4+0x2a8>
 8000bc6:	4291      	cmp	r1, r2
 8000bc8:	d914      	bls.n	8000bf4 <__udivmoddi4+0x2a8>
 8000bca:	3d02      	subs	r5, #2
 8000bcc:	4462      	add	r2, ip
 8000bce:	1a52      	subs	r2, r2, r1
 8000bd0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000bd4:	e738      	b.n	8000a48 <__udivmoddi4+0xfc>
 8000bd6:	4631      	mov	r1, r6
 8000bd8:	4630      	mov	r0, r6
 8000bda:	e708      	b.n	80009ee <__udivmoddi4+0xa2>
 8000bdc:	4639      	mov	r1, r7
 8000bde:	e6e6      	b.n	80009ae <__udivmoddi4+0x62>
 8000be0:	4610      	mov	r0, r2
 8000be2:	e6fb      	b.n	80009dc <__udivmoddi4+0x90>
 8000be4:	4548      	cmp	r0, r9
 8000be6:	d2a9      	bcs.n	8000b3c <__udivmoddi4+0x1f0>
 8000be8:	ebb9 0802 	subs.w	r8, r9, r2
 8000bec:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000bf0:	3b01      	subs	r3, #1
 8000bf2:	e7a3      	b.n	8000b3c <__udivmoddi4+0x1f0>
 8000bf4:	4645      	mov	r5, r8
 8000bf6:	e7ea      	b.n	8000bce <__udivmoddi4+0x282>
 8000bf8:	462b      	mov	r3, r5
 8000bfa:	e794      	b.n	8000b26 <__udivmoddi4+0x1da>
 8000bfc:	4640      	mov	r0, r8
 8000bfe:	e7d1      	b.n	8000ba4 <__udivmoddi4+0x258>
 8000c00:	46d0      	mov	r8, sl
 8000c02:	e77b      	b.n	8000afc <__udivmoddi4+0x1b0>
 8000c04:	3d02      	subs	r5, #2
 8000c06:	4462      	add	r2, ip
 8000c08:	e732      	b.n	8000a70 <__udivmoddi4+0x124>
 8000c0a:	4608      	mov	r0, r1
 8000c0c:	e70a      	b.n	8000a24 <__udivmoddi4+0xd8>
 8000c0e:	4464      	add	r4, ip
 8000c10:	3802      	subs	r0, #2
 8000c12:	e742      	b.n	8000a9a <__udivmoddi4+0x14e>

08000c14 <__aeabi_idiv0>:
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop

08000c18 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8000c18:	b480      	push	{r7}
 8000c1a:	b083      	sub	sp, #12
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	f103 0208 	add.w	r2, r3, #8
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	f04f 32ff 	mov.w	r2, #4294967295
 8000c30:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	f103 0208 	add.w	r2, r3, #8
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	f103 0208 	add.w	r2, r3, #8
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	2200      	movs	r2, #0
 8000c4a:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8000c4c:	bf00      	nop
 8000c4e:	370c      	adds	r7, #12
 8000c50:	46bd      	mov	sp, r7
 8000c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c56:	4770      	bx	lr

08000c58 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8000c58:	b480      	push	{r7}
 8000c5a:	b083      	sub	sp, #12
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	2200      	movs	r2, #0
 8000c64:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8000c66:	bf00      	nop
 8000c68:	370c      	adds	r7, #12
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c70:	4770      	bx	lr

08000c72 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8000c72:	b480      	push	{r7}
 8000c74:	b085      	sub	sp, #20
 8000c76:	af00      	add	r7, sp, #0
 8000c78:	6078      	str	r0, [r7, #4]
 8000c7a:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	685b      	ldr	r3, [r3, #4]
 8000c80:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8000c82:	683b      	ldr	r3, [r7, #0]
 8000c84:	68fa      	ldr	r2, [r7, #12]
 8000c86:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8000c88:	68fb      	ldr	r3, [r7, #12]
 8000c8a:	689a      	ldr	r2, [r3, #8]
 8000c8c:	683b      	ldr	r3, [r7, #0]
 8000c8e:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	689b      	ldr	r3, [r3, #8]
 8000c94:	683a      	ldr	r2, [r7, #0]
 8000c96:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8000c98:	68fb      	ldr	r3, [r7, #12]
 8000c9a:	683a      	ldr	r2, [r7, #0]
 8000c9c:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8000c9e:	683b      	ldr	r3, [r7, #0]
 8000ca0:	687a      	ldr	r2, [r7, #4]
 8000ca2:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	1c5a      	adds	r2, r3, #1
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	601a      	str	r2, [r3, #0]
}
 8000cae:	bf00      	nop
 8000cb0:	3714      	adds	r7, #20
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb8:	4770      	bx	lr

08000cba <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8000cba:	b480      	push	{r7}
 8000cbc:	b085      	sub	sp, #20
 8000cbe:	af00      	add	r7, sp, #0
 8000cc0:	6078      	str	r0, [r7, #4]
 8000cc2:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8000cc4:	683b      	ldr	r3, [r7, #0]
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8000cca:	68bb      	ldr	r3, [r7, #8]
 8000ccc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000cd0:	d103      	bne.n	8000cda <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	691b      	ldr	r3, [r3, #16]
 8000cd6:	60fb      	str	r3, [r7, #12]
 8000cd8:	e00c      	b.n	8000cf4 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	3308      	adds	r3, #8
 8000cde:	60fb      	str	r3, [r7, #12]
 8000ce0:	e002      	b.n	8000ce8 <vListInsert+0x2e>
 8000ce2:	68fb      	ldr	r3, [r7, #12]
 8000ce4:	685b      	ldr	r3, [r3, #4]
 8000ce6:	60fb      	str	r3, [r7, #12]
 8000ce8:	68fb      	ldr	r3, [r7, #12]
 8000cea:	685b      	ldr	r3, [r3, #4]
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	68ba      	ldr	r2, [r7, #8]
 8000cf0:	429a      	cmp	r2, r3
 8000cf2:	d2f6      	bcs.n	8000ce2 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	685a      	ldr	r2, [r3, #4]
 8000cf8:	683b      	ldr	r3, [r7, #0]
 8000cfa:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8000cfc:	683b      	ldr	r3, [r7, #0]
 8000cfe:	685b      	ldr	r3, [r3, #4]
 8000d00:	683a      	ldr	r2, [r7, #0]
 8000d02:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8000d04:	683b      	ldr	r3, [r7, #0]
 8000d06:	68fa      	ldr	r2, [r7, #12]
 8000d08:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8000d0a:	68fb      	ldr	r3, [r7, #12]
 8000d0c:	683a      	ldr	r2, [r7, #0]
 8000d0e:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8000d10:	683b      	ldr	r3, [r7, #0]
 8000d12:	687a      	ldr	r2, [r7, #4]
 8000d14:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	1c5a      	adds	r2, r3, #1
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	601a      	str	r2, [r3, #0]
}
 8000d20:	bf00      	nop
 8000d22:	3714      	adds	r7, #20
 8000d24:	46bd      	mov	sp, r7
 8000d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2a:	4770      	bx	lr

08000d2c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	b085      	sub	sp, #20
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	691b      	ldr	r3, [r3, #16]
 8000d38:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	685b      	ldr	r3, [r3, #4]
 8000d3e:	687a      	ldr	r2, [r7, #4]
 8000d40:	6892      	ldr	r2, [r2, #8]
 8000d42:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	689b      	ldr	r3, [r3, #8]
 8000d48:	687a      	ldr	r2, [r7, #4]
 8000d4a:	6852      	ldr	r2, [r2, #4]
 8000d4c:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8000d4e:	68fb      	ldr	r3, [r7, #12]
 8000d50:	685b      	ldr	r3, [r3, #4]
 8000d52:	687a      	ldr	r2, [r7, #4]
 8000d54:	429a      	cmp	r2, r3
 8000d56:	d103      	bne.n	8000d60 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	689a      	ldr	r2, [r3, #8]
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	2200      	movs	r2, #0
 8000d64:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8000d66:	68fb      	ldr	r3, [r7, #12]
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	1e5a      	subs	r2, r3, #1
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	681b      	ldr	r3, [r3, #0]
}
 8000d74:	4618      	mov	r0, r3
 8000d76:	3714      	adds	r7, #20
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7e:	4770      	bx	lr

08000d80 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b084      	sub	sp, #16
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
 8000d88:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 8000d8e:	68fb      	ldr	r3, [r7, #12]
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d10a      	bne.n	8000daa <xQueueGenericReset+0x2a>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8000d94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d98:	f383 8811 	msr	BASEPRI, r3
 8000d9c:	f3bf 8f6f 	isb	sy
 8000da0:	f3bf 8f4f 	dsb	sy
 8000da4:	60bb      	str	r3, [r7, #8]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8000da6:	bf00      	nop
 8000da8:	e7fe      	b.n	8000da8 <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 8000daa:	f002 f8f5 	bl	8002f98 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000dae:	68fb      	ldr	r3, [r7, #12]
 8000db0:	681a      	ldr	r2, [r3, #0]
 8000db2:	68fb      	ldr	r3, [r7, #12]
 8000db4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000db6:	68f9      	ldr	r1, [r7, #12]
 8000db8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8000dba:	fb01 f303 	mul.w	r3, r1, r3
 8000dbe:	441a      	add	r2, r3
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 8000dca:	68fb      	ldr	r3, [r7, #12]
 8000dcc:	681a      	ldr	r2, [r3, #0]
 8000dce:	68fb      	ldr	r3, [r7, #12]
 8000dd0:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000dd2:	68fb      	ldr	r3, [r7, #12]
 8000dd4:	681a      	ldr	r2, [r3, #0]
 8000dd6:	68fb      	ldr	r3, [r7, #12]
 8000dd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000dda:	3b01      	subs	r3, #1
 8000ddc:	68f9      	ldr	r1, [r7, #12]
 8000dde:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8000de0:	fb01 f303 	mul.w	r3, r1, r3
 8000de4:	441a      	add	r2, r3
 8000de6:	68fb      	ldr	r3, [r7, #12]
 8000de8:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 8000dea:	68fb      	ldr	r3, [r7, #12]
 8000dec:	22ff      	movs	r2, #255	; 0xff
 8000dee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 8000df2:	68fb      	ldr	r3, [r7, #12]
 8000df4:	22ff      	movs	r2, #255	; 0xff
 8000df6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 8000dfa:	683b      	ldr	r3, [r7, #0]
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d114      	bne.n	8000e2a <xQueueGenericReset+0xaa>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	691b      	ldr	r3, [r3, #16]
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d01a      	beq.n	8000e3e <xQueueGenericReset+0xbe>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	3310      	adds	r3, #16
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f001 f881 	bl	8001f14 <xTaskRemoveFromEventList>
 8000e12:	4603      	mov	r3, r0
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d012      	beq.n	8000e3e <xQueueGenericReset+0xbe>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 8000e18:	4b0c      	ldr	r3, [pc, #48]	; (8000e4c <xQueueGenericReset+0xcc>)
 8000e1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000e1e:	601a      	str	r2, [r3, #0]
 8000e20:	f3bf 8f4f 	dsb	sy
 8000e24:	f3bf 8f6f 	isb	sy
 8000e28:	e009      	b.n	8000e3e <xQueueGenericReset+0xbe>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8000e2a:	68fb      	ldr	r3, [r7, #12]
 8000e2c:	3310      	adds	r3, #16
 8000e2e:	4618      	mov	r0, r3
 8000e30:	f7ff fef2 	bl	8000c18 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	3324      	adds	r3, #36	; 0x24
 8000e38:	4618      	mov	r0, r3
 8000e3a:	f7ff feed 	bl	8000c18 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 8000e3e:	f002 f8db 	bl	8002ff8 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 8000e42:	2301      	movs	r3, #1
}
 8000e44:	4618      	mov	r0, r3
 8000e46:	3710      	adds	r7, #16
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bd80      	pop	{r7, pc}
 8000e4c:	e000ed04 	.word	0xe000ed04

08000e50 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b08c      	sub	sp, #48	; 0x30
 8000e54:	af02      	add	r7, sp, #8
 8000e56:	60f8      	str	r0, [r7, #12]
 8000e58:	60b9      	str	r1, [r7, #8]
 8000e5a:	4613      	mov	r3, r2
 8000e5c:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8000e5e:	68fb      	ldr	r3, [r7, #12]
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d10a      	bne.n	8000e7a <xQueueGenericCreate+0x2a>
        __asm volatile
 8000e64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000e68:	f383 8811 	msr	BASEPRI, r3
 8000e6c:	f3bf 8f6f 	isb	sy
 8000e70:	f3bf 8f4f 	dsb	sy
 8000e74:	61bb      	str	r3, [r7, #24]
    }
 8000e76:	bf00      	nop
 8000e78:	e7fe      	b.n	8000e78 <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000e7a:	68fb      	ldr	r3, [r7, #12]
 8000e7c:	68ba      	ldr	r2, [r7, #8]
 8000e7e:	fb02 f303 	mul.w	r3, r2, r3
 8000e82:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 8000e84:	68bb      	ldr	r3, [r7, #8]
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d006      	beq.n	8000e98 <xQueueGenericCreate+0x48>
 8000e8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000e8c:	68bb      	ldr	r3, [r7, #8]
 8000e8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e92:	68fa      	ldr	r2, [r7, #12]
 8000e94:	429a      	cmp	r2, r3
 8000e96:	d101      	bne.n	8000e9c <xQueueGenericCreate+0x4c>
 8000e98:	2301      	movs	r3, #1
 8000e9a:	e000      	b.n	8000e9e <xQueueGenericCreate+0x4e>
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d10a      	bne.n	8000eb8 <xQueueGenericCreate+0x68>
        __asm volatile
 8000ea2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000ea6:	f383 8811 	msr	BASEPRI, r3
 8000eaa:	f3bf 8f6f 	isb	sy
 8000eae:	f3bf 8f4f 	dsb	sy
 8000eb2:	617b      	str	r3, [r7, #20]
    }
 8000eb4:	bf00      	nop
 8000eb6:	e7fe      	b.n	8000eb6 <xQueueGenericCreate+0x66>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 8000eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eba:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8000ebe:	d90a      	bls.n	8000ed6 <xQueueGenericCreate+0x86>
        __asm volatile
 8000ec0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000ec4:	f383 8811 	msr	BASEPRI, r3
 8000ec8:	f3bf 8f6f 	isb	sy
 8000ecc:	f3bf 8f4f 	dsb	sy
 8000ed0:	613b      	str	r3, [r7, #16]
    }
 8000ed2:	bf00      	nop
 8000ed4:	e7fe      	b.n	8000ed4 <xQueueGenericCreate+0x84>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8000ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ed8:	3350      	adds	r3, #80	; 0x50
 8000eda:	4618      	mov	r0, r3
 8000edc:	f002 f97e 	bl	80031dc <pvPortMalloc>
 8000ee0:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 8000ee2:	6a3b      	ldr	r3, [r7, #32]
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d00d      	beq.n	8000f04 <xQueueGenericCreate+0xb4>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8000ee8:	6a3b      	ldr	r3, [r7, #32]
 8000eea:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000eec:	69fb      	ldr	r3, [r7, #28]
 8000eee:	3350      	adds	r3, #80	; 0x50
 8000ef0:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8000ef2:	79fa      	ldrb	r2, [r7, #7]
 8000ef4:	6a3b      	ldr	r3, [r7, #32]
 8000ef6:	9300      	str	r3, [sp, #0]
 8000ef8:	4613      	mov	r3, r2
 8000efa:	69fa      	ldr	r2, [r7, #28]
 8000efc:	68b9      	ldr	r1, [r7, #8]
 8000efe:	68f8      	ldr	r0, [r7, #12]
 8000f00:	f000 f805 	bl	8000f0e <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8000f04:	6a3b      	ldr	r3, [r7, #32]
    }
 8000f06:	4618      	mov	r0, r3
 8000f08:	3728      	adds	r7, #40	; 0x28
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}

08000f0e <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8000f0e:	b580      	push	{r7, lr}
 8000f10:	b084      	sub	sp, #16
 8000f12:	af00      	add	r7, sp, #0
 8000f14:	60f8      	str	r0, [r7, #12]
 8000f16:	60b9      	str	r1, [r7, #8]
 8000f18:	607a      	str	r2, [r7, #4]
 8000f1a:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8000f1c:	68bb      	ldr	r3, [r7, #8]
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d103      	bne.n	8000f2a <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8000f22:	69bb      	ldr	r3, [r7, #24]
 8000f24:	69ba      	ldr	r2, [r7, #24]
 8000f26:	601a      	str	r2, [r3, #0]
 8000f28:	e002      	b.n	8000f30 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8000f2a:	69bb      	ldr	r3, [r7, #24]
 8000f2c:	687a      	ldr	r2, [r7, #4]
 8000f2e:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8000f30:	69bb      	ldr	r3, [r7, #24]
 8000f32:	68fa      	ldr	r2, [r7, #12]
 8000f34:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8000f36:	69bb      	ldr	r3, [r7, #24]
 8000f38:	68ba      	ldr	r2, [r7, #8]
 8000f3a:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8000f3c:	2101      	movs	r1, #1
 8000f3e:	69b8      	ldr	r0, [r7, #24]
 8000f40:	f7ff ff1e 	bl	8000d80 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 8000f44:	69bb      	ldr	r3, [r7, #24]
 8000f46:	78fa      	ldrb	r2, [r7, #3]
 8000f48:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8000f4c:	bf00      	nop
 8000f4e:	3710      	adds	r7, #16
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}

08000f54 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b08e      	sub	sp, #56	; 0x38
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	60f8      	str	r0, [r7, #12]
 8000f5c:	60b9      	str	r1, [r7, #8]
 8000f5e:	607a      	str	r2, [r7, #4]
 8000f60:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8000f62:	2300      	movs	r3, #0
 8000f64:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 8000f6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d10a      	bne.n	8000f86 <xQueueGenericSend+0x32>
        __asm volatile
 8000f70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000f74:	f383 8811 	msr	BASEPRI, r3
 8000f78:	f3bf 8f6f 	isb	sy
 8000f7c:	f3bf 8f4f 	dsb	sy
 8000f80:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8000f82:	bf00      	nop
 8000f84:	e7fe      	b.n	8000f84 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000f86:	68bb      	ldr	r3, [r7, #8]
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d103      	bne.n	8000f94 <xQueueGenericSend+0x40>
 8000f8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d101      	bne.n	8000f98 <xQueueGenericSend+0x44>
 8000f94:	2301      	movs	r3, #1
 8000f96:	e000      	b.n	8000f9a <xQueueGenericSend+0x46>
 8000f98:	2300      	movs	r3, #0
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d10a      	bne.n	8000fb4 <xQueueGenericSend+0x60>
        __asm volatile
 8000f9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000fa2:	f383 8811 	msr	BASEPRI, r3
 8000fa6:	f3bf 8f6f 	isb	sy
 8000faa:	f3bf 8f4f 	dsb	sy
 8000fae:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8000fb0:	bf00      	nop
 8000fb2:	e7fe      	b.n	8000fb2 <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	2b02      	cmp	r3, #2
 8000fb8:	d103      	bne.n	8000fc2 <xQueueGenericSend+0x6e>
 8000fba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000fbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000fbe:	2b01      	cmp	r3, #1
 8000fc0:	d101      	bne.n	8000fc6 <xQueueGenericSend+0x72>
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	e000      	b.n	8000fc8 <xQueueGenericSend+0x74>
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d10a      	bne.n	8000fe2 <xQueueGenericSend+0x8e>
        __asm volatile
 8000fcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000fd0:	f383 8811 	msr	BASEPRI, r3
 8000fd4:	f3bf 8f6f 	isb	sy
 8000fd8:	f3bf 8f4f 	dsb	sy
 8000fdc:	623b      	str	r3, [r7, #32]
    }
 8000fde:	bf00      	nop
 8000fe0:	e7fe      	b.n	8000fe0 <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8000fe2:	f001 f933 	bl	800224c <xTaskGetSchedulerState>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d102      	bne.n	8000ff2 <xQueueGenericSend+0x9e>
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d101      	bne.n	8000ff6 <xQueueGenericSend+0xa2>
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	e000      	b.n	8000ff8 <xQueueGenericSend+0xa4>
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d10a      	bne.n	8001012 <xQueueGenericSend+0xbe>
        __asm volatile
 8000ffc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001000:	f383 8811 	msr	BASEPRI, r3
 8001004:	f3bf 8f6f 	isb	sy
 8001008:	f3bf 8f4f 	dsb	sy
 800100c:	61fb      	str	r3, [r7, #28]
    }
 800100e:	bf00      	nop
 8001010:	e7fe      	b.n	8001010 <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8001012:	f001 ffc1 	bl	8002f98 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001016:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001018:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800101a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800101c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800101e:	429a      	cmp	r2, r3
 8001020:	d302      	bcc.n	8001028 <xQueueGenericSend+0xd4>
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	2b02      	cmp	r3, #2
 8001026:	d129      	bne.n	800107c <xQueueGenericSend+0x128>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001028:	683a      	ldr	r2, [r7, #0]
 800102a:	68b9      	ldr	r1, [r7, #8]
 800102c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800102e:	f000 fa19 	bl	8001464 <prvCopyDataToQueue>
 8001032:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001034:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001038:	2b00      	cmp	r3, #0
 800103a:	d010      	beq.n	800105e <xQueueGenericSend+0x10a>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800103c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800103e:	3324      	adds	r3, #36	; 0x24
 8001040:	4618      	mov	r0, r3
 8001042:	f000 ff67 	bl	8001f14 <xTaskRemoveFromEventList>
 8001046:	4603      	mov	r3, r0
 8001048:	2b00      	cmp	r3, #0
 800104a:	d013      	beq.n	8001074 <xQueueGenericSend+0x120>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 800104c:	4b3f      	ldr	r3, [pc, #252]	; (800114c <xQueueGenericSend+0x1f8>)
 800104e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001052:	601a      	str	r2, [r3, #0]
 8001054:	f3bf 8f4f 	dsb	sy
 8001058:	f3bf 8f6f 	isb	sy
 800105c:	e00a      	b.n	8001074 <xQueueGenericSend+0x120>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 800105e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001060:	2b00      	cmp	r3, #0
 8001062:	d007      	beq.n	8001074 <xQueueGenericSend+0x120>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 8001064:	4b39      	ldr	r3, [pc, #228]	; (800114c <xQueueGenericSend+0x1f8>)
 8001066:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800106a:	601a      	str	r2, [r3, #0]
 800106c:	f3bf 8f4f 	dsb	sy
 8001070:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8001074:	f001 ffc0 	bl	8002ff8 <vPortExitCritical>
                return pdPASS;
 8001078:	2301      	movs	r3, #1
 800107a:	e063      	b.n	8001144 <xQueueGenericSend+0x1f0>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	2b00      	cmp	r3, #0
 8001080:	d103      	bne.n	800108a <xQueueGenericSend+0x136>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8001082:	f001 ffb9 	bl	8002ff8 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 8001086:	2300      	movs	r3, #0
 8001088:	e05c      	b.n	8001144 <xQueueGenericSend+0x1f0>
                }
                else if( xEntryTimeSet == pdFALSE )
 800108a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800108c:	2b00      	cmp	r3, #0
 800108e:	d106      	bne.n	800109e <xQueueGenericSend+0x14a>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8001090:	f107 0314 	add.w	r3, r7, #20
 8001094:	4618      	mov	r0, r3
 8001096:	f000 ff9f 	bl	8001fd8 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800109a:	2301      	movs	r3, #1
 800109c:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800109e:	f001 ffab 	bl	8002ff8 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80010a2:	f000 fd19 	bl	8001ad8 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80010a6:	f001 ff77 	bl	8002f98 <vPortEnterCritical>
 80010aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80010ac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80010b0:	b25b      	sxtb	r3, r3
 80010b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010b6:	d103      	bne.n	80010c0 <xQueueGenericSend+0x16c>
 80010b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80010ba:	2200      	movs	r2, #0
 80010bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80010c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80010c2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80010c6:	b25b      	sxtb	r3, r3
 80010c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010cc:	d103      	bne.n	80010d6 <xQueueGenericSend+0x182>
 80010ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80010d0:	2200      	movs	r2, #0
 80010d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80010d6:	f001 ff8f 	bl	8002ff8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80010da:	1d3a      	adds	r2, r7, #4
 80010dc:	f107 0314 	add.w	r3, r7, #20
 80010e0:	4611      	mov	r1, r2
 80010e2:	4618      	mov	r0, r3
 80010e4:	f000 ff8e 	bl	8002004 <xTaskCheckForTimeOut>
 80010e8:	4603      	mov	r3, r0
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d124      	bne.n	8001138 <xQueueGenericSend+0x1e4>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80010ee:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80010f0:	f000 fab0 	bl	8001654 <prvIsQueueFull>
 80010f4:	4603      	mov	r3, r0
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d018      	beq.n	800112c <xQueueGenericSend+0x1d8>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80010fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80010fc:	3310      	adds	r3, #16
 80010fe:	687a      	ldr	r2, [r7, #4]
 8001100:	4611      	mov	r1, r2
 8001102:	4618      	mov	r0, r3
 8001104:	f000 feb6 	bl	8001e74 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8001108:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800110a:	f000 fa3b 	bl	8001584 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 800110e:	f000 fcf1 	bl	8001af4 <xTaskResumeAll>
 8001112:	4603      	mov	r3, r0
 8001114:	2b00      	cmp	r3, #0
 8001116:	f47f af7c 	bne.w	8001012 <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 800111a:	4b0c      	ldr	r3, [pc, #48]	; (800114c <xQueueGenericSend+0x1f8>)
 800111c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001120:	601a      	str	r2, [r3, #0]
 8001122:	f3bf 8f4f 	dsb	sy
 8001126:	f3bf 8f6f 	isb	sy
 800112a:	e772      	b.n	8001012 <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 800112c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800112e:	f000 fa29 	bl	8001584 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8001132:	f000 fcdf 	bl	8001af4 <xTaskResumeAll>
 8001136:	e76c      	b.n	8001012 <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8001138:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800113a:	f000 fa23 	bl	8001584 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800113e:	f000 fcd9 	bl	8001af4 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 8001142:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8001144:	4618      	mov	r0, r3
 8001146:	3738      	adds	r7, #56	; 0x38
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}
 800114c:	e000ed04 	.word	0xe000ed04

08001150 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b090      	sub	sp, #64	; 0x40
 8001154:	af00      	add	r7, sp, #0
 8001156:	60f8      	str	r0, [r7, #12]
 8001158:	60b9      	str	r1, [r7, #8]
 800115a:	607a      	str	r2, [r7, #4]
 800115c:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 8001162:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001164:	2b00      	cmp	r3, #0
 8001166:	d10a      	bne.n	800117e <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 8001168:	f04f 0350 	mov.w	r3, #80	; 0x50
 800116c:	f383 8811 	msr	BASEPRI, r3
 8001170:	f3bf 8f6f 	isb	sy
 8001174:	f3bf 8f4f 	dsb	sy
 8001178:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 800117a:	bf00      	nop
 800117c:	e7fe      	b.n	800117c <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800117e:	68bb      	ldr	r3, [r7, #8]
 8001180:	2b00      	cmp	r3, #0
 8001182:	d103      	bne.n	800118c <xQueueGenericSendFromISR+0x3c>
 8001184:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001186:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001188:	2b00      	cmp	r3, #0
 800118a:	d101      	bne.n	8001190 <xQueueGenericSendFromISR+0x40>
 800118c:	2301      	movs	r3, #1
 800118e:	e000      	b.n	8001192 <xQueueGenericSendFromISR+0x42>
 8001190:	2300      	movs	r3, #0
 8001192:	2b00      	cmp	r3, #0
 8001194:	d10a      	bne.n	80011ac <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 8001196:	f04f 0350 	mov.w	r3, #80	; 0x50
 800119a:	f383 8811 	msr	BASEPRI, r3
 800119e:	f3bf 8f6f 	isb	sy
 80011a2:	f3bf 8f4f 	dsb	sy
 80011a6:	627b      	str	r3, [r7, #36]	; 0x24
    }
 80011a8:	bf00      	nop
 80011aa:	e7fe      	b.n	80011aa <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	2b02      	cmp	r3, #2
 80011b0:	d103      	bne.n	80011ba <xQueueGenericSendFromISR+0x6a>
 80011b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80011b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80011b6:	2b01      	cmp	r3, #1
 80011b8:	d101      	bne.n	80011be <xQueueGenericSendFromISR+0x6e>
 80011ba:	2301      	movs	r3, #1
 80011bc:	e000      	b.n	80011c0 <xQueueGenericSendFromISR+0x70>
 80011be:	2300      	movs	r3, #0
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d10a      	bne.n	80011da <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 80011c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80011c8:	f383 8811 	msr	BASEPRI, r3
 80011cc:	f3bf 8f6f 	isb	sy
 80011d0:	f3bf 8f4f 	dsb	sy
 80011d4:	623b      	str	r3, [r7, #32]
    }
 80011d6:	bf00      	nop
 80011d8:	e7fe      	b.n	80011d8 <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80011da:	f001 ffbf 	bl	800315c <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 80011de:	f3ef 8211 	mrs	r2, BASEPRI
 80011e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80011e6:	f383 8811 	msr	BASEPRI, r3
 80011ea:	f3bf 8f6f 	isb	sy
 80011ee:	f3bf 8f4f 	dsb	sy
 80011f2:	61fa      	str	r2, [r7, #28]
 80011f4:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 80011f6:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80011f8:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80011fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80011fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80011fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001200:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001202:	429a      	cmp	r2, r3
 8001204:	d302      	bcc.n	800120c <xQueueGenericSendFromISR+0xbc>
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	2b02      	cmp	r3, #2
 800120a:	d13e      	bne.n	800128a <xQueueGenericSendFromISR+0x13a>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 800120c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800120e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001212:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001216:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001218:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800121a:	62fb      	str	r3, [r7, #44]	; 0x2c
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800121c:	683a      	ldr	r2, [r7, #0]
 800121e:	68b9      	ldr	r1, [r7, #8]
 8001220:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8001222:	f000 f91f 	bl	8001464 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8001226:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800122a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800122e:	d112      	bne.n	8001256 <xQueueGenericSendFromISR+0x106>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001230:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001234:	2b00      	cmp	r3, #0
 8001236:	d025      	beq.n	8001284 <xQueueGenericSendFromISR+0x134>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001238:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800123a:	3324      	adds	r3, #36	; 0x24
 800123c:	4618      	mov	r0, r3
 800123e:	f000 fe69 	bl	8001f14 <xTaskRemoveFromEventList>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	d01d      	beq.n	8001284 <xQueueGenericSendFromISR+0x134>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	2b00      	cmp	r3, #0
 800124c:	d01a      	beq.n	8001284 <xQueueGenericSendFromISR+0x134>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	2201      	movs	r2, #1
 8001252:	601a      	str	r2, [r3, #0]
 8001254:	e016      	b.n	8001284 <xQueueGenericSendFromISR+0x134>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 8001256:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800125a:	2b7f      	cmp	r3, #127	; 0x7f
 800125c:	d10a      	bne.n	8001274 <xQueueGenericSendFromISR+0x124>
        __asm volatile
 800125e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001262:	f383 8811 	msr	BASEPRI, r3
 8001266:	f3bf 8f6f 	isb	sy
 800126a:	f3bf 8f4f 	dsb	sy
 800126e:	617b      	str	r3, [r7, #20]
    }
 8001270:	bf00      	nop
 8001272:	e7fe      	b.n	8001272 <xQueueGenericSendFromISR+0x122>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8001274:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001278:	3301      	adds	r3, #1
 800127a:	b2db      	uxtb	r3, r3
 800127c:	b25a      	sxtb	r2, r3
 800127e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001280:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 8001284:	2301      	movs	r3, #1
 8001286:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 8001288:	e001      	b.n	800128e <xQueueGenericSendFromISR+0x13e>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 800128a:	2300      	movs	r3, #0
 800128c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800128e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001290:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8001292:	693b      	ldr	r3, [r7, #16]
 8001294:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8001298:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 800129a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800129c:	4618      	mov	r0, r3
 800129e:	3740      	adds	r7, #64	; 0x40
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}

080012a4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b08c      	sub	sp, #48	; 0x30
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	60f8      	str	r0, [r7, #12]
 80012ac:	60b9      	str	r1, [r7, #8]
 80012ae:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 80012b0:	2300      	movs	r3, #0
 80012b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 80012b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d10a      	bne.n	80012d4 <xQueueReceive+0x30>
        __asm volatile
 80012be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80012c2:	f383 8811 	msr	BASEPRI, r3
 80012c6:	f3bf 8f6f 	isb	sy
 80012ca:	f3bf 8f4f 	dsb	sy
 80012ce:	623b      	str	r3, [r7, #32]
    }
 80012d0:	bf00      	nop
 80012d2:	e7fe      	b.n	80012d2 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80012d4:	68bb      	ldr	r3, [r7, #8]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d103      	bne.n	80012e2 <xQueueReceive+0x3e>
 80012da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d101      	bne.n	80012e6 <xQueueReceive+0x42>
 80012e2:	2301      	movs	r3, #1
 80012e4:	e000      	b.n	80012e8 <xQueueReceive+0x44>
 80012e6:	2300      	movs	r3, #0
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d10a      	bne.n	8001302 <xQueueReceive+0x5e>
        __asm volatile
 80012ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80012f0:	f383 8811 	msr	BASEPRI, r3
 80012f4:	f3bf 8f6f 	isb	sy
 80012f8:	f3bf 8f4f 	dsb	sy
 80012fc:	61fb      	str	r3, [r7, #28]
    }
 80012fe:	bf00      	nop
 8001300:	e7fe      	b.n	8001300 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001302:	f000 ffa3 	bl	800224c <xTaskGetSchedulerState>
 8001306:	4603      	mov	r3, r0
 8001308:	2b00      	cmp	r3, #0
 800130a:	d102      	bne.n	8001312 <xQueueReceive+0x6e>
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	2b00      	cmp	r3, #0
 8001310:	d101      	bne.n	8001316 <xQueueReceive+0x72>
 8001312:	2301      	movs	r3, #1
 8001314:	e000      	b.n	8001318 <xQueueReceive+0x74>
 8001316:	2300      	movs	r3, #0
 8001318:	2b00      	cmp	r3, #0
 800131a:	d10a      	bne.n	8001332 <xQueueReceive+0x8e>
        __asm volatile
 800131c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001320:	f383 8811 	msr	BASEPRI, r3
 8001324:	f3bf 8f6f 	isb	sy
 8001328:	f3bf 8f4f 	dsb	sy
 800132c:	61bb      	str	r3, [r7, #24]
    }
 800132e:	bf00      	nop
 8001330:	e7fe      	b.n	8001330 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8001332:	f001 fe31 	bl	8002f98 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001336:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001338:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800133a:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800133c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800133e:	2b00      	cmp	r3, #0
 8001340:	d01f      	beq.n	8001382 <xQueueReceive+0xde>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8001342:	68b9      	ldr	r1, [r7, #8]
 8001344:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001346:	f000 f8f7 	bl	8001538 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800134a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800134c:	1e5a      	subs	r2, r3, #1
 800134e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001350:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001352:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001354:	691b      	ldr	r3, [r3, #16]
 8001356:	2b00      	cmp	r3, #0
 8001358:	d00f      	beq.n	800137a <xQueueReceive+0xd6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800135a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800135c:	3310      	adds	r3, #16
 800135e:	4618      	mov	r0, r3
 8001360:	f000 fdd8 	bl	8001f14 <xTaskRemoveFromEventList>
 8001364:	4603      	mov	r3, r0
 8001366:	2b00      	cmp	r3, #0
 8001368:	d007      	beq.n	800137a <xQueueReceive+0xd6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800136a:	4b3d      	ldr	r3, [pc, #244]	; (8001460 <xQueueReceive+0x1bc>)
 800136c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001370:	601a      	str	r2, [r3, #0]
 8001372:	f3bf 8f4f 	dsb	sy
 8001376:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 800137a:	f001 fe3d 	bl	8002ff8 <vPortExitCritical>
                return pdPASS;
 800137e:	2301      	movs	r3, #1
 8001380:	e069      	b.n	8001456 <xQueueReceive+0x1b2>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	2b00      	cmp	r3, #0
 8001386:	d103      	bne.n	8001390 <xQueueReceive+0xec>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8001388:	f001 fe36 	bl	8002ff8 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 800138c:	2300      	movs	r3, #0
 800138e:	e062      	b.n	8001456 <xQueueReceive+0x1b2>
                }
                else if( xEntryTimeSet == pdFALSE )
 8001390:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001392:	2b00      	cmp	r3, #0
 8001394:	d106      	bne.n	80013a4 <xQueueReceive+0x100>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8001396:	f107 0310 	add.w	r3, r7, #16
 800139a:	4618      	mov	r0, r3
 800139c:	f000 fe1c 	bl	8001fd8 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80013a0:	2301      	movs	r3, #1
 80013a2:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80013a4:	f001 fe28 	bl	8002ff8 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80013a8:	f000 fb96 	bl	8001ad8 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80013ac:	f001 fdf4 	bl	8002f98 <vPortEnterCritical>
 80013b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013b2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80013b6:	b25b      	sxtb	r3, r3
 80013b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013bc:	d103      	bne.n	80013c6 <xQueueReceive+0x122>
 80013be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013c0:	2200      	movs	r2, #0
 80013c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80013c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013c8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80013cc:	b25b      	sxtb	r3, r3
 80013ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013d2:	d103      	bne.n	80013dc <xQueueReceive+0x138>
 80013d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013d6:	2200      	movs	r2, #0
 80013d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80013dc:	f001 fe0c 	bl	8002ff8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80013e0:	1d3a      	adds	r2, r7, #4
 80013e2:	f107 0310 	add.w	r3, r7, #16
 80013e6:	4611      	mov	r1, r2
 80013e8:	4618      	mov	r0, r3
 80013ea:	f000 fe0b 	bl	8002004 <xTaskCheckForTimeOut>
 80013ee:	4603      	mov	r3, r0
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d123      	bne.n	800143c <xQueueReceive+0x198>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80013f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80013f6:	f000 f917 	bl	8001628 <prvIsQueueEmpty>
 80013fa:	4603      	mov	r3, r0
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d017      	beq.n	8001430 <xQueueReceive+0x18c>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8001400:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001402:	3324      	adds	r3, #36	; 0x24
 8001404:	687a      	ldr	r2, [r7, #4]
 8001406:	4611      	mov	r1, r2
 8001408:	4618      	mov	r0, r3
 800140a:	f000 fd33 	bl	8001e74 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 800140e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001410:	f000 f8b8 	bl	8001584 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8001414:	f000 fb6e 	bl	8001af4 <xTaskResumeAll>
 8001418:	4603      	mov	r3, r0
 800141a:	2b00      	cmp	r3, #0
 800141c:	d189      	bne.n	8001332 <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 800141e:	4b10      	ldr	r3, [pc, #64]	; (8001460 <xQueueReceive+0x1bc>)
 8001420:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001424:	601a      	str	r2, [r3, #0]
 8001426:	f3bf 8f4f 	dsb	sy
 800142a:	f3bf 8f6f 	isb	sy
 800142e:	e780      	b.n	8001332 <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8001430:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001432:	f000 f8a7 	bl	8001584 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8001436:	f000 fb5d 	bl	8001af4 <xTaskResumeAll>
 800143a:	e77a      	b.n	8001332 <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 800143c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800143e:	f000 f8a1 	bl	8001584 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8001442:	f000 fb57 	bl	8001af4 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001446:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001448:	f000 f8ee 	bl	8001628 <prvIsQueueEmpty>
 800144c:	4603      	mov	r3, r0
 800144e:	2b00      	cmp	r3, #0
 8001450:	f43f af6f 	beq.w	8001332 <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8001454:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8001456:	4618      	mov	r0, r3
 8001458:	3730      	adds	r7, #48	; 0x30
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}
 800145e:	bf00      	nop
 8001460:	e000ed04 	.word	0xe000ed04

08001464 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b086      	sub	sp, #24
 8001468:	af00      	add	r7, sp, #0
 800146a:	60f8      	str	r0, [r7, #12]
 800146c:	60b9      	str	r1, [r7, #8]
 800146e:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8001470:	2300      	movs	r3, #0
 8001472:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001478:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800147e:	2b00      	cmp	r3, #0
 8001480:	d10d      	bne.n	800149e <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	2b00      	cmp	r3, #0
 8001488:	d14d      	bne.n	8001526 <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	689b      	ldr	r3, [r3, #8]
 800148e:	4618      	mov	r0, r3
 8001490:	f000 fefa 	bl	8002288 <xTaskPriorityDisinherit>
 8001494:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	2200      	movs	r2, #0
 800149a:	609a      	str	r2, [r3, #8]
 800149c:	e043      	b.n	8001526 <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d119      	bne.n	80014d8 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	6858      	ldr	r0, [r3, #4]
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ac:	461a      	mov	r2, r3
 80014ae:	68b9      	ldr	r1, [r7, #8]
 80014b0:	f008 f834 	bl	800951c <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	685a      	ldr	r2, [r3, #4]
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014bc:	441a      	add	r2, r3
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	685a      	ldr	r2, [r3, #4]
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	689b      	ldr	r3, [r3, #8]
 80014ca:	429a      	cmp	r2, r3
 80014cc:	d32b      	bcc.n	8001526 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	681a      	ldr	r2, [r3, #0]
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	605a      	str	r2, [r3, #4]
 80014d6:	e026      	b.n	8001526 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	68d8      	ldr	r0, [r3, #12]
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014e0:	461a      	mov	r2, r3
 80014e2:	68b9      	ldr	r1, [r7, #8]
 80014e4:	f008 f81a 	bl	800951c <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	68da      	ldr	r2, [r3, #12]
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014f0:	425b      	negs	r3, r3
 80014f2:	441a      	add	r2, r3
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	68da      	ldr	r2, [r3, #12]
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	429a      	cmp	r2, r3
 8001502:	d207      	bcs.n	8001514 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	689a      	ldr	r2, [r3, #8]
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800150c:	425b      	negs	r3, r3
 800150e:	441a      	add	r2, r3
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	2b02      	cmp	r3, #2
 8001518:	d105      	bne.n	8001526 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800151a:	693b      	ldr	r3, [r7, #16]
 800151c:	2b00      	cmp	r3, #0
 800151e:	d002      	beq.n	8001526 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8001520:	693b      	ldr	r3, [r7, #16]
 8001522:	3b01      	subs	r3, #1
 8001524:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8001526:	693b      	ldr	r3, [r7, #16]
 8001528:	1c5a      	adds	r2, r3, #1
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 800152e:	697b      	ldr	r3, [r7, #20]
}
 8001530:	4618      	mov	r0, r3
 8001532:	3718      	adds	r7, #24
 8001534:	46bd      	mov	sp, r7
 8001536:	bd80      	pop	{r7, pc}

08001538 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b082      	sub	sp, #8
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
 8001540:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001546:	2b00      	cmp	r3, #0
 8001548:	d018      	beq.n	800157c <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	68da      	ldr	r2, [r3, #12]
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001552:	441a      	add	r2, r3
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	68da      	ldr	r2, [r3, #12]
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	689b      	ldr	r3, [r3, #8]
 8001560:	429a      	cmp	r2, r3
 8001562:	d303      	bcc.n	800156c <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681a      	ldr	r2, [r3, #0]
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	68d9      	ldr	r1, [r3, #12]
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001574:	461a      	mov	r2, r3
 8001576:	6838      	ldr	r0, [r7, #0]
 8001578:	f007 ffd0 	bl	800951c <memcpy>
    }
}
 800157c:	bf00      	nop
 800157e:	3708      	adds	r7, #8
 8001580:	46bd      	mov	sp, r7
 8001582:	bd80      	pop	{r7, pc}

08001584 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b084      	sub	sp, #16
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 800158c:	f001 fd04 	bl	8002f98 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001596:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8001598:	e011      	b.n	80015be <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d012      	beq.n	80015c8 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	3324      	adds	r3, #36	; 0x24
 80015a6:	4618      	mov	r0, r3
 80015a8:	f000 fcb4 	bl	8001f14 <xTaskRemoveFromEventList>
 80015ac:	4603      	mov	r3, r0
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d001      	beq.n	80015b6 <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 80015b2:	f000 fd8d 	bl	80020d0 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 80015b6:	7bfb      	ldrb	r3, [r7, #15]
 80015b8:	3b01      	subs	r3, #1
 80015ba:	b2db      	uxtb	r3, r3
 80015bc:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80015be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	dce9      	bgt.n	800159a <prvUnlockQueue+0x16>
 80015c6:	e000      	b.n	80015ca <prvUnlockQueue+0x46>
                        break;
 80015c8:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	22ff      	movs	r2, #255	; 0xff
 80015ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 80015d2:	f001 fd11 	bl	8002ff8 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 80015d6:	f001 fcdf 	bl	8002f98 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80015e0:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 80015e2:	e011      	b.n	8001608 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	691b      	ldr	r3, [r3, #16]
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d012      	beq.n	8001612 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	3310      	adds	r3, #16
 80015f0:	4618      	mov	r0, r3
 80015f2:	f000 fc8f 	bl	8001f14 <xTaskRemoveFromEventList>
 80015f6:	4603      	mov	r3, r0
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d001      	beq.n	8001600 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 80015fc:	f000 fd68 	bl	80020d0 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8001600:	7bbb      	ldrb	r3, [r7, #14]
 8001602:	3b01      	subs	r3, #1
 8001604:	b2db      	uxtb	r3, r3
 8001606:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8001608:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800160c:	2b00      	cmp	r3, #0
 800160e:	dce9      	bgt.n	80015e4 <prvUnlockQueue+0x60>
 8001610:	e000      	b.n	8001614 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8001612:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	22ff      	movs	r2, #255	; 0xff
 8001618:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 800161c:	f001 fcec 	bl	8002ff8 <vPortExitCritical>
}
 8001620:	bf00      	nop
 8001622:	3710      	adds	r7, #16
 8001624:	46bd      	mov	sp, r7
 8001626:	bd80      	pop	{r7, pc}

08001628 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b084      	sub	sp, #16
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8001630:	f001 fcb2 	bl	8002f98 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001638:	2b00      	cmp	r3, #0
 800163a:	d102      	bne.n	8001642 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 800163c:	2301      	movs	r3, #1
 800163e:	60fb      	str	r3, [r7, #12]
 8001640:	e001      	b.n	8001646 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8001642:	2300      	movs	r3, #0
 8001644:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8001646:	f001 fcd7 	bl	8002ff8 <vPortExitCritical>

    return xReturn;
 800164a:	68fb      	ldr	r3, [r7, #12]
}
 800164c:	4618      	mov	r0, r3
 800164e:	3710      	adds	r7, #16
 8001650:	46bd      	mov	sp, r7
 8001652:	bd80      	pop	{r7, pc}

08001654 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b084      	sub	sp, #16
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 800165c:	f001 fc9c 	bl	8002f98 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001668:	429a      	cmp	r2, r3
 800166a:	d102      	bne.n	8001672 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 800166c:	2301      	movs	r3, #1
 800166e:	60fb      	str	r3, [r7, #12]
 8001670:	e001      	b.n	8001676 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8001672:	2300      	movs	r3, #0
 8001674:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8001676:	f001 fcbf 	bl	8002ff8 <vPortExitCritical>

    return xReturn;
 800167a:	68fb      	ldr	r3, [r7, #12]
}
 800167c:	4618      	mov	r0, r3
 800167e:	3710      	adds	r7, #16
 8001680:	46bd      	mov	sp, r7
 8001682:	bd80      	pop	{r7, pc}

08001684 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8001684:	b480      	push	{r7}
 8001686:	b085      	sub	sp, #20
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
 800168c:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800168e:	2300      	movs	r3, #0
 8001690:	60fb      	str	r3, [r7, #12]
 8001692:	e014      	b.n	80016be <vQueueAddToRegistry+0x3a>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8001694:	4a0f      	ldr	r2, [pc, #60]	; (80016d4 <vQueueAddToRegistry+0x50>)
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800169c:	2b00      	cmp	r3, #0
 800169e:	d10b      	bne.n	80016b8 <vQueueAddToRegistry+0x34>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80016a0:	490c      	ldr	r1, [pc, #48]	; (80016d4 <vQueueAddToRegistry+0x50>)
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	683a      	ldr	r2, [r7, #0]
 80016a6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 80016aa:	4a0a      	ldr	r2, [pc, #40]	; (80016d4 <vQueueAddToRegistry+0x50>)
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	00db      	lsls	r3, r3, #3
 80016b0:	4413      	add	r3, r2
 80016b2:	687a      	ldr	r2, [r7, #4]
 80016b4:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
                break;
 80016b6:	e006      	b.n	80016c6 <vQueueAddToRegistry+0x42>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	3301      	adds	r3, #1
 80016bc:	60fb      	str	r3, [r7, #12]
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	2b07      	cmp	r3, #7
 80016c2:	d9e7      	bls.n	8001694 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 80016c4:	bf00      	nop
 80016c6:	bf00      	nop
 80016c8:	3714      	adds	r7, #20
 80016ca:	46bd      	mov	sp, r7
 80016cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d0:	4770      	bx	lr
 80016d2:	bf00      	nop
 80016d4:	2000008c 	.word	0x2000008c

080016d8 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 80016d8:	b580      	push	{r7, lr}
 80016da:	b086      	sub	sp, #24
 80016dc:	af00      	add	r7, sp, #0
 80016de:	60f8      	str	r0, [r7, #12]
 80016e0:	60b9      	str	r1, [r7, #8]
 80016e2:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 80016e8:	f001 fc56 	bl	8002f98 <vPortEnterCritical>
 80016ec:	697b      	ldr	r3, [r7, #20]
 80016ee:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80016f2:	b25b      	sxtb	r3, r3
 80016f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016f8:	d103      	bne.n	8001702 <vQueueWaitForMessageRestricted+0x2a>
 80016fa:	697b      	ldr	r3, [r7, #20]
 80016fc:	2200      	movs	r2, #0
 80016fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001702:	697b      	ldr	r3, [r7, #20]
 8001704:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001708:	b25b      	sxtb	r3, r3
 800170a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800170e:	d103      	bne.n	8001718 <vQueueWaitForMessageRestricted+0x40>
 8001710:	697b      	ldr	r3, [r7, #20]
 8001712:	2200      	movs	r2, #0
 8001714:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001718:	f001 fc6e 	bl	8002ff8 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800171c:	697b      	ldr	r3, [r7, #20]
 800171e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001720:	2b00      	cmp	r3, #0
 8001722:	d106      	bne.n	8001732 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8001724:	697b      	ldr	r3, [r7, #20]
 8001726:	3324      	adds	r3, #36	; 0x24
 8001728:	687a      	ldr	r2, [r7, #4]
 800172a:	68b9      	ldr	r1, [r7, #8]
 800172c:	4618      	mov	r0, r3
 800172e:	f000 fbc5 	bl	8001ebc <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8001732:	6978      	ldr	r0, [r7, #20]
 8001734:	f7ff ff26 	bl	8001584 <prvUnlockQueue>
    }
 8001738:	bf00      	nop
 800173a:	3718      	adds	r7, #24
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}

08001740 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8001740:	b580      	push	{r7, lr}
 8001742:	b08c      	sub	sp, #48	; 0x30
 8001744:	af04      	add	r7, sp, #16
 8001746:	60f8      	str	r0, [r7, #12]
 8001748:	60b9      	str	r1, [r7, #8]
 800174a:	603b      	str	r3, [r7, #0]
 800174c:	4613      	mov	r3, r2
 800174e:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8001750:	88fb      	ldrh	r3, [r7, #6]
 8001752:	009b      	lsls	r3, r3, #2
 8001754:	4618      	mov	r0, r3
 8001756:	f001 fd41 	bl	80031dc <pvPortMalloc>
 800175a:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 800175c:	697b      	ldr	r3, [r7, #20]
 800175e:	2b00      	cmp	r3, #0
 8001760:	d00e      	beq.n	8001780 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8001762:	2058      	movs	r0, #88	; 0x58
 8001764:	f001 fd3a 	bl	80031dc <pvPortMalloc>
 8001768:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 800176a:	69fb      	ldr	r3, [r7, #28]
 800176c:	2b00      	cmp	r3, #0
 800176e:	d003      	beq.n	8001778 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8001770:	69fb      	ldr	r3, [r7, #28]
 8001772:	697a      	ldr	r2, [r7, #20]
 8001774:	631a      	str	r2, [r3, #48]	; 0x30
 8001776:	e005      	b.n	8001784 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8001778:	6978      	ldr	r0, [r7, #20]
 800177a:	f001 fe0f 	bl	800339c <vPortFree>
 800177e:	e001      	b.n	8001784 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8001780:	2300      	movs	r3, #0
 8001782:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8001784:	69fb      	ldr	r3, [r7, #28]
 8001786:	2b00      	cmp	r3, #0
 8001788:	d013      	beq.n	80017b2 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800178a:	88fa      	ldrh	r2, [r7, #6]
 800178c:	2300      	movs	r3, #0
 800178e:	9303      	str	r3, [sp, #12]
 8001790:	69fb      	ldr	r3, [r7, #28]
 8001792:	9302      	str	r3, [sp, #8]
 8001794:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001796:	9301      	str	r3, [sp, #4]
 8001798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800179a:	9300      	str	r3, [sp, #0]
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	68b9      	ldr	r1, [r7, #8]
 80017a0:	68f8      	ldr	r0, [r7, #12]
 80017a2:	f000 f80e 	bl	80017c2 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80017a6:	69f8      	ldr	r0, [r7, #28]
 80017a8:	f000 f8a2 	bl	80018f0 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80017ac:	2301      	movs	r3, #1
 80017ae:	61bb      	str	r3, [r7, #24]
 80017b0:	e002      	b.n	80017b8 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80017b2:	f04f 33ff 	mov.w	r3, #4294967295
 80017b6:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 80017b8:	69bb      	ldr	r3, [r7, #24]
    }
 80017ba:	4618      	mov	r0, r3
 80017bc:	3720      	adds	r7, #32
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}

080017c2 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80017c2:	b580      	push	{r7, lr}
 80017c4:	b088      	sub	sp, #32
 80017c6:	af00      	add	r7, sp, #0
 80017c8:	60f8      	str	r0, [r7, #12]
 80017ca:	60b9      	str	r1, [r7, #8]
 80017cc:	607a      	str	r2, [r7, #4]
 80017ce:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80017d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017d2:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	009b      	lsls	r3, r3, #2
 80017d8:	461a      	mov	r2, r3
 80017da:	21a5      	movs	r1, #165	; 0xa5
 80017dc:	f007 fe24 	bl	8009428 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80017e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80017ea:	3b01      	subs	r3, #1
 80017ec:	009b      	lsls	r3, r3, #2
 80017ee:	4413      	add	r3, r2
 80017f0:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80017f2:	69bb      	ldr	r3, [r7, #24]
 80017f4:	f023 0307 	bic.w	r3, r3, #7
 80017f8:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80017fa:	69bb      	ldr	r3, [r7, #24]
 80017fc:	f003 0307 	and.w	r3, r3, #7
 8001800:	2b00      	cmp	r3, #0
 8001802:	d00a      	beq.n	800181a <prvInitialiseNewTask+0x58>
        __asm volatile
 8001804:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001808:	f383 8811 	msr	BASEPRI, r3
 800180c:	f3bf 8f6f 	isb	sy
 8001810:	f3bf 8f4f 	dsb	sy
 8001814:	617b      	str	r3, [r7, #20]
    }
 8001816:	bf00      	nop
 8001818:	e7fe      	b.n	8001818 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 800181a:	68bb      	ldr	r3, [r7, #8]
 800181c:	2b00      	cmp	r3, #0
 800181e:	d01f      	beq.n	8001860 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001820:	2300      	movs	r3, #0
 8001822:	61fb      	str	r3, [r7, #28]
 8001824:	e012      	b.n	800184c <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001826:	68ba      	ldr	r2, [r7, #8]
 8001828:	69fb      	ldr	r3, [r7, #28]
 800182a:	4413      	add	r3, r2
 800182c:	7819      	ldrb	r1, [r3, #0]
 800182e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001830:	69fb      	ldr	r3, [r7, #28]
 8001832:	4413      	add	r3, r2
 8001834:	3334      	adds	r3, #52	; 0x34
 8001836:	460a      	mov	r2, r1
 8001838:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 800183a:	68ba      	ldr	r2, [r7, #8]
 800183c:	69fb      	ldr	r3, [r7, #28]
 800183e:	4413      	add	r3, r2
 8001840:	781b      	ldrb	r3, [r3, #0]
 8001842:	2b00      	cmp	r3, #0
 8001844:	d006      	beq.n	8001854 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001846:	69fb      	ldr	r3, [r7, #28]
 8001848:	3301      	adds	r3, #1
 800184a:	61fb      	str	r3, [r7, #28]
 800184c:	69fb      	ldr	r3, [r7, #28]
 800184e:	2b09      	cmp	r3, #9
 8001850:	d9e9      	bls.n	8001826 <prvInitialiseNewTask+0x64>
 8001852:	e000      	b.n	8001856 <prvInitialiseNewTask+0x94>
            {
                break;
 8001854:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8001856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001858:	2200      	movs	r2, #0
 800185a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800185e:	e003      	b.n	8001868 <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8001860:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001862:	2200      	movs	r2, #0
 8001864:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8001868:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800186a:	2b04      	cmp	r3, #4
 800186c:	d901      	bls.n	8001872 <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800186e:	2304      	movs	r3, #4
 8001870:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8001872:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001874:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001876:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8001878:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800187a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800187c:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 800187e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001880:	2200      	movs	r2, #0
 8001882:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001884:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001886:	3304      	adds	r3, #4
 8001888:	4618      	mov	r0, r3
 800188a:	f7ff f9e5 	bl	8000c58 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800188e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001890:	3318      	adds	r3, #24
 8001892:	4618      	mov	r0, r3
 8001894:	f7ff f9e0 	bl	8000c58 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8001898:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800189a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800189c:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800189e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018a0:	f1c3 0205 	rsb	r2, r3, #5
 80018a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018a6:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80018a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80018ac:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 80018ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018b0:	3350      	adds	r3, #80	; 0x50
 80018b2:	2204      	movs	r2, #4
 80018b4:	2100      	movs	r1, #0
 80018b6:	4618      	mov	r0, r3
 80018b8:	f007 fdb6 	bl	8009428 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 80018bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018be:	3354      	adds	r3, #84	; 0x54
 80018c0:	2201      	movs	r2, #1
 80018c2:	2100      	movs	r1, #0
 80018c4:	4618      	mov	r0, r3
 80018c6:	f007 fdaf 	bl	8009428 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80018ca:	683a      	ldr	r2, [r7, #0]
 80018cc:	68f9      	ldr	r1, [r7, #12]
 80018ce:	69b8      	ldr	r0, [r7, #24]
 80018d0:	f001 fa36 	bl	8002d40 <pxPortInitialiseStack>
 80018d4:	4602      	mov	r2, r0
 80018d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018d8:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 80018da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d002      	beq.n	80018e6 <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80018e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80018e4:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80018e6:	bf00      	nop
 80018e8:	3720      	adds	r7, #32
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}
	...

080018f0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b082      	sub	sp, #8
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 80018f8:	f001 fb4e 	bl	8002f98 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 80018fc:	4b2c      	ldr	r3, [pc, #176]	; (80019b0 <prvAddNewTaskToReadyList+0xc0>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	3301      	adds	r3, #1
 8001902:	4a2b      	ldr	r2, [pc, #172]	; (80019b0 <prvAddNewTaskToReadyList+0xc0>)
 8001904:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8001906:	4b2b      	ldr	r3, [pc, #172]	; (80019b4 <prvAddNewTaskToReadyList+0xc4>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	2b00      	cmp	r3, #0
 800190c:	d109      	bne.n	8001922 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 800190e:	4a29      	ldr	r2, [pc, #164]	; (80019b4 <prvAddNewTaskToReadyList+0xc4>)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8001914:	4b26      	ldr	r3, [pc, #152]	; (80019b0 <prvAddNewTaskToReadyList+0xc0>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	2b01      	cmp	r3, #1
 800191a:	d110      	bne.n	800193e <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 800191c:	f000 fbfc 	bl	8002118 <prvInitialiseTaskLists>
 8001920:	e00d      	b.n	800193e <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8001922:	4b25      	ldr	r3, [pc, #148]	; (80019b8 <prvAddNewTaskToReadyList+0xc8>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	2b00      	cmp	r3, #0
 8001928:	d109      	bne.n	800193e <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800192a:	4b22      	ldr	r3, [pc, #136]	; (80019b4 <prvAddNewTaskToReadyList+0xc4>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001934:	429a      	cmp	r2, r3
 8001936:	d802      	bhi.n	800193e <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8001938:	4a1e      	ldr	r2, [pc, #120]	; (80019b4 <prvAddNewTaskToReadyList+0xc4>)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 800193e:	4b1f      	ldr	r3, [pc, #124]	; (80019bc <prvAddNewTaskToReadyList+0xcc>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	3301      	adds	r3, #1
 8001944:	4a1d      	ldr	r2, [pc, #116]	; (80019bc <prvAddNewTaskToReadyList+0xcc>)
 8001946:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8001948:	4b1c      	ldr	r3, [pc, #112]	; (80019bc <prvAddNewTaskToReadyList+0xcc>)
 800194a:	681a      	ldr	r2, [r3, #0]
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001954:	2201      	movs	r2, #1
 8001956:	409a      	lsls	r2, r3
 8001958:	4b19      	ldr	r3, [pc, #100]	; (80019c0 <prvAddNewTaskToReadyList+0xd0>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4313      	orrs	r3, r2
 800195e:	4a18      	ldr	r2, [pc, #96]	; (80019c0 <prvAddNewTaskToReadyList+0xd0>)
 8001960:	6013      	str	r3, [r2, #0]
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001966:	4613      	mov	r3, r2
 8001968:	009b      	lsls	r3, r3, #2
 800196a:	4413      	add	r3, r2
 800196c:	009b      	lsls	r3, r3, #2
 800196e:	4a15      	ldr	r2, [pc, #84]	; (80019c4 <prvAddNewTaskToReadyList+0xd4>)
 8001970:	441a      	add	r2, r3
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	3304      	adds	r3, #4
 8001976:	4619      	mov	r1, r3
 8001978:	4610      	mov	r0, r2
 800197a:	f7ff f97a 	bl	8000c72 <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 800197e:	f001 fb3b 	bl	8002ff8 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8001982:	4b0d      	ldr	r3, [pc, #52]	; (80019b8 <prvAddNewTaskToReadyList+0xc8>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	2b00      	cmp	r3, #0
 8001988:	d00e      	beq.n	80019a8 <prvAddNewTaskToReadyList+0xb8>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800198a:	4b0a      	ldr	r3, [pc, #40]	; (80019b4 <prvAddNewTaskToReadyList+0xc4>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001994:	429a      	cmp	r2, r3
 8001996:	d207      	bcs.n	80019a8 <prvAddNewTaskToReadyList+0xb8>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8001998:	4b0b      	ldr	r3, [pc, #44]	; (80019c8 <prvAddNewTaskToReadyList+0xd8>)
 800199a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800199e:	601a      	str	r2, [r3, #0]
 80019a0:	f3bf 8f4f 	dsb	sy
 80019a4:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80019a8:	bf00      	nop
 80019aa:	3708      	adds	r7, #8
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bd80      	pop	{r7, pc}
 80019b0:	200001a4 	.word	0x200001a4
 80019b4:	200000cc 	.word	0x200000cc
 80019b8:	200001b0 	.word	0x200001b0
 80019bc:	200001c0 	.word	0x200001c0
 80019c0:	200001ac 	.word	0x200001ac
 80019c4:	200000d0 	.word	0x200000d0
 80019c8:	e000ed04 	.word	0xe000ed04

080019cc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b084      	sub	sp, #16
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 80019d4:	2300      	movs	r3, #0
 80019d6:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d017      	beq.n	8001a0e <vTaskDelay+0x42>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 80019de:	4b13      	ldr	r3, [pc, #76]	; (8001a2c <vTaskDelay+0x60>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d00a      	beq.n	80019fc <vTaskDelay+0x30>
        __asm volatile
 80019e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80019ea:	f383 8811 	msr	BASEPRI, r3
 80019ee:	f3bf 8f6f 	isb	sy
 80019f2:	f3bf 8f4f 	dsb	sy
 80019f6:	60bb      	str	r3, [r7, #8]
    }
 80019f8:	bf00      	nop
 80019fa:	e7fe      	b.n	80019fa <vTaskDelay+0x2e>
            vTaskSuspendAll();
 80019fc:	f000 f86c 	bl	8001ad8 <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8001a00:	2100      	movs	r1, #0
 8001a02:	6878      	ldr	r0, [r7, #4]
 8001a04:	f000 fe24 	bl	8002650 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8001a08:	f000 f874 	bl	8001af4 <xTaskResumeAll>
 8001a0c:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d107      	bne.n	8001a24 <vTaskDelay+0x58>
        {
            portYIELD_WITHIN_API();
 8001a14:	4b06      	ldr	r3, [pc, #24]	; (8001a30 <vTaskDelay+0x64>)
 8001a16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001a1a:	601a      	str	r2, [r3, #0]
 8001a1c:	f3bf 8f4f 	dsb	sy
 8001a20:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8001a24:	bf00      	nop
 8001a26:	3710      	adds	r7, #16
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bd80      	pop	{r7, pc}
 8001a2c:	200001cc 	.word	0x200001cc
 8001a30:	e000ed04 	.word	0xe000ed04

08001a34 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b086      	sub	sp, #24
 8001a38:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8001a3a:	4b20      	ldr	r3, [pc, #128]	; (8001abc <vTaskStartScheduler+0x88>)
 8001a3c:	9301      	str	r3, [sp, #4]
 8001a3e:	2300      	movs	r3, #0
 8001a40:	9300      	str	r3, [sp, #0]
 8001a42:	2300      	movs	r3, #0
 8001a44:	2282      	movs	r2, #130	; 0x82
 8001a46:	491e      	ldr	r1, [pc, #120]	; (8001ac0 <vTaskStartScheduler+0x8c>)
 8001a48:	481e      	ldr	r0, [pc, #120]	; (8001ac4 <vTaskStartScheduler+0x90>)
 8001a4a:	f7ff fe79 	bl	8001740 <xTaskCreate>
 8001a4e:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	2b01      	cmp	r3, #1
 8001a54:	d102      	bne.n	8001a5c <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 8001a56:	f000 fe61 	bl	800271c <xTimerCreateTimerTask>
 8001a5a:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	2b01      	cmp	r3, #1
 8001a60:	d116      	bne.n	8001a90 <vTaskStartScheduler+0x5c>
        __asm volatile
 8001a62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a66:	f383 8811 	msr	BASEPRI, r3
 8001a6a:	f3bf 8f6f 	isb	sy
 8001a6e:	f3bf 8f4f 	dsb	sy
 8001a72:	60bb      	str	r3, [r7, #8]
    }
 8001a74:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8001a76:	4b14      	ldr	r3, [pc, #80]	; (8001ac8 <vTaskStartScheduler+0x94>)
 8001a78:	f04f 32ff 	mov.w	r2, #4294967295
 8001a7c:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8001a7e:	4b13      	ldr	r3, [pc, #76]	; (8001acc <vTaskStartScheduler+0x98>)
 8001a80:	2201      	movs	r2, #1
 8001a82:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8001a84:	4b12      	ldr	r3, [pc, #72]	; (8001ad0 <vTaskStartScheduler+0x9c>)
 8001a86:	2200      	movs	r2, #0
 8001a88:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8001a8a:	f001 f9e3 	bl	8002e54 <xPortStartScheduler>
 8001a8e:	e00e      	b.n	8001aae <vTaskStartScheduler+0x7a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a96:	d10a      	bne.n	8001aae <vTaskStartScheduler+0x7a>
        __asm volatile
 8001a98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a9c:	f383 8811 	msr	BASEPRI, r3
 8001aa0:	f3bf 8f6f 	isb	sy
 8001aa4:	f3bf 8f4f 	dsb	sy
 8001aa8:	607b      	str	r3, [r7, #4]
    }
 8001aaa:	bf00      	nop
 8001aac:	e7fe      	b.n	8001aac <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8001aae:	4b09      	ldr	r3, [pc, #36]	; (8001ad4 <vTaskStartScheduler+0xa0>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
}
 8001ab2:	bf00      	nop
 8001ab4:	3710      	adds	r7, #16
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}
 8001aba:	bf00      	nop
 8001abc:	200001c8 	.word	0x200001c8
 8001ac0:	08009f6c 	.word	0x08009f6c
 8001ac4:	080020e9 	.word	0x080020e9
 8001ac8:	200001c4 	.word	0x200001c4
 8001acc:	200001b0 	.word	0x200001b0
 8001ad0:	200001a8 	.word	0x200001a8
 8001ad4:	20000000 	.word	0x20000000

08001ad8 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8001ad8:	b480      	push	{r7}
 8001ada:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8001adc:	4b04      	ldr	r3, [pc, #16]	; (8001af0 <vTaskSuspendAll+0x18>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	3301      	adds	r3, #1
 8001ae2:	4a03      	ldr	r2, [pc, #12]	; (8001af0 <vTaskSuspendAll+0x18>)
 8001ae4:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8001ae6:	bf00      	nop
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aee:	4770      	bx	lr
 8001af0:	200001cc 	.word	0x200001cc

08001af4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b084      	sub	sp, #16
 8001af8:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8001afa:	2300      	movs	r3, #0
 8001afc:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 8001afe:	2300      	movs	r3, #0
 8001b00:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8001b02:	4b41      	ldr	r3, [pc, #260]	; (8001c08 <xTaskResumeAll+0x114>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d10a      	bne.n	8001b20 <xTaskResumeAll+0x2c>
        __asm volatile
 8001b0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b0e:	f383 8811 	msr	BASEPRI, r3
 8001b12:	f3bf 8f6f 	isb	sy
 8001b16:	f3bf 8f4f 	dsb	sy
 8001b1a:	603b      	str	r3, [r7, #0]
    }
 8001b1c:	bf00      	nop
 8001b1e:	e7fe      	b.n	8001b1e <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8001b20:	f001 fa3a 	bl	8002f98 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8001b24:	4b38      	ldr	r3, [pc, #224]	; (8001c08 <xTaskResumeAll+0x114>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	3b01      	subs	r3, #1
 8001b2a:	4a37      	ldr	r2, [pc, #220]	; (8001c08 <xTaskResumeAll+0x114>)
 8001b2c:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001b2e:	4b36      	ldr	r3, [pc, #216]	; (8001c08 <xTaskResumeAll+0x114>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d161      	bne.n	8001bfa <xTaskResumeAll+0x106>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8001b36:	4b35      	ldr	r3, [pc, #212]	; (8001c0c <xTaskResumeAll+0x118>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d05d      	beq.n	8001bfa <xTaskResumeAll+0x106>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001b3e:	e02e      	b.n	8001b9e <xTaskResumeAll+0xaa>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001b40:	4b33      	ldr	r3, [pc, #204]	; (8001c10 <xTaskResumeAll+0x11c>)
 8001b42:	68db      	ldr	r3, [r3, #12]
 8001b44:	68db      	ldr	r3, [r3, #12]
 8001b46:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	3318      	adds	r3, #24
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	f7ff f8ed 	bl	8000d2c <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	3304      	adds	r3, #4
 8001b56:	4618      	mov	r0, r3
 8001b58:	f7ff f8e8 	bl	8000d2c <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b60:	2201      	movs	r2, #1
 8001b62:	409a      	lsls	r2, r3
 8001b64:	4b2b      	ldr	r3, [pc, #172]	; (8001c14 <xTaskResumeAll+0x120>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4313      	orrs	r3, r2
 8001b6a:	4a2a      	ldr	r2, [pc, #168]	; (8001c14 <xTaskResumeAll+0x120>)
 8001b6c:	6013      	str	r3, [r2, #0]
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b72:	4613      	mov	r3, r2
 8001b74:	009b      	lsls	r3, r3, #2
 8001b76:	4413      	add	r3, r2
 8001b78:	009b      	lsls	r3, r3, #2
 8001b7a:	4a27      	ldr	r2, [pc, #156]	; (8001c18 <xTaskResumeAll+0x124>)
 8001b7c:	441a      	add	r2, r3
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	3304      	adds	r3, #4
 8001b82:	4619      	mov	r1, r3
 8001b84:	4610      	mov	r0, r2
 8001b86:	f7ff f874 	bl	8000c72 <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b8e:	4b23      	ldr	r3, [pc, #140]	; (8001c1c <xTaskResumeAll+0x128>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b94:	429a      	cmp	r2, r3
 8001b96:	d302      	bcc.n	8001b9e <xTaskResumeAll+0xaa>
                    {
                        xYieldPending = pdTRUE;
 8001b98:	4b21      	ldr	r3, [pc, #132]	; (8001c20 <xTaskResumeAll+0x12c>)
 8001b9a:	2201      	movs	r2, #1
 8001b9c:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001b9e:	4b1c      	ldr	r3, [pc, #112]	; (8001c10 <xTaskResumeAll+0x11c>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d1cc      	bne.n	8001b40 <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d001      	beq.n	8001bb0 <xTaskResumeAll+0xbc>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8001bac:	f000 fb32 	bl	8002214 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8001bb0:	4b1c      	ldr	r3, [pc, #112]	; (8001c24 <xTaskResumeAll+0x130>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d010      	beq.n	8001bde <xTaskResumeAll+0xea>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8001bbc:	f000 f846 	bl	8001c4c <xTaskIncrementTick>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d002      	beq.n	8001bcc <xTaskResumeAll+0xd8>
                            {
                                xYieldPending = pdTRUE;
 8001bc6:	4b16      	ldr	r3, [pc, #88]	; (8001c20 <xTaskResumeAll+0x12c>)
 8001bc8:	2201      	movs	r2, #1
 8001bca:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	3b01      	subs	r3, #1
 8001bd0:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d1f1      	bne.n	8001bbc <xTaskResumeAll+0xc8>

                        xPendedTicks = 0;
 8001bd8:	4b12      	ldr	r3, [pc, #72]	; (8001c24 <xTaskResumeAll+0x130>)
 8001bda:	2200      	movs	r2, #0
 8001bdc:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8001bde:	4b10      	ldr	r3, [pc, #64]	; (8001c20 <xTaskResumeAll+0x12c>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d009      	beq.n	8001bfa <xTaskResumeAll+0x106>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8001be6:	2301      	movs	r3, #1
 8001be8:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8001bea:	4b0f      	ldr	r3, [pc, #60]	; (8001c28 <xTaskResumeAll+0x134>)
 8001bec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001bf0:	601a      	str	r2, [r3, #0]
 8001bf2:	f3bf 8f4f 	dsb	sy
 8001bf6:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8001bfa:	f001 f9fd 	bl	8002ff8 <vPortExitCritical>

    return xAlreadyYielded;
 8001bfe:	68bb      	ldr	r3, [r7, #8]
}
 8001c00:	4618      	mov	r0, r3
 8001c02:	3710      	adds	r7, #16
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bd80      	pop	{r7, pc}
 8001c08:	200001cc 	.word	0x200001cc
 8001c0c:	200001a4 	.word	0x200001a4
 8001c10:	20000164 	.word	0x20000164
 8001c14:	200001ac 	.word	0x200001ac
 8001c18:	200000d0 	.word	0x200000d0
 8001c1c:	200000cc 	.word	0x200000cc
 8001c20:	200001b8 	.word	0x200001b8
 8001c24:	200001b4 	.word	0x200001b4
 8001c28:	e000ed04 	.word	0xe000ed04

08001c2c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	b083      	sub	sp, #12
 8001c30:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8001c32:	4b05      	ldr	r3, [pc, #20]	; (8001c48 <xTaskGetTickCount+0x1c>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8001c38:	687b      	ldr	r3, [r7, #4]
}
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	370c      	adds	r7, #12
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c44:	4770      	bx	lr
 8001c46:	bf00      	nop
 8001c48:	200001a8 	.word	0x200001a8

08001c4c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b086      	sub	sp, #24
 8001c50:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8001c52:	2300      	movs	r3, #0
 8001c54:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001c56:	4b4e      	ldr	r3, [pc, #312]	; (8001d90 <xTaskIncrementTick+0x144>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	f040 808e 	bne.w	8001d7c <xTaskIncrementTick+0x130>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8001c60:	4b4c      	ldr	r3, [pc, #304]	; (8001d94 <xTaskIncrementTick+0x148>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	3301      	adds	r3, #1
 8001c66:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8001c68:	4a4a      	ldr	r2, [pc, #296]	; (8001d94 <xTaskIncrementTick+0x148>)
 8001c6a:	693b      	ldr	r3, [r7, #16]
 8001c6c:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8001c6e:	693b      	ldr	r3, [r7, #16]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d120      	bne.n	8001cb6 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8001c74:	4b48      	ldr	r3, [pc, #288]	; (8001d98 <xTaskIncrementTick+0x14c>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d00a      	beq.n	8001c94 <xTaskIncrementTick+0x48>
        __asm volatile
 8001c7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c82:	f383 8811 	msr	BASEPRI, r3
 8001c86:	f3bf 8f6f 	isb	sy
 8001c8a:	f3bf 8f4f 	dsb	sy
 8001c8e:	603b      	str	r3, [r7, #0]
    }
 8001c90:	bf00      	nop
 8001c92:	e7fe      	b.n	8001c92 <xTaskIncrementTick+0x46>
 8001c94:	4b40      	ldr	r3, [pc, #256]	; (8001d98 <xTaskIncrementTick+0x14c>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	60fb      	str	r3, [r7, #12]
 8001c9a:	4b40      	ldr	r3, [pc, #256]	; (8001d9c <xTaskIncrementTick+0x150>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4a3e      	ldr	r2, [pc, #248]	; (8001d98 <xTaskIncrementTick+0x14c>)
 8001ca0:	6013      	str	r3, [r2, #0]
 8001ca2:	4a3e      	ldr	r2, [pc, #248]	; (8001d9c <xTaskIncrementTick+0x150>)
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	6013      	str	r3, [r2, #0]
 8001ca8:	4b3d      	ldr	r3, [pc, #244]	; (8001da0 <xTaskIncrementTick+0x154>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	3301      	adds	r3, #1
 8001cae:	4a3c      	ldr	r2, [pc, #240]	; (8001da0 <xTaskIncrementTick+0x154>)
 8001cb0:	6013      	str	r3, [r2, #0]
 8001cb2:	f000 faaf 	bl	8002214 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8001cb6:	4b3b      	ldr	r3, [pc, #236]	; (8001da4 <xTaskIncrementTick+0x158>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	693a      	ldr	r2, [r7, #16]
 8001cbc:	429a      	cmp	r2, r3
 8001cbe:	d348      	bcc.n	8001d52 <xTaskIncrementTick+0x106>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001cc0:	4b35      	ldr	r3, [pc, #212]	; (8001d98 <xTaskIncrementTick+0x14c>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d104      	bne.n	8001cd4 <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001cca:	4b36      	ldr	r3, [pc, #216]	; (8001da4 <xTaskIncrementTick+0x158>)
 8001ccc:	f04f 32ff 	mov.w	r2, #4294967295
 8001cd0:	601a      	str	r2, [r3, #0]
                    break;
 8001cd2:	e03e      	b.n	8001d52 <xTaskIncrementTick+0x106>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001cd4:	4b30      	ldr	r3, [pc, #192]	; (8001d98 <xTaskIncrementTick+0x14c>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	68db      	ldr	r3, [r3, #12]
 8001cda:	68db      	ldr	r3, [r3, #12]
 8001cdc:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8001cde:	68bb      	ldr	r3, [r7, #8]
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8001ce4:	693a      	ldr	r2, [r7, #16]
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	429a      	cmp	r2, r3
 8001cea:	d203      	bcs.n	8001cf4 <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8001cec:	4a2d      	ldr	r2, [pc, #180]	; (8001da4 <xTaskIncrementTick+0x158>)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8001cf2:	e02e      	b.n	8001d52 <xTaskIncrementTick+0x106>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001cf4:	68bb      	ldr	r3, [r7, #8]
 8001cf6:	3304      	adds	r3, #4
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f7ff f817 	bl	8000d2c <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001cfe:	68bb      	ldr	r3, [r7, #8]
 8001d00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d004      	beq.n	8001d10 <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001d06:	68bb      	ldr	r3, [r7, #8]
 8001d08:	3318      	adds	r3, #24
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	f7ff f80e 	bl	8000d2c <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8001d10:	68bb      	ldr	r3, [r7, #8]
 8001d12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d14:	2201      	movs	r2, #1
 8001d16:	409a      	lsls	r2, r3
 8001d18:	4b23      	ldr	r3, [pc, #140]	; (8001da8 <xTaskIncrementTick+0x15c>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4313      	orrs	r3, r2
 8001d1e:	4a22      	ldr	r2, [pc, #136]	; (8001da8 <xTaskIncrementTick+0x15c>)
 8001d20:	6013      	str	r3, [r2, #0]
 8001d22:	68bb      	ldr	r3, [r7, #8]
 8001d24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d26:	4613      	mov	r3, r2
 8001d28:	009b      	lsls	r3, r3, #2
 8001d2a:	4413      	add	r3, r2
 8001d2c:	009b      	lsls	r3, r3, #2
 8001d2e:	4a1f      	ldr	r2, [pc, #124]	; (8001dac <xTaskIncrementTick+0x160>)
 8001d30:	441a      	add	r2, r3
 8001d32:	68bb      	ldr	r3, [r7, #8]
 8001d34:	3304      	adds	r3, #4
 8001d36:	4619      	mov	r1, r3
 8001d38:	4610      	mov	r0, r2
 8001d3a:	f7fe ff9a 	bl	8000c72 <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001d3e:	68bb      	ldr	r3, [r7, #8]
 8001d40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d42:	4b1b      	ldr	r3, [pc, #108]	; (8001db0 <xTaskIncrementTick+0x164>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d48:	429a      	cmp	r2, r3
 8001d4a:	d3b9      	bcc.n	8001cc0 <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001d50:	e7b6      	b.n	8001cc0 <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8001d52:	4b17      	ldr	r3, [pc, #92]	; (8001db0 <xTaskIncrementTick+0x164>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d58:	4914      	ldr	r1, [pc, #80]	; (8001dac <xTaskIncrementTick+0x160>)
 8001d5a:	4613      	mov	r3, r2
 8001d5c:	009b      	lsls	r3, r3, #2
 8001d5e:	4413      	add	r3, r2
 8001d60:	009b      	lsls	r3, r3, #2
 8001d62:	440b      	add	r3, r1
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	2b01      	cmp	r3, #1
 8001d68:	d901      	bls.n	8001d6e <xTaskIncrementTick+0x122>
                {
                    xSwitchRequired = pdTRUE;
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8001d6e:	4b11      	ldr	r3, [pc, #68]	; (8001db4 <xTaskIncrementTick+0x168>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d007      	beq.n	8001d86 <xTaskIncrementTick+0x13a>
                {
                    xSwitchRequired = pdTRUE;
 8001d76:	2301      	movs	r3, #1
 8001d78:	617b      	str	r3, [r7, #20]
 8001d7a:	e004      	b.n	8001d86 <xTaskIncrementTick+0x13a>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8001d7c:	4b0e      	ldr	r3, [pc, #56]	; (8001db8 <xTaskIncrementTick+0x16c>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	3301      	adds	r3, #1
 8001d82:	4a0d      	ldr	r2, [pc, #52]	; (8001db8 <xTaskIncrementTick+0x16c>)
 8001d84:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8001d86:	697b      	ldr	r3, [r7, #20]
}
 8001d88:	4618      	mov	r0, r3
 8001d8a:	3718      	adds	r7, #24
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bd80      	pop	{r7, pc}
 8001d90:	200001cc 	.word	0x200001cc
 8001d94:	200001a8 	.word	0x200001a8
 8001d98:	2000015c 	.word	0x2000015c
 8001d9c:	20000160 	.word	0x20000160
 8001da0:	200001bc 	.word	0x200001bc
 8001da4:	200001c4 	.word	0x200001c4
 8001da8:	200001ac 	.word	0x200001ac
 8001dac:	200000d0 	.word	0x200000d0
 8001db0:	200000cc 	.word	0x200000cc
 8001db4:	200001b8 	.word	0x200001b8
 8001db8:	200001b4 	.word	0x200001b4

08001dbc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b087      	sub	sp, #28
 8001dc0:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8001dc2:	4b27      	ldr	r3, [pc, #156]	; (8001e60 <vTaskSwitchContext+0xa4>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d003      	beq.n	8001dd2 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8001dca:	4b26      	ldr	r3, [pc, #152]	; (8001e64 <vTaskSwitchContext+0xa8>)
 8001dcc:	2201      	movs	r2, #1
 8001dce:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8001dd0:	e03f      	b.n	8001e52 <vTaskSwitchContext+0x96>
        xYieldPending = pdFALSE;
 8001dd2:	4b24      	ldr	r3, [pc, #144]	; (8001e64 <vTaskSwitchContext+0xa8>)
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001dd8:	4b23      	ldr	r3, [pc, #140]	; (8001e68 <vTaskSwitchContext+0xac>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	fab3 f383 	clz	r3, r3
 8001de4:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8001de6:	7afb      	ldrb	r3, [r7, #11]
 8001de8:	f1c3 031f 	rsb	r3, r3, #31
 8001dec:	617b      	str	r3, [r7, #20]
 8001dee:	491f      	ldr	r1, [pc, #124]	; (8001e6c <vTaskSwitchContext+0xb0>)
 8001df0:	697a      	ldr	r2, [r7, #20]
 8001df2:	4613      	mov	r3, r2
 8001df4:	009b      	lsls	r3, r3, #2
 8001df6:	4413      	add	r3, r2
 8001df8:	009b      	lsls	r3, r3, #2
 8001dfa:	440b      	add	r3, r1
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d10a      	bne.n	8001e18 <vTaskSwitchContext+0x5c>
        __asm volatile
 8001e02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e06:	f383 8811 	msr	BASEPRI, r3
 8001e0a:	f3bf 8f6f 	isb	sy
 8001e0e:	f3bf 8f4f 	dsb	sy
 8001e12:	607b      	str	r3, [r7, #4]
    }
 8001e14:	bf00      	nop
 8001e16:	e7fe      	b.n	8001e16 <vTaskSwitchContext+0x5a>
 8001e18:	697a      	ldr	r2, [r7, #20]
 8001e1a:	4613      	mov	r3, r2
 8001e1c:	009b      	lsls	r3, r3, #2
 8001e1e:	4413      	add	r3, r2
 8001e20:	009b      	lsls	r3, r3, #2
 8001e22:	4a12      	ldr	r2, [pc, #72]	; (8001e6c <vTaskSwitchContext+0xb0>)
 8001e24:	4413      	add	r3, r2
 8001e26:	613b      	str	r3, [r7, #16]
 8001e28:	693b      	ldr	r3, [r7, #16]
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	685a      	ldr	r2, [r3, #4]
 8001e2e:	693b      	ldr	r3, [r7, #16]
 8001e30:	605a      	str	r2, [r3, #4]
 8001e32:	693b      	ldr	r3, [r7, #16]
 8001e34:	685a      	ldr	r2, [r3, #4]
 8001e36:	693b      	ldr	r3, [r7, #16]
 8001e38:	3308      	adds	r3, #8
 8001e3a:	429a      	cmp	r2, r3
 8001e3c:	d104      	bne.n	8001e48 <vTaskSwitchContext+0x8c>
 8001e3e:	693b      	ldr	r3, [r7, #16]
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	685a      	ldr	r2, [r3, #4]
 8001e44:	693b      	ldr	r3, [r7, #16]
 8001e46:	605a      	str	r2, [r3, #4]
 8001e48:	693b      	ldr	r3, [r7, #16]
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	68db      	ldr	r3, [r3, #12]
 8001e4e:	4a08      	ldr	r2, [pc, #32]	; (8001e70 <vTaskSwitchContext+0xb4>)
 8001e50:	6013      	str	r3, [r2, #0]
}
 8001e52:	bf00      	nop
 8001e54:	371c      	adds	r7, #28
 8001e56:	46bd      	mov	sp, r7
 8001e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5c:	4770      	bx	lr
 8001e5e:	bf00      	nop
 8001e60:	200001cc 	.word	0x200001cc
 8001e64:	200001b8 	.word	0x200001b8
 8001e68:	200001ac 	.word	0x200001ac
 8001e6c:	200000d0 	.word	0x200000d0
 8001e70:	200000cc 	.word	0x200000cc

08001e74 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b084      	sub	sp, #16
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
 8001e7c:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d10a      	bne.n	8001e9a <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8001e84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e88:	f383 8811 	msr	BASEPRI, r3
 8001e8c:	f3bf 8f6f 	isb	sy
 8001e90:	f3bf 8f4f 	dsb	sy
 8001e94:	60fb      	str	r3, [r7, #12]
    }
 8001e96:	bf00      	nop
 8001e98:	e7fe      	b.n	8001e98 <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8001e9a:	4b07      	ldr	r3, [pc, #28]	; (8001eb8 <vTaskPlaceOnEventList+0x44>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	3318      	adds	r3, #24
 8001ea0:	4619      	mov	r1, r3
 8001ea2:	6878      	ldr	r0, [r7, #4]
 8001ea4:	f7fe ff09 	bl	8000cba <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8001ea8:	2101      	movs	r1, #1
 8001eaa:	6838      	ldr	r0, [r7, #0]
 8001eac:	f000 fbd0 	bl	8002650 <prvAddCurrentTaskToDelayedList>
}
 8001eb0:	bf00      	nop
 8001eb2:	3710      	adds	r7, #16
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bd80      	pop	{r7, pc}
 8001eb8:	200000cc 	.word	0x200000cc

08001ebc <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b086      	sub	sp, #24
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	60f8      	str	r0, [r7, #12]
 8001ec4:	60b9      	str	r1, [r7, #8]
 8001ec6:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d10a      	bne.n	8001ee4 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 8001ece:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ed2:	f383 8811 	msr	BASEPRI, r3
 8001ed6:	f3bf 8f6f 	isb	sy
 8001eda:	f3bf 8f4f 	dsb	sy
 8001ede:	617b      	str	r3, [r7, #20]
    }
 8001ee0:	bf00      	nop
 8001ee2:	e7fe      	b.n	8001ee2 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8001ee4:	4b0a      	ldr	r3, [pc, #40]	; (8001f10 <vTaskPlaceOnEventListRestricted+0x54>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	3318      	adds	r3, #24
 8001eea:	4619      	mov	r1, r3
 8001eec:	68f8      	ldr	r0, [r7, #12]
 8001eee:	f7fe fec0 	bl	8000c72 <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d002      	beq.n	8001efe <vTaskPlaceOnEventListRestricted+0x42>
        {
            xTicksToWait = portMAX_DELAY;
 8001ef8:	f04f 33ff 	mov.w	r3, #4294967295
 8001efc:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8001efe:	6879      	ldr	r1, [r7, #4]
 8001f00:	68b8      	ldr	r0, [r7, #8]
 8001f02:	f000 fba5 	bl	8002650 <prvAddCurrentTaskToDelayedList>
    }
 8001f06:	bf00      	nop
 8001f08:	3718      	adds	r7, #24
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}
 8001f0e:	bf00      	nop
 8001f10:	200000cc 	.word	0x200000cc

08001f14 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b086      	sub	sp, #24
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	68db      	ldr	r3, [r3, #12]
 8001f20:	68db      	ldr	r3, [r3, #12]
 8001f22:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 8001f24:	693b      	ldr	r3, [r7, #16]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d10a      	bne.n	8001f40 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 8001f2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f2e:	f383 8811 	msr	BASEPRI, r3
 8001f32:	f3bf 8f6f 	isb	sy
 8001f36:	f3bf 8f4f 	dsb	sy
 8001f3a:	60fb      	str	r3, [r7, #12]
    }
 8001f3c:	bf00      	nop
 8001f3e:	e7fe      	b.n	8001f3e <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8001f40:	693b      	ldr	r3, [r7, #16]
 8001f42:	3318      	adds	r3, #24
 8001f44:	4618      	mov	r0, r3
 8001f46:	f7fe fef1 	bl	8000d2c <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001f4a:	4b1d      	ldr	r3, [pc, #116]	; (8001fc0 <xTaskRemoveFromEventList+0xac>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d11c      	bne.n	8001f8c <xTaskRemoveFromEventList+0x78>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8001f52:	693b      	ldr	r3, [r7, #16]
 8001f54:	3304      	adds	r3, #4
 8001f56:	4618      	mov	r0, r3
 8001f58:	f7fe fee8 	bl	8000d2c <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 8001f5c:	693b      	ldr	r3, [r7, #16]
 8001f5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f60:	2201      	movs	r2, #1
 8001f62:	409a      	lsls	r2, r3
 8001f64:	4b17      	ldr	r3, [pc, #92]	; (8001fc4 <xTaskRemoveFromEventList+0xb0>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4313      	orrs	r3, r2
 8001f6a:	4a16      	ldr	r2, [pc, #88]	; (8001fc4 <xTaskRemoveFromEventList+0xb0>)
 8001f6c:	6013      	str	r3, [r2, #0]
 8001f6e:	693b      	ldr	r3, [r7, #16]
 8001f70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f72:	4613      	mov	r3, r2
 8001f74:	009b      	lsls	r3, r3, #2
 8001f76:	4413      	add	r3, r2
 8001f78:	009b      	lsls	r3, r3, #2
 8001f7a:	4a13      	ldr	r2, [pc, #76]	; (8001fc8 <xTaskRemoveFromEventList+0xb4>)
 8001f7c:	441a      	add	r2, r3
 8001f7e:	693b      	ldr	r3, [r7, #16]
 8001f80:	3304      	adds	r3, #4
 8001f82:	4619      	mov	r1, r3
 8001f84:	4610      	mov	r0, r2
 8001f86:	f7fe fe74 	bl	8000c72 <vListInsertEnd>
 8001f8a:	e005      	b.n	8001f98 <xTaskRemoveFromEventList+0x84>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8001f8c:	693b      	ldr	r3, [r7, #16]
 8001f8e:	3318      	adds	r3, #24
 8001f90:	4619      	mov	r1, r3
 8001f92:	480e      	ldr	r0, [pc, #56]	; (8001fcc <xTaskRemoveFromEventList+0xb8>)
 8001f94:	f7fe fe6d 	bl	8000c72 <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8001f98:	693b      	ldr	r3, [r7, #16]
 8001f9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f9c:	4b0c      	ldr	r3, [pc, #48]	; (8001fd0 <xTaskRemoveFromEventList+0xbc>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fa2:	429a      	cmp	r2, r3
 8001fa4:	d905      	bls.n	8001fb2 <xTaskRemoveFromEventList+0x9e>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8001faa:	4b0a      	ldr	r3, [pc, #40]	; (8001fd4 <xTaskRemoveFromEventList+0xc0>)
 8001fac:	2201      	movs	r2, #1
 8001fae:	601a      	str	r2, [r3, #0]
 8001fb0:	e001      	b.n	8001fb6 <xTaskRemoveFromEventList+0xa2>
    }
    else
    {
        xReturn = pdFALSE;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8001fb6:	697b      	ldr	r3, [r7, #20]
}
 8001fb8:	4618      	mov	r0, r3
 8001fba:	3718      	adds	r7, #24
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bd80      	pop	{r7, pc}
 8001fc0:	200001cc 	.word	0x200001cc
 8001fc4:	200001ac 	.word	0x200001ac
 8001fc8:	200000d0 	.word	0x200000d0
 8001fcc:	20000164 	.word	0x20000164
 8001fd0:	200000cc 	.word	0x200000cc
 8001fd4:	200001b8 	.word	0x200001b8

08001fd8 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8001fd8:	b480      	push	{r7}
 8001fda:	b083      	sub	sp, #12
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8001fe0:	4b06      	ldr	r3, [pc, #24]	; (8001ffc <vTaskInternalSetTimeOutState+0x24>)
 8001fe2:	681a      	ldr	r2, [r3, #0]
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8001fe8:	4b05      	ldr	r3, [pc, #20]	; (8002000 <vTaskInternalSetTimeOutState+0x28>)
 8001fea:	681a      	ldr	r2, [r3, #0]
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	605a      	str	r2, [r3, #4]
}
 8001ff0:	bf00      	nop
 8001ff2:	370c      	adds	r7, #12
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffa:	4770      	bx	lr
 8001ffc:	200001bc 	.word	0x200001bc
 8002000:	200001a8 	.word	0x200001a8

08002004 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b088      	sub	sp, #32
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
 800200c:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2b00      	cmp	r3, #0
 8002012:	d10a      	bne.n	800202a <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8002014:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002018:	f383 8811 	msr	BASEPRI, r3
 800201c:	f3bf 8f6f 	isb	sy
 8002020:	f3bf 8f4f 	dsb	sy
 8002024:	613b      	str	r3, [r7, #16]
    }
 8002026:	bf00      	nop
 8002028:	e7fe      	b.n	8002028 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d10a      	bne.n	8002046 <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8002030:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002034:	f383 8811 	msr	BASEPRI, r3
 8002038:	f3bf 8f6f 	isb	sy
 800203c:	f3bf 8f4f 	dsb	sy
 8002040:	60fb      	str	r3, [r7, #12]
    }
 8002042:	bf00      	nop
 8002044:	e7fe      	b.n	8002044 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 8002046:	f000 ffa7 	bl	8002f98 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 800204a:	4b1f      	ldr	r3, [pc, #124]	; (80020c8 <xTaskCheckForTimeOut+0xc4>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	69ba      	ldr	r2, [r7, #24]
 8002056:	1ad3      	subs	r3, r2, r3
 8002058:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002062:	d102      	bne.n	800206a <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8002064:	2300      	movs	r3, #0
 8002066:	61fb      	str	r3, [r7, #28]
 8002068:	e026      	b.n	80020b8 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681a      	ldr	r2, [r3, #0]
 800206e:	4b17      	ldr	r3, [pc, #92]	; (80020cc <xTaskCheckForTimeOut+0xc8>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	429a      	cmp	r2, r3
 8002074:	d00a      	beq.n	800208c <xTaskCheckForTimeOut+0x88>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	69ba      	ldr	r2, [r7, #24]
 800207c:	429a      	cmp	r2, r3
 800207e:	d305      	bcc.n	800208c <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8002080:	2301      	movs	r3, #1
 8002082:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	2200      	movs	r2, #0
 8002088:	601a      	str	r2, [r3, #0]
 800208a:	e015      	b.n	80020b8 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	697a      	ldr	r2, [r7, #20]
 8002092:	429a      	cmp	r2, r3
 8002094:	d20b      	bcs.n	80020ae <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	681a      	ldr	r2, [r3, #0]
 800209a:	697b      	ldr	r3, [r7, #20]
 800209c:	1ad2      	subs	r2, r2, r3
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 80020a2:	6878      	ldr	r0, [r7, #4]
 80020a4:	f7ff ff98 	bl	8001fd8 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 80020a8:	2300      	movs	r3, #0
 80020aa:	61fb      	str	r3, [r7, #28]
 80020ac:	e004      	b.n	80020b8 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	2200      	movs	r2, #0
 80020b2:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 80020b4:	2301      	movs	r3, #1
 80020b6:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 80020b8:	f000 ff9e 	bl	8002ff8 <vPortExitCritical>

    return xReturn;
 80020bc:	69fb      	ldr	r3, [r7, #28]
}
 80020be:	4618      	mov	r0, r3
 80020c0:	3720      	adds	r7, #32
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}
 80020c6:	bf00      	nop
 80020c8:	200001a8 	.word	0x200001a8
 80020cc:	200001bc 	.word	0x200001bc

080020d0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80020d0:	b480      	push	{r7}
 80020d2:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 80020d4:	4b03      	ldr	r3, [pc, #12]	; (80020e4 <vTaskMissedYield+0x14>)
 80020d6:	2201      	movs	r2, #1
 80020d8:	601a      	str	r2, [r3, #0]
}
 80020da:	bf00      	nop
 80020dc:	46bd      	mov	sp, r7
 80020de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e2:	4770      	bx	lr
 80020e4:	200001b8 	.word	0x200001b8

080020e8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b082      	sub	sp, #8
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 80020f0:	f000 f852 	bl	8002198 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80020f4:	4b06      	ldr	r3, [pc, #24]	; (8002110 <prvIdleTask+0x28>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	2b01      	cmp	r3, #1
 80020fa:	d9f9      	bls.n	80020f0 <prvIdleTask+0x8>
                {
                    taskYIELD();
 80020fc:	4b05      	ldr	r3, [pc, #20]	; (8002114 <prvIdleTask+0x2c>)
 80020fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002102:	601a      	str	r2, [r3, #0]
 8002104:	f3bf 8f4f 	dsb	sy
 8002108:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 800210c:	e7f0      	b.n	80020f0 <prvIdleTask+0x8>
 800210e:	bf00      	nop
 8002110:	200000d0 	.word	0x200000d0
 8002114:	e000ed04 	.word	0xe000ed04

08002118 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b082      	sub	sp, #8
 800211c:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800211e:	2300      	movs	r3, #0
 8002120:	607b      	str	r3, [r7, #4]
 8002122:	e00c      	b.n	800213e <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002124:	687a      	ldr	r2, [r7, #4]
 8002126:	4613      	mov	r3, r2
 8002128:	009b      	lsls	r3, r3, #2
 800212a:	4413      	add	r3, r2
 800212c:	009b      	lsls	r3, r3, #2
 800212e:	4a12      	ldr	r2, [pc, #72]	; (8002178 <prvInitialiseTaskLists+0x60>)
 8002130:	4413      	add	r3, r2
 8002132:	4618      	mov	r0, r3
 8002134:	f7fe fd70 	bl	8000c18 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	3301      	adds	r3, #1
 800213c:	607b      	str	r3, [r7, #4]
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	2b04      	cmp	r3, #4
 8002142:	d9ef      	bls.n	8002124 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8002144:	480d      	ldr	r0, [pc, #52]	; (800217c <prvInitialiseTaskLists+0x64>)
 8002146:	f7fe fd67 	bl	8000c18 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 800214a:	480d      	ldr	r0, [pc, #52]	; (8002180 <prvInitialiseTaskLists+0x68>)
 800214c:	f7fe fd64 	bl	8000c18 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8002150:	480c      	ldr	r0, [pc, #48]	; (8002184 <prvInitialiseTaskLists+0x6c>)
 8002152:	f7fe fd61 	bl	8000c18 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8002156:	480c      	ldr	r0, [pc, #48]	; (8002188 <prvInitialiseTaskLists+0x70>)
 8002158:	f7fe fd5e 	bl	8000c18 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 800215c:	480b      	ldr	r0, [pc, #44]	; (800218c <prvInitialiseTaskLists+0x74>)
 800215e:	f7fe fd5b 	bl	8000c18 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8002162:	4b0b      	ldr	r3, [pc, #44]	; (8002190 <prvInitialiseTaskLists+0x78>)
 8002164:	4a05      	ldr	r2, [pc, #20]	; (800217c <prvInitialiseTaskLists+0x64>)
 8002166:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002168:	4b0a      	ldr	r3, [pc, #40]	; (8002194 <prvInitialiseTaskLists+0x7c>)
 800216a:	4a05      	ldr	r2, [pc, #20]	; (8002180 <prvInitialiseTaskLists+0x68>)
 800216c:	601a      	str	r2, [r3, #0]
}
 800216e:	bf00      	nop
 8002170:	3708      	adds	r7, #8
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}
 8002176:	bf00      	nop
 8002178:	200000d0 	.word	0x200000d0
 800217c:	20000134 	.word	0x20000134
 8002180:	20000148 	.word	0x20000148
 8002184:	20000164 	.word	0x20000164
 8002188:	20000178 	.word	0x20000178
 800218c:	20000190 	.word	0x20000190
 8002190:	2000015c 	.word	0x2000015c
 8002194:	20000160 	.word	0x20000160

08002198 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b082      	sub	sp, #8
 800219c:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800219e:	e019      	b.n	80021d4 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 80021a0:	f000 fefa 	bl	8002f98 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80021a4:	4b10      	ldr	r3, [pc, #64]	; (80021e8 <prvCheckTasksWaitingTermination+0x50>)
 80021a6:	68db      	ldr	r3, [r3, #12]
 80021a8:	68db      	ldr	r3, [r3, #12]
 80021aa:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	3304      	adds	r3, #4
 80021b0:	4618      	mov	r0, r3
 80021b2:	f7fe fdbb 	bl	8000d2c <uxListRemove>
                    --uxCurrentNumberOfTasks;
 80021b6:	4b0d      	ldr	r3, [pc, #52]	; (80021ec <prvCheckTasksWaitingTermination+0x54>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	3b01      	subs	r3, #1
 80021bc:	4a0b      	ldr	r2, [pc, #44]	; (80021ec <prvCheckTasksWaitingTermination+0x54>)
 80021be:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 80021c0:	4b0b      	ldr	r3, [pc, #44]	; (80021f0 <prvCheckTasksWaitingTermination+0x58>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	3b01      	subs	r3, #1
 80021c6:	4a0a      	ldr	r2, [pc, #40]	; (80021f0 <prvCheckTasksWaitingTermination+0x58>)
 80021c8:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 80021ca:	f000 ff15 	bl	8002ff8 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 80021ce:	6878      	ldr	r0, [r7, #4]
 80021d0:	f000 f810 	bl	80021f4 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80021d4:	4b06      	ldr	r3, [pc, #24]	; (80021f0 <prvCheckTasksWaitingTermination+0x58>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d1e1      	bne.n	80021a0 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 80021dc:	bf00      	nop
 80021de:	bf00      	nop
 80021e0:	3708      	adds	r7, #8
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd80      	pop	{r7, pc}
 80021e6:	bf00      	nop
 80021e8:	20000178 	.word	0x20000178
 80021ec:	200001a4 	.word	0x200001a4
 80021f0:	2000018c 	.word	0x2000018c

080021f4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b082      	sub	sp, #8
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002200:	4618      	mov	r0, r3
 8002202:	f001 f8cb 	bl	800339c <vPortFree>
                vPortFree( pxTCB );
 8002206:	6878      	ldr	r0, [r7, #4]
 8002208:	f001 f8c8 	bl	800339c <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 800220c:	bf00      	nop
 800220e:	3708      	adds	r7, #8
 8002210:	46bd      	mov	sp, r7
 8002212:	bd80      	pop	{r7, pc}

08002214 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002214:	b480      	push	{r7}
 8002216:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002218:	4b0a      	ldr	r3, [pc, #40]	; (8002244 <prvResetNextTaskUnblockTime+0x30>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d104      	bne.n	800222c <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8002222:	4b09      	ldr	r3, [pc, #36]	; (8002248 <prvResetNextTaskUnblockTime+0x34>)
 8002224:	f04f 32ff 	mov.w	r2, #4294967295
 8002228:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800222a:	e005      	b.n	8002238 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 800222c:	4b05      	ldr	r3, [pc, #20]	; (8002244 <prvResetNextTaskUnblockTime+0x30>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	68db      	ldr	r3, [r3, #12]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4a04      	ldr	r2, [pc, #16]	; (8002248 <prvResetNextTaskUnblockTime+0x34>)
 8002236:	6013      	str	r3, [r2, #0]
}
 8002238:	bf00      	nop
 800223a:	46bd      	mov	sp, r7
 800223c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002240:	4770      	bx	lr
 8002242:	bf00      	nop
 8002244:	2000015c 	.word	0x2000015c
 8002248:	200001c4 	.word	0x200001c4

0800224c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 800224c:	b480      	push	{r7}
 800224e:	b083      	sub	sp, #12
 8002250:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8002252:	4b0b      	ldr	r3, [pc, #44]	; (8002280 <xTaskGetSchedulerState+0x34>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	2b00      	cmp	r3, #0
 8002258:	d102      	bne.n	8002260 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 800225a:	2301      	movs	r3, #1
 800225c:	607b      	str	r3, [r7, #4]
 800225e:	e008      	b.n	8002272 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002260:	4b08      	ldr	r3, [pc, #32]	; (8002284 <xTaskGetSchedulerState+0x38>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	2b00      	cmp	r3, #0
 8002266:	d102      	bne.n	800226e <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8002268:	2302      	movs	r3, #2
 800226a:	607b      	str	r3, [r7, #4]
 800226c:	e001      	b.n	8002272 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 800226e:	2300      	movs	r3, #0
 8002270:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8002272:	687b      	ldr	r3, [r7, #4]
    }
 8002274:	4618      	mov	r0, r3
 8002276:	370c      	adds	r7, #12
 8002278:	46bd      	mov	sp, r7
 800227a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227e:	4770      	bx	lr
 8002280:	200001b0 	.word	0x200001b0
 8002284:	200001cc 	.word	0x200001cc

08002288 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8002288:	b580      	push	{r7, lr}
 800228a:	b086      	sub	sp, #24
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8002294:	2300      	movs	r3, #0
 8002296:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2b00      	cmp	r3, #0
 800229c:	d063      	beq.n	8002366 <xTaskPriorityDisinherit+0xde>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 800229e:	4b34      	ldr	r3, [pc, #208]	; (8002370 <xTaskPriorityDisinherit+0xe8>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	693a      	ldr	r2, [r7, #16]
 80022a4:	429a      	cmp	r2, r3
 80022a6:	d00a      	beq.n	80022be <xTaskPriorityDisinherit+0x36>
        __asm volatile
 80022a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022ac:	f383 8811 	msr	BASEPRI, r3
 80022b0:	f3bf 8f6f 	isb	sy
 80022b4:	f3bf 8f4f 	dsb	sy
 80022b8:	60fb      	str	r3, [r7, #12]
    }
 80022ba:	bf00      	nop
 80022bc:	e7fe      	b.n	80022bc <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 80022be:	693b      	ldr	r3, [r7, #16]
 80022c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d10a      	bne.n	80022dc <xTaskPriorityDisinherit+0x54>
        __asm volatile
 80022c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022ca:	f383 8811 	msr	BASEPRI, r3
 80022ce:	f3bf 8f6f 	isb	sy
 80022d2:	f3bf 8f4f 	dsb	sy
 80022d6:	60bb      	str	r3, [r7, #8]
    }
 80022d8:	bf00      	nop
 80022da:	e7fe      	b.n	80022da <xTaskPriorityDisinherit+0x52>
            ( pxTCB->uxMutexesHeld )--;
 80022dc:	693b      	ldr	r3, [r7, #16]
 80022de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022e0:	1e5a      	subs	r2, r3, #1
 80022e2:	693b      	ldr	r3, [r7, #16]
 80022e4:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80022e6:	693b      	ldr	r3, [r7, #16]
 80022e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022ea:	693b      	ldr	r3, [r7, #16]
 80022ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022ee:	429a      	cmp	r2, r3
 80022f0:	d039      	beq.n	8002366 <xTaskPriorityDisinherit+0xde>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80022f2:	693b      	ldr	r3, [r7, #16]
 80022f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d135      	bne.n	8002366 <xTaskPriorityDisinherit+0xde>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80022fa:	693b      	ldr	r3, [r7, #16]
 80022fc:	3304      	adds	r3, #4
 80022fe:	4618      	mov	r0, r3
 8002300:	f7fe fd14 	bl	8000d2c <uxListRemove>
 8002304:	4603      	mov	r3, r0
 8002306:	2b00      	cmp	r3, #0
 8002308:	d10a      	bne.n	8002320 <xTaskPriorityDisinherit+0x98>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800230a:	693b      	ldr	r3, [r7, #16]
 800230c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800230e:	2201      	movs	r2, #1
 8002310:	fa02 f303 	lsl.w	r3, r2, r3
 8002314:	43da      	mvns	r2, r3
 8002316:	4b17      	ldr	r3, [pc, #92]	; (8002374 <xTaskPriorityDisinherit+0xec>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4013      	ands	r3, r2
 800231c:	4a15      	ldr	r2, [pc, #84]	; (8002374 <xTaskPriorityDisinherit+0xec>)
 800231e:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8002320:	693b      	ldr	r3, [r7, #16]
 8002322:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002324:	693b      	ldr	r3, [r7, #16]
 8002326:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002328:	693b      	ldr	r3, [r7, #16]
 800232a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800232c:	f1c3 0205 	rsb	r2, r3, #5
 8002330:	693b      	ldr	r3, [r7, #16]
 8002332:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 8002334:	693b      	ldr	r3, [r7, #16]
 8002336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002338:	2201      	movs	r2, #1
 800233a:	409a      	lsls	r2, r3
 800233c:	4b0d      	ldr	r3, [pc, #52]	; (8002374 <xTaskPriorityDisinherit+0xec>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4313      	orrs	r3, r2
 8002342:	4a0c      	ldr	r2, [pc, #48]	; (8002374 <xTaskPriorityDisinherit+0xec>)
 8002344:	6013      	str	r3, [r2, #0]
 8002346:	693b      	ldr	r3, [r7, #16]
 8002348:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800234a:	4613      	mov	r3, r2
 800234c:	009b      	lsls	r3, r3, #2
 800234e:	4413      	add	r3, r2
 8002350:	009b      	lsls	r3, r3, #2
 8002352:	4a09      	ldr	r2, [pc, #36]	; (8002378 <xTaskPriorityDisinherit+0xf0>)
 8002354:	441a      	add	r2, r3
 8002356:	693b      	ldr	r3, [r7, #16]
 8002358:	3304      	adds	r3, #4
 800235a:	4619      	mov	r1, r3
 800235c:	4610      	mov	r0, r2
 800235e:	f7fe fc88 	bl	8000c72 <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8002362:	2301      	movs	r3, #1
 8002364:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8002366:	697b      	ldr	r3, [r7, #20]
    }
 8002368:	4618      	mov	r0, r3
 800236a:	3718      	adds	r7, #24
 800236c:	46bd      	mov	sp, r7
 800236e:	bd80      	pop	{r7, pc}
 8002370:	200000cc 	.word	0x200000cc
 8002374:	200001ac 	.word	0x200001ac
 8002378:	200000d0 	.word	0x200000d0

0800237c <ulTaskGenericNotifyTake>:
#if ( configUSE_TASK_NOTIFICATIONS == 1 )

    uint32_t ulTaskGenericNotifyTake( UBaseType_t uxIndexToWait,
                                      BaseType_t xClearCountOnExit,
                                      TickType_t xTicksToWait )
    {
 800237c:	b580      	push	{r7, lr}
 800237e:	b086      	sub	sp, #24
 8002380:	af00      	add	r7, sp, #0
 8002382:	60f8      	str	r0, [r7, #12]
 8002384:	60b9      	str	r1, [r7, #8]
 8002386:	607a      	str	r2, [r7, #4]
        uint32_t ulReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d00a      	beq.n	80023a4 <ulTaskGenericNotifyTake+0x28>
        __asm volatile
 800238e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002392:	f383 8811 	msr	BASEPRI, r3
 8002396:	f3bf 8f6f 	isb	sy
 800239a:	f3bf 8f4f 	dsb	sy
 800239e:	613b      	str	r3, [r7, #16]
    }
 80023a0:	bf00      	nop
 80023a2:	e7fe      	b.n	80023a2 <ulTaskGenericNotifyTake+0x26>

        taskENTER_CRITICAL();
 80023a4:	f000 fdf8 	bl	8002f98 <vPortEnterCritical>
        {
            /* Only block if the notification count is not already non-zero. */
            if( pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] == 0UL )
 80023a8:	4b26      	ldr	r3, [pc, #152]	; (8002444 <ulTaskGenericNotifyTake+0xc8>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	68fa      	ldr	r2, [r7, #12]
 80023ae:	3214      	adds	r2, #20
 80023b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d115      	bne.n	80023e4 <ulTaskGenericNotifyTake+0x68>
            {
                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 80023b8:	4b22      	ldr	r3, [pc, #136]	; (8002444 <ulTaskGenericNotifyTake+0xc8>)
 80023ba:	681a      	ldr	r2, [r3, #0]
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	4413      	add	r3, r2
 80023c0:	3354      	adds	r3, #84	; 0x54
 80023c2:	2201      	movs	r2, #1
 80023c4:	701a      	strb	r2, [r3, #0]

                if( xTicksToWait > ( TickType_t ) 0 )
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d00b      	beq.n	80023e4 <ulTaskGenericNotifyTake+0x68>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80023cc:	2101      	movs	r1, #1
 80023ce:	6878      	ldr	r0, [r7, #4]
 80023d0:	f000 f93e 	bl	8002650 <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
 80023d4:	4b1c      	ldr	r3, [pc, #112]	; (8002448 <ulTaskGenericNotifyTake+0xcc>)
 80023d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80023da:	601a      	str	r2, [r3, #0]
 80023dc:	f3bf 8f4f 	dsb	sy
 80023e0:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80023e4:	f000 fe08 	bl	8002ff8 <vPortExitCritical>

        taskENTER_CRITICAL();
 80023e8:	f000 fdd6 	bl	8002f98 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_TAKE( uxIndexToWait );
            ulReturn = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 80023ec:	4b15      	ldr	r3, [pc, #84]	; (8002444 <ulTaskGenericNotifyTake+0xc8>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	68fa      	ldr	r2, [r7, #12]
 80023f2:	3214      	adds	r2, #20
 80023f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023f8:	617b      	str	r3, [r7, #20]

            if( ulReturn != 0UL )
 80023fa:	697b      	ldr	r3, [r7, #20]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d012      	beq.n	8002426 <ulTaskGenericNotifyTake+0xaa>
            {
                if( xClearCountOnExit != pdFALSE )
 8002400:	68bb      	ldr	r3, [r7, #8]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d007      	beq.n	8002416 <ulTaskGenericNotifyTake+0x9a>
                {
                    pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] = 0UL;
 8002406:	4b0f      	ldr	r3, [pc, #60]	; (8002444 <ulTaskGenericNotifyTake+0xc8>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	68fa      	ldr	r2, [r7, #12]
 800240c:	3214      	adds	r2, #20
 800240e:	2100      	movs	r1, #0
 8002410:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8002414:	e007      	b.n	8002426 <ulTaskGenericNotifyTake+0xaa>
                }
                else
                {
                    pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] = ulReturn - ( uint32_t ) 1;
 8002416:	4b0b      	ldr	r3, [pc, #44]	; (8002444 <ulTaskGenericNotifyTake+0xc8>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	697a      	ldr	r2, [r7, #20]
 800241c:	1e51      	subs	r1, r2, #1
 800241e:	68fa      	ldr	r2, [r7, #12]
 8002420:	3214      	adds	r2, #20
 8002422:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 8002426:	4b07      	ldr	r3, [pc, #28]	; (8002444 <ulTaskGenericNotifyTake+0xc8>)
 8002428:	681a      	ldr	r2, [r3, #0]
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	4413      	add	r3, r2
 800242e:	3354      	adds	r3, #84	; 0x54
 8002430:	2200      	movs	r2, #0
 8002432:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 8002434:	f000 fde0 	bl	8002ff8 <vPortExitCritical>

        return ulReturn;
 8002438:	697b      	ldr	r3, [r7, #20]
    }
 800243a:	4618      	mov	r0, r3
 800243c:	3718      	adds	r7, #24
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}
 8002442:	bf00      	nop
 8002444:	200000cc 	.word	0x200000cc
 8002448:	e000ed04 	.word	0xe000ed04

0800244c <xTaskGenericNotifyFromISR>:
                                          UBaseType_t uxIndexToNotify,
                                          uint32_t ulValue,
                                          eNotifyAction eAction,
                                          uint32_t * pulPreviousNotificationValue,
                                          BaseType_t * pxHigherPriorityTaskWoken )
    {
 800244c:	b580      	push	{r7, lr}
 800244e:	b090      	sub	sp, #64	; 0x40
 8002450:	af00      	add	r7, sp, #0
 8002452:	60f8      	str	r0, [r7, #12]
 8002454:	60b9      	str	r1, [r7, #8]
 8002456:	607a      	str	r2, [r7, #4]
 8002458:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        uint8_t ucOriginalNotifyState;
        BaseType_t xReturn = pdPASS;
 800245a:	2301      	movs	r3, #1
 800245c:	63fb      	str	r3, [r7, #60]	; 0x3c
        UBaseType_t uxSavedInterruptStatus;

        configASSERT( xTaskToNotify );
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	2b00      	cmp	r3, #0
 8002462:	d10a      	bne.n	800247a <xTaskGenericNotifyFromISR+0x2e>
        __asm volatile
 8002464:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002468:	f383 8811 	msr	BASEPRI, r3
 800246c:	f3bf 8f6f 	isb	sy
 8002470:	f3bf 8f4f 	dsb	sy
 8002474:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
 8002476:	bf00      	nop
 8002478:	e7fe      	b.n	8002478 <xTaskGenericNotifyFromISR+0x2c>
        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 800247a:	68bb      	ldr	r3, [r7, #8]
 800247c:	2b00      	cmp	r3, #0
 800247e:	d00a      	beq.n	8002496 <xTaskGenericNotifyFromISR+0x4a>
        __asm volatile
 8002480:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002484:	f383 8811 	msr	BASEPRI, r3
 8002488:	f3bf 8f6f 	isb	sy
 800248c:	f3bf 8f4f 	dsb	sy
 8002490:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8002492:	bf00      	nop
 8002494:	e7fe      	b.n	8002494 <xTaskGenericNotifyFromISR+0x48>
         * below the maximum system call interrupt priority.  FreeRTOS maintains a
         * separate interrupt safe API to ensure interrupt entry is as fast and as
         * simple as possible.  More information (albeit Cortex-M specific) is
         * provided on the following link:
         * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002496:	f000 fe61 	bl	800315c <vPortValidateInterruptPriority>

        pxTCB = xTaskToNotify;
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	63bb      	str	r3, [r7, #56]	; 0x38
        __asm volatile
 800249e:	f3ef 8211 	mrs	r2, BASEPRI
 80024a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024a6:	f383 8811 	msr	BASEPRI, r3
 80024aa:	f3bf 8f6f 	isb	sy
 80024ae:	f3bf 8f4f 	dsb	sy
 80024b2:	627a      	str	r2, [r7, #36]	; 0x24
 80024b4:	623b      	str	r3, [r7, #32]
        return ulOriginalBASEPRI;
 80024b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80024b8:	637b      	str	r3, [r7, #52]	; 0x34
        {
            if( pulPreviousNotificationValue != NULL )
 80024ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d006      	beq.n	80024ce <xTaskGenericNotifyFromISR+0x82>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 80024c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024c2:	68ba      	ldr	r2, [r7, #8]
 80024c4:	3214      	adds	r2, #20
 80024c6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80024ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80024cc:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 80024ce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80024d0:	68bb      	ldr	r3, [r7, #8]
 80024d2:	4413      	add	r3, r2
 80024d4:	3354      	adds	r3, #84	; 0x54
 80024d6:	781b      	ldrb	r3, [r3, #0]
 80024d8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 80024dc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80024de:	68bb      	ldr	r3, [r7, #8]
 80024e0:	4413      	add	r3, r2
 80024e2:	3354      	adds	r3, #84	; 0x54
 80024e4:	2202      	movs	r2, #2
 80024e6:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 80024e8:	78fb      	ldrb	r3, [r7, #3]
 80024ea:	2b04      	cmp	r3, #4
 80024ec:	d83b      	bhi.n	8002566 <xTaskGenericNotifyFromISR+0x11a>
 80024ee:	a201      	add	r2, pc, #4	; (adr r2, 80024f4 <xTaskGenericNotifyFromISR+0xa8>)
 80024f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024f4:	08002585 	.word	0x08002585
 80024f8:	08002509 	.word	0x08002509
 80024fc:	08002525 	.word	0x08002525
 8002500:	0800253d 	.word	0x0800253d
 8002504:	0800254b 	.word	0x0800254b
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8002508:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800250a:	68ba      	ldr	r2, [r7, #8]
 800250c:	3214      	adds	r2, #20
 800250e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	ea42 0103 	orr.w	r1, r2, r3
 8002518:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800251a:	68ba      	ldr	r2, [r7, #8]
 800251c:	3214      	adds	r2, #20
 800251e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8002522:	e032      	b.n	800258a <xTaskGenericNotifyFromISR+0x13e>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8002524:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002526:	68ba      	ldr	r2, [r7, #8]
 8002528:	3214      	adds	r2, #20
 800252a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800252e:	1c59      	adds	r1, r3, #1
 8002530:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002532:	68ba      	ldr	r2, [r7, #8]
 8002534:	3214      	adds	r2, #20
 8002536:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 800253a:	e026      	b.n	800258a <xTaskGenericNotifyFromISR+0x13e>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 800253c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800253e:	68ba      	ldr	r2, [r7, #8]
 8002540:	3214      	adds	r2, #20
 8002542:	6879      	ldr	r1, [r7, #4]
 8002544:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8002548:	e01f      	b.n	800258a <xTaskGenericNotifyFromISR+0x13e>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800254a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800254e:	2b02      	cmp	r3, #2
 8002550:	d006      	beq.n	8002560 <xTaskGenericNotifyFromISR+0x114>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8002552:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002554:	68ba      	ldr	r2, [r7, #8]
 8002556:	3214      	adds	r2, #20
 8002558:	6879      	ldr	r1, [r7, #4]
 800255a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 800255e:	e014      	b.n	800258a <xTaskGenericNotifyFromISR+0x13e>
                        xReturn = pdFAIL;
 8002560:	2300      	movs	r3, #0
 8002562:	63fb      	str	r3, [r7, #60]	; 0x3c
                    break;
 8002564:	e011      	b.n	800258a <xTaskGenericNotifyFromISR+0x13e>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 8002566:	4b33      	ldr	r3, [pc, #204]	; (8002634 <xTaskGenericNotifyFromISR+0x1e8>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d00c      	beq.n	8002588 <xTaskGenericNotifyFromISR+0x13c>
        __asm volatile
 800256e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002572:	f383 8811 	msr	BASEPRI, r3
 8002576:	f3bf 8f6f 	isb	sy
 800257a:	f3bf 8f4f 	dsb	sy
 800257e:	61fb      	str	r3, [r7, #28]
    }
 8002580:	bf00      	nop
 8002582:	e7fe      	b.n	8002582 <xTaskGenericNotifyFromISR+0x136>
                    break;
 8002584:	bf00      	nop
 8002586:	e000      	b.n	800258a <xTaskGenericNotifyFromISR+0x13e>
                    break;
 8002588:	bf00      	nop

            traceTASK_NOTIFY_FROM_ISR( uxIndexToNotify );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800258a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800258e:	2b01      	cmp	r3, #1
 8002590:	d145      	bne.n	800261e <xTaskGenericNotifyFromISR+0x1d2>
            {
                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8002592:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002594:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002596:	2b00      	cmp	r3, #0
 8002598:	d00a      	beq.n	80025b0 <xTaskGenericNotifyFromISR+0x164>
        __asm volatile
 800259a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800259e:	f383 8811 	msr	BASEPRI, r3
 80025a2:	f3bf 8f6f 	isb	sy
 80025a6:	f3bf 8f4f 	dsb	sy
 80025aa:	61bb      	str	r3, [r7, #24]
    }
 80025ac:	bf00      	nop
 80025ae:	e7fe      	b.n	80025ae <xTaskGenericNotifyFromISR+0x162>

                if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80025b0:	4b21      	ldr	r3, [pc, #132]	; (8002638 <xTaskGenericNotifyFromISR+0x1ec>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d11c      	bne.n	80025f2 <xTaskGenericNotifyFromISR+0x1a6>
                {
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80025b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025ba:	3304      	adds	r3, #4
 80025bc:	4618      	mov	r0, r3
 80025be:	f7fe fbb5 	bl	8000d2c <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 80025c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025c6:	2201      	movs	r2, #1
 80025c8:	409a      	lsls	r2, r3
 80025ca:	4b1c      	ldr	r3, [pc, #112]	; (800263c <xTaskGenericNotifyFromISR+0x1f0>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4313      	orrs	r3, r2
 80025d0:	4a1a      	ldr	r2, [pc, #104]	; (800263c <xTaskGenericNotifyFromISR+0x1f0>)
 80025d2:	6013      	str	r3, [r2, #0]
 80025d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025d8:	4613      	mov	r3, r2
 80025da:	009b      	lsls	r3, r3, #2
 80025dc:	4413      	add	r3, r2
 80025de:	009b      	lsls	r3, r3, #2
 80025e0:	4a17      	ldr	r2, [pc, #92]	; (8002640 <xTaskGenericNotifyFromISR+0x1f4>)
 80025e2:	441a      	add	r2, r3
 80025e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025e6:	3304      	adds	r3, #4
 80025e8:	4619      	mov	r1, r3
 80025ea:	4610      	mov	r0, r2
 80025ec:	f7fe fb41 	bl	8000c72 <vListInsertEnd>
 80025f0:	e005      	b.n	80025fe <xTaskGenericNotifyFromISR+0x1b2>
                }
                else
                {
                    /* The delayed and ready lists cannot be accessed, so hold
                     * this task pending until the scheduler is resumed. */
                    vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 80025f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025f4:	3318      	adds	r3, #24
 80025f6:	4619      	mov	r1, r3
 80025f8:	4812      	ldr	r0, [pc, #72]	; (8002644 <xTaskGenericNotifyFromISR+0x1f8>)
 80025fa:	f7fe fb3a 	bl	8000c72 <vListInsertEnd>
                }

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80025fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002600:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002602:	4b11      	ldr	r3, [pc, #68]	; (8002648 <xTaskGenericNotifyFromISR+0x1fc>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002608:	429a      	cmp	r2, r3
 800260a:	d908      	bls.n	800261e <xTaskGenericNotifyFromISR+0x1d2>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    if( pxHigherPriorityTaskWoken != NULL )
 800260c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800260e:	2b00      	cmp	r3, #0
 8002610:	d002      	beq.n	8002618 <xTaskGenericNotifyFromISR+0x1cc>
                    {
                        *pxHigherPriorityTaskWoken = pdTRUE;
 8002612:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002614:	2201      	movs	r2, #1
 8002616:	601a      	str	r2, [r3, #0]
                    }

                    /* Mark that a yield is pending in case the user is not
                     * using the "xHigherPriorityTaskWoken" parameter to an ISR
                     * safe FreeRTOS function. */
                    xYieldPending = pdTRUE;
 8002618:	4b0c      	ldr	r3, [pc, #48]	; (800264c <xTaskGenericNotifyFromISR+0x200>)
 800261a:	2201      	movs	r2, #1
 800261c:	601a      	str	r2, [r3, #0]
 800261e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002620:	617b      	str	r3, [r7, #20]
        __asm volatile
 8002622:	697b      	ldr	r3, [r7, #20]
 8002624:	f383 8811 	msr	BASEPRI, r3
    }
 8002628:	bf00      	nop
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

        return xReturn;
 800262a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    }
 800262c:	4618      	mov	r0, r3
 800262e:	3740      	adds	r7, #64	; 0x40
 8002630:	46bd      	mov	sp, r7
 8002632:	bd80      	pop	{r7, pc}
 8002634:	200001a8 	.word	0x200001a8
 8002638:	200001cc 	.word	0x200001cc
 800263c:	200001ac 	.word	0x200001ac
 8002640:	200000d0 	.word	0x200000d0
 8002644:	20000164 	.word	0x20000164
 8002648:	200000cc 	.word	0x200000cc
 800264c:	200001b8 	.word	0x200001b8

08002650 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b084      	sub	sp, #16
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
 8002658:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 800265a:	4b29      	ldr	r3, [pc, #164]	; (8002700 <prvAddCurrentTaskToDelayedList+0xb0>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002660:	4b28      	ldr	r3, [pc, #160]	; (8002704 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	3304      	adds	r3, #4
 8002666:	4618      	mov	r0, r3
 8002668:	f7fe fb60 	bl	8000d2c <uxListRemove>
 800266c:	4603      	mov	r3, r0
 800266e:	2b00      	cmp	r3, #0
 8002670:	d10b      	bne.n	800268a <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8002672:	4b24      	ldr	r3, [pc, #144]	; (8002704 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002678:	2201      	movs	r2, #1
 800267a:	fa02 f303 	lsl.w	r3, r2, r3
 800267e:	43da      	mvns	r2, r3
 8002680:	4b21      	ldr	r3, [pc, #132]	; (8002708 <prvAddCurrentTaskToDelayedList+0xb8>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4013      	ands	r3, r2
 8002686:	4a20      	ldr	r2, [pc, #128]	; (8002708 <prvAddCurrentTaskToDelayedList+0xb8>)
 8002688:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002690:	d10a      	bne.n	80026a8 <prvAddCurrentTaskToDelayedList+0x58>
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d007      	beq.n	80026a8 <prvAddCurrentTaskToDelayedList+0x58>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002698:	4b1a      	ldr	r3, [pc, #104]	; (8002704 <prvAddCurrentTaskToDelayedList+0xb4>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	3304      	adds	r3, #4
 800269e:	4619      	mov	r1, r3
 80026a0:	481a      	ldr	r0, [pc, #104]	; (800270c <prvAddCurrentTaskToDelayedList+0xbc>)
 80026a2:	f7fe fae6 	bl	8000c72 <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 80026a6:	e026      	b.n	80026f6 <prvAddCurrentTaskToDelayedList+0xa6>
                xTimeToWake = xConstTickCount + xTicksToWait;
 80026a8:	68fa      	ldr	r2, [r7, #12]
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	4413      	add	r3, r2
 80026ae:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80026b0:	4b14      	ldr	r3, [pc, #80]	; (8002704 <prvAddCurrentTaskToDelayedList+0xb4>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	68ba      	ldr	r2, [r7, #8]
 80026b6:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 80026b8:	68ba      	ldr	r2, [r7, #8]
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	429a      	cmp	r2, r3
 80026be:	d209      	bcs.n	80026d4 <prvAddCurrentTaskToDelayedList+0x84>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80026c0:	4b13      	ldr	r3, [pc, #76]	; (8002710 <prvAddCurrentTaskToDelayedList+0xc0>)
 80026c2:	681a      	ldr	r2, [r3, #0]
 80026c4:	4b0f      	ldr	r3, [pc, #60]	; (8002704 <prvAddCurrentTaskToDelayedList+0xb4>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	3304      	adds	r3, #4
 80026ca:	4619      	mov	r1, r3
 80026cc:	4610      	mov	r0, r2
 80026ce:	f7fe faf4 	bl	8000cba <vListInsert>
}
 80026d2:	e010      	b.n	80026f6 <prvAddCurrentTaskToDelayedList+0xa6>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80026d4:	4b0f      	ldr	r3, [pc, #60]	; (8002714 <prvAddCurrentTaskToDelayedList+0xc4>)
 80026d6:	681a      	ldr	r2, [r3, #0]
 80026d8:	4b0a      	ldr	r3, [pc, #40]	; (8002704 <prvAddCurrentTaskToDelayedList+0xb4>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	3304      	adds	r3, #4
 80026de:	4619      	mov	r1, r3
 80026e0:	4610      	mov	r0, r2
 80026e2:	f7fe faea 	bl	8000cba <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 80026e6:	4b0c      	ldr	r3, [pc, #48]	; (8002718 <prvAddCurrentTaskToDelayedList+0xc8>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	68ba      	ldr	r2, [r7, #8]
 80026ec:	429a      	cmp	r2, r3
 80026ee:	d202      	bcs.n	80026f6 <prvAddCurrentTaskToDelayedList+0xa6>
                        xNextTaskUnblockTime = xTimeToWake;
 80026f0:	4a09      	ldr	r2, [pc, #36]	; (8002718 <prvAddCurrentTaskToDelayedList+0xc8>)
 80026f2:	68bb      	ldr	r3, [r7, #8]
 80026f4:	6013      	str	r3, [r2, #0]
}
 80026f6:	bf00      	nop
 80026f8:	3710      	adds	r7, #16
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd80      	pop	{r7, pc}
 80026fe:	bf00      	nop
 8002700:	200001a8 	.word	0x200001a8
 8002704:	200000cc 	.word	0x200000cc
 8002708:	200001ac 	.word	0x200001ac
 800270c:	20000190 	.word	0x20000190
 8002710:	20000160 	.word	0x20000160
 8002714:	2000015c 	.word	0x2000015c
 8002718:	200001c4 	.word	0x200001c4

0800271c <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 800271c:	b580      	push	{r7, lr}
 800271e:	b084      	sub	sp, #16
 8002720:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8002722:	2300      	movs	r3, #0
 8002724:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8002726:	f000 fad5 	bl	8002cd4 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 800272a:	4b11      	ldr	r3, [pc, #68]	; (8002770 <xTimerCreateTimerTask+0x54>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d00b      	beq.n	800274a <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 8002732:	4b10      	ldr	r3, [pc, #64]	; (8002774 <xTimerCreateTimerTask+0x58>)
 8002734:	9301      	str	r3, [sp, #4]
 8002736:	2302      	movs	r3, #2
 8002738:	9300      	str	r3, [sp, #0]
 800273a:	2300      	movs	r3, #0
 800273c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002740:	490d      	ldr	r1, [pc, #52]	; (8002778 <xTimerCreateTimerTask+0x5c>)
 8002742:	480e      	ldr	r0, [pc, #56]	; (800277c <xTimerCreateTimerTask+0x60>)
 8002744:	f7fe fffc 	bl	8001740 <xTaskCreate>
 8002748:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d10a      	bne.n	8002766 <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8002750:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002754:	f383 8811 	msr	BASEPRI, r3
 8002758:	f3bf 8f6f 	isb	sy
 800275c:	f3bf 8f4f 	dsb	sy
 8002760:	603b      	str	r3, [r7, #0]
    }
 8002762:	bf00      	nop
 8002764:	e7fe      	b.n	8002764 <xTimerCreateTimerTask+0x48>
        return xReturn;
 8002766:	687b      	ldr	r3, [r7, #4]
    }
 8002768:	4618      	mov	r0, r3
 800276a:	3708      	adds	r7, #8
 800276c:	46bd      	mov	sp, r7
 800276e:	bd80      	pop	{r7, pc}
 8002770:	20000200 	.word	0x20000200
 8002774:	20000204 	.word	0x20000204
 8002778:	08009f74 	.word	0x08009f74
 800277c:	080028b5 	.word	0x080028b5

08002780 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 8002780:	b580      	push	{r7, lr}
 8002782:	b08a      	sub	sp, #40	; 0x28
 8002784:	af00      	add	r7, sp, #0
 8002786:	60f8      	str	r0, [r7, #12]
 8002788:	60b9      	str	r1, [r7, #8]
 800278a:	607a      	str	r2, [r7, #4]
 800278c:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 800278e:	2300      	movs	r3, #0
 8002790:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	2b00      	cmp	r3, #0
 8002796:	d10a      	bne.n	80027ae <xTimerGenericCommand+0x2e>
        __asm volatile
 8002798:	f04f 0350 	mov.w	r3, #80	; 0x50
 800279c:	f383 8811 	msr	BASEPRI, r3
 80027a0:	f3bf 8f6f 	isb	sy
 80027a4:	f3bf 8f4f 	dsb	sy
 80027a8:	623b      	str	r3, [r7, #32]
    }
 80027aa:	bf00      	nop
 80027ac:	e7fe      	b.n	80027ac <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 80027ae:	4b1a      	ldr	r3, [pc, #104]	; (8002818 <xTimerGenericCommand+0x98>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d02a      	beq.n	800280c <xTimerGenericCommand+0x8c>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 80027b6:	68bb      	ldr	r3, [r7, #8]
 80027b8:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80027c2:	68bb      	ldr	r3, [r7, #8]
 80027c4:	2b05      	cmp	r3, #5
 80027c6:	dc18      	bgt.n	80027fa <xTimerGenericCommand+0x7a>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80027c8:	f7ff fd40 	bl	800224c <xTaskGetSchedulerState>
 80027cc:	4603      	mov	r3, r0
 80027ce:	2b02      	cmp	r3, #2
 80027d0:	d109      	bne.n	80027e6 <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80027d2:	4b11      	ldr	r3, [pc, #68]	; (8002818 <xTimerGenericCommand+0x98>)
 80027d4:	6818      	ldr	r0, [r3, #0]
 80027d6:	f107 0114 	add.w	r1, r7, #20
 80027da:	2300      	movs	r3, #0
 80027dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80027de:	f7fe fbb9 	bl	8000f54 <xQueueGenericSend>
 80027e2:	6278      	str	r0, [r7, #36]	; 0x24
 80027e4:	e012      	b.n	800280c <xTimerGenericCommand+0x8c>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80027e6:	4b0c      	ldr	r3, [pc, #48]	; (8002818 <xTimerGenericCommand+0x98>)
 80027e8:	6818      	ldr	r0, [r3, #0]
 80027ea:	f107 0114 	add.w	r1, r7, #20
 80027ee:	2300      	movs	r3, #0
 80027f0:	2200      	movs	r2, #0
 80027f2:	f7fe fbaf 	bl	8000f54 <xQueueGenericSend>
 80027f6:	6278      	str	r0, [r7, #36]	; 0x24
 80027f8:	e008      	b.n	800280c <xTimerGenericCommand+0x8c>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80027fa:	4b07      	ldr	r3, [pc, #28]	; (8002818 <xTimerGenericCommand+0x98>)
 80027fc:	6818      	ldr	r0, [r3, #0]
 80027fe:	f107 0114 	add.w	r1, r7, #20
 8002802:	2300      	movs	r3, #0
 8002804:	683a      	ldr	r2, [r7, #0]
 8002806:	f7fe fca3 	bl	8001150 <xQueueGenericSendFromISR>
 800280a:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 800280c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 800280e:	4618      	mov	r0, r3
 8002810:	3728      	adds	r7, #40	; 0x28
 8002812:	46bd      	mov	sp, r7
 8002814:	bd80      	pop	{r7, pc}
 8002816:	bf00      	nop
 8002818:	20000200 	.word	0x20000200

0800281c <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 800281c:	b580      	push	{r7, lr}
 800281e:	b088      	sub	sp, #32
 8002820:	af02      	add	r7, sp, #8
 8002822:	6078      	str	r0, [r7, #4]
 8002824:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002826:	4b22      	ldr	r3, [pc, #136]	; (80028b0 <prvProcessExpiredTimer+0x94>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	68db      	ldr	r3, [r3, #12]
 800282c:	68db      	ldr	r3, [r3, #12]
 800282e:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002830:	697b      	ldr	r3, [r7, #20]
 8002832:	3304      	adds	r3, #4
 8002834:	4618      	mov	r0, r3
 8002836:	f7fe fa79 	bl	8000d2c <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800283a:	697b      	ldr	r3, [r7, #20]
 800283c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002840:	f003 0304 	and.w	r3, r3, #4
 8002844:	2b00      	cmp	r3, #0
 8002846:	d022      	beq.n	800288e <prvProcessExpiredTimer+0x72>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8002848:	697b      	ldr	r3, [r7, #20]
 800284a:	699a      	ldr	r2, [r3, #24]
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	18d1      	adds	r1, r2, r3
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	683a      	ldr	r2, [r7, #0]
 8002854:	6978      	ldr	r0, [r7, #20]
 8002856:	f000 f8d1 	bl	80029fc <prvInsertTimerInActiveList>
 800285a:	4603      	mov	r3, r0
 800285c:	2b00      	cmp	r3, #0
 800285e:	d01f      	beq.n	80028a0 <prvProcessExpiredTimer+0x84>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8002860:	2300      	movs	r3, #0
 8002862:	9300      	str	r3, [sp, #0]
 8002864:	2300      	movs	r3, #0
 8002866:	687a      	ldr	r2, [r7, #4]
 8002868:	2100      	movs	r1, #0
 800286a:	6978      	ldr	r0, [r7, #20]
 800286c:	f7ff ff88 	bl	8002780 <xTimerGenericCommand>
 8002870:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 8002872:	693b      	ldr	r3, [r7, #16]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d113      	bne.n	80028a0 <prvProcessExpiredTimer+0x84>
        __asm volatile
 8002878:	f04f 0350 	mov.w	r3, #80	; 0x50
 800287c:	f383 8811 	msr	BASEPRI, r3
 8002880:	f3bf 8f6f 	isb	sy
 8002884:	f3bf 8f4f 	dsb	sy
 8002888:	60fb      	str	r3, [r7, #12]
    }
 800288a:	bf00      	nop
 800288c:	e7fe      	b.n	800288c <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800288e:	697b      	ldr	r3, [r7, #20]
 8002890:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002894:	f023 0301 	bic.w	r3, r3, #1
 8002898:	b2da      	uxtb	r2, r3
 800289a:	697b      	ldr	r3, [r7, #20]
 800289c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80028a0:	697b      	ldr	r3, [r7, #20]
 80028a2:	6a1b      	ldr	r3, [r3, #32]
 80028a4:	6978      	ldr	r0, [r7, #20]
 80028a6:	4798      	blx	r3
    }
 80028a8:	bf00      	nop
 80028aa:	3718      	adds	r7, #24
 80028ac:	46bd      	mov	sp, r7
 80028ae:	bd80      	pop	{r7, pc}
 80028b0:	200001f8 	.word	0x200001f8

080028b4 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b084      	sub	sp, #16
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80028bc:	f107 0308 	add.w	r3, r7, #8
 80028c0:	4618      	mov	r0, r3
 80028c2:	f000 f857 	bl	8002974 <prvGetNextExpireTime>
 80028c6:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80028c8:	68bb      	ldr	r3, [r7, #8]
 80028ca:	4619      	mov	r1, r3
 80028cc:	68f8      	ldr	r0, [r7, #12]
 80028ce:	f000 f803 	bl	80028d8 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 80028d2:	f000 f8d5 	bl	8002a80 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80028d6:	e7f1      	b.n	80028bc <prvTimerTask+0x8>

080028d8 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 80028d8:	b580      	push	{r7, lr}
 80028da:	b084      	sub	sp, #16
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
 80028e0:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 80028e2:	f7ff f8f9 	bl	8001ad8 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80028e6:	f107 0308 	add.w	r3, r7, #8
 80028ea:	4618      	mov	r0, r3
 80028ec:	f000 f866 	bl	80029bc <prvSampleTimeNow>
 80028f0:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 80028f2:	68bb      	ldr	r3, [r7, #8]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d130      	bne.n	800295a <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d10a      	bne.n	8002914 <prvProcessTimerOrBlockTask+0x3c>
 80028fe:	687a      	ldr	r2, [r7, #4]
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	429a      	cmp	r2, r3
 8002904:	d806      	bhi.n	8002914 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8002906:	f7ff f8f5 	bl	8001af4 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800290a:	68f9      	ldr	r1, [r7, #12]
 800290c:	6878      	ldr	r0, [r7, #4]
 800290e:	f7ff ff85 	bl	800281c <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8002912:	e024      	b.n	800295e <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	2b00      	cmp	r3, #0
 8002918:	d008      	beq.n	800292c <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800291a:	4b13      	ldr	r3, [pc, #76]	; (8002968 <prvProcessTimerOrBlockTask+0x90>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d101      	bne.n	8002928 <prvProcessTimerOrBlockTask+0x50>
 8002924:	2301      	movs	r3, #1
 8002926:	e000      	b.n	800292a <prvProcessTimerOrBlockTask+0x52>
 8002928:	2300      	movs	r3, #0
 800292a:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800292c:	4b0f      	ldr	r3, [pc, #60]	; (800296c <prvProcessTimerOrBlockTask+0x94>)
 800292e:	6818      	ldr	r0, [r3, #0]
 8002930:	687a      	ldr	r2, [r7, #4]
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	1ad3      	subs	r3, r2, r3
 8002936:	683a      	ldr	r2, [r7, #0]
 8002938:	4619      	mov	r1, r3
 800293a:	f7fe fecd 	bl	80016d8 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 800293e:	f7ff f8d9 	bl	8001af4 <xTaskResumeAll>
 8002942:	4603      	mov	r3, r0
 8002944:	2b00      	cmp	r3, #0
 8002946:	d10a      	bne.n	800295e <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8002948:	4b09      	ldr	r3, [pc, #36]	; (8002970 <prvProcessTimerOrBlockTask+0x98>)
 800294a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800294e:	601a      	str	r2, [r3, #0]
 8002950:	f3bf 8f4f 	dsb	sy
 8002954:	f3bf 8f6f 	isb	sy
    }
 8002958:	e001      	b.n	800295e <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 800295a:	f7ff f8cb 	bl	8001af4 <xTaskResumeAll>
    }
 800295e:	bf00      	nop
 8002960:	3710      	adds	r7, #16
 8002962:	46bd      	mov	sp, r7
 8002964:	bd80      	pop	{r7, pc}
 8002966:	bf00      	nop
 8002968:	200001fc 	.word	0x200001fc
 800296c:	20000200 	.word	0x20000200
 8002970:	e000ed04 	.word	0xe000ed04

08002974 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8002974:	b480      	push	{r7}
 8002976:	b085      	sub	sp, #20
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800297c:	4b0e      	ldr	r3, [pc, #56]	; (80029b8 <prvGetNextExpireTime+0x44>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	2b00      	cmp	r3, #0
 8002984:	d101      	bne.n	800298a <prvGetNextExpireTime+0x16>
 8002986:	2201      	movs	r2, #1
 8002988:	e000      	b.n	800298c <prvGetNextExpireTime+0x18>
 800298a:	2200      	movs	r2, #0
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d105      	bne.n	80029a4 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002998:	4b07      	ldr	r3, [pc, #28]	; (80029b8 <prvGetNextExpireTime+0x44>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	68db      	ldr	r3, [r3, #12]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	60fb      	str	r3, [r7, #12]
 80029a2:	e001      	b.n	80029a8 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 80029a4:	2300      	movs	r3, #0
 80029a6:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 80029a8:	68fb      	ldr	r3, [r7, #12]
    }
 80029aa:	4618      	mov	r0, r3
 80029ac:	3714      	adds	r7, #20
 80029ae:	46bd      	mov	sp, r7
 80029b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b4:	4770      	bx	lr
 80029b6:	bf00      	nop
 80029b8:	200001f8 	.word	0x200001f8

080029bc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 80029bc:	b580      	push	{r7, lr}
 80029be:	b084      	sub	sp, #16
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 80029c4:	f7ff f932 	bl	8001c2c <xTaskGetTickCount>
 80029c8:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 80029ca:	4b0b      	ldr	r3, [pc, #44]	; (80029f8 <prvSampleTimeNow+0x3c>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	68fa      	ldr	r2, [r7, #12]
 80029d0:	429a      	cmp	r2, r3
 80029d2:	d205      	bcs.n	80029e0 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 80029d4:	f000 f91a 	bl	8002c0c <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2201      	movs	r2, #1
 80029dc:	601a      	str	r2, [r3, #0]
 80029de:	e002      	b.n	80029e6 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2200      	movs	r2, #0
 80029e4:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 80029e6:	4a04      	ldr	r2, [pc, #16]	; (80029f8 <prvSampleTimeNow+0x3c>)
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 80029ec:	68fb      	ldr	r3, [r7, #12]
    }
 80029ee:	4618      	mov	r0, r3
 80029f0:	3710      	adds	r7, #16
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bd80      	pop	{r7, pc}
 80029f6:	bf00      	nop
 80029f8:	20000208 	.word	0x20000208

080029fc <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b086      	sub	sp, #24
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	60f8      	str	r0, [r7, #12]
 8002a04:	60b9      	str	r1, [r7, #8]
 8002a06:	607a      	str	r2, [r7, #4]
 8002a08:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	68ba      	ldr	r2, [r7, #8]
 8002a12:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	68fa      	ldr	r2, [r7, #12]
 8002a18:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8002a1a:	68ba      	ldr	r2, [r7, #8]
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	429a      	cmp	r2, r3
 8002a20:	d812      	bhi.n	8002a48 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002a22:	687a      	ldr	r2, [r7, #4]
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	1ad2      	subs	r2, r2, r3
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	699b      	ldr	r3, [r3, #24]
 8002a2c:	429a      	cmp	r2, r3
 8002a2e:	d302      	bcc.n	8002a36 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8002a30:	2301      	movs	r3, #1
 8002a32:	617b      	str	r3, [r7, #20]
 8002a34:	e01b      	b.n	8002a6e <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8002a36:	4b10      	ldr	r3, [pc, #64]	; (8002a78 <prvInsertTimerInActiveList+0x7c>)
 8002a38:	681a      	ldr	r2, [r3, #0]
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	3304      	adds	r3, #4
 8002a3e:	4619      	mov	r1, r3
 8002a40:	4610      	mov	r0, r2
 8002a42:	f7fe f93a 	bl	8000cba <vListInsert>
 8002a46:	e012      	b.n	8002a6e <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8002a48:	687a      	ldr	r2, [r7, #4]
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	429a      	cmp	r2, r3
 8002a4e:	d206      	bcs.n	8002a5e <prvInsertTimerInActiveList+0x62>
 8002a50:	68ba      	ldr	r2, [r7, #8]
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	429a      	cmp	r2, r3
 8002a56:	d302      	bcc.n	8002a5e <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8002a58:	2301      	movs	r3, #1
 8002a5a:	617b      	str	r3, [r7, #20]
 8002a5c:	e007      	b.n	8002a6e <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8002a5e:	4b07      	ldr	r3, [pc, #28]	; (8002a7c <prvInsertTimerInActiveList+0x80>)
 8002a60:	681a      	ldr	r2, [r3, #0]
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	3304      	adds	r3, #4
 8002a66:	4619      	mov	r1, r3
 8002a68:	4610      	mov	r0, r2
 8002a6a:	f7fe f926 	bl	8000cba <vListInsert>
            }
        }

        return xProcessTimerNow;
 8002a6e:	697b      	ldr	r3, [r7, #20]
    }
 8002a70:	4618      	mov	r0, r3
 8002a72:	3718      	adds	r7, #24
 8002a74:	46bd      	mov	sp, r7
 8002a76:	bd80      	pop	{r7, pc}
 8002a78:	200001fc 	.word	0x200001fc
 8002a7c:	200001f8 	.word	0x200001f8

08002a80 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b08c      	sub	sp, #48	; 0x30
 8002a84:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8002a86:	e0ae      	b.n	8002be6 <prvProcessReceivedCommands+0x166>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8002a88:	68bb      	ldr	r3, [r7, #8]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	f2c0 80ab 	blt.w	8002be6 <prvProcessReceivedCommands+0x166>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8002a90:	693b      	ldr	r3, [r7, #16]
 8002a92:	627b      	str	r3, [r7, #36]	; 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8002a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a96:	695b      	ldr	r3, [r3, #20]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d004      	beq.n	8002aa6 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a9e:	3304      	adds	r3, #4
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	f7fe f943 	bl	8000d2c <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8002aa6:	1d3b      	adds	r3, r7, #4
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	f7ff ff87 	bl	80029bc <prvSampleTimeNow>
 8002aae:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 8002ab0:	68bb      	ldr	r3, [r7, #8]
 8002ab2:	2b09      	cmp	r3, #9
 8002ab4:	f200 8096 	bhi.w	8002be4 <prvProcessReceivedCommands+0x164>
 8002ab8:	a201      	add	r2, pc, #4	; (adr r2, 8002ac0 <prvProcessReceivedCommands+0x40>)
 8002aba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002abe:	bf00      	nop
 8002ac0:	08002ae9 	.word	0x08002ae9
 8002ac4:	08002ae9 	.word	0x08002ae9
 8002ac8:	08002ae9 	.word	0x08002ae9
 8002acc:	08002b5d 	.word	0x08002b5d
 8002ad0:	08002b71 	.word	0x08002b71
 8002ad4:	08002bbb 	.word	0x08002bbb
 8002ad8:	08002ae9 	.word	0x08002ae9
 8002adc:	08002ae9 	.word	0x08002ae9
 8002ae0:	08002b5d 	.word	0x08002b5d
 8002ae4:	08002b71 	.word	0x08002b71
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8002ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002aee:	f043 0301 	orr.w	r3, r3, #1
 8002af2:	b2da      	uxtb	r2, r3
 8002af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002af6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8002afa:	68fa      	ldr	r2, [r7, #12]
 8002afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002afe:	699b      	ldr	r3, [r3, #24]
 8002b00:	18d1      	adds	r1, r2, r3
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	6a3a      	ldr	r2, [r7, #32]
 8002b06:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002b08:	f7ff ff78 	bl	80029fc <prvInsertTimerInActiveList>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d069      	beq.n	8002be6 <prvProcessReceivedCommands+0x166>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b14:	6a1b      	ldr	r3, [r3, #32]
 8002b16:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002b18:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8002b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b1c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002b20:	f003 0304 	and.w	r3, r3, #4
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d05e      	beq.n	8002be6 <prvProcessReceivedCommands+0x166>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8002b28:	68fa      	ldr	r2, [r7, #12]
 8002b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b2c:	699b      	ldr	r3, [r3, #24]
 8002b2e:	441a      	add	r2, r3
 8002b30:	2300      	movs	r3, #0
 8002b32:	9300      	str	r3, [sp, #0]
 8002b34:	2300      	movs	r3, #0
 8002b36:	2100      	movs	r1, #0
 8002b38:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002b3a:	f7ff fe21 	bl	8002780 <xTimerGenericCommand>
 8002b3e:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 8002b40:	69fb      	ldr	r3, [r7, #28]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d14f      	bne.n	8002be6 <prvProcessReceivedCommands+0x166>
        __asm volatile
 8002b46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b4a:	f383 8811 	msr	BASEPRI, r3
 8002b4e:	f3bf 8f6f 	isb	sy
 8002b52:	f3bf 8f4f 	dsb	sy
 8002b56:	61bb      	str	r3, [r7, #24]
    }
 8002b58:	bf00      	nop
 8002b5a:	e7fe      	b.n	8002b5a <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8002b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b5e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002b62:	f023 0301 	bic.w	r3, r3, #1
 8002b66:	b2da      	uxtb	r2, r3
 8002b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b6a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8002b6e:	e03a      	b.n	8002be6 <prvProcessReceivedCommands+0x166>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8002b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b72:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002b76:	f043 0301 	orr.w	r3, r3, #1
 8002b7a:	b2da      	uxtb	r2, r3
 8002b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b7e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8002b82:	68fa      	ldr	r2, [r7, #12]
 8002b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b86:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8002b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b8a:	699b      	ldr	r3, [r3, #24]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d10a      	bne.n	8002ba6 <prvProcessReceivedCommands+0x126>
        __asm volatile
 8002b90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b94:	f383 8811 	msr	BASEPRI, r3
 8002b98:	f3bf 8f6f 	isb	sy
 8002b9c:	f3bf 8f4f 	dsb	sy
 8002ba0:	617b      	str	r3, [r7, #20]
    }
 8002ba2:	bf00      	nop
 8002ba4:	e7fe      	b.n	8002ba4 <prvProcessReceivedCommands+0x124>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8002ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ba8:	699a      	ldr	r2, [r3, #24]
 8002baa:	6a3b      	ldr	r3, [r7, #32]
 8002bac:	18d1      	adds	r1, r2, r3
 8002bae:	6a3b      	ldr	r3, [r7, #32]
 8002bb0:	6a3a      	ldr	r2, [r7, #32]
 8002bb2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002bb4:	f7ff ff22 	bl	80029fc <prvInsertTimerInActiveList>
                        break;
 8002bb8:	e015      	b.n	8002be6 <prvProcessReceivedCommands+0x166>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8002bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bbc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002bc0:	f003 0302 	and.w	r3, r3, #2
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d103      	bne.n	8002bd0 <prvProcessReceivedCommands+0x150>
                                {
                                    vPortFree( pxTimer );
 8002bc8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002bca:	f000 fbe7 	bl	800339c <vPortFree>
 8002bce:	e00a      	b.n	8002be6 <prvProcessReceivedCommands+0x166>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8002bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bd2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002bd6:	f023 0301 	bic.w	r3, r3, #1
 8002bda:	b2da      	uxtb	r2, r3
 8002bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bde:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8002be2:	e000      	b.n	8002be6 <prvProcessReceivedCommands+0x166>

                    default:
                        /* Don't expect to get here. */
                        break;
 8002be4:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8002be6:	4b08      	ldr	r3, [pc, #32]	; (8002c08 <prvProcessReceivedCommands+0x188>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f107 0108 	add.w	r1, r7, #8
 8002bee:	2200      	movs	r2, #0
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	f7fe fb57 	bl	80012a4 <xQueueReceive>
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	f47f af45 	bne.w	8002a88 <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 8002bfe:	bf00      	nop
 8002c00:	bf00      	nop
 8002c02:	3728      	adds	r7, #40	; 0x28
 8002c04:	46bd      	mov	sp, r7
 8002c06:	bd80      	pop	{r7, pc}
 8002c08:	20000200 	.word	0x20000200

08002c0c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b088      	sub	sp, #32
 8002c10:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8002c12:	e048      	b.n	8002ca6 <prvSwitchTimerLists+0x9a>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002c14:	4b2d      	ldr	r3, [pc, #180]	; (8002ccc <prvSwitchTimerLists+0xc0>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	68db      	ldr	r3, [r3, #12]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002c1e:	4b2b      	ldr	r3, [pc, #172]	; (8002ccc <prvSwitchTimerLists+0xc0>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	68db      	ldr	r3, [r3, #12]
 8002c24:	68db      	ldr	r3, [r3, #12]
 8002c26:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	3304      	adds	r3, #4
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	f7fe f87d 	bl	8000d2c <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	6a1b      	ldr	r3, [r3, #32]
 8002c36:	68f8      	ldr	r0, [r7, #12]
 8002c38:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002c40:	f003 0304 	and.w	r3, r3, #4
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d02e      	beq.n	8002ca6 <prvSwitchTimerLists+0x9a>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	699b      	ldr	r3, [r3, #24]
 8002c4c:	693a      	ldr	r2, [r7, #16]
 8002c4e:	4413      	add	r3, r2
 8002c50:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 8002c52:	68ba      	ldr	r2, [r7, #8]
 8002c54:	693b      	ldr	r3, [r7, #16]
 8002c56:	429a      	cmp	r2, r3
 8002c58:	d90e      	bls.n	8002c78 <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	68ba      	ldr	r2, [r7, #8]
 8002c5e:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	68fa      	ldr	r2, [r7, #12]
 8002c64:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8002c66:	4b19      	ldr	r3, [pc, #100]	; (8002ccc <prvSwitchTimerLists+0xc0>)
 8002c68:	681a      	ldr	r2, [r3, #0]
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	3304      	adds	r3, #4
 8002c6e:	4619      	mov	r1, r3
 8002c70:	4610      	mov	r0, r2
 8002c72:	f7fe f822 	bl	8000cba <vListInsert>
 8002c76:	e016      	b.n	8002ca6 <prvSwitchTimerLists+0x9a>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8002c78:	2300      	movs	r3, #0
 8002c7a:	9300      	str	r3, [sp, #0]
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	693a      	ldr	r2, [r7, #16]
 8002c80:	2100      	movs	r1, #0
 8002c82:	68f8      	ldr	r0, [r7, #12]
 8002c84:	f7ff fd7c 	bl	8002780 <xTimerGenericCommand>
 8002c88:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d10a      	bne.n	8002ca6 <prvSwitchTimerLists+0x9a>
        __asm volatile
 8002c90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c94:	f383 8811 	msr	BASEPRI, r3
 8002c98:	f3bf 8f6f 	isb	sy
 8002c9c:	f3bf 8f4f 	dsb	sy
 8002ca0:	603b      	str	r3, [r7, #0]
    }
 8002ca2:	bf00      	nop
 8002ca4:	e7fe      	b.n	8002ca4 <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8002ca6:	4b09      	ldr	r3, [pc, #36]	; (8002ccc <prvSwitchTimerLists+0xc0>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d1b1      	bne.n	8002c14 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 8002cb0:	4b06      	ldr	r3, [pc, #24]	; (8002ccc <prvSwitchTimerLists+0xc0>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 8002cb6:	4b06      	ldr	r3, [pc, #24]	; (8002cd0 <prvSwitchTimerLists+0xc4>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	4a04      	ldr	r2, [pc, #16]	; (8002ccc <prvSwitchTimerLists+0xc0>)
 8002cbc:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8002cbe:	4a04      	ldr	r2, [pc, #16]	; (8002cd0 <prvSwitchTimerLists+0xc4>)
 8002cc0:	697b      	ldr	r3, [r7, #20]
 8002cc2:	6013      	str	r3, [r2, #0]
    }
 8002cc4:	bf00      	nop
 8002cc6:	3718      	adds	r7, #24
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	bd80      	pop	{r7, pc}
 8002ccc:	200001f8 	.word	0x200001f8
 8002cd0:	200001fc 	.word	0x200001fc

08002cd4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8002cd8:	f000 f95e 	bl	8002f98 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8002cdc:	4b12      	ldr	r3, [pc, #72]	; (8002d28 <prvCheckForValidListAndQueue+0x54>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d11d      	bne.n	8002d20 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8002ce4:	4811      	ldr	r0, [pc, #68]	; (8002d2c <prvCheckForValidListAndQueue+0x58>)
 8002ce6:	f7fd ff97 	bl	8000c18 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8002cea:	4811      	ldr	r0, [pc, #68]	; (8002d30 <prvCheckForValidListAndQueue+0x5c>)
 8002cec:	f7fd ff94 	bl	8000c18 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8002cf0:	4b10      	ldr	r3, [pc, #64]	; (8002d34 <prvCheckForValidListAndQueue+0x60>)
 8002cf2:	4a0e      	ldr	r2, [pc, #56]	; (8002d2c <prvCheckForValidListAndQueue+0x58>)
 8002cf4:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8002cf6:	4b10      	ldr	r3, [pc, #64]	; (8002d38 <prvCheckForValidListAndQueue+0x64>)
 8002cf8:	4a0d      	ldr	r2, [pc, #52]	; (8002d30 <prvCheckForValidListAndQueue+0x5c>)
 8002cfa:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	210c      	movs	r1, #12
 8002d00:	200a      	movs	r0, #10
 8002d02:	f7fe f8a5 	bl	8000e50 <xQueueGenericCreate>
 8002d06:	4603      	mov	r3, r0
 8002d08:	4a07      	ldr	r2, [pc, #28]	; (8002d28 <prvCheckForValidListAndQueue+0x54>)
 8002d0a:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8002d0c:	4b06      	ldr	r3, [pc, #24]	; (8002d28 <prvCheckForValidListAndQueue+0x54>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d005      	beq.n	8002d20 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8002d14:	4b04      	ldr	r3, [pc, #16]	; (8002d28 <prvCheckForValidListAndQueue+0x54>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4908      	ldr	r1, [pc, #32]	; (8002d3c <prvCheckForValidListAndQueue+0x68>)
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	f7fe fcb2 	bl	8001684 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8002d20:	f000 f96a 	bl	8002ff8 <vPortExitCritical>
    }
 8002d24:	bf00      	nop
 8002d26:	bd80      	pop	{r7, pc}
 8002d28:	20000200 	.word	0x20000200
 8002d2c:	200001d0 	.word	0x200001d0
 8002d30:	200001e4 	.word	0x200001e4
 8002d34:	200001f8 	.word	0x200001f8
 8002d38:	200001fc 	.word	0x200001fc
 8002d3c:	08009f7c 	.word	0x08009f7c

08002d40 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8002d40:	b480      	push	{r7}
 8002d42:	b085      	sub	sp, #20
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	60f8      	str	r0, [r7, #12]
 8002d48:	60b9      	str	r1, [r7, #8]
 8002d4a:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	3b04      	subs	r3, #4
 8002d50:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002d58:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	3b04      	subs	r3, #4
 8002d5e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8002d60:	68bb      	ldr	r3, [r7, #8]
 8002d62:	f023 0201 	bic.w	r2, r3, #1
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	3b04      	subs	r3, #4
 8002d6e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8002d70:	4a0c      	ldr	r2, [pc, #48]	; (8002da4 <pxPortInitialiseStack+0x64>)
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	3b14      	subs	r3, #20
 8002d7a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8002d7c:	687a      	ldr	r2, [r7, #4]
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	3b04      	subs	r3, #4
 8002d86:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	f06f 0202 	mvn.w	r2, #2
 8002d8e:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	3b20      	subs	r3, #32
 8002d94:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8002d96:	68fb      	ldr	r3, [r7, #12]
}
 8002d98:	4618      	mov	r0, r3
 8002d9a:	3714      	adds	r7, #20
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da2:	4770      	bx	lr
 8002da4:	08002da9 	.word	0x08002da9

08002da8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002da8:	b480      	push	{r7}
 8002daa:	b085      	sub	sp, #20
 8002dac:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8002dae:	2300      	movs	r3, #0
 8002db0:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8002db2:	4b12      	ldr	r3, [pc, #72]	; (8002dfc <prvTaskExitError+0x54>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dba:	d00a      	beq.n	8002dd2 <prvTaskExitError+0x2a>
        __asm volatile
 8002dbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dc0:	f383 8811 	msr	BASEPRI, r3
 8002dc4:	f3bf 8f6f 	isb	sy
 8002dc8:	f3bf 8f4f 	dsb	sy
 8002dcc:	60fb      	str	r3, [r7, #12]
    }
 8002dce:	bf00      	nop
 8002dd0:	e7fe      	b.n	8002dd0 <prvTaskExitError+0x28>
        __asm volatile
 8002dd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dd6:	f383 8811 	msr	BASEPRI, r3
 8002dda:	f3bf 8f6f 	isb	sy
 8002dde:	f3bf 8f4f 	dsb	sy
 8002de2:	60bb      	str	r3, [r7, #8]
    }
 8002de4:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8002de6:	bf00      	nop
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d0fc      	beq.n	8002de8 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8002dee:	bf00      	nop
 8002df0:	bf00      	nop
 8002df2:	3714      	adds	r7, #20
 8002df4:	46bd      	mov	sp, r7
 8002df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfa:	4770      	bx	lr
 8002dfc:	20000004 	.word	0x20000004

08002e00 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8002e00:	4b07      	ldr	r3, [pc, #28]	; (8002e20 <pxCurrentTCBConst2>)
 8002e02:	6819      	ldr	r1, [r3, #0]
 8002e04:	6808      	ldr	r0, [r1, #0]
 8002e06:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002e0a:	f380 8809 	msr	PSP, r0
 8002e0e:	f3bf 8f6f 	isb	sy
 8002e12:	f04f 0000 	mov.w	r0, #0
 8002e16:	f380 8811 	msr	BASEPRI, r0
 8002e1a:	4770      	bx	lr
 8002e1c:	f3af 8000 	nop.w

08002e20 <pxCurrentTCBConst2>:
 8002e20:	200000cc 	.word	0x200000cc
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8002e24:	bf00      	nop
 8002e26:	bf00      	nop

08002e28 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8002e28:	4808      	ldr	r0, [pc, #32]	; (8002e4c <prvPortStartFirstTask+0x24>)
 8002e2a:	6800      	ldr	r0, [r0, #0]
 8002e2c:	6800      	ldr	r0, [r0, #0]
 8002e2e:	f380 8808 	msr	MSP, r0
 8002e32:	f04f 0000 	mov.w	r0, #0
 8002e36:	f380 8814 	msr	CONTROL, r0
 8002e3a:	b662      	cpsie	i
 8002e3c:	b661      	cpsie	f
 8002e3e:	f3bf 8f4f 	dsb	sy
 8002e42:	f3bf 8f6f 	isb	sy
 8002e46:	df00      	svc	0
 8002e48:	bf00      	nop
 8002e4a:	0000      	.short	0x0000
 8002e4c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8002e50:	bf00      	nop
 8002e52:	bf00      	nop

08002e54 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b086      	sub	sp, #24
 8002e58:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002e5a:	4b46      	ldr	r3, [pc, #280]	; (8002f74 <xPortStartScheduler+0x120>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4a46      	ldr	r2, [pc, #280]	; (8002f78 <xPortStartScheduler+0x124>)
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d10a      	bne.n	8002e7a <xPortStartScheduler+0x26>
        __asm volatile
 8002e64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e68:	f383 8811 	msr	BASEPRI, r3
 8002e6c:	f3bf 8f6f 	isb	sy
 8002e70:	f3bf 8f4f 	dsb	sy
 8002e74:	613b      	str	r3, [r7, #16]
    }
 8002e76:	bf00      	nop
 8002e78:	e7fe      	b.n	8002e78 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002e7a:	4b3e      	ldr	r3, [pc, #248]	; (8002f74 <xPortStartScheduler+0x120>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4a3f      	ldr	r2, [pc, #252]	; (8002f7c <xPortStartScheduler+0x128>)
 8002e80:	4293      	cmp	r3, r2
 8002e82:	d10a      	bne.n	8002e9a <xPortStartScheduler+0x46>
        __asm volatile
 8002e84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e88:	f383 8811 	msr	BASEPRI, r3
 8002e8c:	f3bf 8f6f 	isb	sy
 8002e90:	f3bf 8f4f 	dsb	sy
 8002e94:	60fb      	str	r3, [r7, #12]
    }
 8002e96:	bf00      	nop
 8002e98:	e7fe      	b.n	8002e98 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002e9a:	4b39      	ldr	r3, [pc, #228]	; (8002f80 <xPortStartScheduler+0x12c>)
 8002e9c:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002e9e:	697b      	ldr	r3, [r7, #20]
 8002ea0:	781b      	ldrb	r3, [r3, #0]
 8002ea2:	b2db      	uxtb	r3, r3
 8002ea4:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002ea6:	697b      	ldr	r3, [r7, #20]
 8002ea8:	22ff      	movs	r2, #255	; 0xff
 8002eaa:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002eac:	697b      	ldr	r3, [r7, #20]
 8002eae:	781b      	ldrb	r3, [r3, #0]
 8002eb0:	b2db      	uxtb	r3, r3
 8002eb2:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002eb4:	78fb      	ldrb	r3, [r7, #3]
 8002eb6:	b2db      	uxtb	r3, r3
 8002eb8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002ebc:	b2da      	uxtb	r2, r3
 8002ebe:	4b31      	ldr	r3, [pc, #196]	; (8002f84 <xPortStartScheduler+0x130>)
 8002ec0:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002ec2:	4b31      	ldr	r3, [pc, #196]	; (8002f88 <xPortStartScheduler+0x134>)
 8002ec4:	2207      	movs	r2, #7
 8002ec6:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002ec8:	e009      	b.n	8002ede <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 8002eca:	4b2f      	ldr	r3, [pc, #188]	; (8002f88 <xPortStartScheduler+0x134>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	3b01      	subs	r3, #1
 8002ed0:	4a2d      	ldr	r2, [pc, #180]	; (8002f88 <xPortStartScheduler+0x134>)
 8002ed2:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002ed4:	78fb      	ldrb	r3, [r7, #3]
 8002ed6:	b2db      	uxtb	r3, r3
 8002ed8:	005b      	lsls	r3, r3, #1
 8002eda:	b2db      	uxtb	r3, r3
 8002edc:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002ede:	78fb      	ldrb	r3, [r7, #3]
 8002ee0:	b2db      	uxtb	r3, r3
 8002ee2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ee6:	2b80      	cmp	r3, #128	; 0x80
 8002ee8:	d0ef      	beq.n	8002eca <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8002eea:	4b27      	ldr	r3, [pc, #156]	; (8002f88 <xPortStartScheduler+0x134>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f1c3 0307 	rsb	r3, r3, #7
 8002ef2:	2b04      	cmp	r3, #4
 8002ef4:	d00a      	beq.n	8002f0c <xPortStartScheduler+0xb8>
        __asm volatile
 8002ef6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002efa:	f383 8811 	msr	BASEPRI, r3
 8002efe:	f3bf 8f6f 	isb	sy
 8002f02:	f3bf 8f4f 	dsb	sy
 8002f06:	60bb      	str	r3, [r7, #8]
    }
 8002f08:	bf00      	nop
 8002f0a:	e7fe      	b.n	8002f0a <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002f0c:	4b1e      	ldr	r3, [pc, #120]	; (8002f88 <xPortStartScheduler+0x134>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	021b      	lsls	r3, r3, #8
 8002f12:	4a1d      	ldr	r2, [pc, #116]	; (8002f88 <xPortStartScheduler+0x134>)
 8002f14:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002f16:	4b1c      	ldr	r3, [pc, #112]	; (8002f88 <xPortStartScheduler+0x134>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002f1e:	4a1a      	ldr	r2, [pc, #104]	; (8002f88 <xPortStartScheduler+0x134>)
 8002f20:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	b2da      	uxtb	r2, r3
 8002f26:	697b      	ldr	r3, [r7, #20]
 8002f28:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8002f2a:	4b18      	ldr	r3, [pc, #96]	; (8002f8c <xPortStartScheduler+0x138>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4a17      	ldr	r2, [pc, #92]	; (8002f8c <xPortStartScheduler+0x138>)
 8002f30:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002f34:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8002f36:	4b15      	ldr	r3, [pc, #84]	; (8002f8c <xPortStartScheduler+0x138>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4a14      	ldr	r2, [pc, #80]	; (8002f8c <xPortStartScheduler+0x138>)
 8002f3c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8002f40:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8002f42:	f000 f8db 	bl	80030fc <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8002f46:	4b12      	ldr	r3, [pc, #72]	; (8002f90 <xPortStartScheduler+0x13c>)
 8002f48:	2200      	movs	r2, #0
 8002f4a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8002f4c:	f000 f8fa 	bl	8003144 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8002f50:	4b10      	ldr	r3, [pc, #64]	; (8002f94 <xPortStartScheduler+0x140>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4a0f      	ldr	r2, [pc, #60]	; (8002f94 <xPortStartScheduler+0x140>)
 8002f56:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8002f5a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8002f5c:	f7ff ff64 	bl	8002e28 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8002f60:	f7fe ff2c 	bl	8001dbc <vTaskSwitchContext>
    prvTaskExitError();
 8002f64:	f7ff ff20 	bl	8002da8 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8002f68:	2300      	movs	r3, #0
}
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	3718      	adds	r7, #24
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bd80      	pop	{r7, pc}
 8002f72:	bf00      	nop
 8002f74:	e000ed00 	.word	0xe000ed00
 8002f78:	410fc271 	.word	0x410fc271
 8002f7c:	410fc270 	.word	0x410fc270
 8002f80:	e000e400 	.word	0xe000e400
 8002f84:	2000020c 	.word	0x2000020c
 8002f88:	20000210 	.word	0x20000210
 8002f8c:	e000ed20 	.word	0xe000ed20
 8002f90:	20000004 	.word	0x20000004
 8002f94:	e000ef34 	.word	0xe000ef34

08002f98 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8002f98:	b480      	push	{r7}
 8002f9a:	b083      	sub	sp, #12
 8002f9c:	af00      	add	r7, sp, #0
        __asm volatile
 8002f9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fa2:	f383 8811 	msr	BASEPRI, r3
 8002fa6:	f3bf 8f6f 	isb	sy
 8002faa:	f3bf 8f4f 	dsb	sy
 8002fae:	607b      	str	r3, [r7, #4]
    }
 8002fb0:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8002fb2:	4b0f      	ldr	r3, [pc, #60]	; (8002ff0 <vPortEnterCritical+0x58>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	3301      	adds	r3, #1
 8002fb8:	4a0d      	ldr	r2, [pc, #52]	; (8002ff0 <vPortEnterCritical+0x58>)
 8002fba:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8002fbc:	4b0c      	ldr	r3, [pc, #48]	; (8002ff0 <vPortEnterCritical+0x58>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	2b01      	cmp	r3, #1
 8002fc2:	d10f      	bne.n	8002fe4 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002fc4:	4b0b      	ldr	r3, [pc, #44]	; (8002ff4 <vPortEnterCritical+0x5c>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	b2db      	uxtb	r3, r3
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d00a      	beq.n	8002fe4 <vPortEnterCritical+0x4c>
        __asm volatile
 8002fce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fd2:	f383 8811 	msr	BASEPRI, r3
 8002fd6:	f3bf 8f6f 	isb	sy
 8002fda:	f3bf 8f4f 	dsb	sy
 8002fde:	603b      	str	r3, [r7, #0]
    }
 8002fe0:	bf00      	nop
 8002fe2:	e7fe      	b.n	8002fe2 <vPortEnterCritical+0x4a>
    }
}
 8002fe4:	bf00      	nop
 8002fe6:	370c      	adds	r7, #12
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fee:	4770      	bx	lr
 8002ff0:	20000004 	.word	0x20000004
 8002ff4:	e000ed04 	.word	0xe000ed04

08002ff8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	b083      	sub	sp, #12
 8002ffc:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8002ffe:	4b12      	ldr	r3, [pc, #72]	; (8003048 <vPortExitCritical+0x50>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d10a      	bne.n	800301c <vPortExitCritical+0x24>
        __asm volatile
 8003006:	f04f 0350 	mov.w	r3, #80	; 0x50
 800300a:	f383 8811 	msr	BASEPRI, r3
 800300e:	f3bf 8f6f 	isb	sy
 8003012:	f3bf 8f4f 	dsb	sy
 8003016:	607b      	str	r3, [r7, #4]
    }
 8003018:	bf00      	nop
 800301a:	e7fe      	b.n	800301a <vPortExitCritical+0x22>
    uxCriticalNesting--;
 800301c:	4b0a      	ldr	r3, [pc, #40]	; (8003048 <vPortExitCritical+0x50>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	3b01      	subs	r3, #1
 8003022:	4a09      	ldr	r2, [pc, #36]	; (8003048 <vPortExitCritical+0x50>)
 8003024:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8003026:	4b08      	ldr	r3, [pc, #32]	; (8003048 <vPortExitCritical+0x50>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d105      	bne.n	800303a <vPortExitCritical+0x42>
 800302e:	2300      	movs	r3, #0
 8003030:	603b      	str	r3, [r7, #0]
        __asm volatile
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	f383 8811 	msr	BASEPRI, r3
    }
 8003038:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 800303a:	bf00      	nop
 800303c:	370c      	adds	r7, #12
 800303e:	46bd      	mov	sp, r7
 8003040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003044:	4770      	bx	lr
 8003046:	bf00      	nop
 8003048:	20000004 	.word	0x20000004
 800304c:	00000000 	.word	0x00000000

08003050 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8003050:	f3ef 8009 	mrs	r0, PSP
 8003054:	f3bf 8f6f 	isb	sy
 8003058:	4b15      	ldr	r3, [pc, #84]	; (80030b0 <pxCurrentTCBConst>)
 800305a:	681a      	ldr	r2, [r3, #0]
 800305c:	f01e 0f10 	tst.w	lr, #16
 8003060:	bf08      	it	eq
 8003062:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003066:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800306a:	6010      	str	r0, [r2, #0]
 800306c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003070:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003074:	f380 8811 	msr	BASEPRI, r0
 8003078:	f3bf 8f4f 	dsb	sy
 800307c:	f3bf 8f6f 	isb	sy
 8003080:	f7fe fe9c 	bl	8001dbc <vTaskSwitchContext>
 8003084:	f04f 0000 	mov.w	r0, #0
 8003088:	f380 8811 	msr	BASEPRI, r0
 800308c:	bc09      	pop	{r0, r3}
 800308e:	6819      	ldr	r1, [r3, #0]
 8003090:	6808      	ldr	r0, [r1, #0]
 8003092:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003096:	f01e 0f10 	tst.w	lr, #16
 800309a:	bf08      	it	eq
 800309c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80030a0:	f380 8809 	msr	PSP, r0
 80030a4:	f3bf 8f6f 	isb	sy
 80030a8:	4770      	bx	lr
 80030aa:	bf00      	nop
 80030ac:	f3af 8000 	nop.w

080030b0 <pxCurrentTCBConst>:
 80030b0:	200000cc 	.word	0x200000cc
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80030b4:	bf00      	nop
 80030b6:	bf00      	nop

080030b8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b082      	sub	sp, #8
 80030bc:	af00      	add	r7, sp, #0
        __asm volatile
 80030be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030c2:	f383 8811 	msr	BASEPRI, r3
 80030c6:	f3bf 8f6f 	isb	sy
 80030ca:	f3bf 8f4f 	dsb	sy
 80030ce:	607b      	str	r3, [r7, #4]
    }
 80030d0:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80030d2:	f7fe fdbb 	bl	8001c4c <xTaskIncrementTick>
 80030d6:	4603      	mov	r3, r0
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d003      	beq.n	80030e4 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80030dc:	4b06      	ldr	r3, [pc, #24]	; (80030f8 <SysTick_Handler+0x40>)
 80030de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80030e2:	601a      	str	r2, [r3, #0]
 80030e4:	2300      	movs	r3, #0
 80030e6:	603b      	str	r3, [r7, #0]
        __asm volatile
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	f383 8811 	msr	BASEPRI, r3
    }
 80030ee:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 80030f0:	bf00      	nop
 80030f2:	3708      	adds	r7, #8
 80030f4:	46bd      	mov	sp, r7
 80030f6:	bd80      	pop	{r7, pc}
 80030f8:	e000ed04 	.word	0xe000ed04

080030fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80030fc:	b480      	push	{r7}
 80030fe:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003100:	4b0b      	ldr	r3, [pc, #44]	; (8003130 <vPortSetupTimerInterrupt+0x34>)
 8003102:	2200      	movs	r2, #0
 8003104:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003106:	4b0b      	ldr	r3, [pc, #44]	; (8003134 <vPortSetupTimerInterrupt+0x38>)
 8003108:	2200      	movs	r2, #0
 800310a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800310c:	4b0a      	ldr	r3, [pc, #40]	; (8003138 <vPortSetupTimerInterrupt+0x3c>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4a0a      	ldr	r2, [pc, #40]	; (800313c <vPortSetupTimerInterrupt+0x40>)
 8003112:	fba2 2303 	umull	r2, r3, r2, r3
 8003116:	099b      	lsrs	r3, r3, #6
 8003118:	4a09      	ldr	r2, [pc, #36]	; (8003140 <vPortSetupTimerInterrupt+0x44>)
 800311a:	3b01      	subs	r3, #1
 800311c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800311e:	4b04      	ldr	r3, [pc, #16]	; (8003130 <vPortSetupTimerInterrupt+0x34>)
 8003120:	2207      	movs	r2, #7
 8003122:	601a      	str	r2, [r3, #0]
}
 8003124:	bf00      	nop
 8003126:	46bd      	mov	sp, r7
 8003128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312c:	4770      	bx	lr
 800312e:	bf00      	nop
 8003130:	e000e010 	.word	0xe000e010
 8003134:	e000e018 	.word	0xe000e018
 8003138:	20000008 	.word	0x20000008
 800313c:	10624dd3 	.word	0x10624dd3
 8003140:	e000e014 	.word	0xe000e014

08003144 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8003144:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003154 <vPortEnableVFP+0x10>
 8003148:	6801      	ldr	r1, [r0, #0]
 800314a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800314e:	6001      	str	r1, [r0, #0]
 8003150:	4770      	bx	lr
 8003152:	0000      	.short	0x0000
 8003154:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8003158:	bf00      	nop
 800315a:	bf00      	nop

0800315c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800315c:	b480      	push	{r7}
 800315e:	b085      	sub	sp, #20
 8003160:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8003162:	f3ef 8305 	mrs	r3, IPSR
 8003166:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	2b0f      	cmp	r3, #15
 800316c:	d914      	bls.n	8003198 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800316e:	4a17      	ldr	r2, [pc, #92]	; (80031cc <vPortValidateInterruptPriority+0x70>)
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	4413      	add	r3, r2
 8003174:	781b      	ldrb	r3, [r3, #0]
 8003176:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8003178:	4b15      	ldr	r3, [pc, #84]	; (80031d0 <vPortValidateInterruptPriority+0x74>)
 800317a:	781b      	ldrb	r3, [r3, #0]
 800317c:	7afa      	ldrb	r2, [r7, #11]
 800317e:	429a      	cmp	r2, r3
 8003180:	d20a      	bcs.n	8003198 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8003182:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003186:	f383 8811 	msr	BASEPRI, r3
 800318a:	f3bf 8f6f 	isb	sy
 800318e:	f3bf 8f4f 	dsb	sy
 8003192:	607b      	str	r3, [r7, #4]
    }
 8003194:	bf00      	nop
 8003196:	e7fe      	b.n	8003196 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8003198:	4b0e      	ldr	r3, [pc, #56]	; (80031d4 <vPortValidateInterruptPriority+0x78>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80031a0:	4b0d      	ldr	r3, [pc, #52]	; (80031d8 <vPortValidateInterruptPriority+0x7c>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	429a      	cmp	r2, r3
 80031a6:	d90a      	bls.n	80031be <vPortValidateInterruptPriority+0x62>
        __asm volatile
 80031a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031ac:	f383 8811 	msr	BASEPRI, r3
 80031b0:	f3bf 8f6f 	isb	sy
 80031b4:	f3bf 8f4f 	dsb	sy
 80031b8:	603b      	str	r3, [r7, #0]
    }
 80031ba:	bf00      	nop
 80031bc:	e7fe      	b.n	80031bc <vPortValidateInterruptPriority+0x60>
    }
 80031be:	bf00      	nop
 80031c0:	3714      	adds	r7, #20
 80031c2:	46bd      	mov	sp, r7
 80031c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c8:	4770      	bx	lr
 80031ca:	bf00      	nop
 80031cc:	e000e3f0 	.word	0xe000e3f0
 80031d0:	2000020c 	.word	0x2000020c
 80031d4:	e000ed0c 	.word	0xe000ed0c
 80031d8:	20000210 	.word	0x20000210

080031dc <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b08a      	sub	sp, #40	; 0x28
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 80031e4:	2300      	movs	r3, #0
 80031e6:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 80031e8:	f7fe fc76 	bl	8001ad8 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 80031ec:	4b65      	ldr	r3, [pc, #404]	; (8003384 <pvPortMalloc+0x1a8>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d101      	bne.n	80031f8 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 80031f4:	f000 f934 	bl	8003460 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80031f8:	4b63      	ldr	r3, [pc, #396]	; (8003388 <pvPortMalloc+0x1ac>)
 80031fa:	681a      	ldr	r2, [r3, #0]
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	4013      	ands	r3, r2
 8003200:	2b00      	cmp	r3, #0
 8003202:	f040 80a7 	bne.w	8003354 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2b00      	cmp	r3, #0
 800320a:	d02d      	beq.n	8003268 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 800320c:	2208      	movs	r2, #8
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8003212:	687a      	ldr	r2, [r7, #4]
 8003214:	429a      	cmp	r2, r3
 8003216:	d227      	bcs.n	8003268 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8003218:	2208      	movs	r2, #8
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	4413      	add	r3, r2
 800321e:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	f003 0307 	and.w	r3, r3, #7
 8003226:	2b00      	cmp	r3, #0
 8003228:	d021      	beq.n	800326e <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	f023 0307 	bic.w	r3, r3, #7
 8003230:	3308      	adds	r3, #8
 8003232:	687a      	ldr	r2, [r7, #4]
 8003234:	429a      	cmp	r2, r3
 8003236:	d214      	bcs.n	8003262 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	f023 0307 	bic.w	r3, r3, #7
 800323e:	3308      	adds	r3, #8
 8003240:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	f003 0307 	and.w	r3, r3, #7
 8003248:	2b00      	cmp	r3, #0
 800324a:	d010      	beq.n	800326e <pvPortMalloc+0x92>
        __asm volatile
 800324c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003250:	f383 8811 	msr	BASEPRI, r3
 8003254:	f3bf 8f6f 	isb	sy
 8003258:	f3bf 8f4f 	dsb	sy
 800325c:	617b      	str	r3, [r7, #20]
    }
 800325e:	bf00      	nop
 8003260:	e7fe      	b.n	8003260 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8003262:	2300      	movs	r3, #0
 8003264:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003266:	e002      	b.n	800326e <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8003268:	2300      	movs	r3, #0
 800326a:	607b      	str	r3, [r7, #4]
 800326c:	e000      	b.n	8003270 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800326e:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d06e      	beq.n	8003354 <pvPortMalloc+0x178>
 8003276:	4b45      	ldr	r3, [pc, #276]	; (800338c <pvPortMalloc+0x1b0>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	687a      	ldr	r2, [r7, #4]
 800327c:	429a      	cmp	r2, r3
 800327e:	d869      	bhi.n	8003354 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8003280:	4b43      	ldr	r3, [pc, #268]	; (8003390 <pvPortMalloc+0x1b4>)
 8003282:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8003284:	4b42      	ldr	r3, [pc, #264]	; (8003390 <pvPortMalloc+0x1b4>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800328a:	e004      	b.n	8003296 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 800328c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800328e:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8003290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003298:	685b      	ldr	r3, [r3, #4]
 800329a:	687a      	ldr	r2, [r7, #4]
 800329c:	429a      	cmp	r2, r3
 800329e:	d903      	bls.n	80032a8 <pvPortMalloc+0xcc>
 80032a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d1f1      	bne.n	800328c <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 80032a8:	4b36      	ldr	r3, [pc, #216]	; (8003384 <pvPortMalloc+0x1a8>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032ae:	429a      	cmp	r2, r3
 80032b0:	d050      	beq.n	8003354 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80032b2:	6a3b      	ldr	r3, [r7, #32]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	2208      	movs	r2, #8
 80032b8:	4413      	add	r3, r2
 80032ba:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80032bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032be:	681a      	ldr	r2, [r3, #0]
 80032c0:	6a3b      	ldr	r3, [r7, #32]
 80032c2:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80032c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032c6:	685a      	ldr	r2, [r3, #4]
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	1ad2      	subs	r2, r2, r3
 80032cc:	2308      	movs	r3, #8
 80032ce:	005b      	lsls	r3, r3, #1
 80032d0:	429a      	cmp	r2, r3
 80032d2:	d91f      	bls.n	8003314 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80032d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	4413      	add	r3, r2
 80032da:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80032dc:	69bb      	ldr	r3, [r7, #24]
 80032de:	f003 0307 	and.w	r3, r3, #7
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d00a      	beq.n	80032fc <pvPortMalloc+0x120>
        __asm volatile
 80032e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032ea:	f383 8811 	msr	BASEPRI, r3
 80032ee:	f3bf 8f6f 	isb	sy
 80032f2:	f3bf 8f4f 	dsb	sy
 80032f6:	613b      	str	r3, [r7, #16]
    }
 80032f8:	bf00      	nop
 80032fa:	e7fe      	b.n	80032fa <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80032fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032fe:	685a      	ldr	r2, [r3, #4]
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	1ad2      	subs	r2, r2, r3
 8003304:	69bb      	ldr	r3, [r7, #24]
 8003306:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8003308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800330a:	687a      	ldr	r2, [r7, #4]
 800330c:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 800330e:	69b8      	ldr	r0, [r7, #24]
 8003310:	f000 f908 	bl	8003524 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003314:	4b1d      	ldr	r3, [pc, #116]	; (800338c <pvPortMalloc+0x1b0>)
 8003316:	681a      	ldr	r2, [r3, #0]
 8003318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800331a:	685b      	ldr	r3, [r3, #4]
 800331c:	1ad3      	subs	r3, r2, r3
 800331e:	4a1b      	ldr	r2, [pc, #108]	; (800338c <pvPortMalloc+0x1b0>)
 8003320:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003322:	4b1a      	ldr	r3, [pc, #104]	; (800338c <pvPortMalloc+0x1b0>)
 8003324:	681a      	ldr	r2, [r3, #0]
 8003326:	4b1b      	ldr	r3, [pc, #108]	; (8003394 <pvPortMalloc+0x1b8>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	429a      	cmp	r2, r3
 800332c:	d203      	bcs.n	8003336 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800332e:	4b17      	ldr	r3, [pc, #92]	; (800338c <pvPortMalloc+0x1b0>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4a18      	ldr	r2, [pc, #96]	; (8003394 <pvPortMalloc+0x1b8>)
 8003334:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003338:	685a      	ldr	r2, [r3, #4]
 800333a:	4b13      	ldr	r3, [pc, #76]	; (8003388 <pvPortMalloc+0x1ac>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	431a      	orrs	r2, r3
 8003340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003342:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8003344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003346:	2200      	movs	r2, #0
 8003348:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800334a:	4b13      	ldr	r3, [pc, #76]	; (8003398 <pvPortMalloc+0x1bc>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	3301      	adds	r3, #1
 8003350:	4a11      	ldr	r2, [pc, #68]	; (8003398 <pvPortMalloc+0x1bc>)
 8003352:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8003354:	f7fe fbce 	bl	8001af4 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003358:	69fb      	ldr	r3, [r7, #28]
 800335a:	f003 0307 	and.w	r3, r3, #7
 800335e:	2b00      	cmp	r3, #0
 8003360:	d00a      	beq.n	8003378 <pvPortMalloc+0x19c>
        __asm volatile
 8003362:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003366:	f383 8811 	msr	BASEPRI, r3
 800336a:	f3bf 8f6f 	isb	sy
 800336e:	f3bf 8f4f 	dsb	sy
 8003372:	60fb      	str	r3, [r7, #12]
    }
 8003374:	bf00      	nop
 8003376:	e7fe      	b.n	8003376 <pvPortMalloc+0x19a>
    return pvReturn;
 8003378:	69fb      	ldr	r3, [r7, #28]
}
 800337a:	4618      	mov	r0, r3
 800337c:	3728      	adds	r7, #40	; 0x28
 800337e:	46bd      	mov	sp, r7
 8003380:	bd80      	pop	{r7, pc}
 8003382:	bf00      	nop
 8003384:	20012e1c 	.word	0x20012e1c
 8003388:	20012e30 	.word	0x20012e30
 800338c:	20012e20 	.word	0x20012e20
 8003390:	20012e14 	.word	0x20012e14
 8003394:	20012e24 	.word	0x20012e24
 8003398:	20012e28 	.word	0x20012e28

0800339c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b086      	sub	sp, #24
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d04d      	beq.n	800344a <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 80033ae:	2308      	movs	r3, #8
 80033b0:	425b      	negs	r3, r3
 80033b2:	697a      	ldr	r2, [r7, #20]
 80033b4:	4413      	add	r3, r2
 80033b6:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 80033b8:	697b      	ldr	r3, [r7, #20]
 80033ba:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80033bc:	693b      	ldr	r3, [r7, #16]
 80033be:	685a      	ldr	r2, [r3, #4]
 80033c0:	4b24      	ldr	r3, [pc, #144]	; (8003454 <vPortFree+0xb8>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4013      	ands	r3, r2
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d10a      	bne.n	80033e0 <vPortFree+0x44>
        __asm volatile
 80033ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033ce:	f383 8811 	msr	BASEPRI, r3
 80033d2:	f3bf 8f6f 	isb	sy
 80033d6:	f3bf 8f4f 	dsb	sy
 80033da:	60fb      	str	r3, [r7, #12]
    }
 80033dc:	bf00      	nop
 80033de:	e7fe      	b.n	80033de <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 80033e0:	693b      	ldr	r3, [r7, #16]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d00a      	beq.n	80033fe <vPortFree+0x62>
        __asm volatile
 80033e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033ec:	f383 8811 	msr	BASEPRI, r3
 80033f0:	f3bf 8f6f 	isb	sy
 80033f4:	f3bf 8f4f 	dsb	sy
 80033f8:	60bb      	str	r3, [r7, #8]
    }
 80033fa:	bf00      	nop
 80033fc:	e7fe      	b.n	80033fc <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80033fe:	693b      	ldr	r3, [r7, #16]
 8003400:	685a      	ldr	r2, [r3, #4]
 8003402:	4b14      	ldr	r3, [pc, #80]	; (8003454 <vPortFree+0xb8>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4013      	ands	r3, r2
 8003408:	2b00      	cmp	r3, #0
 800340a:	d01e      	beq.n	800344a <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800340c:	693b      	ldr	r3, [r7, #16]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d11a      	bne.n	800344a <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003414:	693b      	ldr	r3, [r7, #16]
 8003416:	685a      	ldr	r2, [r3, #4]
 8003418:	4b0e      	ldr	r3, [pc, #56]	; (8003454 <vPortFree+0xb8>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	43db      	mvns	r3, r3
 800341e:	401a      	ands	r2, r3
 8003420:	693b      	ldr	r3, [r7, #16]
 8003422:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8003424:	f7fe fb58 	bl	8001ad8 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8003428:	693b      	ldr	r3, [r7, #16]
 800342a:	685a      	ldr	r2, [r3, #4]
 800342c:	4b0a      	ldr	r3, [pc, #40]	; (8003458 <vPortFree+0xbc>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	4413      	add	r3, r2
 8003432:	4a09      	ldr	r2, [pc, #36]	; (8003458 <vPortFree+0xbc>)
 8003434:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003436:	6938      	ldr	r0, [r7, #16]
 8003438:	f000 f874 	bl	8003524 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 800343c:	4b07      	ldr	r3, [pc, #28]	; (800345c <vPortFree+0xc0>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	3301      	adds	r3, #1
 8003442:	4a06      	ldr	r2, [pc, #24]	; (800345c <vPortFree+0xc0>)
 8003444:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8003446:	f7fe fb55 	bl	8001af4 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800344a:	bf00      	nop
 800344c:	3718      	adds	r7, #24
 800344e:	46bd      	mov	sp, r7
 8003450:	bd80      	pop	{r7, pc}
 8003452:	bf00      	nop
 8003454:	20012e30 	.word	0x20012e30
 8003458:	20012e20 	.word	0x20012e20
 800345c:	20012e2c 	.word	0x20012e2c

08003460 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8003460:	b480      	push	{r7}
 8003462:	b085      	sub	sp, #20
 8003464:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003466:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 800346a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 800346c:	4b27      	ldr	r3, [pc, #156]	; (800350c <prvHeapInit+0xac>)
 800346e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	f003 0307 	and.w	r3, r3, #7
 8003476:	2b00      	cmp	r3, #0
 8003478:	d00c      	beq.n	8003494 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	3307      	adds	r3, #7
 800347e:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	f023 0307 	bic.w	r3, r3, #7
 8003486:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003488:	68ba      	ldr	r2, [r7, #8]
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	1ad3      	subs	r3, r2, r3
 800348e:	4a1f      	ldr	r2, [pc, #124]	; (800350c <prvHeapInit+0xac>)
 8003490:	4413      	add	r3, r2
 8003492:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003498:	4a1d      	ldr	r2, [pc, #116]	; (8003510 <prvHeapInit+0xb0>)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800349e:	4b1c      	ldr	r3, [pc, #112]	; (8003510 <prvHeapInit+0xb0>)
 80034a0:	2200      	movs	r2, #0
 80034a2:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	68ba      	ldr	r2, [r7, #8]
 80034a8:	4413      	add	r3, r2
 80034aa:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 80034ac:	2208      	movs	r2, #8
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	1a9b      	subs	r3, r3, r2
 80034b2:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	f023 0307 	bic.w	r3, r3, #7
 80034ba:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	4a15      	ldr	r2, [pc, #84]	; (8003514 <prvHeapInit+0xb4>)
 80034c0:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 80034c2:	4b14      	ldr	r3, [pc, #80]	; (8003514 <prvHeapInit+0xb4>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	2200      	movs	r2, #0
 80034c8:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 80034ca:	4b12      	ldr	r3, [pc, #72]	; (8003514 <prvHeapInit+0xb4>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	2200      	movs	r2, #0
 80034d0:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	68fa      	ldr	r2, [r7, #12]
 80034da:	1ad2      	subs	r2, r2, r3
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80034e0:	4b0c      	ldr	r3, [pc, #48]	; (8003514 <prvHeapInit+0xb4>)
 80034e2:	681a      	ldr	r2, [r3, #0]
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	685b      	ldr	r3, [r3, #4]
 80034ec:	4a0a      	ldr	r2, [pc, #40]	; (8003518 <prvHeapInit+0xb8>)
 80034ee:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	685b      	ldr	r3, [r3, #4]
 80034f4:	4a09      	ldr	r2, [pc, #36]	; (800351c <prvHeapInit+0xbc>)
 80034f6:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80034f8:	4b09      	ldr	r3, [pc, #36]	; (8003520 <prvHeapInit+0xc0>)
 80034fa:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80034fe:	601a      	str	r2, [r3, #0]
}
 8003500:	bf00      	nop
 8003502:	3714      	adds	r7, #20
 8003504:	46bd      	mov	sp, r7
 8003506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350a:	4770      	bx	lr
 800350c:	20000214 	.word	0x20000214
 8003510:	20012e14 	.word	0x20012e14
 8003514:	20012e1c 	.word	0x20012e1c
 8003518:	20012e24 	.word	0x20012e24
 800351c:	20012e20 	.word	0x20012e20
 8003520:	20012e30 	.word	0x20012e30

08003524 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8003524:	b480      	push	{r7}
 8003526:	b085      	sub	sp, #20
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800352c:	4b28      	ldr	r3, [pc, #160]	; (80035d0 <prvInsertBlockIntoFreeList+0xac>)
 800352e:	60fb      	str	r3, [r7, #12]
 8003530:	e002      	b.n	8003538 <prvInsertBlockIntoFreeList+0x14>
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	60fb      	str	r3, [r7, #12]
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	687a      	ldr	r2, [r7, #4]
 800353e:	429a      	cmp	r2, r3
 8003540:	d8f7      	bhi.n	8003532 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	68ba      	ldr	r2, [r7, #8]
 800354c:	4413      	add	r3, r2
 800354e:	687a      	ldr	r2, [r7, #4]
 8003550:	429a      	cmp	r2, r3
 8003552:	d108      	bne.n	8003566 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	685a      	ldr	r2, [r3, #4]
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	441a      	add	r2, r3
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	685b      	ldr	r3, [r3, #4]
 800356e:	68ba      	ldr	r2, [r7, #8]
 8003570:	441a      	add	r2, r3
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	429a      	cmp	r2, r3
 8003578:	d118      	bne.n	80035ac <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681a      	ldr	r2, [r3, #0]
 800357e:	4b15      	ldr	r3, [pc, #84]	; (80035d4 <prvInsertBlockIntoFreeList+0xb0>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	429a      	cmp	r2, r3
 8003584:	d00d      	beq.n	80035a2 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	685a      	ldr	r2, [r3, #4]
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	685b      	ldr	r3, [r3, #4]
 8003590:	441a      	add	r2, r3
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	681a      	ldr	r2, [r3, #0]
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	601a      	str	r2, [r3, #0]
 80035a0:	e008      	b.n	80035b4 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80035a2:	4b0c      	ldr	r3, [pc, #48]	; (80035d4 <prvInsertBlockIntoFreeList+0xb0>)
 80035a4:	681a      	ldr	r2, [r3, #0]
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	601a      	str	r2, [r3, #0]
 80035aa:	e003      	b.n	80035b4 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681a      	ldr	r2, [r3, #0]
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 80035b4:	68fa      	ldr	r2, [r7, #12]
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	429a      	cmp	r2, r3
 80035ba:	d002      	beq.n	80035c2 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	687a      	ldr	r2, [r7, #4]
 80035c0:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80035c2:	bf00      	nop
 80035c4:	3714      	adds	r7, #20
 80035c6:	46bd      	mov	sp, r7
 80035c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035cc:	4770      	bx	lr
 80035ce:	bf00      	nop
 80035d0:	20012e14 	.word	0x20012e14
 80035d4:	20012e1c 	.word	0x20012e1c

080035d8 <HAL_GPIO_EXTI_Callback>:
uint8_t receivedopertion = 0;
uint8_t receivedID = 0;
TaskHandle_t ledHandle;

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b082      	sub	sp, #8
 80035dc:	af00      	add	r7, sp, #0
 80035de:	4603      	mov	r3, r0
 80035e0:	80fb      	strh	r3, [r7, #6]
	printf("button pressed\n");
 80035e2:	4817      	ldr	r0, [pc, #92]	; (8003640 <HAL_GPIO_EXTI_Callback+0x68>)
 80035e4:	f005 fe40 	bl	8009268 <puts>
	if(GPIO_Pin == USER_Btn_Pin)
 80035e8:	88fb      	ldrh	r3, [r7, #6]
 80035ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80035ee:	d123      	bne.n	8003638 <HAL_GPIO_EXTI_Callback+0x60>
	{
		TxData[0]=250;
 80035f0:	4b14      	ldr	r3, [pc, #80]	; (8003644 <HAL_GPIO_EXTI_Callback+0x6c>)
 80035f2:	22fa      	movs	r2, #250	; 0xfa
 80035f4:	701a      	strb	r2, [r3, #0]
		TxData[1]=10;
 80035f6:	4b13      	ldr	r3, [pc, #76]	; (8003644 <HAL_GPIO_EXTI_Callback+0x6c>)
 80035f8:	220a      	movs	r2, #10
 80035fa:	705a      	strb	r2, [r3, #1]

		if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK)
 80035fc:	4b12      	ldr	r3, [pc, #72]	; (8003648 <HAL_GPIO_EXTI_Callback+0x70>)
 80035fe:	4a11      	ldr	r2, [pc, #68]	; (8003644 <HAL_GPIO_EXTI_Callback+0x6c>)
 8003600:	4912      	ldr	r1, [pc, #72]	; (800364c <HAL_GPIO_EXTI_Callback+0x74>)
 8003602:	4813      	ldr	r0, [pc, #76]	; (8003650 <HAL_GPIO_EXTI_Callback+0x78>)
 8003604:	f003 f87c 	bl	8006700 <HAL_CAN_AddTxMessage>
 8003608:	4603      	mov	r3, r0
 800360a:	2b00      	cmp	r3, #0
 800360c:	d004      	beq.n	8003618 <HAL_GPIO_EXTI_Callback+0x40>
		{
			printf("msg NOT sent \n into the error_handler\n");
 800360e:	4811      	ldr	r0, [pc, #68]	; (8003654 <HAL_GPIO_EXTI_Callback+0x7c>)
 8003610:	f005 fe2a 	bl	8009268 <puts>
		    Error_Handler();
 8003614:	f001 fd5c 	bl	80050d0 <Error_Handler>
		}
		  HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8003618:	2101      	movs	r1, #1
 800361a:	480f      	ldr	r0, [pc, #60]	; (8003658 <HAL_GPIO_EXTI_Callback+0x80>)
 800361c:	f003 ff59 	bl	80074d2 <HAL_GPIO_TogglePin>
		  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8003620:	2180      	movs	r1, #128	; 0x80
 8003622:	480d      	ldr	r0, [pc, #52]	; (8003658 <HAL_GPIO_EXTI_Callback+0x80>)
 8003624:	f003 ff55 	bl	80074d2 <HAL_GPIO_TogglePin>
		  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8003628:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800362c:	480a      	ldr	r0, [pc, #40]	; (8003658 <HAL_GPIO_EXTI_Callback+0x80>)
 800362e:	f003 ff50 	bl	80074d2 <HAL_GPIO_TogglePin>
		printf("msg sent\n");
 8003632:	480a      	ldr	r0, [pc, #40]	; (800365c <HAL_GPIO_EXTI_Callback+0x84>)
 8003634:	f005 fe18 	bl	8009268 <puts>
	}
}
 8003638:	bf00      	nop
 800363a:	3708      	adds	r7, #8
 800363c:	46bd      	mov	sp, r7
 800363e:	bd80      	pop	{r7, pc}
 8003640:	08009f84 	.word	0x08009f84
 8003644:	20013104 	.word	0x20013104
 8003648:	20013114 	.word	0x20013114
 800364c:	200130d0 	.word	0x200130d0
 8003650:	20012ec4 	.word	0x20012ec4
 8003654:	08009f94 	.word	0x08009f94
 8003658:	40020400 	.word	0x40020400
 800365c:	08009fbc 	.word	0x08009fbc

08003660 <task1_handler>:


static void task1_handler(void* parameters)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b082      	sub	sp, #8
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
    while (1)
    {
        if (HAL_GPIO_ReadPin(USER_Btn_GPIO_Port, USER_Btn_Pin) != GPIO_PIN_RESET)
 8003668:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800366c:	480a      	ldr	r0, [pc, #40]	; (8003698 <task1_handler+0x38>)
 800366e:	f003 feff 	bl	8007470 <HAL_GPIO_ReadPin>
 8003672:	4603      	mov	r3, r0
 8003674:	2b00      	cmp	r3, #0
 8003676:	d003      	beq.n	8003680 <task1_handler+0x20>
        {
            HAL_GPIO_EXTI_Callback(USER_Btn_Pin);
 8003678:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800367c:	f7ff ffac 	bl	80035d8 <HAL_GPIO_EXTI_Callback>
        }
        vTaskDelay(pdMS_TO_TICKS(100)); // Delay the task for 100 milliseconds
 8003680:	2064      	movs	r0, #100	; 0x64
 8003682:	f7fe f9a3 	bl	80019cc <vTaskDelay>
    	taskYIELD();
 8003686:	4b05      	ldr	r3, [pc, #20]	; (800369c <task1_handler+0x3c>)
 8003688:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800368c:	601a      	str	r2, [r3, #0]
 800368e:	f3bf 8f4f 	dsb	sy
 8003692:	f3bf 8f6f 	isb	sy
        if (HAL_GPIO_ReadPin(USER_Btn_GPIO_Port, USER_Btn_Pin) != GPIO_PIN_RESET)
 8003696:	e7e7      	b.n	8003668 <task1_handler+0x8>
 8003698:	40020800 	.word	0x40020800
 800369c:	e000ed04 	.word	0xe000ed04

080036a0 <HAL_CAN_RxFifo0MsgPendingCallback>:
    }
}


void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b086      	sub	sp, #24
 80036a4:	af02      	add	r7, sp, #8
 80036a6:	6078      	str	r0, [r7, #4]

    HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, RxData);
 80036a8:	4b17      	ldr	r3, [pc, #92]	; (8003708 <HAL_CAN_RxFifo0MsgPendingCallback+0x68>)
 80036aa:	4a18      	ldr	r2, [pc, #96]	; (800370c <HAL_CAN_RxFifo0MsgPendingCallback+0x6c>)
 80036ac:	2100      	movs	r1, #0
 80036ae:	4818      	ldr	r0, [pc, #96]	; (8003710 <HAL_CAN_RxFifo0MsgPendingCallback+0x70>)
 80036b0:	f003 f901 	bl	80068b6 <HAL_CAN_GetRxMessage>

    if (RxHeader.DLC == 8)
 80036b4:	4b15      	ldr	r3, [pc, #84]	; (800370c <HAL_CAN_RxFifo0MsgPendingCallback+0x6c>)
 80036b6:	691b      	ldr	r3, [r3, #16]
 80036b8:	2b08      	cmp	r3, #8
 80036ba:	d120      	bne.n	80036fe <HAL_CAN_RxFifo0MsgPendingCallback+0x5e>
    {
    	receivedopertion = RxData[0];
 80036bc:	4b12      	ldr	r3, [pc, #72]	; (8003708 <HAL_CAN_RxFifo0MsgPendingCallback+0x68>)
 80036be:	781a      	ldrb	r2, [r3, #0]
 80036c0:	4b14      	ldr	r3, [pc, #80]	; (8003714 <HAL_CAN_RxFifo0MsgPendingCallback+0x74>)
 80036c2:	701a      	strb	r2, [r3, #0]
    	receivedID = RxData[1];
 80036c4:	4b10      	ldr	r3, [pc, #64]	; (8003708 <HAL_CAN_RxFifo0MsgPendingCallback+0x68>)
 80036c6:	785a      	ldrb	r2, [r3, #1]
 80036c8:	4b13      	ldr	r3, [pc, #76]	; (8003718 <HAL_CAN_RxFifo0MsgPendingCallback+0x78>)
 80036ca:	701a      	strb	r2, [r3, #0]
    	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80036cc:	2300      	movs	r3, #0
 80036ce:	60fb      	str	r3, [r7, #12]
    	xTaskNotifyFromISR(ledHandle, 0, eNoAction, &xHigherPriorityTaskWoken);
 80036d0:	4b12      	ldr	r3, [pc, #72]	; (800371c <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>)
 80036d2:	6818      	ldr	r0, [r3, #0]
 80036d4:	f107 030c 	add.w	r3, r7, #12
 80036d8:	9301      	str	r3, [sp, #4]
 80036da:	2300      	movs	r3, #0
 80036dc:	9300      	str	r3, [sp, #0]
 80036de:	2300      	movs	r3, #0
 80036e0:	2200      	movs	r2, #0
 80036e2:	2100      	movs	r1, #0
 80036e4:	f7fe feb2 	bl	800244c <xTaskGenericNotifyFromISR>
    	portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d007      	beq.n	80036fe <HAL_CAN_RxFifo0MsgPendingCallback+0x5e>
 80036ee:	4b0c      	ldr	r3, [pc, #48]	; (8003720 <HAL_CAN_RxFifo0MsgPendingCallback+0x80>)
 80036f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80036f4:	601a      	str	r2, [r3, #0]
 80036f6:	f3bf 8f4f 	dsb	sy
 80036fa:	f3bf 8f6f 	isb	sy
    }
}
 80036fe:	bf00      	nop
 8003700:	3710      	adds	r7, #16
 8003702:	46bd      	mov	sp, r7
 8003704:	bd80      	pop	{r7, pc}
 8003706:	bf00      	nop
 8003708:	2001310c 	.word	0x2001310c
 800370c:	200130e8 	.word	0x200130e8
 8003710:	20012ec4 	.word	0x20012ec4
 8003714:	20013118 	.word	0x20013118
 8003718:	20013119 	.word	0x20013119
 800371c:	2001311c 	.word	0x2001311c
 8003720:	e000ed04 	.word	0xe000ed04

08003724 <LED_Task>:

static void LED_Task(void* parameters)
{
 8003724:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003726:	b089      	sub	sp, #36	; 0x24
 8003728:	af06      	add	r7, sp, #24
 800372a:	6078      	str	r0, [r7, #4]
    while (1)
    {
        ulTaskNotifyTake(pdTRUE, portMAX_DELAY);  // Wait for a notification
 800372c:	f04f 32ff 	mov.w	r2, #4294967295
 8003730:	2101      	movs	r1, #1
 8003732:	2000      	movs	r0, #0
 8003734:	f7fe fe22 	bl	800237c <ulTaskGenericNotifyTake>

        printf("Task notified\n");
 8003738:	4855      	ldr	r0, [pc, #340]	; (8003890 <LED_Task+0x16c>)
 800373a:	f005 fd95 	bl	8009268 <puts>
//            HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
//            HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
//            HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
//            vTaskDelay(pdMS_TO_TICKS(receivedDelay));
//        }
        if(RxData[0] == 0x01)
 800373e:	4b55      	ldr	r3, [pc, #340]	; (8003894 <LED_Task+0x170>)
 8003740:	781b      	ldrb	r3, [r3, #0]
 8003742:	2b01      	cmp	r3, #1
 8003744:	d14a      	bne.n	80037dc <LED_Task+0xb8>
        {
        	TxData[0] = 0;
 8003746:	4b54      	ldr	r3, [pc, #336]	; (8003898 <LED_Task+0x174>)
 8003748:	2200      	movs	r2, #0
 800374a:	701a      	strb	r2, [r3, #0]
        	TxData[1] = 0;
 800374c:	4b52      	ldr	r3, [pc, #328]	; (8003898 <LED_Task+0x174>)
 800374e:	2200      	movs	r2, #0
 8003750:	705a      	strb	r2, [r3, #1]
        	TxData[2] = (uint8_t) TIM1->CCR1;
 8003752:	4b52      	ldr	r3, [pc, #328]	; (800389c <LED_Task+0x178>)
 8003754:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003756:	b2da      	uxtb	r2, r3
 8003758:	4b4f      	ldr	r3, [pc, #316]	; (8003898 <LED_Task+0x174>)
 800375a:	709a      	strb	r2, [r3, #2]
        	TxData[3] = 0;
 800375c:	4b4e      	ldr	r3, [pc, #312]	; (8003898 <LED_Task+0x174>)
 800375e:	2200      	movs	r2, #0
 8003760:	70da      	strb	r2, [r3, #3]
        	TxData[4] = 0;
 8003762:	4b4d      	ldr	r3, [pc, #308]	; (8003898 <LED_Task+0x174>)
 8003764:	2200      	movs	r2, #0
 8003766:	711a      	strb	r2, [r3, #4]
        	TxData[5] = 0;
 8003768:	4b4b      	ldr	r3, [pc, #300]	; (8003898 <LED_Task+0x174>)
 800376a:	2200      	movs	r2, #0
 800376c:	715a      	strb	r2, [r3, #5]
        	TxData[6] = 0x81;
 800376e:	4b4a      	ldr	r3, [pc, #296]	; (8003898 <LED_Task+0x174>)
 8003770:	2281      	movs	r2, #129	; 0x81
 8003772:	719a      	strb	r2, [r3, #6]
        	TxData[7] = 0;
 8003774:	4b48      	ldr	r3, [pc, #288]	; (8003898 <LED_Task+0x174>)
 8003776:	2200      	movs	r2, #0
 8003778:	71da      	strb	r2, [r3, #7]
        	if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK)
 800377a:	4b49      	ldr	r3, [pc, #292]	; (80038a0 <LED_Task+0x17c>)
 800377c:	4a46      	ldr	r2, [pc, #280]	; (8003898 <LED_Task+0x174>)
 800377e:	4949      	ldr	r1, [pc, #292]	; (80038a4 <LED_Task+0x180>)
 8003780:	4849      	ldr	r0, [pc, #292]	; (80038a8 <LED_Task+0x184>)
 8003782:	f002 ffbd 	bl	8006700 <HAL_CAN_AddTxMessage>
 8003786:	4603      	mov	r3, r0
 8003788:	2b00      	cmp	r3, #0
 800378a:	d004      	beq.n	8003796 <LED_Task+0x72>
        	{
        		printf("msg NOT sent \n into the error_handler\n");
 800378c:	4847      	ldr	r0, [pc, #284]	; (80038ac <LED_Task+0x188>)
 800378e:	f005 fd6b 	bl	8009268 <puts>
        		Error_Handler();
 8003792:	f001 fc9d 	bl	80050d0 <Error_Handler>
        	}
        	printf("Read req from CAN BUS (%d, %d, %d, %d, %d, %d, %d, %d)\n",TxData[0],TxData[1],TxData[2],TxData[3],TxData[4],TxData[5],TxData[6],TxData[7]);
 8003796:	4b40      	ldr	r3, [pc, #256]	; (8003898 <LED_Task+0x174>)
 8003798:	781b      	ldrb	r3, [r3, #0]
 800379a:	461d      	mov	r5, r3
 800379c:	4b3e      	ldr	r3, [pc, #248]	; (8003898 <LED_Task+0x174>)
 800379e:	785b      	ldrb	r3, [r3, #1]
 80037a0:	461e      	mov	r6, r3
 80037a2:	4b3d      	ldr	r3, [pc, #244]	; (8003898 <LED_Task+0x174>)
 80037a4:	789b      	ldrb	r3, [r3, #2]
 80037a6:	469c      	mov	ip, r3
 80037a8:	4b3b      	ldr	r3, [pc, #236]	; (8003898 <LED_Task+0x174>)
 80037aa:	78db      	ldrb	r3, [r3, #3]
 80037ac:	461a      	mov	r2, r3
 80037ae:	4b3a      	ldr	r3, [pc, #232]	; (8003898 <LED_Task+0x174>)
 80037b0:	791b      	ldrb	r3, [r3, #4]
 80037b2:	4619      	mov	r1, r3
 80037b4:	4b38      	ldr	r3, [pc, #224]	; (8003898 <LED_Task+0x174>)
 80037b6:	795b      	ldrb	r3, [r3, #5]
 80037b8:	4618      	mov	r0, r3
 80037ba:	4b37      	ldr	r3, [pc, #220]	; (8003898 <LED_Task+0x174>)
 80037bc:	799b      	ldrb	r3, [r3, #6]
 80037be:	461c      	mov	r4, r3
 80037c0:	4b35      	ldr	r3, [pc, #212]	; (8003898 <LED_Task+0x174>)
 80037c2:	79db      	ldrb	r3, [r3, #7]
 80037c4:	9304      	str	r3, [sp, #16]
 80037c6:	9403      	str	r4, [sp, #12]
 80037c8:	9002      	str	r0, [sp, #8]
 80037ca:	9101      	str	r1, [sp, #4]
 80037cc:	9200      	str	r2, [sp, #0]
 80037ce:	4663      	mov	r3, ip
 80037d0:	4632      	mov	r2, r6
 80037d2:	4629      	mov	r1, r5
 80037d4:	4836      	ldr	r0, [pc, #216]	; (80038b0 <LED_Task+0x18c>)
 80037d6:	f005 fce1 	bl	800919c <iprintf>
 80037da:	e7a7      	b.n	800372c <LED_Task+0x8>
        }

        else if (RxData[0] == 0x02)
 80037dc:	4b2d      	ldr	r3, [pc, #180]	; (8003894 <LED_Task+0x170>)
 80037de:	781b      	ldrb	r3, [r3, #0]
 80037e0:	2b02      	cmp	r3, #2
 80037e2:	d150      	bne.n	8003886 <LED_Task+0x162>
        {
        	TxData[0] = RxData[0];
 80037e4:	4b2b      	ldr	r3, [pc, #172]	; (8003894 <LED_Task+0x170>)
 80037e6:	781a      	ldrb	r2, [r3, #0]
 80037e8:	4b2b      	ldr	r3, [pc, #172]	; (8003898 <LED_Task+0x174>)
 80037ea:	701a      	strb	r2, [r3, #0]
        	TxData[1] = RxData[1];
 80037ec:	4b29      	ldr	r3, [pc, #164]	; (8003894 <LED_Task+0x170>)
 80037ee:	785a      	ldrb	r2, [r3, #1]
 80037f0:	4b29      	ldr	r3, [pc, #164]	; (8003898 <LED_Task+0x174>)
 80037f2:	705a      	strb	r2, [r3, #1]
        	TxData[2] = RxData[2];
 80037f4:	4b27      	ldr	r3, [pc, #156]	; (8003894 <LED_Task+0x170>)
 80037f6:	789a      	ldrb	r2, [r3, #2]
 80037f8:	4b27      	ldr	r3, [pc, #156]	; (8003898 <LED_Task+0x174>)
 80037fa:	709a      	strb	r2, [r3, #2]
        	TxData[3] = RxData[3];
 80037fc:	4b25      	ldr	r3, [pc, #148]	; (8003894 <LED_Task+0x170>)
 80037fe:	78da      	ldrb	r2, [r3, #3]
 8003800:	4b25      	ldr	r3, [pc, #148]	; (8003898 <LED_Task+0x174>)
 8003802:	70da      	strb	r2, [r3, #3]
        	TxData[4] = RxData[4];
 8003804:	4b23      	ldr	r3, [pc, #140]	; (8003894 <LED_Task+0x170>)
 8003806:	791a      	ldrb	r2, [r3, #4]
 8003808:	4b23      	ldr	r3, [pc, #140]	; (8003898 <LED_Task+0x174>)
 800380a:	711a      	strb	r2, [r3, #4]
        	TxData[5] = RxData[5];
 800380c:	4b21      	ldr	r3, [pc, #132]	; (8003894 <LED_Task+0x170>)
 800380e:	795a      	ldrb	r2, [r3, #5]
 8003810:	4b21      	ldr	r3, [pc, #132]	; (8003898 <LED_Task+0x174>)
 8003812:	715a      	strb	r2, [r3, #5]
        	TxData[6] = 0x82;
 8003814:	4b20      	ldr	r3, [pc, #128]	; (8003898 <LED_Task+0x174>)
 8003816:	2282      	movs	r2, #130	; 0x82
 8003818:	719a      	strb	r2, [r3, #6]
        	TxData[7] = RxData[7];
 800381a:	4b1e      	ldr	r3, [pc, #120]	; (8003894 <LED_Task+0x170>)
 800381c:	79da      	ldrb	r2, [r3, #7]
 800381e:	4b1e      	ldr	r3, [pc, #120]	; (8003898 <LED_Task+0x174>)
 8003820:	71da      	strb	r2, [r3, #7]

        	printf("Write req from CAN BUS (%d, %d, %d, %d, %d, %d, %d, %d)\n",TxData[0],TxData[1],TxData[2],TxData[3],TxData[4],TxData[5],TxData[6],TxData[7]);
 8003822:	4b1d      	ldr	r3, [pc, #116]	; (8003898 <LED_Task+0x174>)
 8003824:	781b      	ldrb	r3, [r3, #0]
 8003826:	461d      	mov	r5, r3
 8003828:	4b1b      	ldr	r3, [pc, #108]	; (8003898 <LED_Task+0x174>)
 800382a:	785b      	ldrb	r3, [r3, #1]
 800382c:	461e      	mov	r6, r3
 800382e:	4b1a      	ldr	r3, [pc, #104]	; (8003898 <LED_Task+0x174>)
 8003830:	789b      	ldrb	r3, [r3, #2]
 8003832:	469c      	mov	ip, r3
 8003834:	4b18      	ldr	r3, [pc, #96]	; (8003898 <LED_Task+0x174>)
 8003836:	78db      	ldrb	r3, [r3, #3]
 8003838:	461a      	mov	r2, r3
 800383a:	4b17      	ldr	r3, [pc, #92]	; (8003898 <LED_Task+0x174>)
 800383c:	791b      	ldrb	r3, [r3, #4]
 800383e:	4619      	mov	r1, r3
 8003840:	4b15      	ldr	r3, [pc, #84]	; (8003898 <LED_Task+0x174>)
 8003842:	795b      	ldrb	r3, [r3, #5]
 8003844:	4618      	mov	r0, r3
 8003846:	4b14      	ldr	r3, [pc, #80]	; (8003898 <LED_Task+0x174>)
 8003848:	799b      	ldrb	r3, [r3, #6]
 800384a:	461c      	mov	r4, r3
 800384c:	4b12      	ldr	r3, [pc, #72]	; (8003898 <LED_Task+0x174>)
 800384e:	79db      	ldrb	r3, [r3, #7]
 8003850:	9304      	str	r3, [sp, #16]
 8003852:	9403      	str	r4, [sp, #12]
 8003854:	9002      	str	r0, [sp, #8]
 8003856:	9101      	str	r1, [sp, #4]
 8003858:	9200      	str	r2, [sp, #0]
 800385a:	4663      	mov	r3, ip
 800385c:	4632      	mov	r2, r6
 800385e:	4629      	mov	r1, r5
 8003860:	4814      	ldr	r0, [pc, #80]	; (80038b4 <LED_Task+0x190>)
 8003862:	f005 fc9b 	bl	800919c <iprintf>

        	if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK)
 8003866:	4b0e      	ldr	r3, [pc, #56]	; (80038a0 <LED_Task+0x17c>)
 8003868:	4a0b      	ldr	r2, [pc, #44]	; (8003898 <LED_Task+0x174>)
 800386a:	490e      	ldr	r1, [pc, #56]	; (80038a4 <LED_Task+0x180>)
 800386c:	480e      	ldr	r0, [pc, #56]	; (80038a8 <LED_Task+0x184>)
 800386e:	f002 ff47 	bl	8006700 <HAL_CAN_AddTxMessage>
 8003872:	4603      	mov	r3, r0
 8003874:	2b00      	cmp	r3, #0
 8003876:	f43f af59 	beq.w	800372c <LED_Task+0x8>
        	{
        		printf("msg NOT sent \n into the error_handler\n");
 800387a:	480c      	ldr	r0, [pc, #48]	; (80038ac <LED_Task+0x188>)
 800387c:	f005 fcf4 	bl	8009268 <puts>
        		Error_Handler();
 8003880:	f001 fc26 	bl	80050d0 <Error_Handler>
 8003884:	e752      	b.n	800372c <LED_Task+0x8>
        	}
        }
        else
        {
        	printf("Operation does not match \n");
 8003886:	480c      	ldr	r0, [pc, #48]	; (80038b8 <LED_Task+0x194>)
 8003888:	f005 fcee 	bl	8009268 <puts>
        ulTaskNotifyTake(pdTRUE, portMAX_DELAY);  // Wait for a notification
 800388c:	e74e      	b.n	800372c <LED_Task+0x8>
 800388e:	bf00      	nop
 8003890:	08009fc8 	.word	0x08009fc8
 8003894:	2001310c 	.word	0x2001310c
 8003898:	20013104 	.word	0x20013104
 800389c:	40010000 	.word	0x40010000
 80038a0:	20013114 	.word	0x20013114
 80038a4:	200130d0 	.word	0x200130d0
 80038a8:	20012ec4 	.word	0x20012ec4
 80038ac:	08009f94 	.word	0x08009f94
 80038b0:	08009fd8 	.word	0x08009fd8
 80038b4:	0800a010 	.word	0x0800a010
 80038b8:	0800a04c 	.word	0x0800a04c

080038bc <CH_Select1>:
    }
}


void CH_Select1(void)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b084      	sub	sp, #16
 80038c0:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 80038c2:	463b      	mov	r3, r7
 80038c4:	2200      	movs	r2, #0
 80038c6:	601a      	str	r2, [r3, #0]
 80038c8:	605a      	str	r2, [r3, #4]
 80038ca:	609a      	str	r2, [r3, #8]
 80038cc:	60da      	str	r2, [r3, #12]
	  sConfig.Channel = ADC_CHANNEL_1;
 80038ce:	2301      	movs	r3, #1
 80038d0:	603b      	str	r3, [r7, #0]
	  sConfig.Rank = 1;
 80038d2:	2301      	movs	r3, #1
 80038d4:	607b      	str	r3, [r7, #4]
	  sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 80038d6:	2304      	movs	r3, #4
 80038d8:	60bb      	str	r3, [r7, #8]
    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80038da:	463b      	mov	r3, r7
 80038dc:	4619      	mov	r1, r3
 80038de:	4806      	ldr	r0, [pc, #24]	; (80038f8 <CH_Select1+0x3c>)
 80038e0:	f002 fac0 	bl	8005e64 <HAL_ADC_ConfigChannel>
 80038e4:	4603      	mov	r3, r0
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d001      	beq.n	80038ee <CH_Select1+0x32>
    {
       Error_Handler();
 80038ea:	f001 fbf1 	bl	80050d0 <Error_Handler>
    }
}
 80038ee:	bf00      	nop
 80038f0:	3710      	adds	r7, #16
 80038f2:	46bd      	mov	sp, r7
 80038f4:	bd80      	pop	{r7, pc}
 80038f6:	bf00      	nop
 80038f8:	20012e34 	.word	0x20012e34

080038fc <CH_Select2>:
void CH_Select2(void)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b084      	sub	sp, #16
 8003900:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8003902:	463b      	mov	r3, r7
 8003904:	2200      	movs	r2, #0
 8003906:	601a      	str	r2, [r3, #0]
 8003908:	605a      	str	r2, [r3, #4]
 800390a:	609a      	str	r2, [r3, #8]
 800390c:	60da      	str	r2, [r3, #12]
	  sConfig.Channel = ADC_CHANNEL_2;
 800390e:	2302      	movs	r3, #2
 8003910:	603b      	str	r3, [r7, #0]
	  sConfig.Rank = 1;
 8003912:	2301      	movs	r3, #1
 8003914:	607b      	str	r3, [r7, #4]
    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003916:	463b      	mov	r3, r7
 8003918:	4619      	mov	r1, r3
 800391a:	4806      	ldr	r0, [pc, #24]	; (8003934 <CH_Select2+0x38>)
 800391c:	f002 faa2 	bl	8005e64 <HAL_ADC_ConfigChannel>
 8003920:	4603      	mov	r3, r0
 8003922:	2b00      	cmp	r3, #0
 8003924:	d001      	beq.n	800392a <CH_Select2+0x2e>
    {
       Error_Handler();
 8003926:	f001 fbd3 	bl	80050d0 <Error_Handler>
    }
}
 800392a:	bf00      	nop
 800392c:	3710      	adds	r7, #16
 800392e:	46bd      	mov	sp, r7
 8003930:	bd80      	pop	{r7, pc}
 8003932:	bf00      	nop
 8003934:	20012e34 	.word	0x20012e34

08003938 <CH_Select3>:
void CH_Select3(void)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b084      	sub	sp, #16
 800393c:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 800393e:	463b      	mov	r3, r7
 8003940:	2200      	movs	r2, #0
 8003942:	601a      	str	r2, [r3, #0]
 8003944:	605a      	str	r2, [r3, #4]
 8003946:	609a      	str	r2, [r3, #8]
 8003948:	60da      	str	r2, [r3, #12]
	  sConfig.Channel = ADC_CHANNEL_3;
 800394a:	2303      	movs	r3, #3
 800394c:	603b      	str	r3, [r7, #0]
	  sConfig.Rank = 1;
 800394e:	2301      	movs	r3, #1
 8003950:	607b      	str	r3, [r7, #4]
    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003952:	463b      	mov	r3, r7
 8003954:	4619      	mov	r1, r3
 8003956:	4806      	ldr	r0, [pc, #24]	; (8003970 <CH_Select3+0x38>)
 8003958:	f002 fa84 	bl	8005e64 <HAL_ADC_ConfigChannel>
 800395c:	4603      	mov	r3, r0
 800395e:	2b00      	cmp	r3, #0
 8003960:	d001      	beq.n	8003966 <CH_Select3+0x2e>
    {
       Error_Handler();
 8003962:	f001 fbb5 	bl	80050d0 <Error_Handler>
    }
}
 8003966:	bf00      	nop
 8003968:	3710      	adds	r7, #16
 800396a:	46bd      	mov	sp, r7
 800396c:	bd80      	pop	{r7, pc}
 800396e:	bf00      	nop
 8003970:	20012e34 	.word	0x20012e34

08003974 <CH_Select4>:
void CH_Select4(void)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b084      	sub	sp, #16
 8003978:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 800397a:	463b      	mov	r3, r7
 800397c:	2200      	movs	r2, #0
 800397e:	601a      	str	r2, [r3, #0]
 8003980:	605a      	str	r2, [r3, #4]
 8003982:	609a      	str	r2, [r3, #8]
 8003984:	60da      	str	r2, [r3, #12]
	  sConfig.Channel = ADC_CHANNEL_4;
 8003986:	2304      	movs	r3, #4
 8003988:	603b      	str	r3, [r7, #0]
	  sConfig.Rank = 1;
 800398a:	2301      	movs	r3, #1
 800398c:	607b      	str	r3, [r7, #4]
    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800398e:	463b      	mov	r3, r7
 8003990:	4619      	mov	r1, r3
 8003992:	4806      	ldr	r0, [pc, #24]	; (80039ac <CH_Select4+0x38>)
 8003994:	f002 fa66 	bl	8005e64 <HAL_ADC_ConfigChannel>
 8003998:	4603      	mov	r3, r0
 800399a:	2b00      	cmp	r3, #0
 800399c:	d001      	beq.n	80039a2 <CH_Select4+0x2e>
    {
       Error_Handler();
 800399e:	f001 fb97 	bl	80050d0 <Error_Handler>
    }
}
 80039a2:	bf00      	nop
 80039a4:	3710      	adds	r7, #16
 80039a6:	46bd      	mov	sp, r7
 80039a8:	bd80      	pop	{r7, pc}
 80039aa:	bf00      	nop
 80039ac:	20012e34 	.word	0x20012e34

080039b0 <CH_Select5>:
void CH_Select5(void)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b084      	sub	sp, #16
 80039b4:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 80039b6:	463b      	mov	r3, r7
 80039b8:	2200      	movs	r2, #0
 80039ba:	601a      	str	r2, [r3, #0]
 80039bc:	605a      	str	r2, [r3, #4]
 80039be:	609a      	str	r2, [r3, #8]
 80039c0:	60da      	str	r2, [r3, #12]
	  sConfig.Channel = ADC_CHANNEL_5;
 80039c2:	2305      	movs	r3, #5
 80039c4:	603b      	str	r3, [r7, #0]
	  sConfig.Rank = 1;
 80039c6:	2301      	movs	r3, #1
 80039c8:	607b      	str	r3, [r7, #4]
    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80039ca:	463b      	mov	r3, r7
 80039cc:	4619      	mov	r1, r3
 80039ce:	4806      	ldr	r0, [pc, #24]	; (80039e8 <CH_Select5+0x38>)
 80039d0:	f002 fa48 	bl	8005e64 <HAL_ADC_ConfigChannel>
 80039d4:	4603      	mov	r3, r0
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d001      	beq.n	80039de <CH_Select5+0x2e>
    {
       Error_Handler();
 80039da:	f001 fb79 	bl	80050d0 <Error_Handler>
    }
}
 80039de:	bf00      	nop
 80039e0:	3710      	adds	r7, #16
 80039e2:	46bd      	mov	sp, r7
 80039e4:	bd80      	pop	{r7, pc}
 80039e6:	bf00      	nop
 80039e8:	20012e34 	.word	0x20012e34

080039ec <CH_Select6>:
void CH_Select6(void)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b084      	sub	sp, #16
 80039f0:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 80039f2:	463b      	mov	r3, r7
 80039f4:	2200      	movs	r2, #0
 80039f6:	601a      	str	r2, [r3, #0]
 80039f8:	605a      	str	r2, [r3, #4]
 80039fa:	609a      	str	r2, [r3, #8]
 80039fc:	60da      	str	r2, [r3, #12]
	  sConfig.Channel = ADC_CHANNEL_10;
 80039fe:	230a      	movs	r3, #10
 8003a00:	603b      	str	r3, [r7, #0]
	  sConfig.Rank = 1;
 8003a02:	2301      	movs	r3, #1
 8003a04:	607b      	str	r3, [r7, #4]
    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003a06:	463b      	mov	r3, r7
 8003a08:	4619      	mov	r1, r3
 8003a0a:	4806      	ldr	r0, [pc, #24]	; (8003a24 <CH_Select6+0x38>)
 8003a0c:	f002 fa2a 	bl	8005e64 <HAL_ADC_ConfigChannel>
 8003a10:	4603      	mov	r3, r0
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d001      	beq.n	8003a1a <CH_Select6+0x2e>
    {
       Error_Handler();
 8003a16:	f001 fb5b 	bl	80050d0 <Error_Handler>
    }
}
 8003a1a:	bf00      	nop
 8003a1c:	3710      	adds	r7, #16
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bd80      	pop	{r7, pc}
 8003a22:	bf00      	nop
 8003a24:	20012e34 	.word	0x20012e34

08003a28 <CH_Select7>:
void CH_Select7(void)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b084      	sub	sp, #16
 8003a2c:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8003a2e:	463b      	mov	r3, r7
 8003a30:	2200      	movs	r2, #0
 8003a32:	601a      	str	r2, [r3, #0]
 8003a34:	605a      	str	r2, [r3, #4]
 8003a36:	609a      	str	r2, [r3, #8]
 8003a38:	60da      	str	r2, [r3, #12]
	  sConfig.Channel = ADC_CHANNEL_11;
 8003a3a:	230b      	movs	r3, #11
 8003a3c:	603b      	str	r3, [r7, #0]
	  sConfig.Rank = 1;
 8003a3e:	2301      	movs	r3, #1
 8003a40:	607b      	str	r3, [r7, #4]
    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003a42:	463b      	mov	r3, r7
 8003a44:	4619      	mov	r1, r3
 8003a46:	4806      	ldr	r0, [pc, #24]	; (8003a60 <CH_Select7+0x38>)
 8003a48:	f002 fa0c 	bl	8005e64 <HAL_ADC_ConfigChannel>
 8003a4c:	4603      	mov	r3, r0
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d001      	beq.n	8003a56 <CH_Select7+0x2e>
    {
       Error_Handler();
 8003a52:	f001 fb3d 	bl	80050d0 <Error_Handler>
    }
}
 8003a56:	bf00      	nop
 8003a58:	3710      	adds	r7, #16
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	bd80      	pop	{r7, pc}
 8003a5e:	bf00      	nop
 8003a60:	20012e34 	.word	0x20012e34

08003a64 <CH_Select8>:
void CH_Select8(void)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b084      	sub	sp, #16
 8003a68:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8003a6a:	463b      	mov	r3, r7
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	601a      	str	r2, [r3, #0]
 8003a70:	605a      	str	r2, [r3, #4]
 8003a72:	609a      	str	r2, [r3, #8]
 8003a74:	60da      	str	r2, [r3, #12]
	sConfig.Channel = ADC_CHANNEL_12;
 8003a76:	230c      	movs	r3, #12
 8003a78:	603b      	str	r3, [r7, #0]
	  sConfig.Rank = 1;
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	607b      	str	r3, [r7, #4]
    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003a7e:	463b      	mov	r3, r7
 8003a80:	4619      	mov	r1, r3
 8003a82:	4806      	ldr	r0, [pc, #24]	; (8003a9c <CH_Select8+0x38>)
 8003a84:	f002 f9ee 	bl	8005e64 <HAL_ADC_ConfigChannel>
 8003a88:	4603      	mov	r3, r0
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d001      	beq.n	8003a92 <CH_Select8+0x2e>
    {
       Error_Handler();
 8003a8e:	f001 fb1f 	bl	80050d0 <Error_Handler>
    }
}
 8003a92:	bf00      	nop
 8003a94:	3710      	adds	r7, #16
 8003a96:	46bd      	mov	sp, r7
 8003a98:	bd80      	pop	{r7, pc}
 8003a9a:	bf00      	nop
 8003a9c:	20012e34 	.word	0x20012e34

08003aa0 <CH_Select9>:
void CH_Select9(void)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b084      	sub	sp, #16
 8003aa4:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8003aa6:	463b      	mov	r3, r7
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	601a      	str	r2, [r3, #0]
 8003aac:	605a      	str	r2, [r3, #4]
 8003aae:	609a      	str	r2, [r3, #8]
 8003ab0:	60da      	str	r2, [r3, #12]
	  sConfig.Channel = ADC_CHANNEL_13;
 8003ab2:	230d      	movs	r3, #13
 8003ab4:	603b      	str	r3, [r7, #0]
	  sConfig.Rank = 1;
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	607b      	str	r3, [r7, #4]
    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003aba:	463b      	mov	r3, r7
 8003abc:	4619      	mov	r1, r3
 8003abe:	4806      	ldr	r0, [pc, #24]	; (8003ad8 <CH_Select9+0x38>)
 8003ac0:	f002 f9d0 	bl	8005e64 <HAL_ADC_ConfigChannel>
 8003ac4:	4603      	mov	r3, r0
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d001      	beq.n	8003ace <CH_Select9+0x2e>
    {
       Error_Handler();
 8003aca:	f001 fb01 	bl	80050d0 <Error_Handler>
    }
}
 8003ace:	bf00      	nop
 8003ad0:	3710      	adds	r7, #16
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	bd80      	pop	{r7, pc}
 8003ad6:	bf00      	nop
 8003ad8:	20012e34 	.word	0x20012e34

08003adc <CH_Select10>:
void CH_Select10(void)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b084      	sub	sp, #16
 8003ae0:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8003ae2:	463b      	mov	r3, r7
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	601a      	str	r2, [r3, #0]
 8003ae8:	605a      	str	r2, [r3, #4]
 8003aea:	609a      	str	r2, [r3, #8]
 8003aec:	60da      	str	r2, [r3, #12]
	sConfig.Channel = ADC_CHANNEL_14;
 8003aee:	230e      	movs	r3, #14
 8003af0:	603b      	str	r3, [r7, #0]
	  sConfig.Rank = 1;
 8003af2:	2301      	movs	r3, #1
 8003af4:	607b      	str	r3, [r7, #4]
    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003af6:	463b      	mov	r3, r7
 8003af8:	4619      	mov	r1, r3
 8003afa:	4806      	ldr	r0, [pc, #24]	; (8003b14 <CH_Select10+0x38>)
 8003afc:	f002 f9b2 	bl	8005e64 <HAL_ADC_ConfigChannel>
 8003b00:	4603      	mov	r3, r0
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d001      	beq.n	8003b0a <CH_Select10+0x2e>
    {
       Error_Handler();
 8003b06:	f001 fae3 	bl	80050d0 <Error_Handler>
    }
}
 8003b0a:	bf00      	nop
 8003b0c:	3710      	adds	r7, #16
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	bd80      	pop	{r7, pc}
 8003b12:	bf00      	nop
 8003b14:	20012e34 	.word	0x20012e34

08003b18 <CH_Select11>:
void CH_Select11(void)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b084      	sub	sp, #16
 8003b1c:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8003b1e:	463b      	mov	r3, r7
 8003b20:	2200      	movs	r2, #0
 8003b22:	601a      	str	r2, [r3, #0]
 8003b24:	605a      	str	r2, [r3, #4]
 8003b26:	609a      	str	r2, [r3, #8]
 8003b28:	60da      	str	r2, [r3, #12]
	sConfig.Channel = ADC_CHANNEL_15;
 8003b2a:	230f      	movs	r3, #15
 8003b2c:	603b      	str	r3, [r7, #0]
		  sConfig.Rank = 1;
 8003b2e:	2301      	movs	r3, #1
 8003b30:	607b      	str	r3, [r7, #4]
    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003b32:	463b      	mov	r3, r7
 8003b34:	4619      	mov	r1, r3
 8003b36:	4806      	ldr	r0, [pc, #24]	; (8003b50 <CH_Select11+0x38>)
 8003b38:	f002 f994 	bl	8005e64 <HAL_ADC_ConfigChannel>
 8003b3c:	4603      	mov	r3, r0
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d001      	beq.n	8003b46 <CH_Select11+0x2e>
    {
       Error_Handler();
 8003b42:	f001 fac5 	bl	80050d0 <Error_Handler>
    }
}
 8003b46:	bf00      	nop
 8003b48:	3710      	adds	r7, #16
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	bd80      	pop	{r7, pc}
 8003b4e:	bf00      	nop
 8003b50:	20012e34 	.word	0x20012e34

08003b54 <CH_Select12>:
void CH_Select12(void)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b084      	sub	sp, #16
 8003b58:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8003b5a:	463b      	mov	r3, r7
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	601a      	str	r2, [r3, #0]
 8003b60:	605a      	str	r2, [r3, #4]
 8003b62:	609a      	str	r2, [r3, #8]
 8003b64:	60da      	str	r2, [r3, #12]
	  sConfig.Channel = ADC_CHANNEL_4;
 8003b66:	2304      	movs	r3, #4
 8003b68:	603b      	str	r3, [r7, #0]
	  sConfig.Rank = 2;
 8003b6a:	2302      	movs	r3, #2
 8003b6c:	607b      	str	r3, [r7, #4]
	  sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 8003b6e:	2304      	movs	r3, #4
 8003b70:	60bb      	str	r3, [r7, #8]
    if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8003b72:	463b      	mov	r3, r7
 8003b74:	4619      	mov	r1, r3
 8003b76:	4806      	ldr	r0, [pc, #24]	; (8003b90 <CH_Select12+0x3c>)
 8003b78:	f002 f974 	bl	8005e64 <HAL_ADC_ConfigChannel>
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d001      	beq.n	8003b86 <CH_Select12+0x32>
    {
       Error_Handler();
 8003b82:	f001 faa5 	bl	80050d0 <Error_Handler>
    }
}
 8003b86:	bf00      	nop
 8003b88:	3710      	adds	r7, #16
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	bd80      	pop	{r7, pc}
 8003b8e:	bf00      	nop
 8003b90:	20012e7c 	.word	0x20012e7c

08003b94 <CH_Select13>:
void CH_Select13(void)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b084      	sub	sp, #16
 8003b98:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8003b9a:	463b      	mov	r3, r7
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	601a      	str	r2, [r3, #0]
 8003ba0:	605a      	str	r2, [r3, #4]
 8003ba2:	609a      	str	r2, [r3, #8]
 8003ba4:	60da      	str	r2, [r3, #12]
	sConfig.Channel = ADC_CHANNEL_5;
 8003ba6:	2305      	movs	r3, #5
 8003ba8:	603b      	str	r3, [r7, #0]
	  sConfig.Rank = 2;
 8003baa:	2302      	movs	r3, #2
 8003bac:	607b      	str	r3, [r7, #4]

    if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8003bae:	463b      	mov	r3, r7
 8003bb0:	4619      	mov	r1, r3
 8003bb2:	4806      	ldr	r0, [pc, #24]	; (8003bcc <CH_Select13+0x38>)
 8003bb4:	f002 f956 	bl	8005e64 <HAL_ADC_ConfigChannel>
 8003bb8:	4603      	mov	r3, r0
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d001      	beq.n	8003bc2 <CH_Select13+0x2e>
    {
       Error_Handler();
 8003bbe:	f001 fa87 	bl	80050d0 <Error_Handler>
    }
}
 8003bc2:	bf00      	nop
 8003bc4:	3710      	adds	r7, #16
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	bd80      	pop	{r7, pc}
 8003bca:	bf00      	nop
 8003bcc:	20012e7c 	.word	0x20012e7c

08003bd0 <CH_Select14>:
void CH_Select14(void)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b084      	sub	sp, #16
 8003bd4:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8003bd6:	463b      	mov	r3, r7
 8003bd8:	2200      	movs	r2, #0
 8003bda:	601a      	str	r2, [r3, #0]
 8003bdc:	605a      	str	r2, [r3, #4]
 8003bde:	609a      	str	r2, [r3, #8]
 8003be0:	60da      	str	r2, [r3, #12]
	  sConfig.Channel = ADC_CHANNEL_6;
 8003be2:	2306      	movs	r3, #6
 8003be4:	603b      	str	r3, [r7, #0]
	  sConfig.Rank = 2;
 8003be6:	2302      	movs	r3, #2
 8003be8:	607b      	str	r3, [r7, #4]
    if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8003bea:	463b      	mov	r3, r7
 8003bec:	4619      	mov	r1, r3
 8003bee:	4806      	ldr	r0, [pc, #24]	; (8003c08 <CH_Select14+0x38>)
 8003bf0:	f002 f938 	bl	8005e64 <HAL_ADC_ConfigChannel>
 8003bf4:	4603      	mov	r3, r0
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d001      	beq.n	8003bfe <CH_Select14+0x2e>
    {
       Error_Handler();
 8003bfa:	f001 fa69 	bl	80050d0 <Error_Handler>
    }
}
 8003bfe:	bf00      	nop
 8003c00:	3710      	adds	r7, #16
 8003c02:	46bd      	mov	sp, r7
 8003c04:	bd80      	pop	{r7, pc}
 8003c06:	bf00      	nop
 8003c08:	20012e7c 	.word	0x20012e7c

08003c0c <CH_Select15>:
void CH_Select15(void)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b084      	sub	sp, #16
 8003c10:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8003c12:	463b      	mov	r3, r7
 8003c14:	2200      	movs	r2, #0
 8003c16:	601a      	str	r2, [r3, #0]
 8003c18:	605a      	str	r2, [r3, #4]
 8003c1a:	609a      	str	r2, [r3, #8]
 8003c1c:	60da      	str	r2, [r3, #12]
	sConfig.Channel = ADC_CHANNEL_7;
 8003c1e:	2307      	movs	r3, #7
 8003c20:	603b      	str	r3, [r7, #0]
	  sConfig.Rank = 2;
 8003c22:	2302      	movs	r3, #2
 8003c24:	607b      	str	r3, [r7, #4]
    if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8003c26:	463b      	mov	r3, r7
 8003c28:	4619      	mov	r1, r3
 8003c2a:	4806      	ldr	r0, [pc, #24]	; (8003c44 <CH_Select15+0x38>)
 8003c2c:	f002 f91a 	bl	8005e64 <HAL_ADC_ConfigChannel>
 8003c30:	4603      	mov	r3, r0
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d001      	beq.n	8003c3a <CH_Select15+0x2e>
    {
       Error_Handler();
 8003c36:	f001 fa4b 	bl	80050d0 <Error_Handler>
    }
}
 8003c3a:	bf00      	nop
 8003c3c:	3710      	adds	r7, #16
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	bd80      	pop	{r7, pc}
 8003c42:	bf00      	nop
 8003c44:	20012e7c 	.word	0x20012e7c

08003c48 <CH_Select16>:
void CH_Select16(void)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b084      	sub	sp, #16
 8003c4c:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8003c4e:	463b      	mov	r3, r7
 8003c50:	2200      	movs	r2, #0
 8003c52:	601a      	str	r2, [r3, #0]
 8003c54:	605a      	str	r2, [r3, #4]
 8003c56:	609a      	str	r2, [r3, #8]
 8003c58:	60da      	str	r2, [r3, #12]
	 sConfig.Channel = ADC_CHANNEL_8;
 8003c5a:	2308      	movs	r3, #8
 8003c5c:	603b      	str	r3, [r7, #0]
	  sConfig.Rank = 2;
 8003c5e:	2302      	movs	r3, #2
 8003c60:	607b      	str	r3, [r7, #4]
    if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8003c62:	463b      	mov	r3, r7
 8003c64:	4619      	mov	r1, r3
 8003c66:	4806      	ldr	r0, [pc, #24]	; (8003c80 <CH_Select16+0x38>)
 8003c68:	f002 f8fc 	bl	8005e64 <HAL_ADC_ConfigChannel>
 8003c6c:	4603      	mov	r3, r0
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d001      	beq.n	8003c76 <CH_Select16+0x2e>
    {
       Error_Handler();
 8003c72:	f001 fa2d 	bl	80050d0 <Error_Handler>
    }
}
 8003c76:	bf00      	nop
 8003c78:	3710      	adds	r7, #16
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	bd80      	pop	{r7, pc}
 8003c7e:	bf00      	nop
 8003c80:	20012e7c 	.word	0x20012e7c

08003c84 <CH_Select17>:
void CH_Select17(void)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b084      	sub	sp, #16
 8003c88:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8003c8a:	463b      	mov	r3, r7
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	601a      	str	r2, [r3, #0]
 8003c90:	605a      	str	r2, [r3, #4]
 8003c92:	609a      	str	r2, [r3, #8]
 8003c94:	60da      	str	r2, [r3, #12]
	sConfig.Channel = ADC_CHANNEL_9;
 8003c96:	2309      	movs	r3, #9
 8003c98:	603b      	str	r3, [r7, #0]
	  sConfig.Rank = 2;
 8003c9a:	2302      	movs	r3, #2
 8003c9c:	607b      	str	r3, [r7, #4]
    if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8003c9e:	463b      	mov	r3, r7
 8003ca0:	4619      	mov	r1, r3
 8003ca2:	4806      	ldr	r0, [pc, #24]	; (8003cbc <CH_Select17+0x38>)
 8003ca4:	f002 f8de 	bl	8005e64 <HAL_ADC_ConfigChannel>
 8003ca8:	4603      	mov	r3, r0
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d001      	beq.n	8003cb2 <CH_Select17+0x2e>
    {
       Error_Handler();
 8003cae:	f001 fa0f 	bl	80050d0 <Error_Handler>
    }
}
 8003cb2:	bf00      	nop
 8003cb4:	3710      	adds	r7, #16
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	bd80      	pop	{r7, pc}
 8003cba:	bf00      	nop
 8003cbc:	20012e7c 	.word	0x20012e7c

08003cc0 <ADC_Task>:
//    }
//}
//

static void ADC_Task(void* parameter)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b082      	sub	sp, #8
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
	while(1)
	{
        CH_Select1();
 8003cc8:	f7ff fdf8 	bl	80038bc <CH_Select1>
        HAL_ADC_Start(&hadc1);
 8003ccc:	48c2      	ldr	r0, [pc, #776]	; (8003fd8 <ADC_Task+0x318>)
 8003cce:	f001 ff2b 	bl	8005b28 <HAL_ADC_Start>
	 	HAL_ADC_PollForConversion(&hadc1,1000);
 8003cd2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003cd6:	48c0      	ldr	r0, [pc, #768]	; (8003fd8 <ADC_Task+0x318>)
 8003cd8:	f002 f82b 	bl	8005d32 <HAL_ADC_PollForConversion>
	 	ADC_VAL[0]=HAL_ADC_GetValue(&hadc1);
 8003cdc:	48be      	ldr	r0, [pc, #760]	; (8003fd8 <ADC_Task+0x318>)
 8003cde:	f002 f8b3 	bl	8005e48 <HAL_ADC_GetValue>
 8003ce2:	4603      	mov	r3, r0
 8003ce4:	b29a      	uxth	r2, r3
 8003ce6:	4bbd      	ldr	r3, [pc, #756]	; (8003fdc <ADC_Task+0x31c>)
 8003ce8:	801a      	strh	r2, [r3, #0]
	 	vTaskDelay(pdMS_TO_TICKS(50));
 8003cea:	2032      	movs	r0, #50	; 0x32
 8003cec:	f7fd fe6e 	bl	80019cc <vTaskDelay>
	 	HAL_ADC_Stop(&hadc1);
 8003cf0:	48b9      	ldr	r0, [pc, #740]	; (8003fd8 <ADC_Task+0x318>)
 8003cf2:	f001 ffeb 	bl	8005ccc <HAL_ADC_Stop>
	 	Voltage=(float)(ADC_VAL[0]*3.3)/4095;
 8003cf6:	4bb9      	ldr	r3, [pc, #740]	; (8003fdc <ADC_Task+0x31c>)
 8003cf8:	881b      	ldrh	r3, [r3, #0]
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	f7fc fd54 	bl	80007a8 <__aeabi_i2d>
 8003d00:	a3b3      	add	r3, pc, #716	; (adr r3, 8003fd0 <ADC_Task+0x310>)
 8003d02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d06:	f7fc fad3 	bl	80002b0 <__aeabi_dmul>
 8003d0a:	4602      	mov	r2, r0
 8003d0c:	460b      	mov	r3, r1
 8003d0e:	4610      	mov	r0, r2
 8003d10:	4619      	mov	r1, r3
 8003d12:	f7fc fdb3 	bl	800087c <__aeabi_d2f>
 8003d16:	ee06 0a90 	vmov	s13, r0
 8003d1a:	ed9f 7ab1 	vldr	s14, [pc, #708]	; 8003fe0 <ADC_Task+0x320>
 8003d1e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003d22:	4bb0      	ldr	r3, [pc, #704]	; (8003fe4 <ADC_Task+0x324>)
 8003d24:	edc3 7a00 	vstr	s15, [r3]
	 	TIM1->CCR1=ADC_VAL[0];
 8003d28:	4bac      	ldr	r3, [pc, #688]	; (8003fdc <ADC_Task+0x31c>)
 8003d2a:	881a      	ldrh	r2, [r3, #0]
 8003d2c:	4bae      	ldr	r3, [pc, #696]	; (8003fe8 <ADC_Task+0x328>)
 8003d2e:	635a      	str	r2, [r3, #52]	; 0x34
	 	//vTaskDelay(pdMS_TO_TICKS(100));

        CH_Select2();
 8003d30:	f7ff fde4 	bl	80038fc <CH_Select2>
        HAL_ADC_Start(&hadc1);
 8003d34:	48a8      	ldr	r0, [pc, #672]	; (8003fd8 <ADC_Task+0x318>)
 8003d36:	f001 fef7 	bl	8005b28 <HAL_ADC_Start>
	 	HAL_ADC_PollForConversion(&hadc1,10);
 8003d3a:	210a      	movs	r1, #10
 8003d3c:	48a6      	ldr	r0, [pc, #664]	; (8003fd8 <ADC_Task+0x318>)
 8003d3e:	f001 fff8 	bl	8005d32 <HAL_ADC_PollForConversion>
	 	ADC_VAL[1]=HAL_ADC_GetValue(&hadc1);
 8003d42:	48a5      	ldr	r0, [pc, #660]	; (8003fd8 <ADC_Task+0x318>)
 8003d44:	f002 f880 	bl	8005e48 <HAL_ADC_GetValue>
 8003d48:	4603      	mov	r3, r0
 8003d4a:	b29a      	uxth	r2, r3
 8003d4c:	4ba3      	ldr	r3, [pc, #652]	; (8003fdc <ADC_Task+0x31c>)
 8003d4e:	805a      	strh	r2, [r3, #2]
	 	vTaskDelay(pdMS_TO_TICKS(50));
 8003d50:	2032      	movs	r0, #50	; 0x32
 8003d52:	f7fd fe3b 	bl	80019cc <vTaskDelay>
	 	HAL_ADC_Stop(&hadc1);
 8003d56:	48a0      	ldr	r0, [pc, #640]	; (8003fd8 <ADC_Task+0x318>)
 8003d58:	f001 ffb8 	bl	8005ccc <HAL_ADC_Stop>
	 	Voltage=(float)(ADC_VAL[1]*3.3)/4095;
 8003d5c:	4b9f      	ldr	r3, [pc, #636]	; (8003fdc <ADC_Task+0x31c>)
 8003d5e:	885b      	ldrh	r3, [r3, #2]
 8003d60:	4618      	mov	r0, r3
 8003d62:	f7fc fd21 	bl	80007a8 <__aeabi_i2d>
 8003d66:	a39a      	add	r3, pc, #616	; (adr r3, 8003fd0 <ADC_Task+0x310>)
 8003d68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d6c:	f7fc faa0 	bl	80002b0 <__aeabi_dmul>
 8003d70:	4602      	mov	r2, r0
 8003d72:	460b      	mov	r3, r1
 8003d74:	4610      	mov	r0, r2
 8003d76:	4619      	mov	r1, r3
 8003d78:	f7fc fd80 	bl	800087c <__aeabi_d2f>
 8003d7c:	ee06 0a90 	vmov	s13, r0
 8003d80:	ed9f 7a97 	vldr	s14, [pc, #604]	; 8003fe0 <ADC_Task+0x320>
 8003d84:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003d88:	4b96      	ldr	r3, [pc, #600]	; (8003fe4 <ADC_Task+0x324>)
 8003d8a:	edc3 7a00 	vstr	s15, [r3]
	 	TIM1->CCR2=ADC_VAL[1];
 8003d8e:	4b93      	ldr	r3, [pc, #588]	; (8003fdc <ADC_Task+0x31c>)
 8003d90:	885a      	ldrh	r2, [r3, #2]
 8003d92:	4b95      	ldr	r3, [pc, #596]	; (8003fe8 <ADC_Task+0x328>)
 8003d94:	639a      	str	r2, [r3, #56]	; 0x38
	 	//vTaskDelay(pdMS_TO_TICKS(100));

        CH_Select3();
 8003d96:	f7ff fdcf 	bl	8003938 <CH_Select3>
        HAL_ADC_Start(&hadc1);
 8003d9a:	488f      	ldr	r0, [pc, #572]	; (8003fd8 <ADC_Task+0x318>)
 8003d9c:	f001 fec4 	bl	8005b28 <HAL_ADC_Start>
	 	HAL_ADC_PollForConversion(&hadc1,10);
 8003da0:	210a      	movs	r1, #10
 8003da2:	488d      	ldr	r0, [pc, #564]	; (8003fd8 <ADC_Task+0x318>)
 8003da4:	f001 ffc5 	bl	8005d32 <HAL_ADC_PollForConversion>
	 	ADC_VAL[2]=HAL_ADC_GetValue(&hadc1);
 8003da8:	488b      	ldr	r0, [pc, #556]	; (8003fd8 <ADC_Task+0x318>)
 8003daa:	f002 f84d 	bl	8005e48 <HAL_ADC_GetValue>
 8003dae:	4603      	mov	r3, r0
 8003db0:	b29a      	uxth	r2, r3
 8003db2:	4b8a      	ldr	r3, [pc, #552]	; (8003fdc <ADC_Task+0x31c>)
 8003db4:	809a      	strh	r2, [r3, #4]
	 	vTaskDelay(pdMS_TO_TICKS(50));
 8003db6:	2032      	movs	r0, #50	; 0x32
 8003db8:	f7fd fe08 	bl	80019cc <vTaskDelay>
	 	HAL_ADC_Stop(&hadc1);
 8003dbc:	4886      	ldr	r0, [pc, #536]	; (8003fd8 <ADC_Task+0x318>)
 8003dbe:	f001 ff85 	bl	8005ccc <HAL_ADC_Stop>
	 	Voltage=(float)(ADC_VAL[2]*3.3)/4095;
 8003dc2:	4b86      	ldr	r3, [pc, #536]	; (8003fdc <ADC_Task+0x31c>)
 8003dc4:	889b      	ldrh	r3, [r3, #4]
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	f7fc fcee 	bl	80007a8 <__aeabi_i2d>
 8003dcc:	a380      	add	r3, pc, #512	; (adr r3, 8003fd0 <ADC_Task+0x310>)
 8003dce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dd2:	f7fc fa6d 	bl	80002b0 <__aeabi_dmul>
 8003dd6:	4602      	mov	r2, r0
 8003dd8:	460b      	mov	r3, r1
 8003dda:	4610      	mov	r0, r2
 8003ddc:	4619      	mov	r1, r3
 8003dde:	f7fc fd4d 	bl	800087c <__aeabi_d2f>
 8003de2:	ee06 0a90 	vmov	s13, r0
 8003de6:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 8003fe0 <ADC_Task+0x320>
 8003dea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003dee:	4b7d      	ldr	r3, [pc, #500]	; (8003fe4 <ADC_Task+0x324>)
 8003df0:	edc3 7a00 	vstr	s15, [r3]
	 	TIM1->CCR3=ADC_VAL[2];
 8003df4:	4b79      	ldr	r3, [pc, #484]	; (8003fdc <ADC_Task+0x31c>)
 8003df6:	889a      	ldrh	r2, [r3, #4]
 8003df8:	4b7b      	ldr	r3, [pc, #492]	; (8003fe8 <ADC_Task+0x328>)
 8003dfa:	63da      	str	r2, [r3, #60]	; 0x3c
	 	//vTaskDelay(pdMS_TO_TICKS(100));

        CH_Select4();
 8003dfc:	f7ff fdba 	bl	8003974 <CH_Select4>
        HAL_ADC_Start(&hadc1);
 8003e00:	4875      	ldr	r0, [pc, #468]	; (8003fd8 <ADC_Task+0x318>)
 8003e02:	f001 fe91 	bl	8005b28 <HAL_ADC_Start>
	 	HAL_ADC_PollForConversion(&hadc1,10);
 8003e06:	210a      	movs	r1, #10
 8003e08:	4873      	ldr	r0, [pc, #460]	; (8003fd8 <ADC_Task+0x318>)
 8003e0a:	f001 ff92 	bl	8005d32 <HAL_ADC_PollForConversion>
	 	ADC_VAL[3]=HAL_ADC_GetValue(&hadc1);
 8003e0e:	4872      	ldr	r0, [pc, #456]	; (8003fd8 <ADC_Task+0x318>)
 8003e10:	f002 f81a 	bl	8005e48 <HAL_ADC_GetValue>
 8003e14:	4603      	mov	r3, r0
 8003e16:	b29a      	uxth	r2, r3
 8003e18:	4b70      	ldr	r3, [pc, #448]	; (8003fdc <ADC_Task+0x31c>)
 8003e1a:	80da      	strh	r2, [r3, #6]
	 	vTaskDelay(pdMS_TO_TICKS(50));
 8003e1c:	2032      	movs	r0, #50	; 0x32
 8003e1e:	f7fd fdd5 	bl	80019cc <vTaskDelay>
	 	HAL_ADC_Stop(&hadc1);
 8003e22:	486d      	ldr	r0, [pc, #436]	; (8003fd8 <ADC_Task+0x318>)
 8003e24:	f001 ff52 	bl	8005ccc <HAL_ADC_Stop>
	 	Voltage=(float)(ADC_VAL[3]*3.3)/4095;
 8003e28:	4b6c      	ldr	r3, [pc, #432]	; (8003fdc <ADC_Task+0x31c>)
 8003e2a:	88db      	ldrh	r3, [r3, #6]
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	f7fc fcbb 	bl	80007a8 <__aeabi_i2d>
 8003e32:	a367      	add	r3, pc, #412	; (adr r3, 8003fd0 <ADC_Task+0x310>)
 8003e34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e38:	f7fc fa3a 	bl	80002b0 <__aeabi_dmul>
 8003e3c:	4602      	mov	r2, r0
 8003e3e:	460b      	mov	r3, r1
 8003e40:	4610      	mov	r0, r2
 8003e42:	4619      	mov	r1, r3
 8003e44:	f7fc fd1a 	bl	800087c <__aeabi_d2f>
 8003e48:	ee06 0a90 	vmov	s13, r0
 8003e4c:	ed9f 7a64 	vldr	s14, [pc, #400]	; 8003fe0 <ADC_Task+0x320>
 8003e50:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003e54:	4b63      	ldr	r3, [pc, #396]	; (8003fe4 <ADC_Task+0x324>)
 8003e56:	edc3 7a00 	vstr	s15, [r3]
	 	TIM1->CCR4=ADC_VAL[3];
 8003e5a:	4b60      	ldr	r3, [pc, #384]	; (8003fdc <ADC_Task+0x31c>)
 8003e5c:	88da      	ldrh	r2, [r3, #6]
 8003e5e:	4b62      	ldr	r3, [pc, #392]	; (8003fe8 <ADC_Task+0x328>)
 8003e60:	641a      	str	r2, [r3, #64]	; 0x40
	 	//vTaskDelay(pdMS_TO_TICKS(100));

        CH_Select5();
 8003e62:	f7ff fda5 	bl	80039b0 <CH_Select5>
        HAL_ADC_Start(&hadc1);
 8003e66:	485c      	ldr	r0, [pc, #368]	; (8003fd8 <ADC_Task+0x318>)
 8003e68:	f001 fe5e 	bl	8005b28 <HAL_ADC_Start>
        HAL_ADC_PollForConversion(&hadc1,10);
 8003e6c:	210a      	movs	r1, #10
 8003e6e:	485a      	ldr	r0, [pc, #360]	; (8003fd8 <ADC_Task+0x318>)
 8003e70:	f001 ff5f 	bl	8005d32 <HAL_ADC_PollForConversion>
        ADC_VAL[4]=HAL_ADC_GetValue(&hadc1);
 8003e74:	4858      	ldr	r0, [pc, #352]	; (8003fd8 <ADC_Task+0x318>)
 8003e76:	f001 ffe7 	bl	8005e48 <HAL_ADC_GetValue>
 8003e7a:	4603      	mov	r3, r0
 8003e7c:	b29a      	uxth	r2, r3
 8003e7e:	4b57      	ldr	r3, [pc, #348]	; (8003fdc <ADC_Task+0x31c>)
 8003e80:	811a      	strh	r2, [r3, #8]
        vTaskDelay(pdMS_TO_TICKS(50));
 8003e82:	2032      	movs	r0, #50	; 0x32
 8003e84:	f7fd fda2 	bl	80019cc <vTaskDelay>
        HAL_ADC_Stop(&hadc1);
 8003e88:	4853      	ldr	r0, [pc, #332]	; (8003fd8 <ADC_Task+0x318>)
 8003e8a:	f001 ff1f 	bl	8005ccc <HAL_ADC_Stop>
        Voltage=(float)(ADC_VAL[4]*3.3)/4095;
 8003e8e:	4b53      	ldr	r3, [pc, #332]	; (8003fdc <ADC_Task+0x31c>)
 8003e90:	891b      	ldrh	r3, [r3, #8]
 8003e92:	4618      	mov	r0, r3
 8003e94:	f7fc fc88 	bl	80007a8 <__aeabi_i2d>
 8003e98:	a34d      	add	r3, pc, #308	; (adr r3, 8003fd0 <ADC_Task+0x310>)
 8003e9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e9e:	f7fc fa07 	bl	80002b0 <__aeabi_dmul>
 8003ea2:	4602      	mov	r2, r0
 8003ea4:	460b      	mov	r3, r1
 8003ea6:	4610      	mov	r0, r2
 8003ea8:	4619      	mov	r1, r3
 8003eaa:	f7fc fce7 	bl	800087c <__aeabi_d2f>
 8003eae:	ee06 0a90 	vmov	s13, r0
 8003eb2:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 8003fe0 <ADC_Task+0x320>
 8003eb6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003eba:	4b4a      	ldr	r3, [pc, #296]	; (8003fe4 <ADC_Task+0x324>)
 8003ebc:	edc3 7a00 	vstr	s15, [r3]
        TIM3->CCR1=ADC_VAL[4];
 8003ec0:	4b46      	ldr	r3, [pc, #280]	; (8003fdc <ADC_Task+0x31c>)
 8003ec2:	891a      	ldrh	r2, [r3, #8]
 8003ec4:	4b49      	ldr	r3, [pc, #292]	; (8003fec <ADC_Task+0x32c>)
 8003ec6:	635a      	str	r2, [r3, #52]	; 0x34
	 	//vTaskDelay(pdMS_TO_TICKS(100));

	 	CH_Select6();
 8003ec8:	f7ff fd90 	bl	80039ec <CH_Select6>
	 	HAL_ADC_Start(&hadc1);
 8003ecc:	4842      	ldr	r0, [pc, #264]	; (8003fd8 <ADC_Task+0x318>)
 8003ece:	f001 fe2b 	bl	8005b28 <HAL_ADC_Start>
	 	HAL_ADC_PollForConversion(&hadc1,10);
 8003ed2:	210a      	movs	r1, #10
 8003ed4:	4840      	ldr	r0, [pc, #256]	; (8003fd8 <ADC_Task+0x318>)
 8003ed6:	f001 ff2c 	bl	8005d32 <HAL_ADC_PollForConversion>
	 	ADC_VAL[5]=HAL_ADC_GetValue(&hadc1);
 8003eda:	483f      	ldr	r0, [pc, #252]	; (8003fd8 <ADC_Task+0x318>)
 8003edc:	f001 ffb4 	bl	8005e48 <HAL_ADC_GetValue>
 8003ee0:	4603      	mov	r3, r0
 8003ee2:	b29a      	uxth	r2, r3
 8003ee4:	4b3d      	ldr	r3, [pc, #244]	; (8003fdc <ADC_Task+0x31c>)
 8003ee6:	815a      	strh	r2, [r3, #10]
	 	vTaskDelay(pdMS_TO_TICKS(50));
 8003ee8:	2032      	movs	r0, #50	; 0x32
 8003eea:	f7fd fd6f 	bl	80019cc <vTaskDelay>
	 	HAL_ADC_Stop(&hadc1);
 8003eee:	483a      	ldr	r0, [pc, #232]	; (8003fd8 <ADC_Task+0x318>)
 8003ef0:	f001 feec 	bl	8005ccc <HAL_ADC_Stop>
	 	Voltage=(float)(ADC_VAL[5]*3.3)/4095;
 8003ef4:	4b39      	ldr	r3, [pc, #228]	; (8003fdc <ADC_Task+0x31c>)
 8003ef6:	895b      	ldrh	r3, [r3, #10]
 8003ef8:	4618      	mov	r0, r3
 8003efa:	f7fc fc55 	bl	80007a8 <__aeabi_i2d>
 8003efe:	a334      	add	r3, pc, #208	; (adr r3, 8003fd0 <ADC_Task+0x310>)
 8003f00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f04:	f7fc f9d4 	bl	80002b0 <__aeabi_dmul>
 8003f08:	4602      	mov	r2, r0
 8003f0a:	460b      	mov	r3, r1
 8003f0c:	4610      	mov	r0, r2
 8003f0e:	4619      	mov	r1, r3
 8003f10:	f7fc fcb4 	bl	800087c <__aeabi_d2f>
 8003f14:	ee06 0a90 	vmov	s13, r0
 8003f18:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8003fe0 <ADC_Task+0x320>
 8003f1c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003f20:	4b30      	ldr	r3, [pc, #192]	; (8003fe4 <ADC_Task+0x324>)
 8003f22:	edc3 7a00 	vstr	s15, [r3]
	 	TIM3->CCR2=ADC_VAL[5];
 8003f26:	4b2d      	ldr	r3, [pc, #180]	; (8003fdc <ADC_Task+0x31c>)
 8003f28:	895a      	ldrh	r2, [r3, #10]
 8003f2a:	4b30      	ldr	r3, [pc, #192]	; (8003fec <ADC_Task+0x32c>)
 8003f2c:	639a      	str	r2, [r3, #56]	; 0x38
        //vTaskDelay(pdMS_TO_TICKS(100));

        CH_Select7();
 8003f2e:	f7ff fd7b 	bl	8003a28 <CH_Select7>
        HAL_ADC_Start(&hadc1);
 8003f32:	4829      	ldr	r0, [pc, #164]	; (8003fd8 <ADC_Task+0x318>)
 8003f34:	f001 fdf8 	bl	8005b28 <HAL_ADC_Start>
        HAL_ADC_PollForConversion(&hadc1,10);
 8003f38:	210a      	movs	r1, #10
 8003f3a:	4827      	ldr	r0, [pc, #156]	; (8003fd8 <ADC_Task+0x318>)
 8003f3c:	f001 fef9 	bl	8005d32 <HAL_ADC_PollForConversion>
        ADC_VAL[6]=HAL_ADC_GetValue(&hadc1);
 8003f40:	4825      	ldr	r0, [pc, #148]	; (8003fd8 <ADC_Task+0x318>)
 8003f42:	f001 ff81 	bl	8005e48 <HAL_ADC_GetValue>
 8003f46:	4603      	mov	r3, r0
 8003f48:	b29a      	uxth	r2, r3
 8003f4a:	4b24      	ldr	r3, [pc, #144]	; (8003fdc <ADC_Task+0x31c>)
 8003f4c:	819a      	strh	r2, [r3, #12]
        vTaskDelay(pdMS_TO_TICKS(50));
 8003f4e:	2032      	movs	r0, #50	; 0x32
 8003f50:	f7fd fd3c 	bl	80019cc <vTaskDelay>
        HAL_ADC_Stop(&hadc1);
 8003f54:	4820      	ldr	r0, [pc, #128]	; (8003fd8 <ADC_Task+0x318>)
 8003f56:	f001 feb9 	bl	8005ccc <HAL_ADC_Stop>
        Voltage=(float)(ADC_VAL[6]*3.3)/4095;
 8003f5a:	4b20      	ldr	r3, [pc, #128]	; (8003fdc <ADC_Task+0x31c>)
 8003f5c:	899b      	ldrh	r3, [r3, #12]
 8003f5e:	4618      	mov	r0, r3
 8003f60:	f7fc fc22 	bl	80007a8 <__aeabi_i2d>
 8003f64:	a31a      	add	r3, pc, #104	; (adr r3, 8003fd0 <ADC_Task+0x310>)
 8003f66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f6a:	f7fc f9a1 	bl	80002b0 <__aeabi_dmul>
 8003f6e:	4602      	mov	r2, r0
 8003f70:	460b      	mov	r3, r1
 8003f72:	4610      	mov	r0, r2
 8003f74:	4619      	mov	r1, r3
 8003f76:	f7fc fc81 	bl	800087c <__aeabi_d2f>
 8003f7a:	ee06 0a90 	vmov	s13, r0
 8003f7e:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8003fe0 <ADC_Task+0x320>
 8003f82:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003f86:	4b17      	ldr	r3, [pc, #92]	; (8003fe4 <ADC_Task+0x324>)
 8003f88:	edc3 7a00 	vstr	s15, [r3]
        TIM3->CCR3=ADC_VAL[6];
 8003f8c:	4b13      	ldr	r3, [pc, #76]	; (8003fdc <ADC_Task+0x31c>)
 8003f8e:	899a      	ldrh	r2, [r3, #12]
 8003f90:	4b16      	ldr	r3, [pc, #88]	; (8003fec <ADC_Task+0x32c>)
 8003f92:	63da      	str	r2, [r3, #60]	; 0x3c
	 	//vTaskDelay(pdMS_TO_TICKS(100));

        CH_Select8();
 8003f94:	f7ff fd66 	bl	8003a64 <CH_Select8>
        HAL_ADC_Start(&hadc1);
 8003f98:	480f      	ldr	r0, [pc, #60]	; (8003fd8 <ADC_Task+0x318>)
 8003f9a:	f001 fdc5 	bl	8005b28 <HAL_ADC_Start>
	 	HAL_ADC_PollForConversion(&hadc1,10);
 8003f9e:	210a      	movs	r1, #10
 8003fa0:	480d      	ldr	r0, [pc, #52]	; (8003fd8 <ADC_Task+0x318>)
 8003fa2:	f001 fec6 	bl	8005d32 <HAL_ADC_PollForConversion>
	 	ADC_VAL[7]=HAL_ADC_GetValue(&hadc1);
 8003fa6:	480c      	ldr	r0, [pc, #48]	; (8003fd8 <ADC_Task+0x318>)
 8003fa8:	f001 ff4e 	bl	8005e48 <HAL_ADC_GetValue>
 8003fac:	4603      	mov	r3, r0
 8003fae:	b29a      	uxth	r2, r3
 8003fb0:	4b0a      	ldr	r3, [pc, #40]	; (8003fdc <ADC_Task+0x31c>)
 8003fb2:	81da      	strh	r2, [r3, #14]
	 	vTaskDelay(pdMS_TO_TICKS(50));
 8003fb4:	2032      	movs	r0, #50	; 0x32
 8003fb6:	f7fd fd09 	bl	80019cc <vTaskDelay>
	 	HAL_ADC_Stop(&hadc1);
 8003fba:	4807      	ldr	r0, [pc, #28]	; (8003fd8 <ADC_Task+0x318>)
 8003fbc:	f001 fe86 	bl	8005ccc <HAL_ADC_Stop>
	 	Voltage=(float)(ADC_VAL[7]*3.3)/4095;
 8003fc0:	4b06      	ldr	r3, [pc, #24]	; (8003fdc <ADC_Task+0x31c>)
 8003fc2:	89db      	ldrh	r3, [r3, #14]
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	f7fc fbef 	bl	80007a8 <__aeabi_i2d>
 8003fca:	e011      	b.n	8003ff0 <ADC_Task+0x330>
 8003fcc:	f3af 8000 	nop.w
 8003fd0:	66666666 	.word	0x66666666
 8003fd4:	400a6666 	.word	0x400a6666
 8003fd8:	20012e34 	.word	0x20012e34
 8003fdc:	200130a0 	.word	0x200130a0
 8003fe0:	457ff000 	.word	0x457ff000
 8003fe4:	200130cc 	.word	0x200130cc
 8003fe8:	40010000 	.word	0x40010000
 8003fec:	40000400 	.word	0x40000400
 8003ff0:	a3c7      	add	r3, pc, #796	; (adr r3, 8004310 <ADC_Task+0x650>)
 8003ff2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ff6:	f7fc f95b 	bl	80002b0 <__aeabi_dmul>
 8003ffa:	4602      	mov	r2, r0
 8003ffc:	460b      	mov	r3, r1
 8003ffe:	4610      	mov	r0, r2
 8004000:	4619      	mov	r1, r3
 8004002:	f7fc fc3b 	bl	800087c <__aeabi_d2f>
 8004006:	ee06 0a90 	vmov	s13, r0
 800400a:	ed9f 7ac3 	vldr	s14, [pc, #780]	; 8004318 <ADC_Task+0x658>
 800400e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004012:	4bc2      	ldr	r3, [pc, #776]	; (800431c <ADC_Task+0x65c>)
 8004014:	edc3 7a00 	vstr	s15, [r3]
	 	TIM3->CCR4=ADC_VAL[7];
 8004018:	4bc1      	ldr	r3, [pc, #772]	; (8004320 <ADC_Task+0x660>)
 800401a:	89da      	ldrh	r2, [r3, #14]
 800401c:	4bc1      	ldr	r3, [pc, #772]	; (8004324 <ADC_Task+0x664>)
 800401e:	641a      	str	r2, [r3, #64]	; 0x40
	 	//vTaskDelay(pdMS_TO_TICKS(100));

        CH_Select9();
 8004020:	f7ff fd3e 	bl	8003aa0 <CH_Select9>
        HAL_ADC_Start(&hadc1);
 8004024:	48c0      	ldr	r0, [pc, #768]	; (8004328 <ADC_Task+0x668>)
 8004026:	f001 fd7f 	bl	8005b28 <HAL_ADC_Start>
	 	HAL_ADC_PollForConversion(&hadc1,10);
 800402a:	210a      	movs	r1, #10
 800402c:	48be      	ldr	r0, [pc, #760]	; (8004328 <ADC_Task+0x668>)
 800402e:	f001 fe80 	bl	8005d32 <HAL_ADC_PollForConversion>
	 	ADC_VAL[8]=HAL_ADC_GetValue(&hadc1);
 8004032:	48bd      	ldr	r0, [pc, #756]	; (8004328 <ADC_Task+0x668>)
 8004034:	f001 ff08 	bl	8005e48 <HAL_ADC_GetValue>
 8004038:	4603      	mov	r3, r0
 800403a:	b29a      	uxth	r2, r3
 800403c:	4bb8      	ldr	r3, [pc, #736]	; (8004320 <ADC_Task+0x660>)
 800403e:	821a      	strh	r2, [r3, #16]
	 	vTaskDelay(pdMS_TO_TICKS(50));
 8004040:	2032      	movs	r0, #50	; 0x32
 8004042:	f7fd fcc3 	bl	80019cc <vTaskDelay>
	 	HAL_ADC_Stop(&hadc1);
 8004046:	48b8      	ldr	r0, [pc, #736]	; (8004328 <ADC_Task+0x668>)
 8004048:	f001 fe40 	bl	8005ccc <HAL_ADC_Stop>
	 	Voltage=(float)(ADC_VAL[8]*3.3)/4095;
 800404c:	4bb4      	ldr	r3, [pc, #720]	; (8004320 <ADC_Task+0x660>)
 800404e:	8a1b      	ldrh	r3, [r3, #16]
 8004050:	4618      	mov	r0, r3
 8004052:	f7fc fba9 	bl	80007a8 <__aeabi_i2d>
 8004056:	a3ae      	add	r3, pc, #696	; (adr r3, 8004310 <ADC_Task+0x650>)
 8004058:	e9d3 2300 	ldrd	r2, r3, [r3]
 800405c:	f7fc f928 	bl	80002b0 <__aeabi_dmul>
 8004060:	4602      	mov	r2, r0
 8004062:	460b      	mov	r3, r1
 8004064:	4610      	mov	r0, r2
 8004066:	4619      	mov	r1, r3
 8004068:	f7fc fc08 	bl	800087c <__aeabi_d2f>
 800406c:	ee06 0a90 	vmov	s13, r0
 8004070:	ed9f 7aa9 	vldr	s14, [pc, #676]	; 8004318 <ADC_Task+0x658>
 8004074:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004078:	4ba8      	ldr	r3, [pc, #672]	; (800431c <ADC_Task+0x65c>)
 800407a:	edc3 7a00 	vstr	s15, [r3]
	 	TIM4->CCR1=ADC_VAL[8];
 800407e:	4ba8      	ldr	r3, [pc, #672]	; (8004320 <ADC_Task+0x660>)
 8004080:	8a1a      	ldrh	r2, [r3, #16]
 8004082:	4baa      	ldr	r3, [pc, #680]	; (800432c <ADC_Task+0x66c>)
 8004084:	635a      	str	r2, [r3, #52]	; 0x34
	 	//vTaskDelay(pdMS_TO_TICKS(100));

        CH_Select10();
 8004086:	f7ff fd29 	bl	8003adc <CH_Select10>
        HAL_ADC_Start(&hadc1);
 800408a:	48a7      	ldr	r0, [pc, #668]	; (8004328 <ADC_Task+0x668>)
 800408c:	f001 fd4c 	bl	8005b28 <HAL_ADC_Start>
	 	HAL_ADC_PollForConversion(&hadc1,10);
 8004090:	210a      	movs	r1, #10
 8004092:	48a5      	ldr	r0, [pc, #660]	; (8004328 <ADC_Task+0x668>)
 8004094:	f001 fe4d 	bl	8005d32 <HAL_ADC_PollForConversion>
	 	ADC_VAL[9]=HAL_ADC_GetValue(&hadc1);
 8004098:	48a3      	ldr	r0, [pc, #652]	; (8004328 <ADC_Task+0x668>)
 800409a:	f001 fed5 	bl	8005e48 <HAL_ADC_GetValue>
 800409e:	4603      	mov	r3, r0
 80040a0:	b29a      	uxth	r2, r3
 80040a2:	4b9f      	ldr	r3, [pc, #636]	; (8004320 <ADC_Task+0x660>)
 80040a4:	825a      	strh	r2, [r3, #18]
	 	vTaskDelay(pdMS_TO_TICKS(50));
 80040a6:	2032      	movs	r0, #50	; 0x32
 80040a8:	f7fd fc90 	bl	80019cc <vTaskDelay>
	 	HAL_ADC_Stop(&hadc1);
 80040ac:	489e      	ldr	r0, [pc, #632]	; (8004328 <ADC_Task+0x668>)
 80040ae:	f001 fe0d 	bl	8005ccc <HAL_ADC_Stop>
	 	Voltage=(float)(ADC_VAL[9]*3.3)/4095;
 80040b2:	4b9b      	ldr	r3, [pc, #620]	; (8004320 <ADC_Task+0x660>)
 80040b4:	8a5b      	ldrh	r3, [r3, #18]
 80040b6:	4618      	mov	r0, r3
 80040b8:	f7fc fb76 	bl	80007a8 <__aeabi_i2d>
 80040bc:	a394      	add	r3, pc, #592	; (adr r3, 8004310 <ADC_Task+0x650>)
 80040be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040c2:	f7fc f8f5 	bl	80002b0 <__aeabi_dmul>
 80040c6:	4602      	mov	r2, r0
 80040c8:	460b      	mov	r3, r1
 80040ca:	4610      	mov	r0, r2
 80040cc:	4619      	mov	r1, r3
 80040ce:	f7fc fbd5 	bl	800087c <__aeabi_d2f>
 80040d2:	ee06 0a90 	vmov	s13, r0
 80040d6:	ed9f 7a90 	vldr	s14, [pc, #576]	; 8004318 <ADC_Task+0x658>
 80040da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80040de:	4b8f      	ldr	r3, [pc, #572]	; (800431c <ADC_Task+0x65c>)
 80040e0:	edc3 7a00 	vstr	s15, [r3]
	 	TIM4->CCR2=ADC_VAL[9];
 80040e4:	4b8e      	ldr	r3, [pc, #568]	; (8004320 <ADC_Task+0x660>)
 80040e6:	8a5a      	ldrh	r2, [r3, #18]
 80040e8:	4b90      	ldr	r3, [pc, #576]	; (800432c <ADC_Task+0x66c>)
 80040ea:	639a      	str	r2, [r3, #56]	; 0x38
	 	//vTaskDelay(pdMS_TO_TICKS(100));

        CH_Select11();
 80040ec:	f7ff fd14 	bl	8003b18 <CH_Select11>
        HAL_ADC_Start(&hadc1);
 80040f0:	488d      	ldr	r0, [pc, #564]	; (8004328 <ADC_Task+0x668>)
 80040f2:	f001 fd19 	bl	8005b28 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1,10);
 80040f6:	210a      	movs	r1, #10
 80040f8:	488b      	ldr	r0, [pc, #556]	; (8004328 <ADC_Task+0x668>)
 80040fa:	f001 fe1a 	bl	8005d32 <HAL_ADC_PollForConversion>
		ADC_VAL[10]=HAL_ADC_GetValue(&hadc1);
 80040fe:	488a      	ldr	r0, [pc, #552]	; (8004328 <ADC_Task+0x668>)
 8004100:	f001 fea2 	bl	8005e48 <HAL_ADC_GetValue>
 8004104:	4603      	mov	r3, r0
 8004106:	b29a      	uxth	r2, r3
 8004108:	4b85      	ldr	r3, [pc, #532]	; (8004320 <ADC_Task+0x660>)
 800410a:	829a      	strh	r2, [r3, #20]
		vTaskDelay(pdMS_TO_TICKS(50));
 800410c:	2032      	movs	r0, #50	; 0x32
 800410e:	f7fd fc5d 	bl	80019cc <vTaskDelay>
		HAL_ADC_Stop(&hadc1);
 8004112:	4885      	ldr	r0, [pc, #532]	; (8004328 <ADC_Task+0x668>)
 8004114:	f001 fdda 	bl	8005ccc <HAL_ADC_Stop>
		Voltage=(float)(ADC_VAL[10]*3.3)/4095;
 8004118:	4b81      	ldr	r3, [pc, #516]	; (8004320 <ADC_Task+0x660>)
 800411a:	8a9b      	ldrh	r3, [r3, #20]
 800411c:	4618      	mov	r0, r3
 800411e:	f7fc fb43 	bl	80007a8 <__aeabi_i2d>
 8004122:	a37b      	add	r3, pc, #492	; (adr r3, 8004310 <ADC_Task+0x650>)
 8004124:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004128:	f7fc f8c2 	bl	80002b0 <__aeabi_dmul>
 800412c:	4602      	mov	r2, r0
 800412e:	460b      	mov	r3, r1
 8004130:	4610      	mov	r0, r2
 8004132:	4619      	mov	r1, r3
 8004134:	f7fc fba2 	bl	800087c <__aeabi_d2f>
 8004138:	ee06 0a90 	vmov	s13, r0
 800413c:	ed9f 7a76 	vldr	s14, [pc, #472]	; 8004318 <ADC_Task+0x658>
 8004140:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004144:	4b75      	ldr	r3, [pc, #468]	; (800431c <ADC_Task+0x65c>)
 8004146:	edc3 7a00 	vstr	s15, [r3]
	 	TIM4->CCR3=ADC_VAL[10];
 800414a:	4b75      	ldr	r3, [pc, #468]	; (8004320 <ADC_Task+0x660>)
 800414c:	8a9a      	ldrh	r2, [r3, #20]
 800414e:	4b77      	ldr	r3, [pc, #476]	; (800432c <ADC_Task+0x66c>)
 8004150:	63da      	str	r2, [r3, #60]	; 0x3c
	 	//vTaskDelay(pdMS_TO_TICKS(100));

        CH_Select12();
 8004152:	f7ff fcff 	bl	8003b54 <CH_Select12>
        HAL_ADC_Start(&hadc1);
 8004156:	4874      	ldr	r0, [pc, #464]	; (8004328 <ADC_Task+0x668>)
 8004158:	f001 fce6 	bl	8005b28 <HAL_ADC_Start>
	 	HAL_ADC_PollForConversion(&hadc1,10);
 800415c:	210a      	movs	r1, #10
 800415e:	4872      	ldr	r0, [pc, #456]	; (8004328 <ADC_Task+0x668>)
 8004160:	f001 fde7 	bl	8005d32 <HAL_ADC_PollForConversion>
	 	ADC_VAL[11]=HAL_ADC_GetValue(&hadc1);
 8004164:	4870      	ldr	r0, [pc, #448]	; (8004328 <ADC_Task+0x668>)
 8004166:	f001 fe6f 	bl	8005e48 <HAL_ADC_GetValue>
 800416a:	4603      	mov	r3, r0
 800416c:	b29a      	uxth	r2, r3
 800416e:	4b6c      	ldr	r3, [pc, #432]	; (8004320 <ADC_Task+0x660>)
 8004170:	82da      	strh	r2, [r3, #22]
	 	vTaskDelay(pdMS_TO_TICKS(50));
 8004172:	2032      	movs	r0, #50	; 0x32
 8004174:	f7fd fc2a 	bl	80019cc <vTaskDelay>
	 	HAL_ADC_Stop(&hadc1);
 8004178:	486b      	ldr	r0, [pc, #428]	; (8004328 <ADC_Task+0x668>)
 800417a:	f001 fda7 	bl	8005ccc <HAL_ADC_Stop>
	 	Voltage=(float)(ADC_VAL[11]*3.3)/4095;
 800417e:	4b68      	ldr	r3, [pc, #416]	; (8004320 <ADC_Task+0x660>)
 8004180:	8adb      	ldrh	r3, [r3, #22]
 8004182:	4618      	mov	r0, r3
 8004184:	f7fc fb10 	bl	80007a8 <__aeabi_i2d>
 8004188:	a361      	add	r3, pc, #388	; (adr r3, 8004310 <ADC_Task+0x650>)
 800418a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800418e:	f7fc f88f 	bl	80002b0 <__aeabi_dmul>
 8004192:	4602      	mov	r2, r0
 8004194:	460b      	mov	r3, r1
 8004196:	4610      	mov	r0, r2
 8004198:	4619      	mov	r1, r3
 800419a:	f7fc fb6f 	bl	800087c <__aeabi_d2f>
 800419e:	ee06 0a90 	vmov	s13, r0
 80041a2:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 8004318 <ADC_Task+0x658>
 80041a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80041aa:	4b5c      	ldr	r3, [pc, #368]	; (800431c <ADC_Task+0x65c>)
 80041ac:	edc3 7a00 	vstr	s15, [r3]
	 	TIM4->CCR4=ADC_VAL[11];
 80041b0:	4b5b      	ldr	r3, [pc, #364]	; (8004320 <ADC_Task+0x660>)
 80041b2:	8ada      	ldrh	r2, [r3, #22]
 80041b4:	4b5d      	ldr	r3, [pc, #372]	; (800432c <ADC_Task+0x66c>)
 80041b6:	641a      	str	r2, [r3, #64]	; 0x40
	 	//vTaskDelay(pdMS_TO_TICKS(100));

        CH_Select13();
 80041b8:	f7ff fcec 	bl	8003b94 <CH_Select13>
        HAL_ADC_Start(&hadc1);
 80041bc:	485a      	ldr	r0, [pc, #360]	; (8004328 <ADC_Task+0x668>)
 80041be:	f001 fcb3 	bl	8005b28 <HAL_ADC_Start>
	 	HAL_ADC_PollForConversion(&hadc1,10);
 80041c2:	210a      	movs	r1, #10
 80041c4:	4858      	ldr	r0, [pc, #352]	; (8004328 <ADC_Task+0x668>)
 80041c6:	f001 fdb4 	bl	8005d32 <HAL_ADC_PollForConversion>
	 	ADC_VAL[12]=HAL_ADC_GetValue(&hadc1);
 80041ca:	4857      	ldr	r0, [pc, #348]	; (8004328 <ADC_Task+0x668>)
 80041cc:	f001 fe3c 	bl	8005e48 <HAL_ADC_GetValue>
 80041d0:	4603      	mov	r3, r0
 80041d2:	b29a      	uxth	r2, r3
 80041d4:	4b52      	ldr	r3, [pc, #328]	; (8004320 <ADC_Task+0x660>)
 80041d6:	831a      	strh	r2, [r3, #24]
	 	vTaskDelay(pdMS_TO_TICKS(50));
 80041d8:	2032      	movs	r0, #50	; 0x32
 80041da:	f7fd fbf7 	bl	80019cc <vTaskDelay>
	 	HAL_ADC_Stop(&hadc1);
 80041de:	4852      	ldr	r0, [pc, #328]	; (8004328 <ADC_Task+0x668>)
 80041e0:	f001 fd74 	bl	8005ccc <HAL_ADC_Stop>
	 	Voltage=(float)(ADC_VAL[12]*3.3)/4095;
 80041e4:	4b4e      	ldr	r3, [pc, #312]	; (8004320 <ADC_Task+0x660>)
 80041e6:	8b1b      	ldrh	r3, [r3, #24]
 80041e8:	4618      	mov	r0, r3
 80041ea:	f7fc fadd 	bl	80007a8 <__aeabi_i2d>
 80041ee:	a348      	add	r3, pc, #288	; (adr r3, 8004310 <ADC_Task+0x650>)
 80041f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041f4:	f7fc f85c 	bl	80002b0 <__aeabi_dmul>
 80041f8:	4602      	mov	r2, r0
 80041fa:	460b      	mov	r3, r1
 80041fc:	4610      	mov	r0, r2
 80041fe:	4619      	mov	r1, r3
 8004200:	f7fc fb3c 	bl	800087c <__aeabi_d2f>
 8004204:	ee06 0a90 	vmov	s13, r0
 8004208:	ed9f 7a43 	vldr	s14, [pc, #268]	; 8004318 <ADC_Task+0x658>
 800420c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004210:	4b42      	ldr	r3, [pc, #264]	; (800431c <ADC_Task+0x65c>)
 8004212:	edc3 7a00 	vstr	s15, [r3]
	 	TIM8->CCR1=ADC_VAL[12];
 8004216:	4b42      	ldr	r3, [pc, #264]	; (8004320 <ADC_Task+0x660>)
 8004218:	8b1a      	ldrh	r2, [r3, #24]
 800421a:	4b45      	ldr	r3, [pc, #276]	; (8004330 <ADC_Task+0x670>)
 800421c:	635a      	str	r2, [r3, #52]	; 0x34
	 	//vTaskDelay(pdMS_TO_TICKS(100));

        CH_Select14();
 800421e:	f7ff fcd7 	bl	8003bd0 <CH_Select14>
        HAL_ADC_Start(&hadc3);
 8004222:	4844      	ldr	r0, [pc, #272]	; (8004334 <ADC_Task+0x674>)
 8004224:	f001 fc80 	bl	8005b28 <HAL_ADC_Start>
	 	HAL_ADC_PollForConversion(&hadc3,10);
 8004228:	210a      	movs	r1, #10
 800422a:	4842      	ldr	r0, [pc, #264]	; (8004334 <ADC_Task+0x674>)
 800422c:	f001 fd81 	bl	8005d32 <HAL_ADC_PollForConversion>
	 	ADC_VAL[13]=HAL_ADC_GetValue(&hadc3);
 8004230:	4840      	ldr	r0, [pc, #256]	; (8004334 <ADC_Task+0x674>)
 8004232:	f001 fe09 	bl	8005e48 <HAL_ADC_GetValue>
 8004236:	4603      	mov	r3, r0
 8004238:	b29a      	uxth	r2, r3
 800423a:	4b39      	ldr	r3, [pc, #228]	; (8004320 <ADC_Task+0x660>)
 800423c:	835a      	strh	r2, [r3, #26]
	 	vTaskDelay(pdMS_TO_TICKS(50));
 800423e:	2032      	movs	r0, #50	; 0x32
 8004240:	f7fd fbc4 	bl	80019cc <vTaskDelay>
	 	HAL_ADC_Stop(&hadc3);
 8004244:	483b      	ldr	r0, [pc, #236]	; (8004334 <ADC_Task+0x674>)
 8004246:	f001 fd41 	bl	8005ccc <HAL_ADC_Stop>
	 	Voltage=(float)(ADC_VAL[13]*3.3)/4095;
 800424a:	4b35      	ldr	r3, [pc, #212]	; (8004320 <ADC_Task+0x660>)
 800424c:	8b5b      	ldrh	r3, [r3, #26]
 800424e:	4618      	mov	r0, r3
 8004250:	f7fc faaa 	bl	80007a8 <__aeabi_i2d>
 8004254:	a32e      	add	r3, pc, #184	; (adr r3, 8004310 <ADC_Task+0x650>)
 8004256:	e9d3 2300 	ldrd	r2, r3, [r3]
 800425a:	f7fc f829 	bl	80002b0 <__aeabi_dmul>
 800425e:	4602      	mov	r2, r0
 8004260:	460b      	mov	r3, r1
 8004262:	4610      	mov	r0, r2
 8004264:	4619      	mov	r1, r3
 8004266:	f7fc fb09 	bl	800087c <__aeabi_d2f>
 800426a:	ee06 0a90 	vmov	s13, r0
 800426e:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8004318 <ADC_Task+0x658>
 8004272:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004276:	4b29      	ldr	r3, [pc, #164]	; (800431c <ADC_Task+0x65c>)
 8004278:	edc3 7a00 	vstr	s15, [r3]
	 	TIM8->CCR2=ADC_VAL[13];
 800427c:	4b28      	ldr	r3, [pc, #160]	; (8004320 <ADC_Task+0x660>)
 800427e:	8b5a      	ldrh	r2, [r3, #26]
 8004280:	4b2b      	ldr	r3, [pc, #172]	; (8004330 <ADC_Task+0x670>)
 8004282:	639a      	str	r2, [r3, #56]	; 0x38
	 	//vTaskDelay(pdMS_TO_TICKS(100));

        CH_Select15();
 8004284:	f7ff fcc2 	bl	8003c0c <CH_Select15>
        HAL_ADC_Start(&hadc3);
 8004288:	482a      	ldr	r0, [pc, #168]	; (8004334 <ADC_Task+0x674>)
 800428a:	f001 fc4d 	bl	8005b28 <HAL_ADC_Start>
	 	HAL_ADC_PollForConversion(&hadc3,10);
 800428e:	210a      	movs	r1, #10
 8004290:	4828      	ldr	r0, [pc, #160]	; (8004334 <ADC_Task+0x674>)
 8004292:	f001 fd4e 	bl	8005d32 <HAL_ADC_PollForConversion>
	 	ADC_VAL[14]=HAL_ADC_GetValue(&hadc3);
 8004296:	4827      	ldr	r0, [pc, #156]	; (8004334 <ADC_Task+0x674>)
 8004298:	f001 fdd6 	bl	8005e48 <HAL_ADC_GetValue>
 800429c:	4603      	mov	r3, r0
 800429e:	b29a      	uxth	r2, r3
 80042a0:	4b1f      	ldr	r3, [pc, #124]	; (8004320 <ADC_Task+0x660>)
 80042a2:	839a      	strh	r2, [r3, #28]
	 	vTaskDelay(pdMS_TO_TICKS(50));
 80042a4:	2032      	movs	r0, #50	; 0x32
 80042a6:	f7fd fb91 	bl	80019cc <vTaskDelay>
	 	HAL_ADC_Stop(&hadc3);
 80042aa:	4822      	ldr	r0, [pc, #136]	; (8004334 <ADC_Task+0x674>)
 80042ac:	f001 fd0e 	bl	8005ccc <HAL_ADC_Stop>
	 	Voltage=(float)(ADC_VAL[14]*3.3)/4095;
 80042b0:	4b1b      	ldr	r3, [pc, #108]	; (8004320 <ADC_Task+0x660>)
 80042b2:	8b9b      	ldrh	r3, [r3, #28]
 80042b4:	4618      	mov	r0, r3
 80042b6:	f7fc fa77 	bl	80007a8 <__aeabi_i2d>
 80042ba:	a315      	add	r3, pc, #84	; (adr r3, 8004310 <ADC_Task+0x650>)
 80042bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042c0:	f7fb fff6 	bl	80002b0 <__aeabi_dmul>
 80042c4:	4602      	mov	r2, r0
 80042c6:	460b      	mov	r3, r1
 80042c8:	4610      	mov	r0, r2
 80042ca:	4619      	mov	r1, r3
 80042cc:	f7fc fad6 	bl	800087c <__aeabi_d2f>
 80042d0:	ee06 0a90 	vmov	s13, r0
 80042d4:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8004318 <ADC_Task+0x658>
 80042d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80042dc:	4b0f      	ldr	r3, [pc, #60]	; (800431c <ADC_Task+0x65c>)
 80042de:	edc3 7a00 	vstr	s15, [r3]
	 	TIM9->CCR1=ADC_VAL[14];
 80042e2:	4b0f      	ldr	r3, [pc, #60]	; (8004320 <ADC_Task+0x660>)
 80042e4:	8b9a      	ldrh	r2, [r3, #28]
 80042e6:	4b14      	ldr	r3, [pc, #80]	; (8004338 <ADC_Task+0x678>)
 80042e8:	635a      	str	r2, [r3, #52]	; 0x34
	 	//vTaskDelay(pdMS_TO_TICKS(100));

        CH_Select16();
 80042ea:	f7ff fcad 	bl	8003c48 <CH_Select16>
        HAL_ADC_Start(&hadc3);
 80042ee:	4811      	ldr	r0, [pc, #68]	; (8004334 <ADC_Task+0x674>)
 80042f0:	f001 fc1a 	bl	8005b28 <HAL_ADC_Start>
	 	HAL_ADC_PollForConversion(&hadc3,1000);
 80042f4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80042f8:	480e      	ldr	r0, [pc, #56]	; (8004334 <ADC_Task+0x674>)
 80042fa:	f001 fd1a 	bl	8005d32 <HAL_ADC_PollForConversion>
	 	ADC_VAL[15]=HAL_ADC_GetValue(&hadc3);
 80042fe:	480d      	ldr	r0, [pc, #52]	; (8004334 <ADC_Task+0x674>)
 8004300:	f001 fda2 	bl	8005e48 <HAL_ADC_GetValue>
 8004304:	4603      	mov	r3, r0
 8004306:	b29a      	uxth	r2, r3
 8004308:	4b05      	ldr	r3, [pc, #20]	; (8004320 <ADC_Task+0x660>)
 800430a:	83da      	strh	r2, [r3, #30]
	 	vTaskDelay(pdMS_TO_TICKS(50));
 800430c:	2032      	movs	r0, #50	; 0x32
 800430e:	e015      	b.n	800433c <ADC_Task+0x67c>
 8004310:	66666666 	.word	0x66666666
 8004314:	400a6666 	.word	0x400a6666
 8004318:	457ff000 	.word	0x457ff000
 800431c:	200130cc 	.word	0x200130cc
 8004320:	200130a0 	.word	0x200130a0
 8004324:	40000400 	.word	0x40000400
 8004328:	20012e34 	.word	0x20012e34
 800432c:	40000800 	.word	0x40000800
 8004330:	40010400 	.word	0x40010400
 8004334:	20012e7c 	.word	0x20012e7c
 8004338:	40014000 	.word	0x40014000
 800433c:	f7fd fb46 	bl	80019cc <vTaskDelay>
	 	HAL_ADC_Stop(&hadc3);
 8004340:	482b      	ldr	r0, [pc, #172]	; (80043f0 <ADC_Task+0x730>)
 8004342:	f001 fcc3 	bl	8005ccc <HAL_ADC_Stop>
	 	Voltage=(float)(ADC_VAL[15]*3.3)/4095;
 8004346:	4b2b      	ldr	r3, [pc, #172]	; (80043f4 <ADC_Task+0x734>)
 8004348:	8bdb      	ldrh	r3, [r3, #30]
 800434a:	4618      	mov	r0, r3
 800434c:	f7fc fa2c 	bl	80007a8 <__aeabi_i2d>
 8004350:	a325      	add	r3, pc, #148	; (adr r3, 80043e8 <ADC_Task+0x728>)
 8004352:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004356:	f7fb ffab 	bl	80002b0 <__aeabi_dmul>
 800435a:	4602      	mov	r2, r0
 800435c:	460b      	mov	r3, r1
 800435e:	4610      	mov	r0, r2
 8004360:	4619      	mov	r1, r3
 8004362:	f7fc fa8b 	bl	800087c <__aeabi_d2f>
 8004366:	ee06 0a90 	vmov	s13, r0
 800436a:	ed9f 7a23 	vldr	s14, [pc, #140]	; 80043f8 <ADC_Task+0x738>
 800436e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004372:	4b22      	ldr	r3, [pc, #136]	; (80043fc <ADC_Task+0x73c>)
 8004374:	edc3 7a00 	vstr	s15, [r3]
	 	TIM9->CCR2=ADC_VAL[15];
 8004378:	4b1e      	ldr	r3, [pc, #120]	; (80043f4 <ADC_Task+0x734>)
 800437a:	8bda      	ldrh	r2, [r3, #30]
 800437c:	4b20      	ldr	r3, [pc, #128]	; (8004400 <ADC_Task+0x740>)
 800437e:	639a      	str	r2, [r3, #56]	; 0x38
	 	//vTaskDelay(pdMS_TO_TICKS(100));

        CH_Select17();
 8004380:	f7ff fc80 	bl	8003c84 <CH_Select17>
        HAL_ADC_Start(&hadc3);
 8004384:	481a      	ldr	r0, [pc, #104]	; (80043f0 <ADC_Task+0x730>)
 8004386:	f001 fbcf 	bl	8005b28 <HAL_ADC_Start>
	 	HAL_ADC_PollForConversion(&hadc3,10);
 800438a:	210a      	movs	r1, #10
 800438c:	4818      	ldr	r0, [pc, #96]	; (80043f0 <ADC_Task+0x730>)
 800438e:	f001 fcd0 	bl	8005d32 <HAL_ADC_PollForConversion>
	 	ADC_VAL[16]=HAL_ADC_GetValue(&hadc3);
 8004392:	4817      	ldr	r0, [pc, #92]	; (80043f0 <ADC_Task+0x730>)
 8004394:	f001 fd58 	bl	8005e48 <HAL_ADC_GetValue>
 8004398:	4603      	mov	r3, r0
 800439a:	b29a      	uxth	r2, r3
 800439c:	4b15      	ldr	r3, [pc, #84]	; (80043f4 <ADC_Task+0x734>)
 800439e:	841a      	strh	r2, [r3, #32]
	 	vTaskDelay(pdMS_TO_TICKS(50));
 80043a0:	2032      	movs	r0, #50	; 0x32
 80043a2:	f7fd fb13 	bl	80019cc <vTaskDelay>
	 	HAL_ADC_Stop(&hadc3);
 80043a6:	4812      	ldr	r0, [pc, #72]	; (80043f0 <ADC_Task+0x730>)
 80043a8:	f001 fc90 	bl	8005ccc <HAL_ADC_Stop>
	 	Voltage=(float)(ADC_VAL[16]*3.3)/4095;
 80043ac:	4b11      	ldr	r3, [pc, #68]	; (80043f4 <ADC_Task+0x734>)
 80043ae:	8c1b      	ldrh	r3, [r3, #32]
 80043b0:	4618      	mov	r0, r3
 80043b2:	f7fc f9f9 	bl	80007a8 <__aeabi_i2d>
 80043b6:	a30c      	add	r3, pc, #48	; (adr r3, 80043e8 <ADC_Task+0x728>)
 80043b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043bc:	f7fb ff78 	bl	80002b0 <__aeabi_dmul>
 80043c0:	4602      	mov	r2, r0
 80043c2:	460b      	mov	r3, r1
 80043c4:	4610      	mov	r0, r2
 80043c6:	4619      	mov	r1, r3
 80043c8:	f7fc fa58 	bl	800087c <__aeabi_d2f>
 80043cc:	ee06 0a90 	vmov	s13, r0
 80043d0:	ed9f 7a09 	vldr	s14, [pc, #36]	; 80043f8 <ADC_Task+0x738>
 80043d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80043d8:	4b08      	ldr	r3, [pc, #32]	; (80043fc <ADC_Task+0x73c>)
 80043da:	edc3 7a00 	vstr	s15, [r3]
	 	TIM12->CCR2=ADC_VAL[16];
 80043de:	4b05      	ldr	r3, [pc, #20]	; (80043f4 <ADC_Task+0x734>)
 80043e0:	8c1a      	ldrh	r2, [r3, #32]
 80043e2:	4b08      	ldr	r3, [pc, #32]	; (8004404 <ADC_Task+0x744>)
 80043e4:	639a      	str	r2, [r3, #56]	; 0x38
        CH_Select1();
 80043e6:	e46f      	b.n	8003cc8 <ADC_Task+0x8>
 80043e8:	66666666 	.word	0x66666666
 80043ec:	400a6666 	.word	0x400a6666
 80043f0:	20012e7c 	.word	0x20012e7c
 80043f4:	200130a0 	.word	0x200130a0
 80043f8:	457ff000 	.word	0x457ff000
 80043fc:	200130cc 	.word	0x200130cc
 8004400:	40014000 	.word	0x40014000
 8004404:	40001800 	.word	0x40001800

08004408 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004408:	b580      	push	{r7, lr}
 800440a:	b088      	sub	sp, #32
 800440c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800440e:	f001 fb05 	bl	8005a1c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004412:	f000 f937 	bl	8004684 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004416:	f000 fd45 	bl	8004ea4 <MX_GPIO_Init>
  MX_ADC1_Init();
 800441a:	f000 f9a5 	bl	8004768 <MX_ADC1_Init>
  MX_ADC3_Init();
 800441e:	f000 f9e5 	bl	80047ec <MX_ADC3_Init>
  MX_CAN1_Init();
 8004422:	f000 fa25 	bl	8004870 <MX_CAN1_Init>
  MX_TIM1_Init();
 8004426:	f000 fa7b 	bl	8004920 <MX_TIM1_Init>
  MX_TIM3_Init();
 800442a:	f000 fb21 	bl	8004a70 <MX_TIM3_Init>
  MX_TIM4_Init();
 800442e:	f000 fb99 	bl	8004b64 <MX_TIM4_Init>
  MX_TIM8_Init();
 8004432:	f000 fc11 	bl	8004c58 <MX_TIM8_Init>
  MX_TIM9_Init();
 8004436:	f000 fc9f 	bl	8004d78 <MX_TIM9_Init>
  MX_TIM12_Init();
 800443a:	f000 fced 	bl	8004e18 <MX_TIM12_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);
 800443e:	2100      	movs	r1, #0
 8004440:	4879      	ldr	r0, [pc, #484]	; (8004628 <main+0x220>)
 8004442:	f003 ffe9 	bl	8008418 <HAL_TIM_PWM_Start>
  TIM1->CCR1=ADC_VAL[0];
 8004446:	4b79      	ldr	r3, [pc, #484]	; (800462c <main+0x224>)
 8004448:	881a      	ldrh	r2, [r3, #0]
 800444a:	4b79      	ldr	r3, [pc, #484]	; (8004630 <main+0x228>)
 800444c:	635a      	str	r2, [r3, #52]	; 0x34
  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_2);
 800444e:	2104      	movs	r1, #4
 8004450:	4875      	ldr	r0, [pc, #468]	; (8004628 <main+0x220>)
 8004452:	f003 ffe1 	bl	8008418 <HAL_TIM_PWM_Start>
  TIM1->CCR2=ADC_VAL[1];
 8004456:	4b75      	ldr	r3, [pc, #468]	; (800462c <main+0x224>)
 8004458:	885a      	ldrh	r2, [r3, #2]
 800445a:	4b75      	ldr	r3, [pc, #468]	; (8004630 <main+0x228>)
 800445c:	639a      	str	r2, [r3, #56]	; 0x38
  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_3);
 800445e:	2108      	movs	r1, #8
 8004460:	4871      	ldr	r0, [pc, #452]	; (8004628 <main+0x220>)
 8004462:	f003 ffd9 	bl	8008418 <HAL_TIM_PWM_Start>
  TIM1->CCR3=ADC_VAL[2];
 8004466:	4b71      	ldr	r3, [pc, #452]	; (800462c <main+0x224>)
 8004468:	889a      	ldrh	r2, [r3, #4]
 800446a:	4b71      	ldr	r3, [pc, #452]	; (8004630 <main+0x228>)
 800446c:	63da      	str	r2, [r3, #60]	; 0x3c
  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_4);
 800446e:	210c      	movs	r1, #12
 8004470:	486d      	ldr	r0, [pc, #436]	; (8004628 <main+0x220>)
 8004472:	f003 ffd1 	bl	8008418 <HAL_TIM_PWM_Start>
  TIM1->CCR4=ADC_VAL[3];
 8004476:	4b6d      	ldr	r3, [pc, #436]	; (800462c <main+0x224>)
 8004478:	88da      	ldrh	r2, [r3, #6]
 800447a:	4b6d      	ldr	r3, [pc, #436]	; (8004630 <main+0x228>)
 800447c:	641a      	str	r2, [r3, #64]	; 0x40
  /*       __________________________________________________________________     */

  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_1);
 800447e:	2100      	movs	r1, #0
 8004480:	486c      	ldr	r0, [pc, #432]	; (8004634 <main+0x22c>)
 8004482:	f003 ffc9 	bl	8008418 <HAL_TIM_PWM_Start>
  TIM3->CCR1=ADC_VAL[4];
 8004486:	4b69      	ldr	r3, [pc, #420]	; (800462c <main+0x224>)
 8004488:	891a      	ldrh	r2, [r3, #8]
 800448a:	4b6b      	ldr	r3, [pc, #428]	; (8004638 <main+0x230>)
 800448c:	635a      	str	r2, [r3, #52]	; 0x34
  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_2);
 800448e:	2104      	movs	r1, #4
 8004490:	4868      	ldr	r0, [pc, #416]	; (8004634 <main+0x22c>)
 8004492:	f003 ffc1 	bl	8008418 <HAL_TIM_PWM_Start>
  TIM3->CCR2=ADC_VAL[5];
 8004496:	4b65      	ldr	r3, [pc, #404]	; (800462c <main+0x224>)
 8004498:	895a      	ldrh	r2, [r3, #10]
 800449a:	4b67      	ldr	r3, [pc, #412]	; (8004638 <main+0x230>)
 800449c:	639a      	str	r2, [r3, #56]	; 0x38
  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_3);
 800449e:	2108      	movs	r1, #8
 80044a0:	4864      	ldr	r0, [pc, #400]	; (8004634 <main+0x22c>)
 80044a2:	f003 ffb9 	bl	8008418 <HAL_TIM_PWM_Start>
  TIM3->CCR3=ADC_VAL[6];
 80044a6:	4b61      	ldr	r3, [pc, #388]	; (800462c <main+0x224>)
 80044a8:	899a      	ldrh	r2, [r3, #12]
 80044aa:	4b63      	ldr	r3, [pc, #396]	; (8004638 <main+0x230>)
 80044ac:	63da      	str	r2, [r3, #60]	; 0x3c
  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_4);
 80044ae:	210c      	movs	r1, #12
 80044b0:	4860      	ldr	r0, [pc, #384]	; (8004634 <main+0x22c>)
 80044b2:	f003 ffb1 	bl	8008418 <HAL_TIM_PWM_Start>
  TIM3->CCR4=ADC_VAL[7];
 80044b6:	4b5d      	ldr	r3, [pc, #372]	; (800462c <main+0x224>)
 80044b8:	89da      	ldrh	r2, [r3, #14]
 80044ba:	4b5f      	ldr	r3, [pc, #380]	; (8004638 <main+0x230>)
 80044bc:	641a      	str	r2, [r3, #64]	; 0x40
  /*       __________________________________________________________________     */

  HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_1);
 80044be:	2100      	movs	r1, #0
 80044c0:	485e      	ldr	r0, [pc, #376]	; (800463c <main+0x234>)
 80044c2:	f003 ffa9 	bl	8008418 <HAL_TIM_PWM_Start>
  TIM4->CCR1=ADC_VAL[8];
 80044c6:	4b59      	ldr	r3, [pc, #356]	; (800462c <main+0x224>)
 80044c8:	8a1a      	ldrh	r2, [r3, #16]
 80044ca:	4b5d      	ldr	r3, [pc, #372]	; (8004640 <main+0x238>)
 80044cc:	635a      	str	r2, [r3, #52]	; 0x34
  HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_2);
 80044ce:	2104      	movs	r1, #4
 80044d0:	485a      	ldr	r0, [pc, #360]	; (800463c <main+0x234>)
 80044d2:	f003 ffa1 	bl	8008418 <HAL_TIM_PWM_Start>
  TIM4->CCR2=ADC_VAL[9];
 80044d6:	4b55      	ldr	r3, [pc, #340]	; (800462c <main+0x224>)
 80044d8:	8a5a      	ldrh	r2, [r3, #18]
 80044da:	4b59      	ldr	r3, [pc, #356]	; (8004640 <main+0x238>)
 80044dc:	639a      	str	r2, [r3, #56]	; 0x38
  HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_3);
 80044de:	2108      	movs	r1, #8
 80044e0:	4856      	ldr	r0, [pc, #344]	; (800463c <main+0x234>)
 80044e2:	f003 ff99 	bl	8008418 <HAL_TIM_PWM_Start>
  TIM4->CCR3=ADC_VAL[10];
 80044e6:	4b51      	ldr	r3, [pc, #324]	; (800462c <main+0x224>)
 80044e8:	8a9a      	ldrh	r2, [r3, #20]
 80044ea:	4b55      	ldr	r3, [pc, #340]	; (8004640 <main+0x238>)
 80044ec:	63da      	str	r2, [r3, #60]	; 0x3c
  HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_4);
 80044ee:	210c      	movs	r1, #12
 80044f0:	4852      	ldr	r0, [pc, #328]	; (800463c <main+0x234>)
 80044f2:	f003 ff91 	bl	8008418 <HAL_TIM_PWM_Start>
  TIM4->CCR4=ADC_VAL[11];
 80044f6:	4b4d      	ldr	r3, [pc, #308]	; (800462c <main+0x224>)
 80044f8:	8ada      	ldrh	r2, [r3, #22]
 80044fa:	4b51      	ldr	r3, [pc, #324]	; (8004640 <main+0x238>)
 80044fc:	641a      	str	r2, [r3, #64]	; 0x40
  /*       __________________________________________________________________     */

  HAL_TIM_PWM_Start(&htim8,TIM_CHANNEL_1);
 80044fe:	2100      	movs	r1, #0
 8004500:	4850      	ldr	r0, [pc, #320]	; (8004644 <main+0x23c>)
 8004502:	f003 ff89 	bl	8008418 <HAL_TIM_PWM_Start>
  TIM8->CCR1=ADC_VAL[12];
 8004506:	4b49      	ldr	r3, [pc, #292]	; (800462c <main+0x224>)
 8004508:	8b1a      	ldrh	r2, [r3, #24]
 800450a:	4b4f      	ldr	r3, [pc, #316]	; (8004648 <main+0x240>)
 800450c:	635a      	str	r2, [r3, #52]	; 0x34
  HAL_TIM_PWM_Start(&htim8,TIM_CHANNEL_2);
 800450e:	2104      	movs	r1, #4
 8004510:	484c      	ldr	r0, [pc, #304]	; (8004644 <main+0x23c>)
 8004512:	f003 ff81 	bl	8008418 <HAL_TIM_PWM_Start>
  TIM8->CCR2=ADC_VAL[13];
 8004516:	4b45      	ldr	r3, [pc, #276]	; (800462c <main+0x224>)
 8004518:	8b5a      	ldrh	r2, [r3, #26]
 800451a:	4b4b      	ldr	r3, [pc, #300]	; (8004648 <main+0x240>)
 800451c:	639a      	str	r2, [r3, #56]	; 0x38
  /*       __________________________________________________________________     */
  HAL_TIM_PWM_Start(&htim9,TIM_CHANNEL_1);
 800451e:	2100      	movs	r1, #0
 8004520:	484a      	ldr	r0, [pc, #296]	; (800464c <main+0x244>)
 8004522:	f003 ff79 	bl	8008418 <HAL_TIM_PWM_Start>
  TIM9->CCR1=ADC_VAL[14];
 8004526:	4b41      	ldr	r3, [pc, #260]	; (800462c <main+0x224>)
 8004528:	8b9a      	ldrh	r2, [r3, #28]
 800452a:	4b49      	ldr	r3, [pc, #292]	; (8004650 <main+0x248>)
 800452c:	635a      	str	r2, [r3, #52]	; 0x34
  HAL_TIM_PWM_Start(&htim9,TIM_CHANNEL_2);
 800452e:	2104      	movs	r1, #4
 8004530:	4846      	ldr	r0, [pc, #280]	; (800464c <main+0x244>)
 8004532:	f003 ff71 	bl	8008418 <HAL_TIM_PWM_Start>
  TIM9->CCR2=ADC_VAL[15];
 8004536:	4b3d      	ldr	r3, [pc, #244]	; (800462c <main+0x224>)
 8004538:	8bda      	ldrh	r2, [r3, #30]
 800453a:	4b45      	ldr	r3, [pc, #276]	; (8004650 <main+0x248>)
 800453c:	639a      	str	r2, [r3, #56]	; 0x38
  HAL_TIM_PWM_Start(&htim12,TIM_CHANNEL_2);
 800453e:	2104      	movs	r1, #4
 8004540:	4844      	ldr	r0, [pc, #272]	; (8004654 <main+0x24c>)
 8004542:	f003 ff69 	bl	8008418 <HAL_TIM_PWM_Start>
  TIM12->CCR2=ADC_VAL[16];
 8004546:	4b39      	ldr	r3, [pc, #228]	; (800462c <main+0x224>)
 8004548:	8c1a      	ldrh	r2, [r3, #32]
 800454a:	4b43      	ldr	r3, [pc, #268]	; (8004658 <main+0x250>)
 800454c:	639a      	str	r2, [r3, #56]	; 0x38

  if(HAL_CAN_Start(&hcan1) != HAL_OK)
 800454e:	4843      	ldr	r0, [pc, #268]	; (800465c <main+0x254>)
 8004550:	f002 f892 	bl	8006678 <HAL_CAN_Start>
 8004554:	4603      	mov	r3, r0
 8004556:	2b00      	cmp	r3, #0
 8004558:	d001      	beq.n	800455e <main+0x156>
  {
	  Error_Handler();
 800455a:	f000 fdb9 	bl	80050d0 <Error_Handler>
  }

  if(HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 800455e:	2102      	movs	r1, #2
 8004560:	483e      	ldr	r0, [pc, #248]	; (800465c <main+0x254>)
 8004562:	f002 faba 	bl	8006ada <HAL_CAN_ActivateNotification>
 8004566:	4603      	mov	r3, r0
 8004568:	2b00      	cmp	r3, #0
 800456a:	d001      	beq.n	8004570 <main+0x168>
  {
	  Error_Handler();
 800456c:	f000 fdb0 	bl	80050d0 <Error_Handler>
  }

  TxHeader.DLC = 8;
 8004570:	4b3b      	ldr	r3, [pc, #236]	; (8004660 <main+0x258>)
 8004572:	2208      	movs	r2, #8
 8004574:	611a      	str	r2, [r3, #16]
  TxHeader.IDE = CAN_ID_STD;
 8004576:	4b3a      	ldr	r3, [pc, #232]	; (8004660 <main+0x258>)
 8004578:	2200      	movs	r2, #0
 800457a:	609a      	str	r2, [r3, #8]
  TxHeader.RTR = CAN_RTR_DATA;
 800457c:	4b38      	ldr	r3, [pc, #224]	; (8004660 <main+0x258>)
 800457e:	2200      	movs	r2, #0
 8004580:	60da      	str	r2, [r3, #12]
  TxHeader.StdId = 0x446;
 8004582:	4b37      	ldr	r3, [pc, #220]	; (8004660 <main+0x258>)
 8004584:	f240 4246 	movw	r2, #1094	; 0x446
 8004588:	601a      	str	r2, [r3, #0]

  status = xTaskCreate(ADC_Task, "Task-ADC", 200, NULL, 2, &ADC_Handle);
 800458a:	4b36      	ldr	r3, [pc, #216]	; (8004664 <main+0x25c>)
 800458c:	9301      	str	r3, [sp, #4]
 800458e:	2302      	movs	r3, #2
 8004590:	9300      	str	r3, [sp, #0]
 8004592:	2300      	movs	r3, #0
 8004594:	22c8      	movs	r2, #200	; 0xc8
 8004596:	4934      	ldr	r1, [pc, #208]	; (8004668 <main+0x260>)
 8004598:	4834      	ldr	r0, [pc, #208]	; (800466c <main+0x264>)
 800459a:	f7fd f8d1 	bl	8001740 <xTaskCreate>
 800459e:	6178      	str	r0, [r7, #20]

  configASSERT(status == pdPASS);
 80045a0:	697b      	ldr	r3, [r7, #20]
 80045a2:	2b01      	cmp	r3, #1
 80045a4:	d00a      	beq.n	80045bc <main+0x1b4>
        __asm volatile
 80045a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045aa:	f383 8811 	msr	BASEPRI, r3
 80045ae:	f3bf 8f6f 	isb	sy
 80045b2:	f3bf 8f4f 	dsb	sy
 80045b6:	613b      	str	r3, [r7, #16]
    }
 80045b8:	bf00      	nop
 80045ba:	e7fe      	b.n	80045ba <main+0x1b2>

  status = xTaskCreate(task1_handler, "Task-1", 200, NULL, 2, &task1_handle);
 80045bc:	1d3b      	adds	r3, r7, #4
 80045be:	9301      	str	r3, [sp, #4]
 80045c0:	2302      	movs	r3, #2
 80045c2:	9300      	str	r3, [sp, #0]
 80045c4:	2300      	movs	r3, #0
 80045c6:	22c8      	movs	r2, #200	; 0xc8
 80045c8:	4929      	ldr	r1, [pc, #164]	; (8004670 <main+0x268>)
 80045ca:	482a      	ldr	r0, [pc, #168]	; (8004674 <main+0x26c>)
 80045cc:	f7fd f8b8 	bl	8001740 <xTaskCreate>
 80045d0:	6178      	str	r0, [r7, #20]

  configASSERT(status == pdPASS);
 80045d2:	697b      	ldr	r3, [r7, #20]
 80045d4:	2b01      	cmp	r3, #1
 80045d6:	d00a      	beq.n	80045ee <main+0x1e6>
        __asm volatile
 80045d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045dc:	f383 8811 	msr	BASEPRI, r3
 80045e0:	f3bf 8f6f 	isb	sy
 80045e4:	f3bf 8f4f 	dsb	sy
 80045e8:	60fb      	str	r3, [r7, #12]
    }
 80045ea:	bf00      	nop
 80045ec:	e7fe      	b.n	80045ec <main+0x1e4>

  status = xTaskCreate(LED_Task, "LED_Task", 200, NULL, 2, &ledHandle);
 80045ee:	4b22      	ldr	r3, [pc, #136]	; (8004678 <main+0x270>)
 80045f0:	9301      	str	r3, [sp, #4]
 80045f2:	2302      	movs	r3, #2
 80045f4:	9300      	str	r3, [sp, #0]
 80045f6:	2300      	movs	r3, #0
 80045f8:	22c8      	movs	r2, #200	; 0xc8
 80045fa:	4920      	ldr	r1, [pc, #128]	; (800467c <main+0x274>)
 80045fc:	4820      	ldr	r0, [pc, #128]	; (8004680 <main+0x278>)
 80045fe:	f7fd f89f 	bl	8001740 <xTaskCreate>
 8004602:	6178      	str	r0, [r7, #20]

  configASSERT(status == pdPASS);
 8004604:	697b      	ldr	r3, [r7, #20]
 8004606:	2b01      	cmp	r3, #1
 8004608:	d00a      	beq.n	8004620 <main+0x218>
        __asm volatile
 800460a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800460e:	f383 8811 	msr	BASEPRI, r3
 8004612:	f3bf 8f6f 	isb	sy
 8004616:	f3bf 8f4f 	dsb	sy
 800461a:	60bb      	str	r3, [r7, #8]
    }
 800461c:	bf00      	nop
 800461e:	e7fe      	b.n	800461e <main+0x216>

  vTaskStartScheduler();
 8004620:	f7fd fa08 	bl	8001a34 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8004624:	e7fe      	b.n	8004624 <main+0x21c>
 8004626:	bf00      	nop
 8004628:	20012eec 	.word	0x20012eec
 800462c:	200130a0 	.word	0x200130a0
 8004630:	40010000 	.word	0x40010000
 8004634:	20012f34 	.word	0x20012f34
 8004638:	40000400 	.word	0x40000400
 800463c:	20012f7c 	.word	0x20012f7c
 8004640:	40000800 	.word	0x40000800
 8004644:	20012fc4 	.word	0x20012fc4
 8004648:	40010400 	.word	0x40010400
 800464c:	2001300c 	.word	0x2001300c
 8004650:	40014000 	.word	0x40014000
 8004654:	20013054 	.word	0x20013054
 8004658:	40001800 	.word	0x40001800
 800465c:	20012ec4 	.word	0x20012ec4
 8004660:	200130d0 	.word	0x200130d0
 8004664:	2001309c 	.word	0x2001309c
 8004668:	0800a068 	.word	0x0800a068
 800466c:	08003cc1 	.word	0x08003cc1
 8004670:	0800a074 	.word	0x0800a074
 8004674:	08003661 	.word	0x08003661
 8004678:	2001311c 	.word	0x2001311c
 800467c:	0800a07c 	.word	0x0800a07c
 8004680:	08003725 	.word	0x08003725

08004684 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b094      	sub	sp, #80	; 0x50
 8004688:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800468a:	f107 031c 	add.w	r3, r7, #28
 800468e:	2234      	movs	r2, #52	; 0x34
 8004690:	2100      	movs	r1, #0
 8004692:	4618      	mov	r0, r3
 8004694:	f004 fec8 	bl	8009428 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004698:	f107 0308 	add.w	r3, r7, #8
 800469c:	2200      	movs	r2, #0
 800469e:	601a      	str	r2, [r3, #0]
 80046a0:	605a      	str	r2, [r3, #4]
 80046a2:	609a      	str	r2, [r3, #8]
 80046a4:	60da      	str	r2, [r3, #12]
 80046a6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80046a8:	2300      	movs	r3, #0
 80046aa:	607b      	str	r3, [r7, #4]
 80046ac:	4b2c      	ldr	r3, [pc, #176]	; (8004760 <SystemClock_Config+0xdc>)
 80046ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046b0:	4a2b      	ldr	r2, [pc, #172]	; (8004760 <SystemClock_Config+0xdc>)
 80046b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046b6:	6413      	str	r3, [r2, #64]	; 0x40
 80046b8:	4b29      	ldr	r3, [pc, #164]	; (8004760 <SystemClock_Config+0xdc>)
 80046ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046c0:	607b      	str	r3, [r7, #4]
 80046c2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80046c4:	2300      	movs	r3, #0
 80046c6:	603b      	str	r3, [r7, #0]
 80046c8:	4b26      	ldr	r3, [pc, #152]	; (8004764 <SystemClock_Config+0xe0>)
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	4a25      	ldr	r2, [pc, #148]	; (8004764 <SystemClock_Config+0xe0>)
 80046ce:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80046d2:	6013      	str	r3, [r2, #0]
 80046d4:	4b23      	ldr	r3, [pc, #140]	; (8004764 <SystemClock_Config+0xe0>)
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80046dc:	603b      	str	r3, [r7, #0]
 80046de:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80046e0:	2301      	movs	r3, #1
 80046e2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80046e4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80046e8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80046ea:	2302      	movs	r3, #2
 80046ec:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80046ee:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80046f2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80046f4:	2304      	movs	r3, #4
 80046f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 80046f8:	23b4      	movs	r3, #180	; 0xb4
 80046fa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80046fc:	2302      	movs	r3, #2
 80046fe:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8004700:	2302      	movs	r3, #2
 8004702:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8004704:	2302      	movs	r3, #2
 8004706:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004708:	f107 031c 	add.w	r3, r7, #28
 800470c:	4618      	mov	r0, r3
 800470e:	f003 facb 	bl	8007ca8 <HAL_RCC_OscConfig>
 8004712:	4603      	mov	r3, r0
 8004714:	2b00      	cmp	r3, #0
 8004716:	d001      	beq.n	800471c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8004718:	f000 fcda 	bl	80050d0 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800471c:	f002 ff0c 	bl	8007538 <HAL_PWREx_EnableOverDrive>
 8004720:	4603      	mov	r3, r0
 8004722:	2b00      	cmp	r3, #0
 8004724:	d001      	beq.n	800472a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8004726:	f000 fcd3 	bl	80050d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800472a:	230f      	movs	r3, #15
 800472c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800472e:	2302      	movs	r3, #2
 8004730:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004732:	2300      	movs	r3, #0
 8004734:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8004736:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800473a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800473c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004740:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8004742:	f107 0308 	add.w	r3, r7, #8
 8004746:	2105      	movs	r1, #5
 8004748:	4618      	mov	r0, r3
 800474a:	f002 ff45 	bl	80075d8 <HAL_RCC_ClockConfig>
 800474e:	4603      	mov	r3, r0
 8004750:	2b00      	cmp	r3, #0
 8004752:	d001      	beq.n	8004758 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8004754:	f000 fcbc 	bl	80050d0 <Error_Handler>
  }
}
 8004758:	bf00      	nop
 800475a:	3750      	adds	r7, #80	; 0x50
 800475c:	46bd      	mov	sp, r7
 800475e:	bd80      	pop	{r7, pc}
 8004760:	40023800 	.word	0x40023800
 8004764:	40007000 	.word	0x40007000

08004768 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8004768:	b580      	push	{r7, lr}
 800476a:	b084      	sub	sp, #16
 800476c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800476e:	463b      	mov	r3, r7
 8004770:	2200      	movs	r2, #0
 8004772:	601a      	str	r2, [r3, #0]
 8004774:	605a      	str	r2, [r3, #4]
 8004776:	609a      	str	r2, [r3, #8]
 8004778:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800477a:	4b19      	ldr	r3, [pc, #100]	; (80047e0 <MX_ADC1_Init+0x78>)
 800477c:	4a19      	ldr	r2, [pc, #100]	; (80047e4 <MX_ADC1_Init+0x7c>)
 800477e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8004780:	4b17      	ldr	r3, [pc, #92]	; (80047e0 <MX_ADC1_Init+0x78>)
 8004782:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004786:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8004788:	4b15      	ldr	r3, [pc, #84]	; (80047e0 <MX_ADC1_Init+0x78>)
 800478a:	2200      	movs	r2, #0
 800478c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800478e:	4b14      	ldr	r3, [pc, #80]	; (80047e0 <MX_ADC1_Init+0x78>)
 8004790:	2201      	movs	r2, #1
 8004792:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8004794:	4b12      	ldr	r3, [pc, #72]	; (80047e0 <MX_ADC1_Init+0x78>)
 8004796:	2201      	movs	r2, #1
 8004798:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800479a:	4b11      	ldr	r3, [pc, #68]	; (80047e0 <MX_ADC1_Init+0x78>)
 800479c:	2200      	movs	r2, #0
 800479e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80047a2:	4b0f      	ldr	r3, [pc, #60]	; (80047e0 <MX_ADC1_Init+0x78>)
 80047a4:	2200      	movs	r2, #0
 80047a6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80047a8:	4b0d      	ldr	r3, [pc, #52]	; (80047e0 <MX_ADC1_Init+0x78>)
 80047aa:	4a0f      	ldr	r2, [pc, #60]	; (80047e8 <MX_ADC1_Init+0x80>)
 80047ac:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80047ae:	4b0c      	ldr	r3, [pc, #48]	; (80047e0 <MX_ADC1_Init+0x78>)
 80047b0:	2200      	movs	r2, #0
 80047b2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 11;
 80047b4:	4b0a      	ldr	r3, [pc, #40]	; (80047e0 <MX_ADC1_Init+0x78>)
 80047b6:	220b      	movs	r2, #11
 80047b8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80047ba:	4b09      	ldr	r3, [pc, #36]	; (80047e0 <MX_ADC1_Init+0x78>)
 80047bc:	2200      	movs	r2, #0
 80047be:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80047c2:	4b07      	ldr	r3, [pc, #28]	; (80047e0 <MX_ADC1_Init+0x78>)
 80047c4:	2201      	movs	r2, #1
 80047c6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80047c8:	4805      	ldr	r0, [pc, #20]	; (80047e0 <MX_ADC1_Init+0x78>)
 80047ca:	f001 f969 	bl	8005aa0 <HAL_ADC_Init>
 80047ce:	4603      	mov	r3, r0
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d001      	beq.n	80047d8 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80047d4:	f000 fc7c 	bl	80050d0 <Error_Handler>
//  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80047d8:	bf00      	nop
 80047da:	3710      	adds	r7, #16
 80047dc:	46bd      	mov	sp, r7
 80047de:	bd80      	pop	{r7, pc}
 80047e0:	20012e34 	.word	0x20012e34
 80047e4:	40012000 	.word	0x40012000
 80047e8:	0f000001 	.word	0x0f000001

080047ec <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	b084      	sub	sp, #16
 80047f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80047f2:	463b      	mov	r3, r7
 80047f4:	2200      	movs	r2, #0
 80047f6:	601a      	str	r2, [r3, #0]
 80047f8:	605a      	str	r2, [r3, #4]
 80047fa:	609a      	str	r2, [r3, #8]
 80047fc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 80047fe:	4b19      	ldr	r3, [pc, #100]	; (8004864 <MX_ADC3_Init+0x78>)
 8004800:	4a19      	ldr	r2, [pc, #100]	; (8004868 <MX_ADC3_Init+0x7c>)
 8004802:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8004804:	4b17      	ldr	r3, [pc, #92]	; (8004864 <MX_ADC3_Init+0x78>)
 8004806:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800480a:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 800480c:	4b15      	ldr	r3, [pc, #84]	; (8004864 <MX_ADC3_Init+0x78>)
 800480e:	2200      	movs	r2, #0
 8004810:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ENABLE;
 8004812:	4b14      	ldr	r3, [pc, #80]	; (8004864 <MX_ADC3_Init+0x78>)
 8004814:	2201      	movs	r2, #1
 8004816:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = ENABLE;
 8004818:	4b12      	ldr	r3, [pc, #72]	; (8004864 <MX_ADC3_Init+0x78>)
 800481a:	2201      	movs	r2, #1
 800481c:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800481e:	4b11      	ldr	r3, [pc, #68]	; (8004864 <MX_ADC3_Init+0x78>)
 8004820:	2200      	movs	r2, #0
 8004822:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8004826:	4b0f      	ldr	r3, [pc, #60]	; (8004864 <MX_ADC3_Init+0x78>)
 8004828:	2200      	movs	r2, #0
 800482a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800482c:	4b0d      	ldr	r3, [pc, #52]	; (8004864 <MX_ADC3_Init+0x78>)
 800482e:	4a0f      	ldr	r2, [pc, #60]	; (800486c <MX_ADC3_Init+0x80>)
 8004830:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004832:	4b0c      	ldr	r3, [pc, #48]	; (8004864 <MX_ADC3_Init+0x78>)
 8004834:	2200      	movs	r2, #0
 8004836:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 6;
 8004838:	4b0a      	ldr	r3, [pc, #40]	; (8004864 <MX_ADC3_Init+0x78>)
 800483a:	2206      	movs	r2, #6
 800483c:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 800483e:	4b09      	ldr	r3, [pc, #36]	; (8004864 <MX_ADC3_Init+0x78>)
 8004840:	2200      	movs	r2, #0
 8004842:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8004846:	4b07      	ldr	r3, [pc, #28]	; (8004864 <MX_ADC3_Init+0x78>)
 8004848:	2201      	movs	r2, #1
 800484a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800484c:	4805      	ldr	r0, [pc, #20]	; (8004864 <MX_ADC3_Init+0x78>)
 800484e:	f001 f927 	bl	8005aa0 <HAL_ADC_Init>
 8004852:	4603      	mov	r3, r0
 8004854:	2b00      	cmp	r3, #0
 8004856:	d001      	beq.n	800485c <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8004858:	f000 fc3a 	bl	80050d0 <Error_Handler>
//  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 800485c:	bf00      	nop
 800485e:	3710      	adds	r7, #16
 8004860:	46bd      	mov	sp, r7
 8004862:	bd80      	pop	{r7, pc}
 8004864:	20012e7c 	.word	0x20012e7c
 8004868:	40012200 	.word	0x40012200
 800486c:	0f000001 	.word	0x0f000001

08004870 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8004870:	b580      	push	{r7, lr}
 8004872:	b08a      	sub	sp, #40	; 0x28
 8004874:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8004876:	4b28      	ldr	r3, [pc, #160]	; (8004918 <MX_CAN1_Init+0xa8>)
 8004878:	4a28      	ldr	r2, [pc, #160]	; (800491c <MX_CAN1_Init+0xac>)
 800487a:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 5;
 800487c:	4b26      	ldr	r3, [pc, #152]	; (8004918 <MX_CAN1_Init+0xa8>)
 800487e:	2205      	movs	r2, #5
 8004880:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8004882:	4b25      	ldr	r3, [pc, #148]	; (8004918 <MX_CAN1_Init+0xa8>)
 8004884:	2200      	movs	r2, #0
 8004886:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8004888:	4b23      	ldr	r3, [pc, #140]	; (8004918 <MX_CAN1_Init+0xa8>)
 800488a:	2200      	movs	r2, #0
 800488c:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_15TQ;
 800488e:	4b22      	ldr	r3, [pc, #136]	; (8004918 <MX_CAN1_Init+0xa8>)
 8004890:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8004894:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8004896:	4b20      	ldr	r3, [pc, #128]	; (8004918 <MX_CAN1_Init+0xa8>)
 8004898:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800489c:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800489e:	4b1e      	ldr	r3, [pc, #120]	; (8004918 <MX_CAN1_Init+0xa8>)
 80048a0:	2200      	movs	r2, #0
 80048a2:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = ENABLE;
 80048a4:	4b1c      	ldr	r3, [pc, #112]	; (8004918 <MX_CAN1_Init+0xa8>)
 80048a6:	2201      	movs	r2, #1
 80048a8:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80048aa:	4b1b      	ldr	r3, [pc, #108]	; (8004918 <MX_CAN1_Init+0xa8>)
 80048ac:	2200      	movs	r2, #0
 80048ae:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = ENABLE;
 80048b0:	4b19      	ldr	r3, [pc, #100]	; (8004918 <MX_CAN1_Init+0xa8>)
 80048b2:	2201      	movs	r2, #1
 80048b4:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80048b6:	4b18      	ldr	r3, [pc, #96]	; (8004918 <MX_CAN1_Init+0xa8>)
 80048b8:	2200      	movs	r2, #0
 80048ba:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80048bc:	4b16      	ldr	r3, [pc, #88]	; (8004918 <MX_CAN1_Init+0xa8>)
 80048be:	2200      	movs	r2, #0
 80048c0:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80048c2:	4815      	ldr	r0, [pc, #84]	; (8004918 <MX_CAN1_Init+0xa8>)
 80048c4:	f001 fcfc 	bl	80062c0 <HAL_CAN_Init>
 80048c8:	4603      	mov	r3, r0
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d001      	beq.n	80048d2 <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 80048ce:	f000 fbff 	bl	80050d0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  CAN_FilterTypeDef filter;

      filter.FilterActivation = CAN_FILTER_ENABLE;
 80048d2:	2301      	movs	r3, #1
 80048d4:	623b      	str	r3, [r7, #32]
      filter.FilterBank = 0;//18;
 80048d6:	2300      	movs	r3, #0
 80048d8:	617b      	str	r3, [r7, #20]
      filter.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 80048da:	2300      	movs	r3, #0
 80048dc:	613b      	str	r3, [r7, #16]
      filter.FilterIdHigh = 0x0000;//0x103<<5;
 80048de:	2300      	movs	r3, #0
 80048e0:	603b      	str	r3, [r7, #0]
      filter.FilterIdLow = 0x0000;
 80048e2:	2300      	movs	r3, #0
 80048e4:	607b      	str	r3, [r7, #4]
      filter.FilterMaskIdHigh = 0x0000;//0x103<<5;
 80048e6:	2300      	movs	r3, #0
 80048e8:	60bb      	str	r3, [r7, #8]
      filter.FilterMaskIdLow = 0x0000;
 80048ea:	2300      	movs	r3, #0
 80048ec:	60fb      	str	r3, [r7, #12]
      filter.FilterMode = CAN_FILTERMODE_IDMASK;
 80048ee:	2300      	movs	r3, #0
 80048f0:	61bb      	str	r3, [r7, #24]
      filter.FilterScale = CAN_FILTERSCALE_32BIT;
 80048f2:	2301      	movs	r3, #1
 80048f4:	61fb      	str	r3, [r7, #28]
      filter.SlaveStartFilterBank = 0;//20;
 80048f6:	2300      	movs	r3, #0
 80048f8:	627b      	str	r3, [r7, #36]	; 0x24

      if(HAL_CAN_ConfigFilter(&hcan1, &filter) != HAL_OK)
 80048fa:	463b      	mov	r3, r7
 80048fc:	4619      	mov	r1, r3
 80048fe:	4806      	ldr	r0, [pc, #24]	; (8004918 <MX_CAN1_Init+0xa8>)
 8004900:	f001 fdda 	bl	80064b8 <HAL_CAN_ConfigFilter>
 8004904:	4603      	mov	r3, r0
 8004906:	2b00      	cmp	r3, #0
 8004908:	d001      	beq.n	800490e <MX_CAN1_Init+0x9e>
      {
    	  Error_Handler();
 800490a:	f000 fbe1 	bl	80050d0 <Error_Handler>
      }

  /* USER CODE END CAN1_Init 2 */

}
 800490e:	bf00      	nop
 8004910:	3728      	adds	r7, #40	; 0x28
 8004912:	46bd      	mov	sp, r7
 8004914:	bd80      	pop	{r7, pc}
 8004916:	bf00      	nop
 8004918:	20012ec4 	.word	0x20012ec4
 800491c:	40006400 	.word	0x40006400

08004920 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8004920:	b580      	push	{r7, lr}
 8004922:	b092      	sub	sp, #72	; 0x48
 8004924:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004926:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800492a:	2200      	movs	r2, #0
 800492c:	601a      	str	r2, [r3, #0]
 800492e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004930:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004934:	2200      	movs	r2, #0
 8004936:	601a      	str	r2, [r3, #0]
 8004938:	605a      	str	r2, [r3, #4]
 800493a:	609a      	str	r2, [r3, #8]
 800493c:	60da      	str	r2, [r3, #12]
 800493e:	611a      	str	r2, [r3, #16]
 8004940:	615a      	str	r2, [r3, #20]
 8004942:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8004944:	1d3b      	adds	r3, r7, #4
 8004946:	2220      	movs	r2, #32
 8004948:	2100      	movs	r1, #0
 800494a:	4618      	mov	r0, r3
 800494c:	f004 fd6c 	bl	8009428 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8004950:	4b45      	ldr	r3, [pc, #276]	; (8004a68 <MX_TIM1_Init+0x148>)
 8004952:	4a46      	ldr	r2, [pc, #280]	; (8004a6c <MX_TIM1_Init+0x14c>)
 8004954:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8004956:	4b44      	ldr	r3, [pc, #272]	; (8004a68 <MX_TIM1_Init+0x148>)
 8004958:	2200      	movs	r2, #0
 800495a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800495c:	4b42      	ldr	r3, [pc, #264]	; (8004a68 <MX_TIM1_Init+0x148>)
 800495e:	2200      	movs	r2, #0
 8004960:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8004962:	4b41      	ldr	r3, [pc, #260]	; (8004a68 <MX_TIM1_Init+0x148>)
 8004964:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004968:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800496a:	4b3f      	ldr	r3, [pc, #252]	; (8004a68 <MX_TIM1_Init+0x148>)
 800496c:	2200      	movs	r2, #0
 800496e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8004970:	4b3d      	ldr	r3, [pc, #244]	; (8004a68 <MX_TIM1_Init+0x148>)
 8004972:	2200      	movs	r2, #0
 8004974:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004976:	4b3c      	ldr	r3, [pc, #240]	; (8004a68 <MX_TIM1_Init+0x148>)
 8004978:	2280      	movs	r2, #128	; 0x80
 800497a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800497c:	483a      	ldr	r0, [pc, #232]	; (8004a68 <MX_TIM1_Init+0x148>)
 800497e:	f003 fcfb 	bl	8008378 <HAL_TIM_PWM_Init>
 8004982:	4603      	mov	r3, r0
 8004984:	2b00      	cmp	r3, #0
 8004986:	d001      	beq.n	800498c <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8004988:	f000 fba2 	bl	80050d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800498c:	2300      	movs	r3, #0
 800498e:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004990:	2300      	movs	r3, #0
 8004992:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8004994:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004998:	4619      	mov	r1, r3
 800499a:	4833      	ldr	r0, [pc, #204]	; (8004a68 <MX_TIM1_Init+0x148>)
 800499c:	f004 fa6c 	bl	8008e78 <HAL_TIMEx_MasterConfigSynchronization>
 80049a0:	4603      	mov	r3, r0
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d001      	beq.n	80049aa <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 80049a6:	f000 fb93 	bl	80050d0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80049aa:	2360      	movs	r3, #96	; 0x60
 80049ac:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80049ae:	2300      	movs	r3, #0
 80049b0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80049b2:	2300      	movs	r3, #0
 80049b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80049b6:	2300      	movs	r3, #0
 80049b8:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80049ba:	2300      	movs	r3, #0
 80049bc:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80049be:	2300      	movs	r3, #0
 80049c0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80049c2:	2300      	movs	r3, #0
 80049c4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80049c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80049ca:	2200      	movs	r2, #0
 80049cc:	4619      	mov	r1, r3
 80049ce:	4826      	ldr	r0, [pc, #152]	; (8004a68 <MX_TIM1_Init+0x148>)
 80049d0:	f003 fef2 	bl	80087b8 <HAL_TIM_PWM_ConfigChannel>
 80049d4:	4603      	mov	r3, r0
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d001      	beq.n	80049de <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 80049da:	f000 fb79 	bl	80050d0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80049de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80049e2:	2204      	movs	r2, #4
 80049e4:	4619      	mov	r1, r3
 80049e6:	4820      	ldr	r0, [pc, #128]	; (8004a68 <MX_TIM1_Init+0x148>)
 80049e8:	f003 fee6 	bl	80087b8 <HAL_TIM_PWM_ConfigChannel>
 80049ec:	4603      	mov	r3, r0
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d001      	beq.n	80049f6 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 80049f2:	f000 fb6d 	bl	80050d0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80049f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80049fa:	2208      	movs	r2, #8
 80049fc:	4619      	mov	r1, r3
 80049fe:	481a      	ldr	r0, [pc, #104]	; (8004a68 <MX_TIM1_Init+0x148>)
 8004a00:	f003 feda 	bl	80087b8 <HAL_TIM_PWM_ConfigChannel>
 8004a04:	4603      	mov	r3, r0
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d001      	beq.n	8004a0e <MX_TIM1_Init+0xee>
  {
    Error_Handler();
 8004a0a:	f000 fb61 	bl	80050d0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8004a0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004a12:	220c      	movs	r2, #12
 8004a14:	4619      	mov	r1, r3
 8004a16:	4814      	ldr	r0, [pc, #80]	; (8004a68 <MX_TIM1_Init+0x148>)
 8004a18:	f003 fece 	bl	80087b8 <HAL_TIM_PWM_ConfigChannel>
 8004a1c:	4603      	mov	r3, r0
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d001      	beq.n	8004a26 <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 8004a22:	f000 fb55 	bl	80050d0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004a26:	2300      	movs	r3, #0
 8004a28:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8004a2e:	2300      	movs	r3, #0
 8004a30:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8004a32:	2300      	movs	r3, #0
 8004a34:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8004a36:	2300      	movs	r3, #0
 8004a38:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004a3a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004a3e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004a40:	2300      	movs	r3, #0
 8004a42:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8004a44:	1d3b      	adds	r3, r7, #4
 8004a46:	4619      	mov	r1, r3
 8004a48:	4807      	ldr	r0, [pc, #28]	; (8004a68 <MX_TIM1_Init+0x148>)
 8004a4a:	f004 fa91 	bl	8008f70 <HAL_TIMEx_ConfigBreakDeadTime>
 8004a4e:	4603      	mov	r3, r0
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d001      	beq.n	8004a58 <MX_TIM1_Init+0x138>
  {
    Error_Handler();
 8004a54:	f000 fb3c 	bl	80050d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8004a58:	4803      	ldr	r0, [pc, #12]	; (8004a68 <MX_TIM1_Init+0x148>)
 8004a5a:	f000 fce9 	bl	8005430 <HAL_TIM_MspPostInit>

}
 8004a5e:	bf00      	nop
 8004a60:	3748      	adds	r7, #72	; 0x48
 8004a62:	46bd      	mov	sp, r7
 8004a64:	bd80      	pop	{r7, pc}
 8004a66:	bf00      	nop
 8004a68:	20012eec 	.word	0x20012eec
 8004a6c:	40010000 	.word	0x40010000

08004a70 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8004a70:	b580      	push	{r7, lr}
 8004a72:	b08a      	sub	sp, #40	; 0x28
 8004a74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004a76:	f107 0320 	add.w	r3, r7, #32
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	601a      	str	r2, [r3, #0]
 8004a7e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004a80:	1d3b      	adds	r3, r7, #4
 8004a82:	2200      	movs	r2, #0
 8004a84:	601a      	str	r2, [r3, #0]
 8004a86:	605a      	str	r2, [r3, #4]
 8004a88:	609a      	str	r2, [r3, #8]
 8004a8a:	60da      	str	r2, [r3, #12]
 8004a8c:	611a      	str	r2, [r3, #16]
 8004a8e:	615a      	str	r2, [r3, #20]
 8004a90:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8004a92:	4b32      	ldr	r3, [pc, #200]	; (8004b5c <MX_TIM3_Init+0xec>)
 8004a94:	4a32      	ldr	r2, [pc, #200]	; (8004b60 <MX_TIM3_Init+0xf0>)
 8004a96:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8004a98:	4b30      	ldr	r3, [pc, #192]	; (8004b5c <MX_TIM3_Init+0xec>)
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004a9e:	4b2f      	ldr	r3, [pc, #188]	; (8004b5c <MX_TIM3_Init+0xec>)
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8004aa4:	4b2d      	ldr	r3, [pc, #180]	; (8004b5c <MX_TIM3_Init+0xec>)
 8004aa6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004aaa:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004aac:	4b2b      	ldr	r3, [pc, #172]	; (8004b5c <MX_TIM3_Init+0xec>)
 8004aae:	2200      	movs	r2, #0
 8004ab0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004ab2:	4b2a      	ldr	r3, [pc, #168]	; (8004b5c <MX_TIM3_Init+0xec>)
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8004ab8:	4828      	ldr	r0, [pc, #160]	; (8004b5c <MX_TIM3_Init+0xec>)
 8004aba:	f003 fc5d 	bl	8008378 <HAL_TIM_PWM_Init>
 8004abe:	4603      	mov	r3, r0
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d001      	beq.n	8004ac8 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8004ac4:	f000 fb04 	bl	80050d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004ac8:	2300      	movs	r3, #0
 8004aca:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004acc:	2300      	movs	r3, #0
 8004ace:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004ad0:	f107 0320 	add.w	r3, r7, #32
 8004ad4:	4619      	mov	r1, r3
 8004ad6:	4821      	ldr	r0, [pc, #132]	; (8004b5c <MX_TIM3_Init+0xec>)
 8004ad8:	f004 f9ce 	bl	8008e78 <HAL_TIMEx_MasterConfigSynchronization>
 8004adc:	4603      	mov	r3, r0
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d001      	beq.n	8004ae6 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8004ae2:	f000 faf5 	bl	80050d0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004ae6:	2360      	movs	r3, #96	; 0x60
 8004ae8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8004aea:	2300      	movs	r3, #0
 8004aec:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004aee:	2300      	movs	r3, #0
 8004af0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004af2:	2300      	movs	r3, #0
 8004af4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004af6:	1d3b      	adds	r3, r7, #4
 8004af8:	2200      	movs	r2, #0
 8004afa:	4619      	mov	r1, r3
 8004afc:	4817      	ldr	r0, [pc, #92]	; (8004b5c <MX_TIM3_Init+0xec>)
 8004afe:	f003 fe5b 	bl	80087b8 <HAL_TIM_PWM_ConfigChannel>
 8004b02:	4603      	mov	r3, r0
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d001      	beq.n	8004b0c <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8004b08:	f000 fae2 	bl	80050d0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004b0c:	1d3b      	adds	r3, r7, #4
 8004b0e:	2204      	movs	r2, #4
 8004b10:	4619      	mov	r1, r3
 8004b12:	4812      	ldr	r0, [pc, #72]	; (8004b5c <MX_TIM3_Init+0xec>)
 8004b14:	f003 fe50 	bl	80087b8 <HAL_TIM_PWM_ConfigChannel>
 8004b18:	4603      	mov	r3, r0
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d001      	beq.n	8004b22 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8004b1e:	f000 fad7 	bl	80050d0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004b22:	1d3b      	adds	r3, r7, #4
 8004b24:	2208      	movs	r2, #8
 8004b26:	4619      	mov	r1, r3
 8004b28:	480c      	ldr	r0, [pc, #48]	; (8004b5c <MX_TIM3_Init+0xec>)
 8004b2a:	f003 fe45 	bl	80087b8 <HAL_TIM_PWM_ConfigChannel>
 8004b2e:	4603      	mov	r3, r0
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d001      	beq.n	8004b38 <MX_TIM3_Init+0xc8>
  {
    Error_Handler();
 8004b34:	f000 facc 	bl	80050d0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8004b38:	1d3b      	adds	r3, r7, #4
 8004b3a:	220c      	movs	r2, #12
 8004b3c:	4619      	mov	r1, r3
 8004b3e:	4807      	ldr	r0, [pc, #28]	; (8004b5c <MX_TIM3_Init+0xec>)
 8004b40:	f003 fe3a 	bl	80087b8 <HAL_TIM_PWM_ConfigChannel>
 8004b44:	4603      	mov	r3, r0
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d001      	beq.n	8004b4e <MX_TIM3_Init+0xde>
  {
    Error_Handler();
 8004b4a:	f000 fac1 	bl	80050d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8004b4e:	4803      	ldr	r0, [pc, #12]	; (8004b5c <MX_TIM3_Init+0xec>)
 8004b50:	f000 fc6e 	bl	8005430 <HAL_TIM_MspPostInit>

}
 8004b54:	bf00      	nop
 8004b56:	3728      	adds	r7, #40	; 0x28
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	bd80      	pop	{r7, pc}
 8004b5c:	20012f34 	.word	0x20012f34
 8004b60:	40000400 	.word	0x40000400

08004b64 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b08a      	sub	sp, #40	; 0x28
 8004b68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004b6a:	f107 0320 	add.w	r3, r7, #32
 8004b6e:	2200      	movs	r2, #0
 8004b70:	601a      	str	r2, [r3, #0]
 8004b72:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004b74:	1d3b      	adds	r3, r7, #4
 8004b76:	2200      	movs	r2, #0
 8004b78:	601a      	str	r2, [r3, #0]
 8004b7a:	605a      	str	r2, [r3, #4]
 8004b7c:	609a      	str	r2, [r3, #8]
 8004b7e:	60da      	str	r2, [r3, #12]
 8004b80:	611a      	str	r2, [r3, #16]
 8004b82:	615a      	str	r2, [r3, #20]
 8004b84:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8004b86:	4b32      	ldr	r3, [pc, #200]	; (8004c50 <MX_TIM4_Init+0xec>)
 8004b88:	4a32      	ldr	r2, [pc, #200]	; (8004c54 <MX_TIM4_Init+0xf0>)
 8004b8a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8004b8c:	4b30      	ldr	r3, [pc, #192]	; (8004c50 <MX_TIM4_Init+0xec>)
 8004b8e:	2200      	movs	r2, #0
 8004b90:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004b92:	4b2f      	ldr	r3, [pc, #188]	; (8004c50 <MX_TIM4_Init+0xec>)
 8004b94:	2200      	movs	r2, #0
 8004b96:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8004b98:	4b2d      	ldr	r3, [pc, #180]	; (8004c50 <MX_TIM4_Init+0xec>)
 8004b9a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004b9e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004ba0:	4b2b      	ldr	r3, [pc, #172]	; (8004c50 <MX_TIM4_Init+0xec>)
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004ba6:	4b2a      	ldr	r3, [pc, #168]	; (8004c50 <MX_TIM4_Init+0xec>)
 8004ba8:	2200      	movs	r2, #0
 8004baa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8004bac:	4828      	ldr	r0, [pc, #160]	; (8004c50 <MX_TIM4_Init+0xec>)
 8004bae:	f003 fbe3 	bl	8008378 <HAL_TIM_PWM_Init>
 8004bb2:	4603      	mov	r3, r0
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d001      	beq.n	8004bbc <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8004bb8:	f000 fa8a 	bl	80050d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004bbc:	2300      	movs	r3, #0
 8004bbe:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8004bc4:	f107 0320 	add.w	r3, r7, #32
 8004bc8:	4619      	mov	r1, r3
 8004bca:	4821      	ldr	r0, [pc, #132]	; (8004c50 <MX_TIM4_Init+0xec>)
 8004bcc:	f004 f954 	bl	8008e78 <HAL_TIMEx_MasterConfigSynchronization>
 8004bd0:	4603      	mov	r3, r0
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d001      	beq.n	8004bda <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8004bd6:	f000 fa7b 	bl	80050d0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004bda:	2360      	movs	r3, #96	; 0x60
 8004bdc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8004bde:	2300      	movs	r3, #0
 8004be0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004be2:	2300      	movs	r3, #0
 8004be4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004be6:	2300      	movs	r3, #0
 8004be8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004bea:	1d3b      	adds	r3, r7, #4
 8004bec:	2200      	movs	r2, #0
 8004bee:	4619      	mov	r1, r3
 8004bf0:	4817      	ldr	r0, [pc, #92]	; (8004c50 <MX_TIM4_Init+0xec>)
 8004bf2:	f003 fde1 	bl	80087b8 <HAL_TIM_PWM_ConfigChannel>
 8004bf6:	4603      	mov	r3, r0
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d001      	beq.n	8004c00 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8004bfc:	f000 fa68 	bl	80050d0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004c00:	1d3b      	adds	r3, r7, #4
 8004c02:	2204      	movs	r2, #4
 8004c04:	4619      	mov	r1, r3
 8004c06:	4812      	ldr	r0, [pc, #72]	; (8004c50 <MX_TIM4_Init+0xec>)
 8004c08:	f003 fdd6 	bl	80087b8 <HAL_TIM_PWM_ConfigChannel>
 8004c0c:	4603      	mov	r3, r0
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d001      	beq.n	8004c16 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8004c12:	f000 fa5d 	bl	80050d0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004c16:	1d3b      	adds	r3, r7, #4
 8004c18:	2208      	movs	r2, #8
 8004c1a:	4619      	mov	r1, r3
 8004c1c:	480c      	ldr	r0, [pc, #48]	; (8004c50 <MX_TIM4_Init+0xec>)
 8004c1e:	f003 fdcb 	bl	80087b8 <HAL_TIM_PWM_ConfigChannel>
 8004c22:	4603      	mov	r3, r0
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d001      	beq.n	8004c2c <MX_TIM4_Init+0xc8>
  {
    Error_Handler();
 8004c28:	f000 fa52 	bl	80050d0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8004c2c:	1d3b      	adds	r3, r7, #4
 8004c2e:	220c      	movs	r2, #12
 8004c30:	4619      	mov	r1, r3
 8004c32:	4807      	ldr	r0, [pc, #28]	; (8004c50 <MX_TIM4_Init+0xec>)
 8004c34:	f003 fdc0 	bl	80087b8 <HAL_TIM_PWM_ConfigChannel>
 8004c38:	4603      	mov	r3, r0
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d001      	beq.n	8004c42 <MX_TIM4_Init+0xde>
  {
    Error_Handler();
 8004c3e:	f000 fa47 	bl	80050d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8004c42:	4803      	ldr	r0, [pc, #12]	; (8004c50 <MX_TIM4_Init+0xec>)
 8004c44:	f000 fbf4 	bl	8005430 <HAL_TIM_MspPostInit>

}
 8004c48:	bf00      	nop
 8004c4a:	3728      	adds	r7, #40	; 0x28
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	bd80      	pop	{r7, pc}
 8004c50:	20012f7c 	.word	0x20012f7c
 8004c54:	40000800 	.word	0x40000800

08004c58 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b092      	sub	sp, #72	; 0x48
 8004c5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004c5e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004c62:	2200      	movs	r2, #0
 8004c64:	601a      	str	r2, [r3, #0]
 8004c66:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004c68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	601a      	str	r2, [r3, #0]
 8004c70:	605a      	str	r2, [r3, #4]
 8004c72:	609a      	str	r2, [r3, #8]
 8004c74:	60da      	str	r2, [r3, #12]
 8004c76:	611a      	str	r2, [r3, #16]
 8004c78:	615a      	str	r2, [r3, #20]
 8004c7a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8004c7c:	1d3b      	adds	r3, r7, #4
 8004c7e:	2220      	movs	r2, #32
 8004c80:	2100      	movs	r1, #0
 8004c82:	4618      	mov	r0, r3
 8004c84:	f004 fbd0 	bl	8009428 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8004c88:	4b39      	ldr	r3, [pc, #228]	; (8004d70 <MX_TIM8_Init+0x118>)
 8004c8a:	4a3a      	ldr	r2, [pc, #232]	; (8004d74 <MX_TIM8_Init+0x11c>)
 8004c8c:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8004c8e:	4b38      	ldr	r3, [pc, #224]	; (8004d70 <MX_TIM8_Init+0x118>)
 8004c90:	2200      	movs	r2, #0
 8004c92:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004c94:	4b36      	ldr	r3, [pc, #216]	; (8004d70 <MX_TIM8_Init+0x118>)
 8004c96:	2200      	movs	r2, #0
 8004c98:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8004c9a:	4b35      	ldr	r3, [pc, #212]	; (8004d70 <MX_TIM8_Init+0x118>)
 8004c9c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004ca0:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004ca2:	4b33      	ldr	r3, [pc, #204]	; (8004d70 <MX_TIM8_Init+0x118>)
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8004ca8:	4b31      	ldr	r3, [pc, #196]	; (8004d70 <MX_TIM8_Init+0x118>)
 8004caa:	2200      	movs	r2, #0
 8004cac:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004cae:	4b30      	ldr	r3, [pc, #192]	; (8004d70 <MX_TIM8_Init+0x118>)
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8004cb4:	482e      	ldr	r0, [pc, #184]	; (8004d70 <MX_TIM8_Init+0x118>)
 8004cb6:	f003 fb5f 	bl	8008378 <HAL_TIM_PWM_Init>
 8004cba:	4603      	mov	r3, r0
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d001      	beq.n	8004cc4 <MX_TIM8_Init+0x6c>
  {
    Error_Handler();
 8004cc0:	f000 fa06 	bl	80050d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004cc8:	2300      	movs	r3, #0
 8004cca:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8004ccc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004cd0:	4619      	mov	r1, r3
 8004cd2:	4827      	ldr	r0, [pc, #156]	; (8004d70 <MX_TIM8_Init+0x118>)
 8004cd4:	f004 f8d0 	bl	8008e78 <HAL_TIMEx_MasterConfigSynchronization>
 8004cd8:	4603      	mov	r3, r0
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d001      	beq.n	8004ce2 <MX_TIM8_Init+0x8a>
  {
    Error_Handler();
 8004cde:	f000 f9f7 	bl	80050d0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004ce2:	2360      	movs	r3, #96	; 0x60
 8004ce4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004cea:	2300      	movs	r3, #0
 8004cec:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8004cee:	2300      	movs	r3, #0
 8004cf0:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004cfe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004d02:	2200      	movs	r2, #0
 8004d04:	4619      	mov	r1, r3
 8004d06:	481a      	ldr	r0, [pc, #104]	; (8004d70 <MX_TIM8_Init+0x118>)
 8004d08:	f003 fd56 	bl	80087b8 <HAL_TIM_PWM_ConfigChannel>
 8004d0c:	4603      	mov	r3, r0
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d001      	beq.n	8004d16 <MX_TIM8_Init+0xbe>
  {
    Error_Handler();
 8004d12:	f000 f9dd 	bl	80050d0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004d16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004d1a:	2204      	movs	r2, #4
 8004d1c:	4619      	mov	r1, r3
 8004d1e:	4814      	ldr	r0, [pc, #80]	; (8004d70 <MX_TIM8_Init+0x118>)
 8004d20:	f003 fd4a 	bl	80087b8 <HAL_TIM_PWM_ConfigChannel>
 8004d24:	4603      	mov	r3, r0
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d001      	beq.n	8004d2e <MX_TIM8_Init+0xd6>
  {
    Error_Handler();
 8004d2a:	f000 f9d1 	bl	80050d0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004d2e:	2300      	movs	r3, #0
 8004d30:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004d32:	2300      	movs	r3, #0
 8004d34:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8004d36:	2300      	movs	r3, #0
 8004d38:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8004d3e:	2300      	movs	r3, #0
 8004d40:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004d42:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004d46:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004d48:	2300      	movs	r3, #0
 8004d4a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8004d4c:	1d3b      	adds	r3, r7, #4
 8004d4e:	4619      	mov	r1, r3
 8004d50:	4807      	ldr	r0, [pc, #28]	; (8004d70 <MX_TIM8_Init+0x118>)
 8004d52:	f004 f90d 	bl	8008f70 <HAL_TIMEx_ConfigBreakDeadTime>
 8004d56:	4603      	mov	r3, r0
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d001      	beq.n	8004d60 <MX_TIM8_Init+0x108>
  {
    Error_Handler();
 8004d5c:	f000 f9b8 	bl	80050d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8004d60:	4803      	ldr	r0, [pc, #12]	; (8004d70 <MX_TIM8_Init+0x118>)
 8004d62:	f000 fb65 	bl	8005430 <HAL_TIM_MspPostInit>

}
 8004d66:	bf00      	nop
 8004d68:	3748      	adds	r7, #72	; 0x48
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	bd80      	pop	{r7, pc}
 8004d6e:	bf00      	nop
 8004d70:	20012fc4 	.word	0x20012fc4
 8004d74:	40010400 	.word	0x40010400

08004d78 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b088      	sub	sp, #32
 8004d7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8004d7e:	1d3b      	adds	r3, r7, #4
 8004d80:	2200      	movs	r2, #0
 8004d82:	601a      	str	r2, [r3, #0]
 8004d84:	605a      	str	r2, [r3, #4]
 8004d86:	609a      	str	r2, [r3, #8]
 8004d88:	60da      	str	r2, [r3, #12]
 8004d8a:	611a      	str	r2, [r3, #16]
 8004d8c:	615a      	str	r2, [r3, #20]
 8004d8e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8004d90:	4b1f      	ldr	r3, [pc, #124]	; (8004e10 <MX_TIM9_Init+0x98>)
 8004d92:	4a20      	ldr	r2, [pc, #128]	; (8004e14 <MX_TIM9_Init+0x9c>)
 8004d94:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 0;
 8004d96:	4b1e      	ldr	r3, [pc, #120]	; (8004e10 <MX_TIM9_Init+0x98>)
 8004d98:	2200      	movs	r2, #0
 8004d9a:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004d9c:	4b1c      	ldr	r3, [pc, #112]	; (8004e10 <MX_TIM9_Init+0x98>)
 8004d9e:	2200      	movs	r2, #0
 8004da0:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 65535;
 8004da2:	4b1b      	ldr	r3, [pc, #108]	; (8004e10 <MX_TIM9_Init+0x98>)
 8004da4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004da8:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004daa:	4b19      	ldr	r3, [pc, #100]	; (8004e10 <MX_TIM9_Init+0x98>)
 8004dac:	2200      	movs	r2, #0
 8004dae:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004db0:	4b17      	ldr	r3, [pc, #92]	; (8004e10 <MX_TIM9_Init+0x98>)
 8004db2:	2200      	movs	r2, #0
 8004db4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 8004db6:	4816      	ldr	r0, [pc, #88]	; (8004e10 <MX_TIM9_Init+0x98>)
 8004db8:	f003 fade 	bl	8008378 <HAL_TIM_PWM_Init>
 8004dbc:	4603      	mov	r3, r0
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d001      	beq.n	8004dc6 <MX_TIM9_Init+0x4e>
  {
    Error_Handler();
 8004dc2:	f000 f985 	bl	80050d0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004dc6:	2360      	movs	r3, #96	; 0x60
 8004dc8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8004dca:	2300      	movs	r3, #0
 8004dcc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004dce:	2300      	movs	r3, #0
 8004dd0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004dd6:	1d3b      	adds	r3, r7, #4
 8004dd8:	2200      	movs	r2, #0
 8004dda:	4619      	mov	r1, r3
 8004ddc:	480c      	ldr	r0, [pc, #48]	; (8004e10 <MX_TIM9_Init+0x98>)
 8004dde:	f003 fceb 	bl	80087b8 <HAL_TIM_PWM_ConfigChannel>
 8004de2:	4603      	mov	r3, r0
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d001      	beq.n	8004dec <MX_TIM9_Init+0x74>
  {
    Error_Handler();
 8004de8:	f000 f972 	bl	80050d0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004dec:	1d3b      	adds	r3, r7, #4
 8004dee:	2204      	movs	r2, #4
 8004df0:	4619      	mov	r1, r3
 8004df2:	4807      	ldr	r0, [pc, #28]	; (8004e10 <MX_TIM9_Init+0x98>)
 8004df4:	f003 fce0 	bl	80087b8 <HAL_TIM_PWM_ConfigChannel>
 8004df8:	4603      	mov	r3, r0
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d001      	beq.n	8004e02 <MX_TIM9_Init+0x8a>
  {
    Error_Handler();
 8004dfe:	f000 f967 	bl	80050d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 8004e02:	4803      	ldr	r0, [pc, #12]	; (8004e10 <MX_TIM9_Init+0x98>)
 8004e04:	f000 fb14 	bl	8005430 <HAL_TIM_MspPostInit>

}
 8004e08:	bf00      	nop
 8004e0a:	3720      	adds	r7, #32
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	bd80      	pop	{r7, pc}
 8004e10:	2001300c 	.word	0x2001300c
 8004e14:	40014000 	.word	0x40014000

08004e18 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	b088      	sub	sp, #32
 8004e1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8004e1e:	1d3b      	adds	r3, r7, #4
 8004e20:	2200      	movs	r2, #0
 8004e22:	601a      	str	r2, [r3, #0]
 8004e24:	605a      	str	r2, [r3, #4]
 8004e26:	609a      	str	r2, [r3, #8]
 8004e28:	60da      	str	r2, [r3, #12]
 8004e2a:	611a      	str	r2, [r3, #16]
 8004e2c:	615a      	str	r2, [r3, #20]
 8004e2e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8004e30:	4b1a      	ldr	r3, [pc, #104]	; (8004e9c <MX_TIM12_Init+0x84>)
 8004e32:	4a1b      	ldr	r2, [pc, #108]	; (8004ea0 <MX_TIM12_Init+0x88>)
 8004e34:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 8004e36:	4b19      	ldr	r3, [pc, #100]	; (8004e9c <MX_TIM12_Init+0x84>)
 8004e38:	2200      	movs	r2, #0
 8004e3a:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004e3c:	4b17      	ldr	r3, [pc, #92]	; (8004e9c <MX_TIM12_Init+0x84>)
 8004e3e:	2200      	movs	r2, #0
 8004e40:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 8004e42:	4b16      	ldr	r3, [pc, #88]	; (8004e9c <MX_TIM12_Init+0x84>)
 8004e44:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004e48:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004e4a:	4b14      	ldr	r3, [pc, #80]	; (8004e9c <MX_TIM12_Init+0x84>)
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004e50:	4b12      	ldr	r3, [pc, #72]	; (8004e9c <MX_TIM12_Init+0x84>)
 8004e52:	2200      	movs	r2, #0
 8004e54:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8004e56:	4811      	ldr	r0, [pc, #68]	; (8004e9c <MX_TIM12_Init+0x84>)
 8004e58:	f003 fa8e 	bl	8008378 <HAL_TIM_PWM_Init>
 8004e5c:	4603      	mov	r3, r0
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d001      	beq.n	8004e66 <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 8004e62:	f000 f935 	bl	80050d0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004e66:	2360      	movs	r3, #96	; 0x60
 8004e68:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004e6e:	2300      	movs	r3, #0
 8004e70:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004e72:	2300      	movs	r3, #0
 8004e74:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004e76:	1d3b      	adds	r3, r7, #4
 8004e78:	2204      	movs	r2, #4
 8004e7a:	4619      	mov	r1, r3
 8004e7c:	4807      	ldr	r0, [pc, #28]	; (8004e9c <MX_TIM12_Init+0x84>)
 8004e7e:	f003 fc9b 	bl	80087b8 <HAL_TIM_PWM_ConfigChannel>
 8004e82:	4603      	mov	r3, r0
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d001      	beq.n	8004e8c <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 8004e88:	f000 f922 	bl	80050d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8004e8c:	4803      	ldr	r0, [pc, #12]	; (8004e9c <MX_TIM12_Init+0x84>)
 8004e8e:	f000 facf 	bl	8005430 <HAL_TIM_MspPostInit>

}
 8004e92:	bf00      	nop
 8004e94:	3720      	adds	r7, #32
 8004e96:	46bd      	mov	sp, r7
 8004e98:	bd80      	pop	{r7, pc}
 8004e9a:	bf00      	nop
 8004e9c:	20013054 	.word	0x20013054
 8004ea0:	40001800 	.word	0x40001800

08004ea4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	b08e      	sub	sp, #56	; 0x38
 8004ea8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004eaa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004eae:	2200      	movs	r2, #0
 8004eb0:	601a      	str	r2, [r3, #0]
 8004eb2:	605a      	str	r2, [r3, #4]
 8004eb4:	609a      	str	r2, [r3, #8]
 8004eb6:	60da      	str	r2, [r3, #12]
 8004eb8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8004eba:	2300      	movs	r3, #0
 8004ebc:	623b      	str	r3, [r7, #32]
 8004ebe:	4b75      	ldr	r3, [pc, #468]	; (8005094 <MX_GPIO_Init+0x1f0>)
 8004ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ec2:	4a74      	ldr	r2, [pc, #464]	; (8005094 <MX_GPIO_Init+0x1f0>)
 8004ec4:	f043 0310 	orr.w	r3, r3, #16
 8004ec8:	6313      	str	r3, [r2, #48]	; 0x30
 8004eca:	4b72      	ldr	r3, [pc, #456]	; (8005094 <MX_GPIO_Init+0x1f0>)
 8004ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ece:	f003 0310 	and.w	r3, r3, #16
 8004ed2:	623b      	str	r3, [r7, #32]
 8004ed4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	61fb      	str	r3, [r7, #28]
 8004eda:	4b6e      	ldr	r3, [pc, #440]	; (8005094 <MX_GPIO_Init+0x1f0>)
 8004edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ede:	4a6d      	ldr	r2, [pc, #436]	; (8005094 <MX_GPIO_Init+0x1f0>)
 8004ee0:	f043 0304 	orr.w	r3, r3, #4
 8004ee4:	6313      	str	r3, [r2, #48]	; 0x30
 8004ee6:	4b6b      	ldr	r3, [pc, #428]	; (8005094 <MX_GPIO_Init+0x1f0>)
 8004ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eea:	f003 0304 	and.w	r3, r3, #4
 8004eee:	61fb      	str	r3, [r7, #28]
 8004ef0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	61bb      	str	r3, [r7, #24]
 8004ef6:	4b67      	ldr	r3, [pc, #412]	; (8005094 <MX_GPIO_Init+0x1f0>)
 8004ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004efa:	4a66      	ldr	r2, [pc, #408]	; (8005094 <MX_GPIO_Init+0x1f0>)
 8004efc:	f043 0320 	orr.w	r3, r3, #32
 8004f00:	6313      	str	r3, [r2, #48]	; 0x30
 8004f02:	4b64      	ldr	r3, [pc, #400]	; (8005094 <MX_GPIO_Init+0x1f0>)
 8004f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f06:	f003 0320 	and.w	r3, r3, #32
 8004f0a:	61bb      	str	r3, [r7, #24]
 8004f0c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004f0e:	2300      	movs	r3, #0
 8004f10:	617b      	str	r3, [r7, #20]
 8004f12:	4b60      	ldr	r3, [pc, #384]	; (8005094 <MX_GPIO_Init+0x1f0>)
 8004f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f16:	4a5f      	ldr	r2, [pc, #380]	; (8005094 <MX_GPIO_Init+0x1f0>)
 8004f18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f1c:	6313      	str	r3, [r2, #48]	; 0x30
 8004f1e:	4b5d      	ldr	r3, [pc, #372]	; (8005094 <MX_GPIO_Init+0x1f0>)
 8004f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f26:	617b      	str	r3, [r7, #20]
 8004f28:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	613b      	str	r3, [r7, #16]
 8004f2e:	4b59      	ldr	r3, [pc, #356]	; (8005094 <MX_GPIO_Init+0x1f0>)
 8004f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f32:	4a58      	ldr	r2, [pc, #352]	; (8005094 <MX_GPIO_Init+0x1f0>)
 8004f34:	f043 0301 	orr.w	r3, r3, #1
 8004f38:	6313      	str	r3, [r2, #48]	; 0x30
 8004f3a:	4b56      	ldr	r3, [pc, #344]	; (8005094 <MX_GPIO_Init+0x1f0>)
 8004f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f3e:	f003 0301 	and.w	r3, r3, #1
 8004f42:	613b      	str	r3, [r7, #16]
 8004f44:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004f46:	2300      	movs	r3, #0
 8004f48:	60fb      	str	r3, [r7, #12]
 8004f4a:	4b52      	ldr	r3, [pc, #328]	; (8005094 <MX_GPIO_Init+0x1f0>)
 8004f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f4e:	4a51      	ldr	r2, [pc, #324]	; (8005094 <MX_GPIO_Init+0x1f0>)
 8004f50:	f043 0302 	orr.w	r3, r3, #2
 8004f54:	6313      	str	r3, [r2, #48]	; 0x30
 8004f56:	4b4f      	ldr	r3, [pc, #316]	; (8005094 <MX_GPIO_Init+0x1f0>)
 8004f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f5a:	f003 0302 	and.w	r3, r3, #2
 8004f5e:	60fb      	str	r3, [r7, #12]
 8004f60:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004f62:	2300      	movs	r3, #0
 8004f64:	60bb      	str	r3, [r7, #8]
 8004f66:	4b4b      	ldr	r3, [pc, #300]	; (8005094 <MX_GPIO_Init+0x1f0>)
 8004f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f6a:	4a4a      	ldr	r2, [pc, #296]	; (8005094 <MX_GPIO_Init+0x1f0>)
 8004f6c:	f043 0308 	orr.w	r3, r3, #8
 8004f70:	6313      	str	r3, [r2, #48]	; 0x30
 8004f72:	4b48      	ldr	r3, [pc, #288]	; (8005094 <MX_GPIO_Init+0x1f0>)
 8004f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f76:	f003 0308 	and.w	r3, r3, #8
 8004f7a:	60bb      	str	r3, [r7, #8]
 8004f7c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8004f7e:	2300      	movs	r3, #0
 8004f80:	607b      	str	r3, [r7, #4]
 8004f82:	4b44      	ldr	r3, [pc, #272]	; (8005094 <MX_GPIO_Init+0x1f0>)
 8004f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f86:	4a43      	ldr	r2, [pc, #268]	; (8005094 <MX_GPIO_Init+0x1f0>)
 8004f88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004f8c:	6313      	str	r3, [r2, #48]	; 0x30
 8004f8e:	4b41      	ldr	r3, [pc, #260]	; (8005094 <MX_GPIO_Init+0x1f0>)
 8004f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f96:	607b      	str	r3, [r7, #4]
 8004f98:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	f244 0181 	movw	r1, #16513	; 0x4081
 8004fa0:	483d      	ldr	r0, [pc, #244]	; (8005098 <MX_GPIO_Init+0x1f4>)
 8004fa2:	f002 fa7d 	bl	80074a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	2140      	movs	r1, #64	; 0x40
 8004faa:	483c      	ldr	r0, [pc, #240]	; (800509c <MX_GPIO_Init+0x1f8>)
 8004fac:	f002 fa78 	bl	80074a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8004fb0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004fb4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004fb6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8004fba:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fbc:	2300      	movs	r3, #0
 8004fbe:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8004fc0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004fc4:	4619      	mov	r1, r3
 8004fc6:	4836      	ldr	r0, [pc, #216]	; (80050a0 <MX_GPIO_Init+0x1fc>)
 8004fc8:	f002 f8be 	bl	8007148 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8004fcc:	f244 0381 	movw	r3, #16513	; 0x4081
 8004fd0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004fd2:	2301      	movs	r3, #1
 8004fd4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004fda:	2300      	movs	r3, #0
 8004fdc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004fde:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004fe2:	4619      	mov	r1, r3
 8004fe4:	482c      	ldr	r0, [pc, #176]	; (8005098 <MX_GPIO_Init+0x1f4>)
 8004fe6:	f002 f8af 	bl	8007148 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLK_RX_Pin STLK_TX_Pin */
  GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8004fea:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004fee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ff0:	2302      	movs	r3, #2
 8004ff2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ff4:	2300      	movs	r3, #0
 8004ff6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004ff8:	2303      	movs	r3, #3
 8004ffa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8004ffc:	2307      	movs	r3, #7
 8004ffe:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005000:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005004:	4619      	mov	r1, r3
 8005006:	4827      	ldr	r0, [pc, #156]	; (80050a4 <MX_GPIO_Init+0x200>)
 8005008:	f002 f89e 	bl	8007148 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 800500c:	2340      	movs	r3, #64	; 0x40
 800500e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005010:	2301      	movs	r3, #1
 8005012:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005014:	2300      	movs	r3, #0
 8005016:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005018:	2300      	movs	r3, #0
 800501a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800501c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005020:	4619      	mov	r1, r3
 8005022:	481e      	ldr	r0, [pc, #120]	; (800509c <MX_GPIO_Init+0x1f8>)
 8005024:	f002 f890 	bl	8007148 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8005028:	2380      	movs	r3, #128	; 0x80
 800502a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800502c:	2300      	movs	r3, #0
 800502e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005030:	2300      	movs	r3, #0
 8005032:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8005034:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005038:	4619      	mov	r1, r3
 800503a:	4818      	ldr	r0, [pc, #96]	; (800509c <MX_GPIO_Init+0x1f8>)
 800503c:	f002 f884 	bl	8007148 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8005040:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8005044:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005046:	2302      	movs	r3, #2
 8005048:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800504a:	2300      	movs	r3, #0
 800504c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800504e:	2303      	movs	r3, #3
 8005050:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8005052:	230a      	movs	r3, #10
 8005054:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005056:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800505a:	4619      	mov	r1, r3
 800505c:	4812      	ldr	r0, [pc, #72]	; (80050a8 <MX_GPIO_Init+0x204>)
 800505e:	f002 f873 	bl	8007148 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8005062:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005066:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005068:	2300      	movs	r3, #0
 800506a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800506c:	2300      	movs	r3, #0
 800506e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8005070:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005074:	4619      	mov	r1, r3
 8005076:	480c      	ldr	r0, [pc, #48]	; (80050a8 <MX_GPIO_Init+0x204>)
 8005078:	f002 f866 	bl	8007148 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800507c:	2200      	movs	r2, #0
 800507e:	2100      	movs	r1, #0
 8005080:	2028      	movs	r0, #40	; 0x28
 8005082:	f002 f837 	bl	80070f4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8005086:	2028      	movs	r0, #40	; 0x28
 8005088:	f002 f850 	bl	800712c <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800508c:	bf00      	nop
 800508e:	3738      	adds	r7, #56	; 0x38
 8005090:	46bd      	mov	sp, r7
 8005092:	bd80      	pop	{r7, pc}
 8005094:	40023800 	.word	0x40023800
 8005098:	40020400 	.word	0x40020400
 800509c:	40021800 	.word	0x40021800
 80050a0:	40020800 	.word	0x40020800
 80050a4:	40020c00 	.word	0x40020c00
 80050a8:	40020000 	.word	0x40020000

080050ac <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80050ac:	b580      	push	{r7, lr}
 80050ae:	b082      	sub	sp, #8
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	4a04      	ldr	r2, [pc, #16]	; (80050cc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80050ba:	4293      	cmp	r3, r2
 80050bc:	d101      	bne.n	80050c2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80050be:	f000 fccf 	bl	8005a60 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80050c2:	bf00      	nop
 80050c4:	3708      	adds	r7, #8
 80050c6:	46bd      	mov	sp, r7
 80050c8:	bd80      	pop	{r7, pc}
 80050ca:	bf00      	nop
 80050cc:	40000c00 	.word	0x40000c00

080050d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80050d0:	b480      	push	{r7}
 80050d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80050d4:	b672      	cpsid	i
}
 80050d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80050d8:	e7fe      	b.n	80050d8 <Error_Handler+0x8>
	...

080050dc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80050dc:	b480      	push	{r7}
 80050de:	b083      	sub	sp, #12
 80050e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80050e2:	2300      	movs	r3, #0
 80050e4:	607b      	str	r3, [r7, #4]
 80050e6:	4b10      	ldr	r3, [pc, #64]	; (8005128 <HAL_MspInit+0x4c>)
 80050e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050ea:	4a0f      	ldr	r2, [pc, #60]	; (8005128 <HAL_MspInit+0x4c>)
 80050ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80050f0:	6453      	str	r3, [r2, #68]	; 0x44
 80050f2:	4b0d      	ldr	r3, [pc, #52]	; (8005128 <HAL_MspInit+0x4c>)
 80050f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80050fa:	607b      	str	r3, [r7, #4]
 80050fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80050fe:	2300      	movs	r3, #0
 8005100:	603b      	str	r3, [r7, #0]
 8005102:	4b09      	ldr	r3, [pc, #36]	; (8005128 <HAL_MspInit+0x4c>)
 8005104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005106:	4a08      	ldr	r2, [pc, #32]	; (8005128 <HAL_MspInit+0x4c>)
 8005108:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800510c:	6413      	str	r3, [r2, #64]	; 0x40
 800510e:	4b06      	ldr	r3, [pc, #24]	; (8005128 <HAL_MspInit+0x4c>)
 8005110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005112:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005116:	603b      	str	r3, [r7, #0]
 8005118:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800511a:	bf00      	nop
 800511c:	370c      	adds	r7, #12
 800511e:	46bd      	mov	sp, r7
 8005120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005124:	4770      	bx	lr
 8005126:	bf00      	nop
 8005128:	40023800 	.word	0x40023800

0800512c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800512c:	b580      	push	{r7, lr}
 800512e:	b08c      	sub	sp, #48	; 0x30
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005134:	f107 031c 	add.w	r3, r7, #28
 8005138:	2200      	movs	r2, #0
 800513a:	601a      	str	r2, [r3, #0]
 800513c:	605a      	str	r2, [r3, #4]
 800513e:	609a      	str	r2, [r3, #8]
 8005140:	60da      	str	r2, [r3, #12]
 8005142:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	4a3b      	ldr	r2, [pc, #236]	; (8005238 <HAL_ADC_MspInit+0x10c>)
 800514a:	4293      	cmp	r3, r2
 800514c:	d142      	bne.n	80051d4 <HAL_ADC_MspInit+0xa8>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800514e:	2300      	movs	r3, #0
 8005150:	61bb      	str	r3, [r7, #24]
 8005152:	4b3a      	ldr	r3, [pc, #232]	; (800523c <HAL_ADC_MspInit+0x110>)
 8005154:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005156:	4a39      	ldr	r2, [pc, #228]	; (800523c <HAL_ADC_MspInit+0x110>)
 8005158:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800515c:	6453      	str	r3, [r2, #68]	; 0x44
 800515e:	4b37      	ldr	r3, [pc, #220]	; (800523c <HAL_ADC_MspInit+0x110>)
 8005160:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005162:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005166:	61bb      	str	r3, [r7, #24]
 8005168:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800516a:	2300      	movs	r3, #0
 800516c:	617b      	str	r3, [r7, #20]
 800516e:	4b33      	ldr	r3, [pc, #204]	; (800523c <HAL_ADC_MspInit+0x110>)
 8005170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005172:	4a32      	ldr	r2, [pc, #200]	; (800523c <HAL_ADC_MspInit+0x110>)
 8005174:	f043 0304 	orr.w	r3, r3, #4
 8005178:	6313      	str	r3, [r2, #48]	; 0x30
 800517a:	4b30      	ldr	r3, [pc, #192]	; (800523c <HAL_ADC_MspInit+0x110>)
 800517c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800517e:	f003 0304 	and.w	r3, r3, #4
 8005182:	617b      	str	r3, [r7, #20]
 8005184:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005186:	2300      	movs	r3, #0
 8005188:	613b      	str	r3, [r7, #16]
 800518a:	4b2c      	ldr	r3, [pc, #176]	; (800523c <HAL_ADC_MspInit+0x110>)
 800518c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800518e:	4a2b      	ldr	r2, [pc, #172]	; (800523c <HAL_ADC_MspInit+0x110>)
 8005190:	f043 0301 	orr.w	r3, r3, #1
 8005194:	6313      	str	r3, [r2, #48]	; 0x30
 8005196:	4b29      	ldr	r3, [pc, #164]	; (800523c <HAL_ADC_MspInit+0x110>)
 8005198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800519a:	f003 0301 	and.w	r3, r3, #1
 800519e:	613b      	str	r3, [r7, #16]
 80051a0:	693b      	ldr	r3, [r7, #16]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80051a2:	233f      	movs	r3, #63	; 0x3f
 80051a4:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80051a6:	2303      	movs	r3, #3
 80051a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051aa:	2300      	movs	r3, #0
 80051ac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80051ae:	f107 031c 	add.w	r3, r7, #28
 80051b2:	4619      	mov	r1, r3
 80051b4:	4822      	ldr	r0, [pc, #136]	; (8005240 <HAL_ADC_MspInit+0x114>)
 80051b6:	f001 ffc7 	bl	8007148 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 80051ba:	233e      	movs	r3, #62	; 0x3e
 80051bc:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80051be:	2303      	movs	r3, #3
 80051c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051c2:	2300      	movs	r3, #0
 80051c4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80051c6:	f107 031c 	add.w	r3, r7, #28
 80051ca:	4619      	mov	r1, r3
 80051cc:	481d      	ldr	r0, [pc, #116]	; (8005244 <HAL_ADC_MspInit+0x118>)
 80051ce:	f001 ffbb 	bl	8007148 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 80051d2:	e02d      	b.n	8005230 <HAL_ADC_MspInit+0x104>
  else if(hadc->Instance==ADC3)
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	4a1b      	ldr	r2, [pc, #108]	; (8005248 <HAL_ADC_MspInit+0x11c>)
 80051da:	4293      	cmp	r3, r2
 80051dc:	d128      	bne.n	8005230 <HAL_ADC_MspInit+0x104>
    __HAL_RCC_ADC3_CLK_ENABLE();
 80051de:	2300      	movs	r3, #0
 80051e0:	60fb      	str	r3, [r7, #12]
 80051e2:	4b16      	ldr	r3, [pc, #88]	; (800523c <HAL_ADC_MspInit+0x110>)
 80051e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051e6:	4a15      	ldr	r2, [pc, #84]	; (800523c <HAL_ADC_MspInit+0x110>)
 80051e8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80051ec:	6453      	str	r3, [r2, #68]	; 0x44
 80051ee:	4b13      	ldr	r3, [pc, #76]	; (800523c <HAL_ADC_MspInit+0x110>)
 80051f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051f6:	60fb      	str	r3, [r7, #12]
 80051f8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80051fa:	2300      	movs	r3, #0
 80051fc:	60bb      	str	r3, [r7, #8]
 80051fe:	4b0f      	ldr	r3, [pc, #60]	; (800523c <HAL_ADC_MspInit+0x110>)
 8005200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005202:	4a0e      	ldr	r2, [pc, #56]	; (800523c <HAL_ADC_MspInit+0x110>)
 8005204:	f043 0320 	orr.w	r3, r3, #32
 8005208:	6313      	str	r3, [r2, #48]	; 0x30
 800520a:	4b0c      	ldr	r3, [pc, #48]	; (800523c <HAL_ADC_MspInit+0x110>)
 800520c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800520e:	f003 0320 	and.w	r3, r3, #32
 8005212:	60bb      	str	r3, [r7, #8]
 8005214:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8005216:	f44f 63f9 	mov.w	r3, #1992	; 0x7c8
 800521a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800521c:	2303      	movs	r3, #3
 800521e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005220:	2300      	movs	r3, #0
 8005222:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8005224:	f107 031c 	add.w	r3, r7, #28
 8005228:	4619      	mov	r1, r3
 800522a:	4808      	ldr	r0, [pc, #32]	; (800524c <HAL_ADC_MspInit+0x120>)
 800522c:	f001 ff8c 	bl	8007148 <HAL_GPIO_Init>
}
 8005230:	bf00      	nop
 8005232:	3730      	adds	r7, #48	; 0x30
 8005234:	46bd      	mov	sp, r7
 8005236:	bd80      	pop	{r7, pc}
 8005238:	40012000 	.word	0x40012000
 800523c:	40023800 	.word	0x40023800
 8005240:	40020800 	.word	0x40020800
 8005244:	40020000 	.word	0x40020000
 8005248:	40012200 	.word	0x40012200
 800524c:	40021400 	.word	0x40021400

08005250 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8005250:	b580      	push	{r7, lr}
 8005252:	b08a      	sub	sp, #40	; 0x28
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005258:	f107 0314 	add.w	r3, r7, #20
 800525c:	2200      	movs	r2, #0
 800525e:	601a      	str	r2, [r3, #0]
 8005260:	605a      	str	r2, [r3, #4]
 8005262:	609a      	str	r2, [r3, #8]
 8005264:	60da      	str	r2, [r3, #12]
 8005266:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	4a25      	ldr	r2, [pc, #148]	; (8005304 <HAL_CAN_MspInit+0xb4>)
 800526e:	4293      	cmp	r3, r2
 8005270:	d143      	bne.n	80052fa <HAL_CAN_MspInit+0xaa>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8005272:	2300      	movs	r3, #0
 8005274:	613b      	str	r3, [r7, #16]
 8005276:	4b24      	ldr	r3, [pc, #144]	; (8005308 <HAL_CAN_MspInit+0xb8>)
 8005278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800527a:	4a23      	ldr	r2, [pc, #140]	; (8005308 <HAL_CAN_MspInit+0xb8>)
 800527c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005280:	6413      	str	r3, [r2, #64]	; 0x40
 8005282:	4b21      	ldr	r3, [pc, #132]	; (8005308 <HAL_CAN_MspInit+0xb8>)
 8005284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005286:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800528a:	613b      	str	r3, [r7, #16]
 800528c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800528e:	2300      	movs	r3, #0
 8005290:	60fb      	str	r3, [r7, #12]
 8005292:	4b1d      	ldr	r3, [pc, #116]	; (8005308 <HAL_CAN_MspInit+0xb8>)
 8005294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005296:	4a1c      	ldr	r2, [pc, #112]	; (8005308 <HAL_CAN_MspInit+0xb8>)
 8005298:	f043 0308 	orr.w	r3, r3, #8
 800529c:	6313      	str	r3, [r2, #48]	; 0x30
 800529e:	4b1a      	ldr	r3, [pc, #104]	; (8005308 <HAL_CAN_MspInit+0xb8>)
 80052a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052a2:	f003 0308 	and.w	r3, r3, #8
 80052a6:	60fb      	str	r3, [r7, #12]
 80052a8:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80052aa:	2301      	movs	r3, #1
 80052ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80052ae:	2302      	movs	r3, #2
 80052b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80052b2:	2301      	movs	r3, #1
 80052b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80052b6:	2303      	movs	r3, #3
 80052b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80052ba:	2309      	movs	r3, #9
 80052bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80052be:	f107 0314 	add.w	r3, r7, #20
 80052c2:	4619      	mov	r1, r3
 80052c4:	4811      	ldr	r0, [pc, #68]	; (800530c <HAL_CAN_MspInit+0xbc>)
 80052c6:	f001 ff3f 	bl	8007148 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80052ca:	2302      	movs	r3, #2
 80052cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80052ce:	2302      	movs	r3, #2
 80052d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052d2:	2300      	movs	r3, #0
 80052d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80052d6:	2303      	movs	r3, #3
 80052d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80052da:	2309      	movs	r3, #9
 80052dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80052de:	f107 0314 	add.w	r3, r7, #20
 80052e2:	4619      	mov	r1, r3
 80052e4:	4809      	ldr	r0, [pc, #36]	; (800530c <HAL_CAN_MspInit+0xbc>)
 80052e6:	f001 ff2f 	bl	8007148 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 7, 0);
 80052ea:	2200      	movs	r2, #0
 80052ec:	2107      	movs	r1, #7
 80052ee:	2014      	movs	r0, #20
 80052f0:	f001 ff00 	bl	80070f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80052f4:	2014      	movs	r0, #20
 80052f6:	f001 ff19 	bl	800712c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80052fa:	bf00      	nop
 80052fc:	3728      	adds	r7, #40	; 0x28
 80052fe:	46bd      	mov	sp, r7
 8005300:	bd80      	pop	{r7, pc}
 8005302:	bf00      	nop
 8005304:	40006400 	.word	0x40006400
 8005308:	40023800 	.word	0x40023800
 800530c:	40020c00 	.word	0x40020c00

08005310 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8005310:	b480      	push	{r7}
 8005312:	b089      	sub	sp, #36	; 0x24
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	4a3d      	ldr	r2, [pc, #244]	; (8005414 <HAL_TIM_PWM_MspInit+0x104>)
 800531e:	4293      	cmp	r3, r2
 8005320:	d10e      	bne.n	8005340 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8005322:	2300      	movs	r3, #0
 8005324:	61fb      	str	r3, [r7, #28]
 8005326:	4b3c      	ldr	r3, [pc, #240]	; (8005418 <HAL_TIM_PWM_MspInit+0x108>)
 8005328:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800532a:	4a3b      	ldr	r2, [pc, #236]	; (8005418 <HAL_TIM_PWM_MspInit+0x108>)
 800532c:	f043 0301 	orr.w	r3, r3, #1
 8005330:	6453      	str	r3, [r2, #68]	; 0x44
 8005332:	4b39      	ldr	r3, [pc, #228]	; (8005418 <HAL_TIM_PWM_MspInit+0x108>)
 8005334:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005336:	f003 0301 	and.w	r3, r3, #1
 800533a:	61fb      	str	r3, [r7, #28]
 800533c:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 800533e:	e062      	b.n	8005406 <HAL_TIM_PWM_MspInit+0xf6>
  else if(htim_pwm->Instance==TIM3)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	4a35      	ldr	r2, [pc, #212]	; (800541c <HAL_TIM_PWM_MspInit+0x10c>)
 8005346:	4293      	cmp	r3, r2
 8005348:	d10e      	bne.n	8005368 <HAL_TIM_PWM_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800534a:	2300      	movs	r3, #0
 800534c:	61bb      	str	r3, [r7, #24]
 800534e:	4b32      	ldr	r3, [pc, #200]	; (8005418 <HAL_TIM_PWM_MspInit+0x108>)
 8005350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005352:	4a31      	ldr	r2, [pc, #196]	; (8005418 <HAL_TIM_PWM_MspInit+0x108>)
 8005354:	f043 0302 	orr.w	r3, r3, #2
 8005358:	6413      	str	r3, [r2, #64]	; 0x40
 800535a:	4b2f      	ldr	r3, [pc, #188]	; (8005418 <HAL_TIM_PWM_MspInit+0x108>)
 800535c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800535e:	f003 0302 	and.w	r3, r3, #2
 8005362:	61bb      	str	r3, [r7, #24]
 8005364:	69bb      	ldr	r3, [r7, #24]
}
 8005366:	e04e      	b.n	8005406 <HAL_TIM_PWM_MspInit+0xf6>
  else if(htim_pwm->Instance==TIM4)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	4a2c      	ldr	r2, [pc, #176]	; (8005420 <HAL_TIM_PWM_MspInit+0x110>)
 800536e:	4293      	cmp	r3, r2
 8005370:	d10e      	bne.n	8005390 <HAL_TIM_PWM_MspInit+0x80>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8005372:	2300      	movs	r3, #0
 8005374:	617b      	str	r3, [r7, #20]
 8005376:	4b28      	ldr	r3, [pc, #160]	; (8005418 <HAL_TIM_PWM_MspInit+0x108>)
 8005378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800537a:	4a27      	ldr	r2, [pc, #156]	; (8005418 <HAL_TIM_PWM_MspInit+0x108>)
 800537c:	f043 0304 	orr.w	r3, r3, #4
 8005380:	6413      	str	r3, [r2, #64]	; 0x40
 8005382:	4b25      	ldr	r3, [pc, #148]	; (8005418 <HAL_TIM_PWM_MspInit+0x108>)
 8005384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005386:	f003 0304 	and.w	r3, r3, #4
 800538a:	617b      	str	r3, [r7, #20]
 800538c:	697b      	ldr	r3, [r7, #20]
}
 800538e:	e03a      	b.n	8005406 <HAL_TIM_PWM_MspInit+0xf6>
  else if(htim_pwm->Instance==TIM8)
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	4a23      	ldr	r2, [pc, #140]	; (8005424 <HAL_TIM_PWM_MspInit+0x114>)
 8005396:	4293      	cmp	r3, r2
 8005398:	d10e      	bne.n	80053b8 <HAL_TIM_PWM_MspInit+0xa8>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800539a:	2300      	movs	r3, #0
 800539c:	613b      	str	r3, [r7, #16]
 800539e:	4b1e      	ldr	r3, [pc, #120]	; (8005418 <HAL_TIM_PWM_MspInit+0x108>)
 80053a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053a2:	4a1d      	ldr	r2, [pc, #116]	; (8005418 <HAL_TIM_PWM_MspInit+0x108>)
 80053a4:	f043 0302 	orr.w	r3, r3, #2
 80053a8:	6453      	str	r3, [r2, #68]	; 0x44
 80053aa:	4b1b      	ldr	r3, [pc, #108]	; (8005418 <HAL_TIM_PWM_MspInit+0x108>)
 80053ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053ae:	f003 0302 	and.w	r3, r3, #2
 80053b2:	613b      	str	r3, [r7, #16]
 80053b4:	693b      	ldr	r3, [r7, #16]
}
 80053b6:	e026      	b.n	8005406 <HAL_TIM_PWM_MspInit+0xf6>
  else if(htim_pwm->Instance==TIM9)
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	4a1a      	ldr	r2, [pc, #104]	; (8005428 <HAL_TIM_PWM_MspInit+0x118>)
 80053be:	4293      	cmp	r3, r2
 80053c0:	d10e      	bne.n	80053e0 <HAL_TIM_PWM_MspInit+0xd0>
    __HAL_RCC_TIM9_CLK_ENABLE();
 80053c2:	2300      	movs	r3, #0
 80053c4:	60fb      	str	r3, [r7, #12]
 80053c6:	4b14      	ldr	r3, [pc, #80]	; (8005418 <HAL_TIM_PWM_MspInit+0x108>)
 80053c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053ca:	4a13      	ldr	r2, [pc, #76]	; (8005418 <HAL_TIM_PWM_MspInit+0x108>)
 80053cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80053d0:	6453      	str	r3, [r2, #68]	; 0x44
 80053d2:	4b11      	ldr	r3, [pc, #68]	; (8005418 <HAL_TIM_PWM_MspInit+0x108>)
 80053d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80053da:	60fb      	str	r3, [r7, #12]
 80053dc:	68fb      	ldr	r3, [r7, #12]
}
 80053de:	e012      	b.n	8005406 <HAL_TIM_PWM_MspInit+0xf6>
  else if(htim_pwm->Instance==TIM12)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	4a11      	ldr	r2, [pc, #68]	; (800542c <HAL_TIM_PWM_MspInit+0x11c>)
 80053e6:	4293      	cmp	r3, r2
 80053e8:	d10d      	bne.n	8005406 <HAL_TIM_PWM_MspInit+0xf6>
    __HAL_RCC_TIM12_CLK_ENABLE();
 80053ea:	2300      	movs	r3, #0
 80053ec:	60bb      	str	r3, [r7, #8]
 80053ee:	4b0a      	ldr	r3, [pc, #40]	; (8005418 <HAL_TIM_PWM_MspInit+0x108>)
 80053f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053f2:	4a09      	ldr	r2, [pc, #36]	; (8005418 <HAL_TIM_PWM_MspInit+0x108>)
 80053f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80053f8:	6413      	str	r3, [r2, #64]	; 0x40
 80053fa:	4b07      	ldr	r3, [pc, #28]	; (8005418 <HAL_TIM_PWM_MspInit+0x108>)
 80053fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005402:	60bb      	str	r3, [r7, #8]
 8005404:	68bb      	ldr	r3, [r7, #8]
}
 8005406:	bf00      	nop
 8005408:	3724      	adds	r7, #36	; 0x24
 800540a:	46bd      	mov	sp, r7
 800540c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005410:	4770      	bx	lr
 8005412:	bf00      	nop
 8005414:	40010000 	.word	0x40010000
 8005418:	40023800 	.word	0x40023800
 800541c:	40000400 	.word	0x40000400
 8005420:	40000800 	.word	0x40000800
 8005424:	40010400 	.word	0x40010400
 8005428:	40014000 	.word	0x40014000
 800542c:	40001800 	.word	0x40001800

08005430 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8005430:	b580      	push	{r7, lr}
 8005432:	b090      	sub	sp, #64	; 0x40
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005438:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800543c:	2200      	movs	r2, #0
 800543e:	601a      	str	r2, [r3, #0]
 8005440:	605a      	str	r2, [r3, #4]
 8005442:	609a      	str	r2, [r3, #8]
 8005444:	60da      	str	r2, [r3, #12]
 8005446:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	4a8c      	ldr	r2, [pc, #560]	; (8005680 <HAL_TIM_MspPostInit+0x250>)
 800544e:	4293      	cmp	r3, r2
 8005450:	d11f      	bne.n	8005492 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8005452:	2300      	movs	r3, #0
 8005454:	62bb      	str	r3, [r7, #40]	; 0x28
 8005456:	4b8b      	ldr	r3, [pc, #556]	; (8005684 <HAL_TIM_MspPostInit+0x254>)
 8005458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800545a:	4a8a      	ldr	r2, [pc, #552]	; (8005684 <HAL_TIM_MspPostInit+0x254>)
 800545c:	f043 0310 	orr.w	r3, r3, #16
 8005460:	6313      	str	r3, [r2, #48]	; 0x30
 8005462:	4b88      	ldr	r3, [pc, #544]	; (8005684 <HAL_TIM_MspPostInit+0x254>)
 8005464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005466:	f003 0310 	and.w	r3, r3, #16
 800546a:	62bb      	str	r3, [r7, #40]	; 0x28
 800546c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14;
 800546e:	f44f 43d4 	mov.w	r3, #27136	; 0x6a00
 8005472:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005474:	2302      	movs	r3, #2
 8005476:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005478:	2300      	movs	r3, #0
 800547a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800547c:	2300      	movs	r3, #0
 800547e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8005480:	2301      	movs	r3, #1
 8005482:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005484:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005488:	4619      	mov	r1, r3
 800548a:	487f      	ldr	r0, [pc, #508]	; (8005688 <HAL_TIM_MspPostInit+0x258>)
 800548c:	f001 fe5c 	bl	8007148 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8005490:	e0f1      	b.n	8005676 <HAL_TIM_MspPostInit+0x246>
  else if(htim->Instance==TIM3)
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	4a7d      	ldr	r2, [pc, #500]	; (800568c <HAL_TIM_MspPostInit+0x25c>)
 8005498:	4293      	cmp	r3, r2
 800549a:	d15b      	bne.n	8005554 <HAL_TIM_MspPostInit+0x124>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800549c:	2300      	movs	r3, #0
 800549e:	627b      	str	r3, [r7, #36]	; 0x24
 80054a0:	4b78      	ldr	r3, [pc, #480]	; (8005684 <HAL_TIM_MspPostInit+0x254>)
 80054a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054a4:	4a77      	ldr	r2, [pc, #476]	; (8005684 <HAL_TIM_MspPostInit+0x254>)
 80054a6:	f043 0301 	orr.w	r3, r3, #1
 80054aa:	6313      	str	r3, [r2, #48]	; 0x30
 80054ac:	4b75      	ldr	r3, [pc, #468]	; (8005684 <HAL_TIM_MspPostInit+0x254>)
 80054ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054b0:	f003 0301 	and.w	r3, r3, #1
 80054b4:	627b      	str	r3, [r7, #36]	; 0x24
 80054b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80054b8:	2300      	movs	r3, #0
 80054ba:	623b      	str	r3, [r7, #32]
 80054bc:	4b71      	ldr	r3, [pc, #452]	; (8005684 <HAL_TIM_MspPostInit+0x254>)
 80054be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054c0:	4a70      	ldr	r2, [pc, #448]	; (8005684 <HAL_TIM_MspPostInit+0x254>)
 80054c2:	f043 0302 	orr.w	r3, r3, #2
 80054c6:	6313      	str	r3, [r2, #48]	; 0x30
 80054c8:	4b6e      	ldr	r3, [pc, #440]	; (8005684 <HAL_TIM_MspPostInit+0x254>)
 80054ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054cc:	f003 0302 	and.w	r3, r3, #2
 80054d0:	623b      	str	r3, [r7, #32]
 80054d2:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80054d4:	2300      	movs	r3, #0
 80054d6:	61fb      	str	r3, [r7, #28]
 80054d8:	4b6a      	ldr	r3, [pc, #424]	; (8005684 <HAL_TIM_MspPostInit+0x254>)
 80054da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054dc:	4a69      	ldr	r2, [pc, #420]	; (8005684 <HAL_TIM_MspPostInit+0x254>)
 80054de:	f043 0304 	orr.w	r3, r3, #4
 80054e2:	6313      	str	r3, [r2, #48]	; 0x30
 80054e4:	4b67      	ldr	r3, [pc, #412]	; (8005684 <HAL_TIM_MspPostInit+0x254>)
 80054e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054e8:	f003 0304 	and.w	r3, r3, #4
 80054ec:	61fb      	str	r3, [r7, #28]
 80054ee:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80054f0:	23c0      	movs	r3, #192	; 0xc0
 80054f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80054f4:	2302      	movs	r3, #2
 80054f6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054f8:	2300      	movs	r3, #0
 80054fa:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80054fc:	2300      	movs	r3, #0
 80054fe:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8005500:	2302      	movs	r3, #2
 8005502:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005504:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005508:	4619      	mov	r1, r3
 800550a:	4861      	ldr	r0, [pc, #388]	; (8005690 <HAL_TIM_MspPostInit+0x260>)
 800550c:	f001 fe1c 	bl	8007148 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8005510:	2302      	movs	r3, #2
 8005512:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005514:	2302      	movs	r3, #2
 8005516:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005518:	2300      	movs	r3, #0
 800551a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800551c:	2300      	movs	r3, #0
 800551e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8005520:	2302      	movs	r3, #2
 8005522:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005524:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005528:	4619      	mov	r1, r3
 800552a:	485a      	ldr	r0, [pc, #360]	; (8005694 <HAL_TIM_MspPostInit+0x264>)
 800552c:	f001 fe0c 	bl	8007148 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8005530:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005534:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005536:	2302      	movs	r3, #2
 8005538:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800553a:	2300      	movs	r3, #0
 800553c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800553e:	2300      	movs	r3, #0
 8005540:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8005542:	2302      	movs	r3, #2
 8005544:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005546:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800554a:	4619      	mov	r1, r3
 800554c:	4852      	ldr	r0, [pc, #328]	; (8005698 <HAL_TIM_MspPostInit+0x268>)
 800554e:	f001 fdfb 	bl	8007148 <HAL_GPIO_Init>
}
 8005552:	e090      	b.n	8005676 <HAL_TIM_MspPostInit+0x246>
  else if(htim->Instance==TIM4)
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	4a50      	ldr	r2, [pc, #320]	; (800569c <HAL_TIM_MspPostInit+0x26c>)
 800555a:	4293      	cmp	r3, r2
 800555c:	d11f      	bne.n	800559e <HAL_TIM_MspPostInit+0x16e>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800555e:	2300      	movs	r3, #0
 8005560:	61bb      	str	r3, [r7, #24]
 8005562:	4b48      	ldr	r3, [pc, #288]	; (8005684 <HAL_TIM_MspPostInit+0x254>)
 8005564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005566:	4a47      	ldr	r2, [pc, #284]	; (8005684 <HAL_TIM_MspPostInit+0x254>)
 8005568:	f043 0308 	orr.w	r3, r3, #8
 800556c:	6313      	str	r3, [r2, #48]	; 0x30
 800556e:	4b45      	ldr	r3, [pc, #276]	; (8005684 <HAL_TIM_MspPostInit+0x254>)
 8005570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005572:	f003 0308 	and.w	r3, r3, #8
 8005576:	61bb      	str	r3, [r7, #24]
 8005578:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800557a:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800557e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005580:	2302      	movs	r3, #2
 8005582:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005584:	2300      	movs	r3, #0
 8005586:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005588:	2300      	movs	r3, #0
 800558a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800558c:	2302      	movs	r3, #2
 800558e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005590:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005594:	4619      	mov	r1, r3
 8005596:	4842      	ldr	r0, [pc, #264]	; (80056a0 <HAL_TIM_MspPostInit+0x270>)
 8005598:	f001 fdd6 	bl	8007148 <HAL_GPIO_Init>
}
 800559c:	e06b      	b.n	8005676 <HAL_TIM_MspPostInit+0x246>
  else if(htim->Instance==TIM8)
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	4a40      	ldr	r2, [pc, #256]	; (80056a4 <HAL_TIM_MspPostInit+0x274>)
 80055a4:	4293      	cmp	r3, r2
 80055a6:	d11e      	bne.n	80055e6 <HAL_TIM_MspPostInit+0x1b6>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80055a8:	2300      	movs	r3, #0
 80055aa:	617b      	str	r3, [r7, #20]
 80055ac:	4b35      	ldr	r3, [pc, #212]	; (8005684 <HAL_TIM_MspPostInit+0x254>)
 80055ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055b0:	4a34      	ldr	r2, [pc, #208]	; (8005684 <HAL_TIM_MspPostInit+0x254>)
 80055b2:	f043 0304 	orr.w	r3, r3, #4
 80055b6:	6313      	str	r3, [r2, #48]	; 0x30
 80055b8:	4b32      	ldr	r3, [pc, #200]	; (8005684 <HAL_TIM_MspPostInit+0x254>)
 80055ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055bc:	f003 0304 	and.w	r3, r3, #4
 80055c0:	617b      	str	r3, [r7, #20]
 80055c2:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80055c4:	23c0      	movs	r3, #192	; 0xc0
 80055c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80055c8:	2302      	movs	r3, #2
 80055ca:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055cc:	2300      	movs	r3, #0
 80055ce:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80055d0:	2300      	movs	r3, #0
 80055d2:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80055d4:	2303      	movs	r3, #3
 80055d6:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80055d8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80055dc:	4619      	mov	r1, r3
 80055de:	482e      	ldr	r0, [pc, #184]	; (8005698 <HAL_TIM_MspPostInit+0x268>)
 80055e0:	f001 fdb2 	bl	8007148 <HAL_GPIO_Init>
}
 80055e4:	e047      	b.n	8005676 <HAL_TIM_MspPostInit+0x246>
  else if(htim->Instance==TIM9)
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	4a2f      	ldr	r2, [pc, #188]	; (80056a8 <HAL_TIM_MspPostInit+0x278>)
 80055ec:	4293      	cmp	r3, r2
 80055ee:	d11e      	bne.n	800562e <HAL_TIM_MspPostInit+0x1fe>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80055f0:	2300      	movs	r3, #0
 80055f2:	613b      	str	r3, [r7, #16]
 80055f4:	4b23      	ldr	r3, [pc, #140]	; (8005684 <HAL_TIM_MspPostInit+0x254>)
 80055f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055f8:	4a22      	ldr	r2, [pc, #136]	; (8005684 <HAL_TIM_MspPostInit+0x254>)
 80055fa:	f043 0310 	orr.w	r3, r3, #16
 80055fe:	6313      	str	r3, [r2, #48]	; 0x30
 8005600:	4b20      	ldr	r3, [pc, #128]	; (8005684 <HAL_TIM_MspPostInit+0x254>)
 8005602:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005604:	f003 0310 	and.w	r3, r3, #16
 8005608:	613b      	str	r3, [r7, #16]
 800560a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800560c:	2360      	movs	r3, #96	; 0x60
 800560e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005610:	2302      	movs	r3, #2
 8005612:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005614:	2300      	movs	r3, #0
 8005616:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005618:	2300      	movs	r3, #0
 800561a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 800561c:	2303      	movs	r3, #3
 800561e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005620:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005624:	4619      	mov	r1, r3
 8005626:	4818      	ldr	r0, [pc, #96]	; (8005688 <HAL_TIM_MspPostInit+0x258>)
 8005628:	f001 fd8e 	bl	8007148 <HAL_GPIO_Init>
}
 800562c:	e023      	b.n	8005676 <HAL_TIM_MspPostInit+0x246>
  else if(htim->Instance==TIM12)
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	4a1e      	ldr	r2, [pc, #120]	; (80056ac <HAL_TIM_MspPostInit+0x27c>)
 8005634:	4293      	cmp	r3, r2
 8005636:	d11e      	bne.n	8005676 <HAL_TIM_MspPostInit+0x246>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005638:	2300      	movs	r3, #0
 800563a:	60fb      	str	r3, [r7, #12]
 800563c:	4b11      	ldr	r3, [pc, #68]	; (8005684 <HAL_TIM_MspPostInit+0x254>)
 800563e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005640:	4a10      	ldr	r2, [pc, #64]	; (8005684 <HAL_TIM_MspPostInit+0x254>)
 8005642:	f043 0302 	orr.w	r3, r3, #2
 8005646:	6313      	str	r3, [r2, #48]	; 0x30
 8005648:	4b0e      	ldr	r3, [pc, #56]	; (8005684 <HAL_TIM_MspPostInit+0x254>)
 800564a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800564c:	f003 0302 	and.w	r3, r3, #2
 8005650:	60fb      	str	r3, [r7, #12]
 8005652:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8005654:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005658:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800565a:	2302      	movs	r3, #2
 800565c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800565e:	2300      	movs	r3, #0
 8005660:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005662:	2300      	movs	r3, #0
 8005664:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8005666:	2309      	movs	r3, #9
 8005668:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800566a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800566e:	4619      	mov	r1, r3
 8005670:	4808      	ldr	r0, [pc, #32]	; (8005694 <HAL_TIM_MspPostInit+0x264>)
 8005672:	f001 fd69 	bl	8007148 <HAL_GPIO_Init>
}
 8005676:	bf00      	nop
 8005678:	3740      	adds	r7, #64	; 0x40
 800567a:	46bd      	mov	sp, r7
 800567c:	bd80      	pop	{r7, pc}
 800567e:	bf00      	nop
 8005680:	40010000 	.word	0x40010000
 8005684:	40023800 	.word	0x40023800
 8005688:	40021000 	.word	0x40021000
 800568c:	40000400 	.word	0x40000400
 8005690:	40020000 	.word	0x40020000
 8005694:	40020400 	.word	0x40020400
 8005698:	40020800 	.word	0x40020800
 800569c:	40000800 	.word	0x40000800
 80056a0:	40020c00 	.word	0x40020c00
 80056a4:	40010400 	.word	0x40010400
 80056a8:	40014000 	.word	0x40014000
 80056ac:	40001800 	.word	0x40001800

080056b0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80056b0:	b580      	push	{r7, lr}
 80056b2:	b08e      	sub	sp, #56	; 0x38
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80056b8:	2300      	movs	r3, #0
 80056ba:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80056bc:	2300      	movs	r3, #0
 80056be:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 80056c0:	2300      	movs	r3, #0
 80056c2:	60fb      	str	r3, [r7, #12]
 80056c4:	4b33      	ldr	r3, [pc, #204]	; (8005794 <HAL_InitTick+0xe4>)
 80056c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056c8:	4a32      	ldr	r2, [pc, #200]	; (8005794 <HAL_InitTick+0xe4>)
 80056ca:	f043 0308 	orr.w	r3, r3, #8
 80056ce:	6413      	str	r3, [r2, #64]	; 0x40
 80056d0:	4b30      	ldr	r3, [pc, #192]	; (8005794 <HAL_InitTick+0xe4>)
 80056d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056d4:	f003 0308 	and.w	r3, r3, #8
 80056d8:	60fb      	str	r3, [r7, #12]
 80056da:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80056dc:	f107 0210 	add.w	r2, r7, #16
 80056e0:	f107 0314 	add.w	r3, r7, #20
 80056e4:	4611      	mov	r1, r2
 80056e6:	4618      	mov	r0, r3
 80056e8:	f002 f87c 	bl	80077e4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80056ec:	6a3b      	ldr	r3, [r7, #32]
 80056ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM5 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80056f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d103      	bne.n	80056fe <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80056f6:	f002 f861 	bl	80077bc <HAL_RCC_GetPCLK1Freq>
 80056fa:	6378      	str	r0, [r7, #52]	; 0x34
 80056fc:	e004      	b.n	8005708 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80056fe:	f002 f85d 	bl	80077bc <HAL_RCC_GetPCLK1Freq>
 8005702:	4603      	mov	r3, r0
 8005704:	005b      	lsls	r3, r3, #1
 8005706:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8005708:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800570a:	4a23      	ldr	r2, [pc, #140]	; (8005798 <HAL_InitTick+0xe8>)
 800570c:	fba2 2303 	umull	r2, r3, r2, r3
 8005710:	0c9b      	lsrs	r3, r3, #18
 8005712:	3b01      	subs	r3, #1
 8005714:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 8005716:	4b21      	ldr	r3, [pc, #132]	; (800579c <HAL_InitTick+0xec>)
 8005718:	4a21      	ldr	r2, [pc, #132]	; (80057a0 <HAL_InitTick+0xf0>)
 800571a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 800571c:	4b1f      	ldr	r3, [pc, #124]	; (800579c <HAL_InitTick+0xec>)
 800571e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005722:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 8005724:	4a1d      	ldr	r2, [pc, #116]	; (800579c <HAL_InitTick+0xec>)
 8005726:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005728:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 800572a:	4b1c      	ldr	r3, [pc, #112]	; (800579c <HAL_InitTick+0xec>)
 800572c:	2200      	movs	r2, #0
 800572e:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005730:	4b1a      	ldr	r3, [pc, #104]	; (800579c <HAL_InitTick+0xec>)
 8005732:	2200      	movs	r2, #0
 8005734:	609a      	str	r2, [r3, #8]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005736:	4b19      	ldr	r3, [pc, #100]	; (800579c <HAL_InitTick+0xec>)
 8005738:	2200      	movs	r2, #0
 800573a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim5);
 800573c:	4817      	ldr	r0, [pc, #92]	; (800579c <HAL_InitTick+0xec>)
 800573e:	f002 fd51 	bl	80081e4 <HAL_TIM_Base_Init>
 8005742:	4603      	mov	r3, r0
 8005744:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8005748:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800574c:	2b00      	cmp	r3, #0
 800574e:	d11b      	bne.n	8005788 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim5);
 8005750:	4812      	ldr	r0, [pc, #72]	; (800579c <HAL_InitTick+0xec>)
 8005752:	f002 fda1 	bl	8008298 <HAL_TIM_Base_Start_IT>
 8005756:	4603      	mov	r3, r0
 8005758:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 800575c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005760:	2b00      	cmp	r3, #0
 8005762:	d111      	bne.n	8005788 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM5 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8005764:	2032      	movs	r0, #50	; 0x32
 8005766:	f001 fce1 	bl	800712c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	2b0f      	cmp	r3, #15
 800576e:	d808      	bhi.n	8005782 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority, 0U);
 8005770:	2200      	movs	r2, #0
 8005772:	6879      	ldr	r1, [r7, #4]
 8005774:	2032      	movs	r0, #50	; 0x32
 8005776:	f001 fcbd 	bl	80070f4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800577a:	4a0a      	ldr	r2, [pc, #40]	; (80057a4 <HAL_InitTick+0xf4>)
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	6013      	str	r3, [r2, #0]
 8005780:	e002      	b.n	8005788 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8005782:	2301      	movs	r3, #1
 8005784:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8005788:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800578c:	4618      	mov	r0, r3
 800578e:	3738      	adds	r7, #56	; 0x38
 8005790:	46bd      	mov	sp, r7
 8005792:	bd80      	pop	{r7, pc}
 8005794:	40023800 	.word	0x40023800
 8005798:	431bde83 	.word	0x431bde83
 800579c:	20013120 	.word	0x20013120
 80057a0:	40000c00 	.word	0x40000c00
 80057a4:	2000000c 	.word	0x2000000c

080057a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80057a8:	b480      	push	{r7}
 80057aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80057ac:	e7fe      	b.n	80057ac <NMI_Handler+0x4>

080057ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80057ae:	b480      	push	{r7}
 80057b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80057b2:	e7fe      	b.n	80057b2 <HardFault_Handler+0x4>

080057b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80057b4:	b480      	push	{r7}
 80057b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80057b8:	e7fe      	b.n	80057b8 <MemManage_Handler+0x4>

080057ba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80057ba:	b480      	push	{r7}
 80057bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80057be:	e7fe      	b.n	80057be <BusFault_Handler+0x4>

080057c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80057c0:	b480      	push	{r7}
 80057c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80057c4:	e7fe      	b.n	80057c4 <UsageFault_Handler+0x4>

080057c6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80057c6:	b480      	push	{r7}
 80057c8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80057ca:	bf00      	nop
 80057cc:	46bd      	mov	sp, r7
 80057ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d2:	4770      	bx	lr

080057d4 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 80057d4:	b580      	push	{r7, lr}
 80057d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80057d8:	4802      	ldr	r0, [pc, #8]	; (80057e4 <CAN1_RX0_IRQHandler+0x10>)
 80057da:	f001 f9a4 	bl	8006b26 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80057de:	bf00      	nop
 80057e0:	bd80      	pop	{r7, pc}
 80057e2:	bf00      	nop
 80057e4:	20012ec4 	.word	0x20012ec4

080057e8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80057e8:	b580      	push	{r7, lr}
 80057ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 80057ec:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80057f0:	f001 fe8a 	bl	8007508 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80057f4:	bf00      	nop
 80057f6:	bd80      	pop	{r7, pc}

080057f8 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80057f8:	b580      	push	{r7, lr}
 80057fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80057fc:	4802      	ldr	r0, [pc, #8]	; (8005808 <TIM5_IRQHandler+0x10>)
 80057fe:	f002 fed3 	bl	80085a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8005802:	bf00      	nop
 8005804:	bd80      	pop	{r7, pc}
 8005806:	bf00      	nop
 8005808:	20013120 	.word	0x20013120

0800580c <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 800580c:	b480      	push	{r7}
 800580e:	b083      	sub	sp, #12
 8005810:	af00      	add	r7, sp, #0
 8005812:	4603      	mov	r3, r0
 8005814:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 8005816:	4b0f      	ldr	r3, [pc, #60]	; (8005854 <ITM_SendChar+0x48>)
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	4a0e      	ldr	r2, [pc, #56]	; (8005854 <ITM_SendChar+0x48>)
 800581c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005820:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 8005822:	4b0d      	ldr	r3, [pc, #52]	; (8005858 <ITM_SendChar+0x4c>)
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	4a0c      	ldr	r2, [pc, #48]	; (8005858 <ITM_SendChar+0x4c>)
 8005828:	f043 0301 	orr.w	r3, r3, #1
 800582c:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 800582e:	bf00      	nop
 8005830:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f003 0301 	and.w	r3, r3, #1
 800583a:	2b00      	cmp	r3, #0
 800583c:	d0f8      	beq.n	8005830 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 800583e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8005842:	79fb      	ldrb	r3, [r7, #7]
 8005844:	6013      	str	r3, [r2, #0]
}
 8005846:	bf00      	nop
 8005848:	370c      	adds	r7, #12
 800584a:	46bd      	mov	sp, r7
 800584c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005850:	4770      	bx	lr
 8005852:	bf00      	nop
 8005854:	e000edfc 	.word	0xe000edfc
 8005858:	e0000e00 	.word	0xe0000e00

0800585c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800585c:	b580      	push	{r7, lr}
 800585e:	b086      	sub	sp, #24
 8005860:	af00      	add	r7, sp, #0
 8005862:	60f8      	str	r0, [r7, #12]
 8005864:	60b9      	str	r1, [r7, #8]
 8005866:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005868:	2300      	movs	r3, #0
 800586a:	617b      	str	r3, [r7, #20]
 800586c:	e00a      	b.n	8005884 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800586e:	f3af 8000 	nop.w
 8005872:	4601      	mov	r1, r0
 8005874:	68bb      	ldr	r3, [r7, #8]
 8005876:	1c5a      	adds	r2, r3, #1
 8005878:	60ba      	str	r2, [r7, #8]
 800587a:	b2ca      	uxtb	r2, r1
 800587c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800587e:	697b      	ldr	r3, [r7, #20]
 8005880:	3301      	adds	r3, #1
 8005882:	617b      	str	r3, [r7, #20]
 8005884:	697a      	ldr	r2, [r7, #20]
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	429a      	cmp	r2, r3
 800588a:	dbf0      	blt.n	800586e <_read+0x12>
  }

  return len;
 800588c:	687b      	ldr	r3, [r7, #4]
}
 800588e:	4618      	mov	r0, r3
 8005890:	3718      	adds	r7, #24
 8005892:	46bd      	mov	sp, r7
 8005894:	bd80      	pop	{r7, pc}

08005896 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005896:	b580      	push	{r7, lr}
 8005898:	b086      	sub	sp, #24
 800589a:	af00      	add	r7, sp, #0
 800589c:	60f8      	str	r0, [r7, #12]
 800589e:	60b9      	str	r1, [r7, #8]
 80058a0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80058a2:	2300      	movs	r3, #0
 80058a4:	617b      	str	r3, [r7, #20]
 80058a6:	e009      	b.n	80058bc <_write+0x26>
  {
//    __io_putchar(*ptr++);
	  ITM_SendChar(*ptr++);
 80058a8:	68bb      	ldr	r3, [r7, #8]
 80058aa:	1c5a      	adds	r2, r3, #1
 80058ac:	60ba      	str	r2, [r7, #8]
 80058ae:	781b      	ldrb	r3, [r3, #0]
 80058b0:	4618      	mov	r0, r3
 80058b2:	f7ff ffab 	bl	800580c <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80058b6:	697b      	ldr	r3, [r7, #20]
 80058b8:	3301      	adds	r3, #1
 80058ba:	617b      	str	r3, [r7, #20]
 80058bc:	697a      	ldr	r2, [r7, #20]
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	429a      	cmp	r2, r3
 80058c2:	dbf1      	blt.n	80058a8 <_write+0x12>
  }
  return len;
 80058c4:	687b      	ldr	r3, [r7, #4]
}
 80058c6:	4618      	mov	r0, r3
 80058c8:	3718      	adds	r7, #24
 80058ca:	46bd      	mov	sp, r7
 80058cc:	bd80      	pop	{r7, pc}

080058ce <_close>:

int _close(int file)
{
 80058ce:	b480      	push	{r7}
 80058d0:	b083      	sub	sp, #12
 80058d2:	af00      	add	r7, sp, #0
 80058d4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80058d6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80058da:	4618      	mov	r0, r3
 80058dc:	370c      	adds	r7, #12
 80058de:	46bd      	mov	sp, r7
 80058e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e4:	4770      	bx	lr

080058e6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80058e6:	b480      	push	{r7}
 80058e8:	b083      	sub	sp, #12
 80058ea:	af00      	add	r7, sp, #0
 80058ec:	6078      	str	r0, [r7, #4]
 80058ee:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80058f0:	683b      	ldr	r3, [r7, #0]
 80058f2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80058f6:	605a      	str	r2, [r3, #4]
  return 0;
 80058f8:	2300      	movs	r3, #0
}
 80058fa:	4618      	mov	r0, r3
 80058fc:	370c      	adds	r7, #12
 80058fe:	46bd      	mov	sp, r7
 8005900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005904:	4770      	bx	lr

08005906 <_isatty>:

int _isatty(int file)
{
 8005906:	b480      	push	{r7}
 8005908:	b083      	sub	sp, #12
 800590a:	af00      	add	r7, sp, #0
 800590c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800590e:	2301      	movs	r3, #1
}
 8005910:	4618      	mov	r0, r3
 8005912:	370c      	adds	r7, #12
 8005914:	46bd      	mov	sp, r7
 8005916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591a:	4770      	bx	lr

0800591c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800591c:	b480      	push	{r7}
 800591e:	b085      	sub	sp, #20
 8005920:	af00      	add	r7, sp, #0
 8005922:	60f8      	str	r0, [r7, #12]
 8005924:	60b9      	str	r1, [r7, #8]
 8005926:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8005928:	2300      	movs	r3, #0
}
 800592a:	4618      	mov	r0, r3
 800592c:	3714      	adds	r7, #20
 800592e:	46bd      	mov	sp, r7
 8005930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005934:	4770      	bx	lr
	...

08005938 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005938:	b580      	push	{r7, lr}
 800593a:	b086      	sub	sp, #24
 800593c:	af00      	add	r7, sp, #0
 800593e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005940:	4a14      	ldr	r2, [pc, #80]	; (8005994 <_sbrk+0x5c>)
 8005942:	4b15      	ldr	r3, [pc, #84]	; (8005998 <_sbrk+0x60>)
 8005944:	1ad3      	subs	r3, r2, r3
 8005946:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005948:	697b      	ldr	r3, [r7, #20]
 800594a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800594c:	4b13      	ldr	r3, [pc, #76]	; (800599c <_sbrk+0x64>)
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	2b00      	cmp	r3, #0
 8005952:	d102      	bne.n	800595a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005954:	4b11      	ldr	r3, [pc, #68]	; (800599c <_sbrk+0x64>)
 8005956:	4a12      	ldr	r2, [pc, #72]	; (80059a0 <_sbrk+0x68>)
 8005958:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800595a:	4b10      	ldr	r3, [pc, #64]	; (800599c <_sbrk+0x64>)
 800595c:	681a      	ldr	r2, [r3, #0]
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	4413      	add	r3, r2
 8005962:	693a      	ldr	r2, [r7, #16]
 8005964:	429a      	cmp	r2, r3
 8005966:	d207      	bcs.n	8005978 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005968:	f003 fdac 	bl	80094c4 <__errno>
 800596c:	4603      	mov	r3, r0
 800596e:	220c      	movs	r2, #12
 8005970:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005972:	f04f 33ff 	mov.w	r3, #4294967295
 8005976:	e009      	b.n	800598c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005978:	4b08      	ldr	r3, [pc, #32]	; (800599c <_sbrk+0x64>)
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800597e:	4b07      	ldr	r3, [pc, #28]	; (800599c <_sbrk+0x64>)
 8005980:	681a      	ldr	r2, [r3, #0]
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	4413      	add	r3, r2
 8005986:	4a05      	ldr	r2, [pc, #20]	; (800599c <_sbrk+0x64>)
 8005988:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800598a:	68fb      	ldr	r3, [r7, #12]
}
 800598c:	4618      	mov	r0, r3
 800598e:	3718      	adds	r7, #24
 8005990:	46bd      	mov	sp, r7
 8005992:	bd80      	pop	{r7, pc}
 8005994:	20020000 	.word	0x20020000
 8005998:	00000400 	.word	0x00000400
 800599c:	20013168 	.word	0x20013168
 80059a0:	200132c0 	.word	0x200132c0

080059a4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80059a4:	b480      	push	{r7}
 80059a6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80059a8:	4b06      	ldr	r3, [pc, #24]	; (80059c4 <SystemInit+0x20>)
 80059aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059ae:	4a05      	ldr	r2, [pc, #20]	; (80059c4 <SystemInit+0x20>)
 80059b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80059b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80059b8:	bf00      	nop
 80059ba:	46bd      	mov	sp, r7
 80059bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c0:	4770      	bx	lr
 80059c2:	bf00      	nop
 80059c4:	e000ed00 	.word	0xe000ed00

080059c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80059c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005a00 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80059cc:	480d      	ldr	r0, [pc, #52]	; (8005a04 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80059ce:	490e      	ldr	r1, [pc, #56]	; (8005a08 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80059d0:	4a0e      	ldr	r2, [pc, #56]	; (8005a0c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80059d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80059d4:	e002      	b.n	80059dc <LoopCopyDataInit>

080059d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80059d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80059d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80059da:	3304      	adds	r3, #4

080059dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80059dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80059de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80059e0:	d3f9      	bcc.n	80059d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80059e2:	4a0b      	ldr	r2, [pc, #44]	; (8005a10 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80059e4:	4c0b      	ldr	r4, [pc, #44]	; (8005a14 <LoopFillZerobss+0x26>)
  movs r3, #0
 80059e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80059e8:	e001      	b.n	80059ee <LoopFillZerobss>

080059ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80059ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80059ec:	3204      	adds	r2, #4

080059ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80059ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80059f0:	d3fb      	bcc.n	80059ea <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80059f2:	f7ff ffd7 	bl	80059a4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80059f6:	f003 fd6b 	bl	80094d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80059fa:	f7fe fd05 	bl	8004408 <main>
  bx  lr    
 80059fe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8005a00:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8005a04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005a08:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8005a0c:	0800a0e4 	.word	0x0800a0e4
  ldr r2, =_sbss
 8005a10:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8005a14:	200132bc 	.word	0x200132bc

08005a18 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005a18:	e7fe      	b.n	8005a18 <ADC_IRQHandler>
	...

08005a1c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005a1c:	b580      	push	{r7, lr}
 8005a1e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005a20:	4b0e      	ldr	r3, [pc, #56]	; (8005a5c <HAL_Init+0x40>)
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	4a0d      	ldr	r2, [pc, #52]	; (8005a5c <HAL_Init+0x40>)
 8005a26:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005a2a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005a2c:	4b0b      	ldr	r3, [pc, #44]	; (8005a5c <HAL_Init+0x40>)
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	4a0a      	ldr	r2, [pc, #40]	; (8005a5c <HAL_Init+0x40>)
 8005a32:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005a36:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005a38:	4b08      	ldr	r3, [pc, #32]	; (8005a5c <HAL_Init+0x40>)
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	4a07      	ldr	r2, [pc, #28]	; (8005a5c <HAL_Init+0x40>)
 8005a3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a42:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005a44:	2003      	movs	r0, #3
 8005a46:	f001 fb4a 	bl	80070de <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005a4a:	200f      	movs	r0, #15
 8005a4c:	f7ff fe30 	bl	80056b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005a50:	f7ff fb44 	bl	80050dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005a54:	2300      	movs	r3, #0
}
 8005a56:	4618      	mov	r0, r3
 8005a58:	bd80      	pop	{r7, pc}
 8005a5a:	bf00      	nop
 8005a5c:	40023c00 	.word	0x40023c00

08005a60 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005a60:	b480      	push	{r7}
 8005a62:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005a64:	4b06      	ldr	r3, [pc, #24]	; (8005a80 <HAL_IncTick+0x20>)
 8005a66:	781b      	ldrb	r3, [r3, #0]
 8005a68:	461a      	mov	r2, r3
 8005a6a:	4b06      	ldr	r3, [pc, #24]	; (8005a84 <HAL_IncTick+0x24>)
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	4413      	add	r3, r2
 8005a70:	4a04      	ldr	r2, [pc, #16]	; (8005a84 <HAL_IncTick+0x24>)
 8005a72:	6013      	str	r3, [r2, #0]
}
 8005a74:	bf00      	nop
 8005a76:	46bd      	mov	sp, r7
 8005a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7c:	4770      	bx	lr
 8005a7e:	bf00      	nop
 8005a80:	20000010 	.word	0x20000010
 8005a84:	2001316c 	.word	0x2001316c

08005a88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005a88:	b480      	push	{r7}
 8005a8a:	af00      	add	r7, sp, #0
  return uwTick;
 8005a8c:	4b03      	ldr	r3, [pc, #12]	; (8005a9c <HAL_GetTick+0x14>)
 8005a8e:	681b      	ldr	r3, [r3, #0]
}
 8005a90:	4618      	mov	r0, r3
 8005a92:	46bd      	mov	sp, r7
 8005a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a98:	4770      	bx	lr
 8005a9a:	bf00      	nop
 8005a9c:	2001316c 	.word	0x2001316c

08005aa0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	b084      	sub	sp, #16
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005aa8:	2300      	movs	r3, #0
 8005aaa:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d101      	bne.n	8005ab6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8005ab2:	2301      	movs	r3, #1
 8005ab4:	e033      	b.n	8005b1e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d109      	bne.n	8005ad2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005abe:	6878      	ldr	r0, [r7, #4]
 8005ac0:	f7ff fb34 	bl	800512c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	2200      	movs	r2, #0
 8005ace:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ad6:	f003 0310 	and.w	r3, r3, #16
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d118      	bne.n	8005b10 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ae2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8005ae6:	f023 0302 	bic.w	r3, r3, #2
 8005aea:	f043 0202 	orr.w	r2, r3, #2
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8005af2:	6878      	ldr	r0, [r7, #4]
 8005af4:	f000 fae8 	bl	80060c8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2200      	movs	r2, #0
 8005afc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b02:	f023 0303 	bic.w	r3, r3, #3
 8005b06:	f043 0201 	orr.w	r2, r3, #1
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	641a      	str	r2, [r3, #64]	; 0x40
 8005b0e:	e001      	b.n	8005b14 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8005b10:	2301      	movs	r3, #1
 8005b12:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2200      	movs	r2, #0
 8005b18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8005b1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b1e:	4618      	mov	r0, r3
 8005b20:	3710      	adds	r7, #16
 8005b22:	46bd      	mov	sp, r7
 8005b24:	bd80      	pop	{r7, pc}
	...

08005b28 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8005b28:	b480      	push	{r7}
 8005b2a:	b085      	sub	sp, #20
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8005b30:	2300      	movs	r3, #0
 8005b32:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b3a:	2b01      	cmp	r3, #1
 8005b3c:	d101      	bne.n	8005b42 <HAL_ADC_Start+0x1a>
 8005b3e:	2302      	movs	r3, #2
 8005b40:	e0b2      	b.n	8005ca8 <HAL_ADC_Start+0x180>
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	2201      	movs	r2, #1
 8005b46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	689b      	ldr	r3, [r3, #8]
 8005b50:	f003 0301 	and.w	r3, r3, #1
 8005b54:	2b01      	cmp	r3, #1
 8005b56:	d018      	beq.n	8005b8a <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	689a      	ldr	r2, [r3, #8]
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	f042 0201 	orr.w	r2, r2, #1
 8005b66:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8005b68:	4b52      	ldr	r3, [pc, #328]	; (8005cb4 <HAL_ADC_Start+0x18c>)
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	4a52      	ldr	r2, [pc, #328]	; (8005cb8 <HAL_ADC_Start+0x190>)
 8005b6e:	fba2 2303 	umull	r2, r3, r2, r3
 8005b72:	0c9a      	lsrs	r2, r3, #18
 8005b74:	4613      	mov	r3, r2
 8005b76:	005b      	lsls	r3, r3, #1
 8005b78:	4413      	add	r3, r2
 8005b7a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8005b7c:	e002      	b.n	8005b84 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8005b7e:	68bb      	ldr	r3, [r7, #8]
 8005b80:	3b01      	subs	r3, #1
 8005b82:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8005b84:	68bb      	ldr	r3, [r7, #8]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d1f9      	bne.n	8005b7e <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	689b      	ldr	r3, [r3, #8]
 8005b90:	f003 0301 	and.w	r3, r3, #1
 8005b94:	2b01      	cmp	r3, #1
 8005b96:	d17a      	bne.n	8005c8e <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b9c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8005ba0:	f023 0301 	bic.w	r3, r3, #1
 8005ba4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	685b      	ldr	r3, [r3, #4]
 8005bb2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d007      	beq.n	8005bca <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bbe:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005bc2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005bd2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005bd6:	d106      	bne.n	8005be6 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bdc:	f023 0206 	bic.w	r2, r3, #6
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	645a      	str	r2, [r3, #68]	; 0x44
 8005be4:	e002      	b.n	8005bec <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	2200      	movs	r2, #0
 8005bea:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	2200      	movs	r2, #0
 8005bf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005bf4:	4b31      	ldr	r3, [pc, #196]	; (8005cbc <HAL_ADC_Start+0x194>)
 8005bf6:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8005c00:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	685b      	ldr	r3, [r3, #4]
 8005c06:	f003 031f 	and.w	r3, r3, #31
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d12a      	bne.n	8005c64 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	4a2b      	ldr	r2, [pc, #172]	; (8005cc0 <HAL_ADC_Start+0x198>)
 8005c14:	4293      	cmp	r3, r2
 8005c16:	d015      	beq.n	8005c44 <HAL_ADC_Start+0x11c>
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	4a29      	ldr	r2, [pc, #164]	; (8005cc4 <HAL_ADC_Start+0x19c>)
 8005c1e:	4293      	cmp	r3, r2
 8005c20:	d105      	bne.n	8005c2e <HAL_ADC_Start+0x106>
 8005c22:	4b26      	ldr	r3, [pc, #152]	; (8005cbc <HAL_ADC_Start+0x194>)
 8005c24:	685b      	ldr	r3, [r3, #4]
 8005c26:	f003 031f 	and.w	r3, r3, #31
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d00a      	beq.n	8005c44 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	4a25      	ldr	r2, [pc, #148]	; (8005cc8 <HAL_ADC_Start+0x1a0>)
 8005c34:	4293      	cmp	r3, r2
 8005c36:	d136      	bne.n	8005ca6 <HAL_ADC_Start+0x17e>
 8005c38:	4b20      	ldr	r3, [pc, #128]	; (8005cbc <HAL_ADC_Start+0x194>)
 8005c3a:	685b      	ldr	r3, [r3, #4]
 8005c3c:	f003 0310 	and.w	r3, r3, #16
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d130      	bne.n	8005ca6 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	689b      	ldr	r3, [r3, #8]
 8005c4a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d129      	bne.n	8005ca6 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	689a      	ldr	r2, [r3, #8]
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8005c60:	609a      	str	r2, [r3, #8]
 8005c62:	e020      	b.n	8005ca6 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	4a15      	ldr	r2, [pc, #84]	; (8005cc0 <HAL_ADC_Start+0x198>)
 8005c6a:	4293      	cmp	r3, r2
 8005c6c:	d11b      	bne.n	8005ca6 <HAL_ADC_Start+0x17e>
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	689b      	ldr	r3, [r3, #8]
 8005c74:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d114      	bne.n	8005ca6 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	689a      	ldr	r2, [r3, #8]
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8005c8a:	609a      	str	r2, [r3, #8]
 8005c8c:	e00b      	b.n	8005ca6 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c92:	f043 0210 	orr.w	r2, r3, #16
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c9e:	f043 0201 	orr.w	r2, r3, #1
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8005ca6:	2300      	movs	r3, #0
}
 8005ca8:	4618      	mov	r0, r3
 8005caa:	3714      	adds	r7, #20
 8005cac:	46bd      	mov	sp, r7
 8005cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb2:	4770      	bx	lr
 8005cb4:	20000008 	.word	0x20000008
 8005cb8:	431bde83 	.word	0x431bde83
 8005cbc:	40012300 	.word	0x40012300
 8005cc0:	40012000 	.word	0x40012000
 8005cc4:	40012100 	.word	0x40012100
 8005cc8:	40012200 	.word	0x40012200

08005ccc <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8005ccc:	b480      	push	{r7}
 8005cce:	b083      	sub	sp, #12
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005cda:	2b01      	cmp	r3, #1
 8005cdc:	d101      	bne.n	8005ce2 <HAL_ADC_Stop+0x16>
 8005cde:	2302      	movs	r3, #2
 8005ce0:	e021      	b.n	8005d26 <HAL_ADC_Stop+0x5a>
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	2201      	movs	r2, #1
 8005ce6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	689a      	ldr	r2, [r3, #8]
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	f022 0201 	bic.w	r2, r2, #1
 8005cf8:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	689b      	ldr	r3, [r3, #8]
 8005d00:	f003 0301 	and.w	r3, r3, #1
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d109      	bne.n	8005d1c <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d0c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8005d10:	f023 0301 	bic.w	r3, r3, #1
 8005d14:	f043 0201 	orr.w	r2, r3, #1
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	2200      	movs	r2, #0
 8005d20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8005d24:	2300      	movs	r3, #0
}
 8005d26:	4618      	mov	r0, r3
 8005d28:	370c      	adds	r7, #12
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d30:	4770      	bx	lr

08005d32 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8005d32:	b580      	push	{r7, lr}
 8005d34:	b084      	sub	sp, #16
 8005d36:	af00      	add	r7, sp, #0
 8005d38:	6078      	str	r0, [r7, #4]
 8005d3a:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8005d3c:	2300      	movs	r3, #0
 8005d3e:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	689b      	ldr	r3, [r3, #8]
 8005d46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d4e:	d113      	bne.n	8005d78 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	689b      	ldr	r3, [r3, #8]
 8005d56:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8005d5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d5e:	d10b      	bne.n	8005d78 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d64:	f043 0220 	orr.w	r2, r3, #32
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	2200      	movs	r2, #0
 8005d70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8005d74:	2301      	movs	r3, #1
 8005d76:	e063      	b.n	8005e40 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8005d78:	f7ff fe86 	bl	8005a88 <HAL_GetTick>
 8005d7c:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8005d7e:	e021      	b.n	8005dc4 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8005d80:	683b      	ldr	r3, [r7, #0]
 8005d82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d86:	d01d      	beq.n	8005dc4 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d007      	beq.n	8005d9e <HAL_ADC_PollForConversion+0x6c>
 8005d8e:	f7ff fe7b 	bl	8005a88 <HAL_GetTick>
 8005d92:	4602      	mov	r2, r0
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	1ad3      	subs	r3, r2, r3
 8005d98:	683a      	ldr	r2, [r7, #0]
 8005d9a:	429a      	cmp	r2, r3
 8005d9c:	d212      	bcs.n	8005dc4 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	f003 0302 	and.w	r3, r3, #2
 8005da8:	2b02      	cmp	r3, #2
 8005daa:	d00b      	beq.n	8005dc4 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005db0:	f043 0204 	orr.w	r2, r3, #4
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2200      	movs	r2, #0
 8005dbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8005dc0:	2303      	movs	r3, #3
 8005dc2:	e03d      	b.n	8005e40 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f003 0302 	and.w	r3, r3, #2
 8005dce:	2b02      	cmp	r3, #2
 8005dd0:	d1d6      	bne.n	8005d80 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	f06f 0212 	mvn.w	r2, #18
 8005dda:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005de0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	689b      	ldr	r3, [r3, #8]
 8005dee:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d123      	bne.n	8005e3e <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d11f      	bne.n	8005e3e <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e04:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d006      	beq.n	8005e1a <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	689b      	ldr	r3, [r3, #8]
 8005e12:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d111      	bne.n	8005e3e <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e1e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e2a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d105      	bne.n	8005e3e <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e36:	f043 0201 	orr.w	r2, r3, #1
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8005e3e:	2300      	movs	r3, #0
}
 8005e40:	4618      	mov	r0, r3
 8005e42:	3710      	adds	r7, #16
 8005e44:	46bd      	mov	sp, r7
 8005e46:	bd80      	pop	{r7, pc}

08005e48 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8005e48:	b480      	push	{r7}
 8005e4a:	b083      	sub	sp, #12
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8005e56:	4618      	mov	r0, r3
 8005e58:	370c      	adds	r7, #12
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e60:	4770      	bx	lr
	...

08005e64 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8005e64:	b480      	push	{r7}
 8005e66:	b085      	sub	sp, #20
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	6078      	str	r0, [r7, #4]
 8005e6c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8005e6e:	2300      	movs	r3, #0
 8005e70:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e78:	2b01      	cmp	r3, #1
 8005e7a:	d101      	bne.n	8005e80 <HAL_ADC_ConfigChannel+0x1c>
 8005e7c:	2302      	movs	r3, #2
 8005e7e:	e113      	b.n	80060a8 <HAL_ADC_ConfigChannel+0x244>
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2201      	movs	r2, #1
 8005e84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8005e88:	683b      	ldr	r3, [r7, #0]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	2b09      	cmp	r3, #9
 8005e8e:	d925      	bls.n	8005edc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	68d9      	ldr	r1, [r3, #12]
 8005e96:	683b      	ldr	r3, [r7, #0]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	b29b      	uxth	r3, r3
 8005e9c:	461a      	mov	r2, r3
 8005e9e:	4613      	mov	r3, r2
 8005ea0:	005b      	lsls	r3, r3, #1
 8005ea2:	4413      	add	r3, r2
 8005ea4:	3b1e      	subs	r3, #30
 8005ea6:	2207      	movs	r2, #7
 8005ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8005eac:	43da      	mvns	r2, r3
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	400a      	ands	r2, r1
 8005eb4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	68d9      	ldr	r1, [r3, #12]
 8005ebc:	683b      	ldr	r3, [r7, #0]
 8005ebe:	689a      	ldr	r2, [r3, #8]
 8005ec0:	683b      	ldr	r3, [r7, #0]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	b29b      	uxth	r3, r3
 8005ec6:	4618      	mov	r0, r3
 8005ec8:	4603      	mov	r3, r0
 8005eca:	005b      	lsls	r3, r3, #1
 8005ecc:	4403      	add	r3, r0
 8005ece:	3b1e      	subs	r3, #30
 8005ed0:	409a      	lsls	r2, r3
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	430a      	orrs	r2, r1
 8005ed8:	60da      	str	r2, [r3, #12]
 8005eda:	e022      	b.n	8005f22 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	6919      	ldr	r1, [r3, #16]
 8005ee2:	683b      	ldr	r3, [r7, #0]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	b29b      	uxth	r3, r3
 8005ee8:	461a      	mov	r2, r3
 8005eea:	4613      	mov	r3, r2
 8005eec:	005b      	lsls	r3, r3, #1
 8005eee:	4413      	add	r3, r2
 8005ef0:	2207      	movs	r2, #7
 8005ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8005ef6:	43da      	mvns	r2, r3
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	400a      	ands	r2, r1
 8005efe:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	6919      	ldr	r1, [r3, #16]
 8005f06:	683b      	ldr	r3, [r7, #0]
 8005f08:	689a      	ldr	r2, [r3, #8]
 8005f0a:	683b      	ldr	r3, [r7, #0]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	b29b      	uxth	r3, r3
 8005f10:	4618      	mov	r0, r3
 8005f12:	4603      	mov	r3, r0
 8005f14:	005b      	lsls	r3, r3, #1
 8005f16:	4403      	add	r3, r0
 8005f18:	409a      	lsls	r2, r3
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	430a      	orrs	r2, r1
 8005f20:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8005f22:	683b      	ldr	r3, [r7, #0]
 8005f24:	685b      	ldr	r3, [r3, #4]
 8005f26:	2b06      	cmp	r3, #6
 8005f28:	d824      	bhi.n	8005f74 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005f30:	683b      	ldr	r3, [r7, #0]
 8005f32:	685a      	ldr	r2, [r3, #4]
 8005f34:	4613      	mov	r3, r2
 8005f36:	009b      	lsls	r3, r3, #2
 8005f38:	4413      	add	r3, r2
 8005f3a:	3b05      	subs	r3, #5
 8005f3c:	221f      	movs	r2, #31
 8005f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8005f42:	43da      	mvns	r2, r3
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	400a      	ands	r2, r1
 8005f4a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005f52:	683b      	ldr	r3, [r7, #0]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	b29b      	uxth	r3, r3
 8005f58:	4618      	mov	r0, r3
 8005f5a:	683b      	ldr	r3, [r7, #0]
 8005f5c:	685a      	ldr	r2, [r3, #4]
 8005f5e:	4613      	mov	r3, r2
 8005f60:	009b      	lsls	r3, r3, #2
 8005f62:	4413      	add	r3, r2
 8005f64:	3b05      	subs	r3, #5
 8005f66:	fa00 f203 	lsl.w	r2, r0, r3
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	430a      	orrs	r2, r1
 8005f70:	635a      	str	r2, [r3, #52]	; 0x34
 8005f72:	e04c      	b.n	800600e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8005f74:	683b      	ldr	r3, [r7, #0]
 8005f76:	685b      	ldr	r3, [r3, #4]
 8005f78:	2b0c      	cmp	r3, #12
 8005f7a:	d824      	bhi.n	8005fc6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005f82:	683b      	ldr	r3, [r7, #0]
 8005f84:	685a      	ldr	r2, [r3, #4]
 8005f86:	4613      	mov	r3, r2
 8005f88:	009b      	lsls	r3, r3, #2
 8005f8a:	4413      	add	r3, r2
 8005f8c:	3b23      	subs	r3, #35	; 0x23
 8005f8e:	221f      	movs	r2, #31
 8005f90:	fa02 f303 	lsl.w	r3, r2, r3
 8005f94:	43da      	mvns	r2, r3
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	400a      	ands	r2, r1
 8005f9c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005fa4:	683b      	ldr	r3, [r7, #0]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	b29b      	uxth	r3, r3
 8005faa:	4618      	mov	r0, r3
 8005fac:	683b      	ldr	r3, [r7, #0]
 8005fae:	685a      	ldr	r2, [r3, #4]
 8005fb0:	4613      	mov	r3, r2
 8005fb2:	009b      	lsls	r3, r3, #2
 8005fb4:	4413      	add	r3, r2
 8005fb6:	3b23      	subs	r3, #35	; 0x23
 8005fb8:	fa00 f203 	lsl.w	r2, r0, r3
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	430a      	orrs	r2, r1
 8005fc2:	631a      	str	r2, [r3, #48]	; 0x30
 8005fc4:	e023      	b.n	800600e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005fcc:	683b      	ldr	r3, [r7, #0]
 8005fce:	685a      	ldr	r2, [r3, #4]
 8005fd0:	4613      	mov	r3, r2
 8005fd2:	009b      	lsls	r3, r3, #2
 8005fd4:	4413      	add	r3, r2
 8005fd6:	3b41      	subs	r3, #65	; 0x41
 8005fd8:	221f      	movs	r2, #31
 8005fda:	fa02 f303 	lsl.w	r3, r2, r3
 8005fde:	43da      	mvns	r2, r3
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	400a      	ands	r2, r1
 8005fe6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005fee:	683b      	ldr	r3, [r7, #0]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	b29b      	uxth	r3, r3
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	683b      	ldr	r3, [r7, #0]
 8005ff8:	685a      	ldr	r2, [r3, #4]
 8005ffa:	4613      	mov	r3, r2
 8005ffc:	009b      	lsls	r3, r3, #2
 8005ffe:	4413      	add	r3, r2
 8006000:	3b41      	subs	r3, #65	; 0x41
 8006002:	fa00 f203 	lsl.w	r2, r0, r3
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	430a      	orrs	r2, r1
 800600c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800600e:	4b29      	ldr	r3, [pc, #164]	; (80060b4 <HAL_ADC_ConfigChannel+0x250>)
 8006010:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	4a28      	ldr	r2, [pc, #160]	; (80060b8 <HAL_ADC_ConfigChannel+0x254>)
 8006018:	4293      	cmp	r3, r2
 800601a:	d10f      	bne.n	800603c <HAL_ADC_ConfigChannel+0x1d8>
 800601c:	683b      	ldr	r3, [r7, #0]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	2b12      	cmp	r3, #18
 8006022:	d10b      	bne.n	800603c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	685b      	ldr	r3, [r3, #4]
 8006028:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	685b      	ldr	r3, [r3, #4]
 8006034:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	4a1d      	ldr	r2, [pc, #116]	; (80060b8 <HAL_ADC_ConfigChannel+0x254>)
 8006042:	4293      	cmp	r3, r2
 8006044:	d12b      	bne.n	800609e <HAL_ADC_ConfigChannel+0x23a>
 8006046:	683b      	ldr	r3, [r7, #0]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	4a1c      	ldr	r2, [pc, #112]	; (80060bc <HAL_ADC_ConfigChannel+0x258>)
 800604c:	4293      	cmp	r3, r2
 800604e:	d003      	beq.n	8006058 <HAL_ADC_ConfigChannel+0x1f4>
 8006050:	683b      	ldr	r3, [r7, #0]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	2b11      	cmp	r3, #17
 8006056:	d122      	bne.n	800609e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	685b      	ldr	r3, [r3, #4]
 800605c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	685b      	ldr	r3, [r3, #4]
 8006068:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8006070:	683b      	ldr	r3, [r7, #0]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	4a11      	ldr	r2, [pc, #68]	; (80060bc <HAL_ADC_ConfigChannel+0x258>)
 8006076:	4293      	cmp	r3, r2
 8006078:	d111      	bne.n	800609e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800607a:	4b11      	ldr	r3, [pc, #68]	; (80060c0 <HAL_ADC_ConfigChannel+0x25c>)
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	4a11      	ldr	r2, [pc, #68]	; (80060c4 <HAL_ADC_ConfigChannel+0x260>)
 8006080:	fba2 2303 	umull	r2, r3, r2, r3
 8006084:	0c9a      	lsrs	r2, r3, #18
 8006086:	4613      	mov	r3, r2
 8006088:	009b      	lsls	r3, r3, #2
 800608a:	4413      	add	r3, r2
 800608c:	005b      	lsls	r3, r3, #1
 800608e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8006090:	e002      	b.n	8006098 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8006092:	68bb      	ldr	r3, [r7, #8]
 8006094:	3b01      	subs	r3, #1
 8006096:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8006098:	68bb      	ldr	r3, [r7, #8]
 800609a:	2b00      	cmp	r3, #0
 800609c:	d1f9      	bne.n	8006092 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	2200      	movs	r2, #0
 80060a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80060a6:	2300      	movs	r3, #0
}
 80060a8:	4618      	mov	r0, r3
 80060aa:	3714      	adds	r7, #20
 80060ac:	46bd      	mov	sp, r7
 80060ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b2:	4770      	bx	lr
 80060b4:	40012300 	.word	0x40012300
 80060b8:	40012000 	.word	0x40012000
 80060bc:	10000012 	.word	0x10000012
 80060c0:	20000008 	.word	0x20000008
 80060c4:	431bde83 	.word	0x431bde83

080060c8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80060c8:	b480      	push	{r7}
 80060ca:	b085      	sub	sp, #20
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80060d0:	4b79      	ldr	r3, [pc, #484]	; (80062b8 <ADC_Init+0x1f0>)
 80060d2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	685b      	ldr	r3, [r3, #4]
 80060d8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	685a      	ldr	r2, [r3, #4]
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	685b      	ldr	r3, [r3, #4]
 80060e8:	431a      	orrs	r2, r3
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	685a      	ldr	r2, [r3, #4]
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80060fc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	6859      	ldr	r1, [r3, #4]
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	691b      	ldr	r3, [r3, #16]
 8006108:	021a      	lsls	r2, r3, #8
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	430a      	orrs	r2, r1
 8006110:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	685a      	ldr	r2, [r3, #4]
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8006120:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	6859      	ldr	r1, [r3, #4]
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	689a      	ldr	r2, [r3, #8]
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	430a      	orrs	r2, r1
 8006132:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	689a      	ldr	r2, [r3, #8]
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006142:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	6899      	ldr	r1, [r3, #8]
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	68da      	ldr	r2, [r3, #12]
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	430a      	orrs	r2, r1
 8006154:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800615a:	4a58      	ldr	r2, [pc, #352]	; (80062bc <ADC_Init+0x1f4>)
 800615c:	4293      	cmp	r3, r2
 800615e:	d022      	beq.n	80061a6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	689a      	ldr	r2, [r3, #8]
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800616e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	6899      	ldr	r1, [r3, #8]
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	430a      	orrs	r2, r1
 8006180:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	689a      	ldr	r2, [r3, #8]
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006190:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	6899      	ldr	r1, [r3, #8]
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	430a      	orrs	r2, r1
 80061a2:	609a      	str	r2, [r3, #8]
 80061a4:	e00f      	b.n	80061c6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	689a      	ldr	r2, [r3, #8]
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80061b4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	689a      	ldr	r2, [r3, #8]
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80061c4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	689a      	ldr	r2, [r3, #8]
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	f022 0202 	bic.w	r2, r2, #2
 80061d4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	6899      	ldr	r1, [r3, #8]
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	7e1b      	ldrb	r3, [r3, #24]
 80061e0:	005a      	lsls	r2, r3, #1
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	430a      	orrs	r2, r1
 80061e8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	f893 3020 	ldrb.w	r3, [r3, #32]
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d01b      	beq.n	800622c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	685a      	ldr	r2, [r3, #4]
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006202:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	685a      	ldr	r2, [r3, #4]
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8006212:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	6859      	ldr	r1, [r3, #4]
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800621e:	3b01      	subs	r3, #1
 8006220:	035a      	lsls	r2, r3, #13
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	430a      	orrs	r2, r1
 8006228:	605a      	str	r2, [r3, #4]
 800622a:	e007      	b.n	800623c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	685a      	ldr	r2, [r3, #4]
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800623a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800624a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	69db      	ldr	r3, [r3, #28]
 8006256:	3b01      	subs	r3, #1
 8006258:	051a      	lsls	r2, r3, #20
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	430a      	orrs	r2, r1
 8006260:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	689a      	ldr	r2, [r3, #8]
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8006270:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	6899      	ldr	r1, [r3, #8]
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800627e:	025a      	lsls	r2, r3, #9
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	430a      	orrs	r2, r1
 8006286:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	689a      	ldr	r2, [r3, #8]
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006296:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	6899      	ldr	r1, [r3, #8]
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	695b      	ldr	r3, [r3, #20]
 80062a2:	029a      	lsls	r2, r3, #10
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	430a      	orrs	r2, r1
 80062aa:	609a      	str	r2, [r3, #8]
}
 80062ac:	bf00      	nop
 80062ae:	3714      	adds	r7, #20
 80062b0:	46bd      	mov	sp, r7
 80062b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b6:	4770      	bx	lr
 80062b8:	40012300 	.word	0x40012300
 80062bc:	0f000001 	.word	0x0f000001

080062c0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80062c0:	b580      	push	{r7, lr}
 80062c2:	b084      	sub	sp, #16
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d101      	bne.n	80062d2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80062ce:	2301      	movs	r3, #1
 80062d0:	e0ed      	b.n	80064ae <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80062d8:	b2db      	uxtb	r3, r3
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d102      	bne.n	80062e4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80062de:	6878      	ldr	r0, [r7, #4]
 80062e0:	f7fe ffb6 	bl	8005250 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	681a      	ldr	r2, [r3, #0]
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	f042 0201 	orr.w	r2, r2, #1
 80062f2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80062f4:	f7ff fbc8 	bl	8005a88 <HAL_GetTick>
 80062f8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80062fa:	e012      	b.n	8006322 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80062fc:	f7ff fbc4 	bl	8005a88 <HAL_GetTick>
 8006300:	4602      	mov	r2, r0
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	1ad3      	subs	r3, r2, r3
 8006306:	2b0a      	cmp	r3, #10
 8006308:	d90b      	bls.n	8006322 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800630e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	2205      	movs	r2, #5
 800631a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800631e:	2301      	movs	r3, #1
 8006320:	e0c5      	b.n	80064ae <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	685b      	ldr	r3, [r3, #4]
 8006328:	f003 0301 	and.w	r3, r3, #1
 800632c:	2b00      	cmp	r3, #0
 800632e:	d0e5      	beq.n	80062fc <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	681a      	ldr	r2, [r3, #0]
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	f022 0202 	bic.w	r2, r2, #2
 800633e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006340:	f7ff fba2 	bl	8005a88 <HAL_GetTick>
 8006344:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8006346:	e012      	b.n	800636e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8006348:	f7ff fb9e 	bl	8005a88 <HAL_GetTick>
 800634c:	4602      	mov	r2, r0
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	1ad3      	subs	r3, r2, r3
 8006352:	2b0a      	cmp	r3, #10
 8006354:	d90b      	bls.n	800636e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800635a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	2205      	movs	r2, #5
 8006366:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800636a:	2301      	movs	r3, #1
 800636c:	e09f      	b.n	80064ae <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	685b      	ldr	r3, [r3, #4]
 8006374:	f003 0302 	and.w	r3, r3, #2
 8006378:	2b00      	cmp	r3, #0
 800637a:	d1e5      	bne.n	8006348 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	7e1b      	ldrb	r3, [r3, #24]
 8006380:	2b01      	cmp	r3, #1
 8006382:	d108      	bne.n	8006396 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	681a      	ldr	r2, [r3, #0]
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006392:	601a      	str	r2, [r3, #0]
 8006394:	e007      	b.n	80063a6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	681a      	ldr	r2, [r3, #0]
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80063a4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	7e5b      	ldrb	r3, [r3, #25]
 80063aa:	2b01      	cmp	r3, #1
 80063ac:	d108      	bne.n	80063c0 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	681a      	ldr	r2, [r3, #0]
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80063bc:	601a      	str	r2, [r3, #0]
 80063be:	e007      	b.n	80063d0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	681a      	ldr	r2, [r3, #0]
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80063ce:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	7e9b      	ldrb	r3, [r3, #26]
 80063d4:	2b01      	cmp	r3, #1
 80063d6:	d108      	bne.n	80063ea <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	681a      	ldr	r2, [r3, #0]
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	f042 0220 	orr.w	r2, r2, #32
 80063e6:	601a      	str	r2, [r3, #0]
 80063e8:	e007      	b.n	80063fa <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	681a      	ldr	r2, [r3, #0]
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	f022 0220 	bic.w	r2, r2, #32
 80063f8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	7edb      	ldrb	r3, [r3, #27]
 80063fe:	2b01      	cmp	r3, #1
 8006400:	d108      	bne.n	8006414 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	681a      	ldr	r2, [r3, #0]
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	f022 0210 	bic.w	r2, r2, #16
 8006410:	601a      	str	r2, [r3, #0]
 8006412:	e007      	b.n	8006424 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	681a      	ldr	r2, [r3, #0]
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	f042 0210 	orr.w	r2, r2, #16
 8006422:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	7f1b      	ldrb	r3, [r3, #28]
 8006428:	2b01      	cmp	r3, #1
 800642a:	d108      	bne.n	800643e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	681a      	ldr	r2, [r3, #0]
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	f042 0208 	orr.w	r2, r2, #8
 800643a:	601a      	str	r2, [r3, #0]
 800643c:	e007      	b.n	800644e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	681a      	ldr	r2, [r3, #0]
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	f022 0208 	bic.w	r2, r2, #8
 800644c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	7f5b      	ldrb	r3, [r3, #29]
 8006452:	2b01      	cmp	r3, #1
 8006454:	d108      	bne.n	8006468 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	681a      	ldr	r2, [r3, #0]
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	f042 0204 	orr.w	r2, r2, #4
 8006464:	601a      	str	r2, [r3, #0]
 8006466:	e007      	b.n	8006478 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	681a      	ldr	r2, [r3, #0]
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	f022 0204 	bic.w	r2, r2, #4
 8006476:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	689a      	ldr	r2, [r3, #8]
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	68db      	ldr	r3, [r3, #12]
 8006480:	431a      	orrs	r2, r3
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	691b      	ldr	r3, [r3, #16]
 8006486:	431a      	orrs	r2, r3
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	695b      	ldr	r3, [r3, #20]
 800648c:	ea42 0103 	orr.w	r1, r2, r3
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	685b      	ldr	r3, [r3, #4]
 8006494:	1e5a      	subs	r2, r3, #1
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	430a      	orrs	r2, r1
 800649c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	2200      	movs	r2, #0
 80064a2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	2201      	movs	r2, #1
 80064a8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80064ac:	2300      	movs	r3, #0
}
 80064ae:	4618      	mov	r0, r3
 80064b0:	3710      	adds	r7, #16
 80064b2:	46bd      	mov	sp, r7
 80064b4:	bd80      	pop	{r7, pc}
	...

080064b8 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80064b8:	b480      	push	{r7}
 80064ba:	b087      	sub	sp, #28
 80064bc:	af00      	add	r7, sp, #0
 80064be:	6078      	str	r0, [r7, #4]
 80064c0:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	f893 3020 	ldrb.w	r3, [r3, #32]
 80064ce:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80064d0:	7cfb      	ldrb	r3, [r7, #19]
 80064d2:	2b01      	cmp	r3, #1
 80064d4:	d003      	beq.n	80064de <HAL_CAN_ConfigFilter+0x26>
 80064d6:	7cfb      	ldrb	r3, [r7, #19]
 80064d8:	2b02      	cmp	r3, #2
 80064da:	f040 80be 	bne.w	800665a <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 80064de:	4b65      	ldr	r3, [pc, #404]	; (8006674 <HAL_CAN_ConfigFilter+0x1bc>)
 80064e0:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80064e2:	697b      	ldr	r3, [r7, #20]
 80064e4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80064e8:	f043 0201 	orr.w	r2, r3, #1
 80064ec:	697b      	ldr	r3, [r7, #20]
 80064ee:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80064f2:	697b      	ldr	r3, [r7, #20]
 80064f4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80064f8:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80064fc:	697b      	ldr	r3, [r7, #20]
 80064fe:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8006502:	697b      	ldr	r3, [r7, #20]
 8006504:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8006508:	683b      	ldr	r3, [r7, #0]
 800650a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800650c:	021b      	lsls	r3, r3, #8
 800650e:	431a      	orrs	r2, r3
 8006510:	697b      	ldr	r3, [r7, #20]
 8006512:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8006516:	683b      	ldr	r3, [r7, #0]
 8006518:	695b      	ldr	r3, [r3, #20]
 800651a:	f003 031f 	and.w	r3, r3, #31
 800651e:	2201      	movs	r2, #1
 8006520:	fa02 f303 	lsl.w	r3, r2, r3
 8006524:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8006526:	697b      	ldr	r3, [r7, #20]
 8006528:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	43db      	mvns	r3, r3
 8006530:	401a      	ands	r2, r3
 8006532:	697b      	ldr	r3, [r7, #20]
 8006534:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8006538:	683b      	ldr	r3, [r7, #0]
 800653a:	69db      	ldr	r3, [r3, #28]
 800653c:	2b00      	cmp	r3, #0
 800653e:	d123      	bne.n	8006588 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8006540:	697b      	ldr	r3, [r7, #20]
 8006542:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	43db      	mvns	r3, r3
 800654a:	401a      	ands	r2, r3
 800654c:	697b      	ldr	r3, [r7, #20]
 800654e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8006552:	683b      	ldr	r3, [r7, #0]
 8006554:	68db      	ldr	r3, [r3, #12]
 8006556:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8006558:	683b      	ldr	r3, [r7, #0]
 800655a:	685b      	ldr	r3, [r3, #4]
 800655c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800655e:	683a      	ldr	r2, [r7, #0]
 8006560:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8006562:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8006564:	697b      	ldr	r3, [r7, #20]
 8006566:	3248      	adds	r2, #72	; 0x48
 8006568:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800656c:	683b      	ldr	r3, [r7, #0]
 800656e:	689b      	ldr	r3, [r3, #8]
 8006570:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8006572:	683b      	ldr	r3, [r7, #0]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8006578:	683b      	ldr	r3, [r7, #0]
 800657a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800657c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800657e:	6979      	ldr	r1, [r7, #20]
 8006580:	3348      	adds	r3, #72	; 0x48
 8006582:	00db      	lsls	r3, r3, #3
 8006584:	440b      	add	r3, r1
 8006586:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8006588:	683b      	ldr	r3, [r7, #0]
 800658a:	69db      	ldr	r3, [r3, #28]
 800658c:	2b01      	cmp	r3, #1
 800658e:	d122      	bne.n	80065d6 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8006590:	697b      	ldr	r3, [r7, #20]
 8006592:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	431a      	orrs	r2, r3
 800659a:	697b      	ldr	r3, [r7, #20]
 800659c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80065a0:	683b      	ldr	r3, [r7, #0]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80065a6:	683b      	ldr	r3, [r7, #0]
 80065a8:	685b      	ldr	r3, [r3, #4]
 80065aa:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80065ac:	683a      	ldr	r2, [r7, #0]
 80065ae:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80065b0:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80065b2:	697b      	ldr	r3, [r7, #20]
 80065b4:	3248      	adds	r2, #72	; 0x48
 80065b6:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80065ba:	683b      	ldr	r3, [r7, #0]
 80065bc:	689b      	ldr	r3, [r3, #8]
 80065be:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80065c0:	683b      	ldr	r3, [r7, #0]
 80065c2:	68db      	ldr	r3, [r3, #12]
 80065c4:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80065c6:	683b      	ldr	r3, [r7, #0]
 80065c8:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80065ca:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80065cc:	6979      	ldr	r1, [r7, #20]
 80065ce:	3348      	adds	r3, #72	; 0x48
 80065d0:	00db      	lsls	r3, r3, #3
 80065d2:	440b      	add	r3, r1
 80065d4:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80065d6:	683b      	ldr	r3, [r7, #0]
 80065d8:	699b      	ldr	r3, [r3, #24]
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d109      	bne.n	80065f2 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80065de:	697b      	ldr	r3, [r7, #20]
 80065e0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	43db      	mvns	r3, r3
 80065e8:	401a      	ands	r2, r3
 80065ea:	697b      	ldr	r3, [r7, #20]
 80065ec:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80065f0:	e007      	b.n	8006602 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80065f2:	697b      	ldr	r3, [r7, #20]
 80065f4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	431a      	orrs	r2, r3
 80065fc:	697b      	ldr	r3, [r7, #20]
 80065fe:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8006602:	683b      	ldr	r3, [r7, #0]
 8006604:	691b      	ldr	r3, [r3, #16]
 8006606:	2b00      	cmp	r3, #0
 8006608:	d109      	bne.n	800661e <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800660a:	697b      	ldr	r3, [r7, #20]
 800660c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	43db      	mvns	r3, r3
 8006614:	401a      	ands	r2, r3
 8006616:	697b      	ldr	r3, [r7, #20]
 8006618:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800661c:	e007      	b.n	800662e <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800661e:	697b      	ldr	r3, [r7, #20]
 8006620:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	431a      	orrs	r2, r3
 8006628:	697b      	ldr	r3, [r7, #20]
 800662a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800662e:	683b      	ldr	r3, [r7, #0]
 8006630:	6a1b      	ldr	r3, [r3, #32]
 8006632:	2b01      	cmp	r3, #1
 8006634:	d107      	bne.n	8006646 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8006636:	697b      	ldr	r3, [r7, #20]
 8006638:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	431a      	orrs	r2, r3
 8006640:	697b      	ldr	r3, [r7, #20]
 8006642:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8006646:	697b      	ldr	r3, [r7, #20]
 8006648:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800664c:	f023 0201 	bic.w	r2, r3, #1
 8006650:	697b      	ldr	r3, [r7, #20]
 8006652:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8006656:	2300      	movs	r3, #0
 8006658:	e006      	b.n	8006668 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800665e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8006666:	2301      	movs	r3, #1
  }
}
 8006668:	4618      	mov	r0, r3
 800666a:	371c      	adds	r7, #28
 800666c:	46bd      	mov	sp, r7
 800666e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006672:	4770      	bx	lr
 8006674:	40006400 	.word	0x40006400

08006678 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8006678:	b580      	push	{r7, lr}
 800667a:	b084      	sub	sp, #16
 800667c:	af00      	add	r7, sp, #0
 800667e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006686:	b2db      	uxtb	r3, r3
 8006688:	2b01      	cmp	r3, #1
 800668a:	d12e      	bne.n	80066ea <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	2202      	movs	r2, #2
 8006690:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	681a      	ldr	r2, [r3, #0]
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	f022 0201 	bic.w	r2, r2, #1
 80066a2:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80066a4:	f7ff f9f0 	bl	8005a88 <HAL_GetTick>
 80066a8:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80066aa:	e012      	b.n	80066d2 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80066ac:	f7ff f9ec 	bl	8005a88 <HAL_GetTick>
 80066b0:	4602      	mov	r2, r0
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	1ad3      	subs	r3, r2, r3
 80066b6:	2b0a      	cmp	r3, #10
 80066b8:	d90b      	bls.n	80066d2 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066be:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	2205      	movs	r2, #5
 80066ca:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80066ce:	2301      	movs	r3, #1
 80066d0:	e012      	b.n	80066f8 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	685b      	ldr	r3, [r3, #4]
 80066d8:	f003 0301 	and.w	r3, r3, #1
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d1e5      	bne.n	80066ac <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	2200      	movs	r2, #0
 80066e4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80066e6:	2300      	movs	r3, #0
 80066e8:	e006      	b.n	80066f8 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066ee:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80066f6:	2301      	movs	r3, #1
  }
}
 80066f8:	4618      	mov	r0, r3
 80066fa:	3710      	adds	r7, #16
 80066fc:	46bd      	mov	sp, r7
 80066fe:	bd80      	pop	{r7, pc}

08006700 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8006700:	b480      	push	{r7}
 8006702:	b089      	sub	sp, #36	; 0x24
 8006704:	af00      	add	r7, sp, #0
 8006706:	60f8      	str	r0, [r7, #12]
 8006708:	60b9      	str	r1, [r7, #8]
 800670a:	607a      	str	r2, [r7, #4]
 800670c:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006714:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	689b      	ldr	r3, [r3, #8]
 800671c:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800671e:	7ffb      	ldrb	r3, [r7, #31]
 8006720:	2b01      	cmp	r3, #1
 8006722:	d003      	beq.n	800672c <HAL_CAN_AddTxMessage+0x2c>
 8006724:	7ffb      	ldrb	r3, [r7, #31]
 8006726:	2b02      	cmp	r3, #2
 8006728:	f040 80b8 	bne.w	800689c <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800672c:	69bb      	ldr	r3, [r7, #24]
 800672e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006732:	2b00      	cmp	r3, #0
 8006734:	d10a      	bne.n	800674c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8006736:	69bb      	ldr	r3, [r7, #24]
 8006738:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800673c:	2b00      	cmp	r3, #0
 800673e:	d105      	bne.n	800674c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8006740:	69bb      	ldr	r3, [r7, #24]
 8006742:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8006746:	2b00      	cmp	r3, #0
 8006748:	f000 80a0 	beq.w	800688c <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800674c:	69bb      	ldr	r3, [r7, #24]
 800674e:	0e1b      	lsrs	r3, r3, #24
 8006750:	f003 0303 	and.w	r3, r3, #3
 8006754:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8006756:	697b      	ldr	r3, [r7, #20]
 8006758:	2b02      	cmp	r3, #2
 800675a:	d907      	bls.n	800676c <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006760:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8006768:	2301      	movs	r3, #1
 800676a:	e09e      	b.n	80068aa <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800676c:	2201      	movs	r2, #1
 800676e:	697b      	ldr	r3, [r7, #20]
 8006770:	409a      	lsls	r2, r3
 8006772:	683b      	ldr	r3, [r7, #0]
 8006774:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8006776:	68bb      	ldr	r3, [r7, #8]
 8006778:	689b      	ldr	r3, [r3, #8]
 800677a:	2b00      	cmp	r3, #0
 800677c:	d10d      	bne.n	800679a <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800677e:	68bb      	ldr	r3, [r7, #8]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8006784:	68bb      	ldr	r3, [r7, #8]
 8006786:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8006788:	68f9      	ldr	r1, [r7, #12]
 800678a:	6809      	ldr	r1, [r1, #0]
 800678c:	431a      	orrs	r2, r3
 800678e:	697b      	ldr	r3, [r7, #20]
 8006790:	3318      	adds	r3, #24
 8006792:	011b      	lsls	r3, r3, #4
 8006794:	440b      	add	r3, r1
 8006796:	601a      	str	r2, [r3, #0]
 8006798:	e00f      	b.n	80067ba <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800679a:	68bb      	ldr	r3, [r7, #8]
 800679c:	685b      	ldr	r3, [r3, #4]
 800679e:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80067a0:	68bb      	ldr	r3, [r7, #8]
 80067a2:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80067a4:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80067a6:	68bb      	ldr	r3, [r7, #8]
 80067a8:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80067aa:	68f9      	ldr	r1, [r7, #12]
 80067ac:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80067ae:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80067b0:	697b      	ldr	r3, [r7, #20]
 80067b2:	3318      	adds	r3, #24
 80067b4:	011b      	lsls	r3, r3, #4
 80067b6:	440b      	add	r3, r1
 80067b8:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	6819      	ldr	r1, [r3, #0]
 80067be:	68bb      	ldr	r3, [r7, #8]
 80067c0:	691a      	ldr	r2, [r3, #16]
 80067c2:	697b      	ldr	r3, [r7, #20]
 80067c4:	3318      	adds	r3, #24
 80067c6:	011b      	lsls	r3, r3, #4
 80067c8:	440b      	add	r3, r1
 80067ca:	3304      	adds	r3, #4
 80067cc:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80067ce:	68bb      	ldr	r3, [r7, #8]
 80067d0:	7d1b      	ldrb	r3, [r3, #20]
 80067d2:	2b01      	cmp	r3, #1
 80067d4:	d111      	bne.n	80067fa <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	681a      	ldr	r2, [r3, #0]
 80067da:	697b      	ldr	r3, [r7, #20]
 80067dc:	3318      	adds	r3, #24
 80067de:	011b      	lsls	r3, r3, #4
 80067e0:	4413      	add	r3, r2
 80067e2:	3304      	adds	r3, #4
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	68fa      	ldr	r2, [r7, #12]
 80067e8:	6811      	ldr	r1, [r2, #0]
 80067ea:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80067ee:	697b      	ldr	r3, [r7, #20]
 80067f0:	3318      	adds	r3, #24
 80067f2:	011b      	lsls	r3, r3, #4
 80067f4:	440b      	add	r3, r1
 80067f6:	3304      	adds	r3, #4
 80067f8:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	3307      	adds	r3, #7
 80067fe:	781b      	ldrb	r3, [r3, #0]
 8006800:	061a      	lsls	r2, r3, #24
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	3306      	adds	r3, #6
 8006806:	781b      	ldrb	r3, [r3, #0]
 8006808:	041b      	lsls	r3, r3, #16
 800680a:	431a      	orrs	r2, r3
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	3305      	adds	r3, #5
 8006810:	781b      	ldrb	r3, [r3, #0]
 8006812:	021b      	lsls	r3, r3, #8
 8006814:	4313      	orrs	r3, r2
 8006816:	687a      	ldr	r2, [r7, #4]
 8006818:	3204      	adds	r2, #4
 800681a:	7812      	ldrb	r2, [r2, #0]
 800681c:	4610      	mov	r0, r2
 800681e:	68fa      	ldr	r2, [r7, #12]
 8006820:	6811      	ldr	r1, [r2, #0]
 8006822:	ea43 0200 	orr.w	r2, r3, r0
 8006826:	697b      	ldr	r3, [r7, #20]
 8006828:	011b      	lsls	r3, r3, #4
 800682a:	440b      	add	r3, r1
 800682c:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8006830:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	3303      	adds	r3, #3
 8006836:	781b      	ldrb	r3, [r3, #0]
 8006838:	061a      	lsls	r2, r3, #24
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	3302      	adds	r3, #2
 800683e:	781b      	ldrb	r3, [r3, #0]
 8006840:	041b      	lsls	r3, r3, #16
 8006842:	431a      	orrs	r2, r3
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	3301      	adds	r3, #1
 8006848:	781b      	ldrb	r3, [r3, #0]
 800684a:	021b      	lsls	r3, r3, #8
 800684c:	4313      	orrs	r3, r2
 800684e:	687a      	ldr	r2, [r7, #4]
 8006850:	7812      	ldrb	r2, [r2, #0]
 8006852:	4610      	mov	r0, r2
 8006854:	68fa      	ldr	r2, [r7, #12]
 8006856:	6811      	ldr	r1, [r2, #0]
 8006858:	ea43 0200 	orr.w	r2, r3, r0
 800685c:	697b      	ldr	r3, [r7, #20]
 800685e:	011b      	lsls	r3, r3, #4
 8006860:	440b      	add	r3, r1
 8006862:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8006866:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	681a      	ldr	r2, [r3, #0]
 800686c:	697b      	ldr	r3, [r7, #20]
 800686e:	3318      	adds	r3, #24
 8006870:	011b      	lsls	r3, r3, #4
 8006872:	4413      	add	r3, r2
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	68fa      	ldr	r2, [r7, #12]
 8006878:	6811      	ldr	r1, [r2, #0]
 800687a:	f043 0201 	orr.w	r2, r3, #1
 800687e:	697b      	ldr	r3, [r7, #20]
 8006880:	3318      	adds	r3, #24
 8006882:	011b      	lsls	r3, r3, #4
 8006884:	440b      	add	r3, r1
 8006886:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8006888:	2300      	movs	r3, #0
 800688a:	e00e      	b.n	80068aa <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006890:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8006898:	2301      	movs	r3, #1
 800689a:	e006      	b.n	80068aa <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068a0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80068a8:	2301      	movs	r3, #1
  }
}
 80068aa:	4618      	mov	r0, r3
 80068ac:	3724      	adds	r7, #36	; 0x24
 80068ae:	46bd      	mov	sp, r7
 80068b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b4:	4770      	bx	lr

080068b6 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80068b6:	b480      	push	{r7}
 80068b8:	b087      	sub	sp, #28
 80068ba:	af00      	add	r7, sp, #0
 80068bc:	60f8      	str	r0, [r7, #12]
 80068be:	60b9      	str	r1, [r7, #8]
 80068c0:	607a      	str	r2, [r7, #4]
 80068c2:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80068ca:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80068cc:	7dfb      	ldrb	r3, [r7, #23]
 80068ce:	2b01      	cmp	r3, #1
 80068d0:	d003      	beq.n	80068da <HAL_CAN_GetRxMessage+0x24>
 80068d2:	7dfb      	ldrb	r3, [r7, #23]
 80068d4:	2b02      	cmp	r3, #2
 80068d6:	f040 80f3 	bne.w	8006ac0 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80068da:	68bb      	ldr	r3, [r7, #8]
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d10e      	bne.n	80068fe <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	68db      	ldr	r3, [r3, #12]
 80068e6:	f003 0303 	and.w	r3, r3, #3
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d116      	bne.n	800691c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068f2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80068fa:	2301      	movs	r3, #1
 80068fc:	e0e7      	b.n	8006ace <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	691b      	ldr	r3, [r3, #16]
 8006904:	f003 0303 	and.w	r3, r3, #3
 8006908:	2b00      	cmp	r3, #0
 800690a:	d107      	bne.n	800691c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006910:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8006918:	2301      	movs	r3, #1
 800691a:	e0d8      	b.n	8006ace <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	681a      	ldr	r2, [r3, #0]
 8006920:	68bb      	ldr	r3, [r7, #8]
 8006922:	331b      	adds	r3, #27
 8006924:	011b      	lsls	r3, r3, #4
 8006926:	4413      	add	r3, r2
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	f003 0204 	and.w	r2, r3, #4
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	689b      	ldr	r3, [r3, #8]
 8006936:	2b00      	cmp	r3, #0
 8006938:	d10c      	bne.n	8006954 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	681a      	ldr	r2, [r3, #0]
 800693e:	68bb      	ldr	r3, [r7, #8]
 8006940:	331b      	adds	r3, #27
 8006942:	011b      	lsls	r3, r3, #4
 8006944:	4413      	add	r3, r2
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	0d5b      	lsrs	r3, r3, #21
 800694a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	601a      	str	r2, [r3, #0]
 8006952:	e00b      	b.n	800696c <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	681a      	ldr	r2, [r3, #0]
 8006958:	68bb      	ldr	r3, [r7, #8]
 800695a:	331b      	adds	r3, #27
 800695c:	011b      	lsls	r3, r3, #4
 800695e:	4413      	add	r3, r2
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	08db      	lsrs	r3, r3, #3
 8006964:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	681a      	ldr	r2, [r3, #0]
 8006970:	68bb      	ldr	r3, [r7, #8]
 8006972:	331b      	adds	r3, #27
 8006974:	011b      	lsls	r3, r3, #4
 8006976:	4413      	add	r3, r2
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	f003 0202 	and.w	r2, r3, #2
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	681a      	ldr	r2, [r3, #0]
 8006986:	68bb      	ldr	r3, [r7, #8]
 8006988:	331b      	adds	r3, #27
 800698a:	011b      	lsls	r3, r3, #4
 800698c:	4413      	add	r3, r2
 800698e:	3304      	adds	r3, #4
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	f003 020f 	and.w	r2, r3, #15
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	681a      	ldr	r2, [r3, #0]
 800699e:	68bb      	ldr	r3, [r7, #8]
 80069a0:	331b      	adds	r3, #27
 80069a2:	011b      	lsls	r3, r3, #4
 80069a4:	4413      	add	r3, r2
 80069a6:	3304      	adds	r3, #4
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	0a1b      	lsrs	r3, r3, #8
 80069ac:	b2da      	uxtb	r2, r3
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	681a      	ldr	r2, [r3, #0]
 80069b6:	68bb      	ldr	r3, [r7, #8]
 80069b8:	331b      	adds	r3, #27
 80069ba:	011b      	lsls	r3, r3, #4
 80069bc:	4413      	add	r3, r2
 80069be:	3304      	adds	r3, #4
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	0c1b      	lsrs	r3, r3, #16
 80069c4:	b29a      	uxth	r2, r3
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	681a      	ldr	r2, [r3, #0]
 80069ce:	68bb      	ldr	r3, [r7, #8]
 80069d0:	011b      	lsls	r3, r3, #4
 80069d2:	4413      	add	r3, r2
 80069d4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	b2da      	uxtb	r2, r3
 80069dc:	683b      	ldr	r3, [r7, #0]
 80069de:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	681a      	ldr	r2, [r3, #0]
 80069e4:	68bb      	ldr	r3, [r7, #8]
 80069e6:	011b      	lsls	r3, r3, #4
 80069e8:	4413      	add	r3, r2
 80069ea:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	0a1a      	lsrs	r2, r3, #8
 80069f2:	683b      	ldr	r3, [r7, #0]
 80069f4:	3301      	adds	r3, #1
 80069f6:	b2d2      	uxtb	r2, r2
 80069f8:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	681a      	ldr	r2, [r3, #0]
 80069fe:	68bb      	ldr	r3, [r7, #8]
 8006a00:	011b      	lsls	r3, r3, #4
 8006a02:	4413      	add	r3, r2
 8006a04:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	0c1a      	lsrs	r2, r3, #16
 8006a0c:	683b      	ldr	r3, [r7, #0]
 8006a0e:	3302      	adds	r3, #2
 8006a10:	b2d2      	uxtb	r2, r2
 8006a12:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	681a      	ldr	r2, [r3, #0]
 8006a18:	68bb      	ldr	r3, [r7, #8]
 8006a1a:	011b      	lsls	r3, r3, #4
 8006a1c:	4413      	add	r3, r2
 8006a1e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	0e1a      	lsrs	r2, r3, #24
 8006a26:	683b      	ldr	r3, [r7, #0]
 8006a28:	3303      	adds	r3, #3
 8006a2a:	b2d2      	uxtb	r2, r2
 8006a2c:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	681a      	ldr	r2, [r3, #0]
 8006a32:	68bb      	ldr	r3, [r7, #8]
 8006a34:	011b      	lsls	r3, r3, #4
 8006a36:	4413      	add	r3, r2
 8006a38:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8006a3c:	681a      	ldr	r2, [r3, #0]
 8006a3e:	683b      	ldr	r3, [r7, #0]
 8006a40:	3304      	adds	r3, #4
 8006a42:	b2d2      	uxtb	r2, r2
 8006a44:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	681a      	ldr	r2, [r3, #0]
 8006a4a:	68bb      	ldr	r3, [r7, #8]
 8006a4c:	011b      	lsls	r3, r3, #4
 8006a4e:	4413      	add	r3, r2
 8006a50:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	0a1a      	lsrs	r2, r3, #8
 8006a58:	683b      	ldr	r3, [r7, #0]
 8006a5a:	3305      	adds	r3, #5
 8006a5c:	b2d2      	uxtb	r2, r2
 8006a5e:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	681a      	ldr	r2, [r3, #0]
 8006a64:	68bb      	ldr	r3, [r7, #8]
 8006a66:	011b      	lsls	r3, r3, #4
 8006a68:	4413      	add	r3, r2
 8006a6a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	0c1a      	lsrs	r2, r3, #16
 8006a72:	683b      	ldr	r3, [r7, #0]
 8006a74:	3306      	adds	r3, #6
 8006a76:	b2d2      	uxtb	r2, r2
 8006a78:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	681a      	ldr	r2, [r3, #0]
 8006a7e:	68bb      	ldr	r3, [r7, #8]
 8006a80:	011b      	lsls	r3, r3, #4
 8006a82:	4413      	add	r3, r2
 8006a84:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	0e1a      	lsrs	r2, r3, #24
 8006a8c:	683b      	ldr	r3, [r7, #0]
 8006a8e:	3307      	adds	r3, #7
 8006a90:	b2d2      	uxtb	r2, r2
 8006a92:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8006a94:	68bb      	ldr	r3, [r7, #8]
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d108      	bne.n	8006aac <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	68da      	ldr	r2, [r3, #12]
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	f042 0220 	orr.w	r2, r2, #32
 8006aa8:	60da      	str	r2, [r3, #12]
 8006aaa:	e007      	b.n	8006abc <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	691a      	ldr	r2, [r3, #16]
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	f042 0220 	orr.w	r2, r2, #32
 8006aba:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8006abc:	2300      	movs	r3, #0
 8006abe:	e006      	b.n	8006ace <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ac4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8006acc:	2301      	movs	r3, #1
  }
}
 8006ace:	4618      	mov	r0, r3
 8006ad0:	371c      	adds	r7, #28
 8006ad2:	46bd      	mov	sp, r7
 8006ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad8:	4770      	bx	lr

08006ada <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8006ada:	b480      	push	{r7}
 8006adc:	b085      	sub	sp, #20
 8006ade:	af00      	add	r7, sp, #0
 8006ae0:	6078      	str	r0, [r7, #4]
 8006ae2:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006aea:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8006aec:	7bfb      	ldrb	r3, [r7, #15]
 8006aee:	2b01      	cmp	r3, #1
 8006af0:	d002      	beq.n	8006af8 <HAL_CAN_ActivateNotification+0x1e>
 8006af2:	7bfb      	ldrb	r3, [r7, #15]
 8006af4:	2b02      	cmp	r3, #2
 8006af6:	d109      	bne.n	8006b0c <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	6959      	ldr	r1, [r3, #20]
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	683a      	ldr	r2, [r7, #0]
 8006b04:	430a      	orrs	r2, r1
 8006b06:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8006b08:	2300      	movs	r3, #0
 8006b0a:	e006      	b.n	8006b1a <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b10:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8006b18:	2301      	movs	r3, #1
  }
}
 8006b1a:	4618      	mov	r0, r3
 8006b1c:	3714      	adds	r7, #20
 8006b1e:	46bd      	mov	sp, r7
 8006b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b24:	4770      	bx	lr

08006b26 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8006b26:	b580      	push	{r7, lr}
 8006b28:	b08a      	sub	sp, #40	; 0x28
 8006b2a:	af00      	add	r7, sp, #0
 8006b2c:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8006b2e:	2300      	movs	r3, #0
 8006b30:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	695b      	ldr	r3, [r3, #20]
 8006b38:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	685b      	ldr	r3, [r3, #4]
 8006b40:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	689b      	ldr	r3, [r3, #8]
 8006b48:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	68db      	ldr	r3, [r3, #12]
 8006b50:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	691b      	ldr	r3, [r3, #16]
 8006b58:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	699b      	ldr	r3, [r3, #24]
 8006b60:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8006b62:	6a3b      	ldr	r3, [r7, #32]
 8006b64:	f003 0301 	and.w	r3, r3, #1
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d07c      	beq.n	8006c66 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8006b6c:	69bb      	ldr	r3, [r7, #24]
 8006b6e:	f003 0301 	and.w	r3, r3, #1
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d023      	beq.n	8006bbe <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	2201      	movs	r2, #1
 8006b7c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8006b7e:	69bb      	ldr	r3, [r7, #24]
 8006b80:	f003 0302 	and.w	r3, r3, #2
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d003      	beq.n	8006b90 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8006b88:	6878      	ldr	r0, [r7, #4]
 8006b8a:	f000 f983 	bl	8006e94 <HAL_CAN_TxMailbox0CompleteCallback>
 8006b8e:	e016      	b.n	8006bbe <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8006b90:	69bb      	ldr	r3, [r7, #24]
 8006b92:	f003 0304 	and.w	r3, r3, #4
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d004      	beq.n	8006ba4 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8006b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b9c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006ba0:	627b      	str	r3, [r7, #36]	; 0x24
 8006ba2:	e00c      	b.n	8006bbe <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8006ba4:	69bb      	ldr	r3, [r7, #24]
 8006ba6:	f003 0308 	and.w	r3, r3, #8
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d004      	beq.n	8006bb8 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8006bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bb0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006bb4:	627b      	str	r3, [r7, #36]	; 0x24
 8006bb6:	e002      	b.n	8006bbe <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8006bb8:	6878      	ldr	r0, [r7, #4]
 8006bba:	f000 f989 	bl	8006ed0 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8006bbe:	69bb      	ldr	r3, [r7, #24]
 8006bc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d024      	beq.n	8006c12 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006bd0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8006bd2:	69bb      	ldr	r3, [r7, #24]
 8006bd4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d003      	beq.n	8006be4 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8006bdc:	6878      	ldr	r0, [r7, #4]
 8006bde:	f000 f963 	bl	8006ea8 <HAL_CAN_TxMailbox1CompleteCallback>
 8006be2:	e016      	b.n	8006c12 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8006be4:	69bb      	ldr	r3, [r7, #24]
 8006be6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d004      	beq.n	8006bf8 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8006bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bf0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006bf4:	627b      	str	r3, [r7, #36]	; 0x24
 8006bf6:	e00c      	b.n	8006c12 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8006bf8:	69bb      	ldr	r3, [r7, #24]
 8006bfa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d004      	beq.n	8006c0c <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8006c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006c08:	627b      	str	r3, [r7, #36]	; 0x24
 8006c0a:	e002      	b.n	8006c12 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8006c0c:	6878      	ldr	r0, [r7, #4]
 8006c0e:	f000 f969 	bl	8006ee4 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8006c12:	69bb      	ldr	r3, [r7, #24]
 8006c14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d024      	beq.n	8006c66 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8006c24:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8006c26:	69bb      	ldr	r3, [r7, #24]
 8006c28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d003      	beq.n	8006c38 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8006c30:	6878      	ldr	r0, [r7, #4]
 8006c32:	f000 f943 	bl	8006ebc <HAL_CAN_TxMailbox2CompleteCallback>
 8006c36:	e016      	b.n	8006c66 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8006c38:	69bb      	ldr	r3, [r7, #24]
 8006c3a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d004      	beq.n	8006c4c <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8006c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c44:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c48:	627b      	str	r3, [r7, #36]	; 0x24
 8006c4a:	e00c      	b.n	8006c66 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8006c4c:	69bb      	ldr	r3, [r7, #24]
 8006c4e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d004      	beq.n	8006c60 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8006c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006c5c:	627b      	str	r3, [r7, #36]	; 0x24
 8006c5e:	e002      	b.n	8006c66 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8006c60:	6878      	ldr	r0, [r7, #4]
 8006c62:	f000 f949 	bl	8006ef8 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8006c66:	6a3b      	ldr	r3, [r7, #32]
 8006c68:	f003 0308 	and.w	r3, r3, #8
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d00c      	beq.n	8006c8a <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8006c70:	697b      	ldr	r3, [r7, #20]
 8006c72:	f003 0310 	and.w	r3, r3, #16
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d007      	beq.n	8006c8a <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8006c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c7c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006c80:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	2210      	movs	r2, #16
 8006c88:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8006c8a:	6a3b      	ldr	r3, [r7, #32]
 8006c8c:	f003 0304 	and.w	r3, r3, #4
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d00b      	beq.n	8006cac <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8006c94:	697b      	ldr	r3, [r7, #20]
 8006c96:	f003 0308 	and.w	r3, r3, #8
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d006      	beq.n	8006cac <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	2208      	movs	r2, #8
 8006ca4:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8006ca6:	6878      	ldr	r0, [r7, #4]
 8006ca8:	f000 f930 	bl	8006f0c <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8006cac:	6a3b      	ldr	r3, [r7, #32]
 8006cae:	f003 0302 	and.w	r3, r3, #2
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d009      	beq.n	8006cca <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	68db      	ldr	r3, [r3, #12]
 8006cbc:	f003 0303 	and.w	r3, r3, #3
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d002      	beq.n	8006cca <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8006cc4:	6878      	ldr	r0, [r7, #4]
 8006cc6:	f7fc fceb 	bl	80036a0 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8006cca:	6a3b      	ldr	r3, [r7, #32]
 8006ccc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d00c      	beq.n	8006cee <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8006cd4:	693b      	ldr	r3, [r7, #16]
 8006cd6:	f003 0310 	and.w	r3, r3, #16
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d007      	beq.n	8006cee <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8006cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ce0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006ce4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	2210      	movs	r2, #16
 8006cec:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8006cee:	6a3b      	ldr	r3, [r7, #32]
 8006cf0:	f003 0320 	and.w	r3, r3, #32
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d00b      	beq.n	8006d10 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8006cf8:	693b      	ldr	r3, [r7, #16]
 8006cfa:	f003 0308 	and.w	r3, r3, #8
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d006      	beq.n	8006d10 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	2208      	movs	r2, #8
 8006d08:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8006d0a:	6878      	ldr	r0, [r7, #4]
 8006d0c:	f000 f912 	bl	8006f34 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8006d10:	6a3b      	ldr	r3, [r7, #32]
 8006d12:	f003 0310 	and.w	r3, r3, #16
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d009      	beq.n	8006d2e <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	691b      	ldr	r3, [r3, #16]
 8006d20:	f003 0303 	and.w	r3, r3, #3
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d002      	beq.n	8006d2e <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8006d28:	6878      	ldr	r0, [r7, #4]
 8006d2a:	f000 f8f9 	bl	8006f20 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8006d2e:	6a3b      	ldr	r3, [r7, #32]
 8006d30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d00b      	beq.n	8006d50 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8006d38:	69fb      	ldr	r3, [r7, #28]
 8006d3a:	f003 0310 	and.w	r3, r3, #16
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d006      	beq.n	8006d50 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	2210      	movs	r2, #16
 8006d48:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8006d4a:	6878      	ldr	r0, [r7, #4]
 8006d4c:	f000 f8fc 	bl	8006f48 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8006d50:	6a3b      	ldr	r3, [r7, #32]
 8006d52:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d00b      	beq.n	8006d72 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8006d5a:	69fb      	ldr	r3, [r7, #28]
 8006d5c:	f003 0308 	and.w	r3, r3, #8
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d006      	beq.n	8006d72 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	2208      	movs	r2, #8
 8006d6a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8006d6c:	6878      	ldr	r0, [r7, #4]
 8006d6e:	f000 f8f5 	bl	8006f5c <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8006d72:	6a3b      	ldr	r3, [r7, #32]
 8006d74:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d07b      	beq.n	8006e74 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8006d7c:	69fb      	ldr	r3, [r7, #28]
 8006d7e:	f003 0304 	and.w	r3, r3, #4
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d072      	beq.n	8006e6c <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8006d86:	6a3b      	ldr	r3, [r7, #32]
 8006d88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d008      	beq.n	8006da2 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d003      	beq.n	8006da2 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8006d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d9c:	f043 0301 	orr.w	r3, r3, #1
 8006da0:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8006da2:	6a3b      	ldr	r3, [r7, #32]
 8006da4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d008      	beq.n	8006dbe <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d003      	beq.n	8006dbe <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8006db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006db8:	f043 0302 	orr.w	r3, r3, #2
 8006dbc:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8006dbe:	6a3b      	ldr	r3, [r7, #32]
 8006dc0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d008      	beq.n	8006dda <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d003      	beq.n	8006dda <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8006dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dd4:	f043 0304 	orr.w	r3, r3, #4
 8006dd8:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8006dda:	6a3b      	ldr	r3, [r7, #32]
 8006ddc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d043      	beq.n	8006e6c <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d03e      	beq.n	8006e6c <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006df4:	2b60      	cmp	r3, #96	; 0x60
 8006df6:	d02b      	beq.n	8006e50 <HAL_CAN_IRQHandler+0x32a>
 8006df8:	2b60      	cmp	r3, #96	; 0x60
 8006dfa:	d82e      	bhi.n	8006e5a <HAL_CAN_IRQHandler+0x334>
 8006dfc:	2b50      	cmp	r3, #80	; 0x50
 8006dfe:	d022      	beq.n	8006e46 <HAL_CAN_IRQHandler+0x320>
 8006e00:	2b50      	cmp	r3, #80	; 0x50
 8006e02:	d82a      	bhi.n	8006e5a <HAL_CAN_IRQHandler+0x334>
 8006e04:	2b40      	cmp	r3, #64	; 0x40
 8006e06:	d019      	beq.n	8006e3c <HAL_CAN_IRQHandler+0x316>
 8006e08:	2b40      	cmp	r3, #64	; 0x40
 8006e0a:	d826      	bhi.n	8006e5a <HAL_CAN_IRQHandler+0x334>
 8006e0c:	2b30      	cmp	r3, #48	; 0x30
 8006e0e:	d010      	beq.n	8006e32 <HAL_CAN_IRQHandler+0x30c>
 8006e10:	2b30      	cmp	r3, #48	; 0x30
 8006e12:	d822      	bhi.n	8006e5a <HAL_CAN_IRQHandler+0x334>
 8006e14:	2b10      	cmp	r3, #16
 8006e16:	d002      	beq.n	8006e1e <HAL_CAN_IRQHandler+0x2f8>
 8006e18:	2b20      	cmp	r3, #32
 8006e1a:	d005      	beq.n	8006e28 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8006e1c:	e01d      	b.n	8006e5a <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8006e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e20:	f043 0308 	orr.w	r3, r3, #8
 8006e24:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8006e26:	e019      	b.n	8006e5c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8006e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e2a:	f043 0310 	orr.w	r3, r3, #16
 8006e2e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8006e30:	e014      	b.n	8006e5c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8006e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e34:	f043 0320 	orr.w	r3, r3, #32
 8006e38:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8006e3a:	e00f      	b.n	8006e5c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8006e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e3e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006e42:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8006e44:	e00a      	b.n	8006e5c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8006e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e4c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8006e4e:	e005      	b.n	8006e5c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8006e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006e56:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8006e58:	e000      	b.n	8006e5c <HAL_CAN_IRQHandler+0x336>
            break;
 8006e5a:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	699a      	ldr	r2, [r3, #24]
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8006e6a:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	2204      	movs	r2, #4
 8006e72:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8006e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d008      	beq.n	8006e8c <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e80:	431a      	orrs	r2, r3
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8006e86:	6878      	ldr	r0, [r7, #4]
 8006e88:	f000 f872 	bl	8006f70 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8006e8c:	bf00      	nop
 8006e8e:	3728      	adds	r7, #40	; 0x28
 8006e90:	46bd      	mov	sp, r7
 8006e92:	bd80      	pop	{r7, pc}

08006e94 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8006e94:	b480      	push	{r7}
 8006e96:	b083      	sub	sp, #12
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8006e9c:	bf00      	nop
 8006e9e:	370c      	adds	r7, #12
 8006ea0:	46bd      	mov	sp, r7
 8006ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea6:	4770      	bx	lr

08006ea8 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8006ea8:	b480      	push	{r7}
 8006eaa:	b083      	sub	sp, #12
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8006eb0:	bf00      	nop
 8006eb2:	370c      	adds	r7, #12
 8006eb4:	46bd      	mov	sp, r7
 8006eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eba:	4770      	bx	lr

08006ebc <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8006ebc:	b480      	push	{r7}
 8006ebe:	b083      	sub	sp, #12
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8006ec4:	bf00      	nop
 8006ec6:	370c      	adds	r7, #12
 8006ec8:	46bd      	mov	sp, r7
 8006eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ece:	4770      	bx	lr

08006ed0 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8006ed0:	b480      	push	{r7}
 8006ed2:	b083      	sub	sp, #12
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8006ed8:	bf00      	nop
 8006eda:	370c      	adds	r7, #12
 8006edc:	46bd      	mov	sp, r7
 8006ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee2:	4770      	bx	lr

08006ee4 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8006ee4:	b480      	push	{r7}
 8006ee6:	b083      	sub	sp, #12
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8006eec:	bf00      	nop
 8006eee:	370c      	adds	r7, #12
 8006ef0:	46bd      	mov	sp, r7
 8006ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef6:	4770      	bx	lr

08006ef8 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8006ef8:	b480      	push	{r7}
 8006efa:	b083      	sub	sp, #12
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8006f00:	bf00      	nop
 8006f02:	370c      	adds	r7, #12
 8006f04:	46bd      	mov	sp, r7
 8006f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0a:	4770      	bx	lr

08006f0c <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8006f0c:	b480      	push	{r7}
 8006f0e:	b083      	sub	sp, #12
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8006f14:	bf00      	nop
 8006f16:	370c      	adds	r7, #12
 8006f18:	46bd      	mov	sp, r7
 8006f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f1e:	4770      	bx	lr

08006f20 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8006f20:	b480      	push	{r7}
 8006f22:	b083      	sub	sp, #12
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8006f28:	bf00      	nop
 8006f2a:	370c      	adds	r7, #12
 8006f2c:	46bd      	mov	sp, r7
 8006f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f32:	4770      	bx	lr

08006f34 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8006f34:	b480      	push	{r7}
 8006f36:	b083      	sub	sp, #12
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8006f3c:	bf00      	nop
 8006f3e:	370c      	adds	r7, #12
 8006f40:	46bd      	mov	sp, r7
 8006f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f46:	4770      	bx	lr

08006f48 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8006f48:	b480      	push	{r7}
 8006f4a:	b083      	sub	sp, #12
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8006f50:	bf00      	nop
 8006f52:	370c      	adds	r7, #12
 8006f54:	46bd      	mov	sp, r7
 8006f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f5a:	4770      	bx	lr

08006f5c <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8006f5c:	b480      	push	{r7}
 8006f5e:	b083      	sub	sp, #12
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8006f64:	bf00      	nop
 8006f66:	370c      	adds	r7, #12
 8006f68:	46bd      	mov	sp, r7
 8006f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6e:	4770      	bx	lr

08006f70 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8006f70:	b480      	push	{r7}
 8006f72:	b083      	sub	sp, #12
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8006f78:	bf00      	nop
 8006f7a:	370c      	adds	r7, #12
 8006f7c:	46bd      	mov	sp, r7
 8006f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f82:	4770      	bx	lr

08006f84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006f84:	b480      	push	{r7}
 8006f86:	b085      	sub	sp, #20
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	f003 0307 	and.w	r3, r3, #7
 8006f92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006f94:	4b0c      	ldr	r3, [pc, #48]	; (8006fc8 <__NVIC_SetPriorityGrouping+0x44>)
 8006f96:	68db      	ldr	r3, [r3, #12]
 8006f98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006f9a:	68ba      	ldr	r2, [r7, #8]
 8006f9c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006fa0:	4013      	ands	r3, r2
 8006fa2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006fa8:	68bb      	ldr	r3, [r7, #8]
 8006faa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006fac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006fb0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006fb4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006fb6:	4a04      	ldr	r2, [pc, #16]	; (8006fc8 <__NVIC_SetPriorityGrouping+0x44>)
 8006fb8:	68bb      	ldr	r3, [r7, #8]
 8006fba:	60d3      	str	r3, [r2, #12]
}
 8006fbc:	bf00      	nop
 8006fbe:	3714      	adds	r7, #20
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc6:	4770      	bx	lr
 8006fc8:	e000ed00 	.word	0xe000ed00

08006fcc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006fcc:	b480      	push	{r7}
 8006fce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006fd0:	4b04      	ldr	r3, [pc, #16]	; (8006fe4 <__NVIC_GetPriorityGrouping+0x18>)
 8006fd2:	68db      	ldr	r3, [r3, #12]
 8006fd4:	0a1b      	lsrs	r3, r3, #8
 8006fd6:	f003 0307 	and.w	r3, r3, #7
}
 8006fda:	4618      	mov	r0, r3
 8006fdc:	46bd      	mov	sp, r7
 8006fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe2:	4770      	bx	lr
 8006fe4:	e000ed00 	.word	0xe000ed00

08006fe8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006fe8:	b480      	push	{r7}
 8006fea:	b083      	sub	sp, #12
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	4603      	mov	r3, r0
 8006ff0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006ff2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	db0b      	blt.n	8007012 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006ffa:	79fb      	ldrb	r3, [r7, #7]
 8006ffc:	f003 021f 	and.w	r2, r3, #31
 8007000:	4907      	ldr	r1, [pc, #28]	; (8007020 <__NVIC_EnableIRQ+0x38>)
 8007002:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007006:	095b      	lsrs	r3, r3, #5
 8007008:	2001      	movs	r0, #1
 800700a:	fa00 f202 	lsl.w	r2, r0, r2
 800700e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8007012:	bf00      	nop
 8007014:	370c      	adds	r7, #12
 8007016:	46bd      	mov	sp, r7
 8007018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800701c:	4770      	bx	lr
 800701e:	bf00      	nop
 8007020:	e000e100 	.word	0xe000e100

08007024 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007024:	b480      	push	{r7}
 8007026:	b083      	sub	sp, #12
 8007028:	af00      	add	r7, sp, #0
 800702a:	4603      	mov	r3, r0
 800702c:	6039      	str	r1, [r7, #0]
 800702e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007030:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007034:	2b00      	cmp	r3, #0
 8007036:	db0a      	blt.n	800704e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007038:	683b      	ldr	r3, [r7, #0]
 800703a:	b2da      	uxtb	r2, r3
 800703c:	490c      	ldr	r1, [pc, #48]	; (8007070 <__NVIC_SetPriority+0x4c>)
 800703e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007042:	0112      	lsls	r2, r2, #4
 8007044:	b2d2      	uxtb	r2, r2
 8007046:	440b      	add	r3, r1
 8007048:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800704c:	e00a      	b.n	8007064 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800704e:	683b      	ldr	r3, [r7, #0]
 8007050:	b2da      	uxtb	r2, r3
 8007052:	4908      	ldr	r1, [pc, #32]	; (8007074 <__NVIC_SetPriority+0x50>)
 8007054:	79fb      	ldrb	r3, [r7, #7]
 8007056:	f003 030f 	and.w	r3, r3, #15
 800705a:	3b04      	subs	r3, #4
 800705c:	0112      	lsls	r2, r2, #4
 800705e:	b2d2      	uxtb	r2, r2
 8007060:	440b      	add	r3, r1
 8007062:	761a      	strb	r2, [r3, #24]
}
 8007064:	bf00      	nop
 8007066:	370c      	adds	r7, #12
 8007068:	46bd      	mov	sp, r7
 800706a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800706e:	4770      	bx	lr
 8007070:	e000e100 	.word	0xe000e100
 8007074:	e000ed00 	.word	0xe000ed00

08007078 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007078:	b480      	push	{r7}
 800707a:	b089      	sub	sp, #36	; 0x24
 800707c:	af00      	add	r7, sp, #0
 800707e:	60f8      	str	r0, [r7, #12]
 8007080:	60b9      	str	r1, [r7, #8]
 8007082:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	f003 0307 	and.w	r3, r3, #7
 800708a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800708c:	69fb      	ldr	r3, [r7, #28]
 800708e:	f1c3 0307 	rsb	r3, r3, #7
 8007092:	2b04      	cmp	r3, #4
 8007094:	bf28      	it	cs
 8007096:	2304      	movcs	r3, #4
 8007098:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800709a:	69fb      	ldr	r3, [r7, #28]
 800709c:	3304      	adds	r3, #4
 800709e:	2b06      	cmp	r3, #6
 80070a0:	d902      	bls.n	80070a8 <NVIC_EncodePriority+0x30>
 80070a2:	69fb      	ldr	r3, [r7, #28]
 80070a4:	3b03      	subs	r3, #3
 80070a6:	e000      	b.n	80070aa <NVIC_EncodePriority+0x32>
 80070a8:	2300      	movs	r3, #0
 80070aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80070ac:	f04f 32ff 	mov.w	r2, #4294967295
 80070b0:	69bb      	ldr	r3, [r7, #24]
 80070b2:	fa02 f303 	lsl.w	r3, r2, r3
 80070b6:	43da      	mvns	r2, r3
 80070b8:	68bb      	ldr	r3, [r7, #8]
 80070ba:	401a      	ands	r2, r3
 80070bc:	697b      	ldr	r3, [r7, #20]
 80070be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80070c0:	f04f 31ff 	mov.w	r1, #4294967295
 80070c4:	697b      	ldr	r3, [r7, #20]
 80070c6:	fa01 f303 	lsl.w	r3, r1, r3
 80070ca:	43d9      	mvns	r1, r3
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80070d0:	4313      	orrs	r3, r2
         );
}
 80070d2:	4618      	mov	r0, r3
 80070d4:	3724      	adds	r7, #36	; 0x24
 80070d6:	46bd      	mov	sp, r7
 80070d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070dc:	4770      	bx	lr

080070de <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80070de:	b580      	push	{r7, lr}
 80070e0:	b082      	sub	sp, #8
 80070e2:	af00      	add	r7, sp, #0
 80070e4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80070e6:	6878      	ldr	r0, [r7, #4]
 80070e8:	f7ff ff4c 	bl	8006f84 <__NVIC_SetPriorityGrouping>
}
 80070ec:	bf00      	nop
 80070ee:	3708      	adds	r7, #8
 80070f0:	46bd      	mov	sp, r7
 80070f2:	bd80      	pop	{r7, pc}

080070f4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80070f4:	b580      	push	{r7, lr}
 80070f6:	b086      	sub	sp, #24
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	4603      	mov	r3, r0
 80070fc:	60b9      	str	r1, [r7, #8]
 80070fe:	607a      	str	r2, [r7, #4]
 8007100:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8007102:	2300      	movs	r3, #0
 8007104:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8007106:	f7ff ff61 	bl	8006fcc <__NVIC_GetPriorityGrouping>
 800710a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800710c:	687a      	ldr	r2, [r7, #4]
 800710e:	68b9      	ldr	r1, [r7, #8]
 8007110:	6978      	ldr	r0, [r7, #20]
 8007112:	f7ff ffb1 	bl	8007078 <NVIC_EncodePriority>
 8007116:	4602      	mov	r2, r0
 8007118:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800711c:	4611      	mov	r1, r2
 800711e:	4618      	mov	r0, r3
 8007120:	f7ff ff80 	bl	8007024 <__NVIC_SetPriority>
}
 8007124:	bf00      	nop
 8007126:	3718      	adds	r7, #24
 8007128:	46bd      	mov	sp, r7
 800712a:	bd80      	pop	{r7, pc}

0800712c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800712c:	b580      	push	{r7, lr}
 800712e:	b082      	sub	sp, #8
 8007130:	af00      	add	r7, sp, #0
 8007132:	4603      	mov	r3, r0
 8007134:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007136:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800713a:	4618      	mov	r0, r3
 800713c:	f7ff ff54 	bl	8006fe8 <__NVIC_EnableIRQ>
}
 8007140:	bf00      	nop
 8007142:	3708      	adds	r7, #8
 8007144:	46bd      	mov	sp, r7
 8007146:	bd80      	pop	{r7, pc}

08007148 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007148:	b480      	push	{r7}
 800714a:	b089      	sub	sp, #36	; 0x24
 800714c:	af00      	add	r7, sp, #0
 800714e:	6078      	str	r0, [r7, #4]
 8007150:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8007152:	2300      	movs	r3, #0
 8007154:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8007156:	2300      	movs	r3, #0
 8007158:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800715a:	2300      	movs	r3, #0
 800715c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800715e:	2300      	movs	r3, #0
 8007160:	61fb      	str	r3, [r7, #28]
 8007162:	e165      	b.n	8007430 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8007164:	2201      	movs	r2, #1
 8007166:	69fb      	ldr	r3, [r7, #28]
 8007168:	fa02 f303 	lsl.w	r3, r2, r3
 800716c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800716e:	683b      	ldr	r3, [r7, #0]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	697a      	ldr	r2, [r7, #20]
 8007174:	4013      	ands	r3, r2
 8007176:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8007178:	693a      	ldr	r2, [r7, #16]
 800717a:	697b      	ldr	r3, [r7, #20]
 800717c:	429a      	cmp	r2, r3
 800717e:	f040 8154 	bne.w	800742a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8007182:	683b      	ldr	r3, [r7, #0]
 8007184:	685b      	ldr	r3, [r3, #4]
 8007186:	f003 0303 	and.w	r3, r3, #3
 800718a:	2b01      	cmp	r3, #1
 800718c:	d005      	beq.n	800719a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800718e:	683b      	ldr	r3, [r7, #0]
 8007190:	685b      	ldr	r3, [r3, #4]
 8007192:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8007196:	2b02      	cmp	r3, #2
 8007198:	d130      	bne.n	80071fc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	689b      	ldr	r3, [r3, #8]
 800719e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80071a0:	69fb      	ldr	r3, [r7, #28]
 80071a2:	005b      	lsls	r3, r3, #1
 80071a4:	2203      	movs	r2, #3
 80071a6:	fa02 f303 	lsl.w	r3, r2, r3
 80071aa:	43db      	mvns	r3, r3
 80071ac:	69ba      	ldr	r2, [r7, #24]
 80071ae:	4013      	ands	r3, r2
 80071b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80071b2:	683b      	ldr	r3, [r7, #0]
 80071b4:	68da      	ldr	r2, [r3, #12]
 80071b6:	69fb      	ldr	r3, [r7, #28]
 80071b8:	005b      	lsls	r3, r3, #1
 80071ba:	fa02 f303 	lsl.w	r3, r2, r3
 80071be:	69ba      	ldr	r2, [r7, #24]
 80071c0:	4313      	orrs	r3, r2
 80071c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	69ba      	ldr	r2, [r7, #24]
 80071c8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	685b      	ldr	r3, [r3, #4]
 80071ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80071d0:	2201      	movs	r2, #1
 80071d2:	69fb      	ldr	r3, [r7, #28]
 80071d4:	fa02 f303 	lsl.w	r3, r2, r3
 80071d8:	43db      	mvns	r3, r3
 80071da:	69ba      	ldr	r2, [r7, #24]
 80071dc:	4013      	ands	r3, r2
 80071de:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80071e0:	683b      	ldr	r3, [r7, #0]
 80071e2:	685b      	ldr	r3, [r3, #4]
 80071e4:	091b      	lsrs	r3, r3, #4
 80071e6:	f003 0201 	and.w	r2, r3, #1
 80071ea:	69fb      	ldr	r3, [r7, #28]
 80071ec:	fa02 f303 	lsl.w	r3, r2, r3
 80071f0:	69ba      	ldr	r2, [r7, #24]
 80071f2:	4313      	orrs	r3, r2
 80071f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	69ba      	ldr	r2, [r7, #24]
 80071fa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80071fc:	683b      	ldr	r3, [r7, #0]
 80071fe:	685b      	ldr	r3, [r3, #4]
 8007200:	f003 0303 	and.w	r3, r3, #3
 8007204:	2b03      	cmp	r3, #3
 8007206:	d017      	beq.n	8007238 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	68db      	ldr	r3, [r3, #12]
 800720c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800720e:	69fb      	ldr	r3, [r7, #28]
 8007210:	005b      	lsls	r3, r3, #1
 8007212:	2203      	movs	r2, #3
 8007214:	fa02 f303 	lsl.w	r3, r2, r3
 8007218:	43db      	mvns	r3, r3
 800721a:	69ba      	ldr	r2, [r7, #24]
 800721c:	4013      	ands	r3, r2
 800721e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007220:	683b      	ldr	r3, [r7, #0]
 8007222:	689a      	ldr	r2, [r3, #8]
 8007224:	69fb      	ldr	r3, [r7, #28]
 8007226:	005b      	lsls	r3, r3, #1
 8007228:	fa02 f303 	lsl.w	r3, r2, r3
 800722c:	69ba      	ldr	r2, [r7, #24]
 800722e:	4313      	orrs	r3, r2
 8007230:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	69ba      	ldr	r2, [r7, #24]
 8007236:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007238:	683b      	ldr	r3, [r7, #0]
 800723a:	685b      	ldr	r3, [r3, #4]
 800723c:	f003 0303 	and.w	r3, r3, #3
 8007240:	2b02      	cmp	r3, #2
 8007242:	d123      	bne.n	800728c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007244:	69fb      	ldr	r3, [r7, #28]
 8007246:	08da      	lsrs	r2, r3, #3
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	3208      	adds	r2, #8
 800724c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007250:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8007252:	69fb      	ldr	r3, [r7, #28]
 8007254:	f003 0307 	and.w	r3, r3, #7
 8007258:	009b      	lsls	r3, r3, #2
 800725a:	220f      	movs	r2, #15
 800725c:	fa02 f303 	lsl.w	r3, r2, r3
 8007260:	43db      	mvns	r3, r3
 8007262:	69ba      	ldr	r2, [r7, #24]
 8007264:	4013      	ands	r3, r2
 8007266:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8007268:	683b      	ldr	r3, [r7, #0]
 800726a:	691a      	ldr	r2, [r3, #16]
 800726c:	69fb      	ldr	r3, [r7, #28]
 800726e:	f003 0307 	and.w	r3, r3, #7
 8007272:	009b      	lsls	r3, r3, #2
 8007274:	fa02 f303 	lsl.w	r3, r2, r3
 8007278:	69ba      	ldr	r2, [r7, #24]
 800727a:	4313      	orrs	r3, r2
 800727c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800727e:	69fb      	ldr	r3, [r7, #28]
 8007280:	08da      	lsrs	r2, r3, #3
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	3208      	adds	r2, #8
 8007286:	69b9      	ldr	r1, [r7, #24]
 8007288:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8007292:	69fb      	ldr	r3, [r7, #28]
 8007294:	005b      	lsls	r3, r3, #1
 8007296:	2203      	movs	r2, #3
 8007298:	fa02 f303 	lsl.w	r3, r2, r3
 800729c:	43db      	mvns	r3, r3
 800729e:	69ba      	ldr	r2, [r7, #24]
 80072a0:	4013      	ands	r3, r2
 80072a2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80072a4:	683b      	ldr	r3, [r7, #0]
 80072a6:	685b      	ldr	r3, [r3, #4]
 80072a8:	f003 0203 	and.w	r2, r3, #3
 80072ac:	69fb      	ldr	r3, [r7, #28]
 80072ae:	005b      	lsls	r3, r3, #1
 80072b0:	fa02 f303 	lsl.w	r3, r2, r3
 80072b4:	69ba      	ldr	r2, [r7, #24]
 80072b6:	4313      	orrs	r3, r2
 80072b8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	69ba      	ldr	r2, [r7, #24]
 80072be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80072c0:	683b      	ldr	r3, [r7, #0]
 80072c2:	685b      	ldr	r3, [r3, #4]
 80072c4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	f000 80ae 	beq.w	800742a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80072ce:	2300      	movs	r3, #0
 80072d0:	60fb      	str	r3, [r7, #12]
 80072d2:	4b5d      	ldr	r3, [pc, #372]	; (8007448 <HAL_GPIO_Init+0x300>)
 80072d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072d6:	4a5c      	ldr	r2, [pc, #368]	; (8007448 <HAL_GPIO_Init+0x300>)
 80072d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80072dc:	6453      	str	r3, [r2, #68]	; 0x44
 80072de:	4b5a      	ldr	r3, [pc, #360]	; (8007448 <HAL_GPIO_Init+0x300>)
 80072e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80072e6:	60fb      	str	r3, [r7, #12]
 80072e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80072ea:	4a58      	ldr	r2, [pc, #352]	; (800744c <HAL_GPIO_Init+0x304>)
 80072ec:	69fb      	ldr	r3, [r7, #28]
 80072ee:	089b      	lsrs	r3, r3, #2
 80072f0:	3302      	adds	r3, #2
 80072f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80072f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80072f8:	69fb      	ldr	r3, [r7, #28]
 80072fa:	f003 0303 	and.w	r3, r3, #3
 80072fe:	009b      	lsls	r3, r3, #2
 8007300:	220f      	movs	r2, #15
 8007302:	fa02 f303 	lsl.w	r3, r2, r3
 8007306:	43db      	mvns	r3, r3
 8007308:	69ba      	ldr	r2, [r7, #24]
 800730a:	4013      	ands	r3, r2
 800730c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	4a4f      	ldr	r2, [pc, #316]	; (8007450 <HAL_GPIO_Init+0x308>)
 8007312:	4293      	cmp	r3, r2
 8007314:	d025      	beq.n	8007362 <HAL_GPIO_Init+0x21a>
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	4a4e      	ldr	r2, [pc, #312]	; (8007454 <HAL_GPIO_Init+0x30c>)
 800731a:	4293      	cmp	r3, r2
 800731c:	d01f      	beq.n	800735e <HAL_GPIO_Init+0x216>
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	4a4d      	ldr	r2, [pc, #308]	; (8007458 <HAL_GPIO_Init+0x310>)
 8007322:	4293      	cmp	r3, r2
 8007324:	d019      	beq.n	800735a <HAL_GPIO_Init+0x212>
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	4a4c      	ldr	r2, [pc, #304]	; (800745c <HAL_GPIO_Init+0x314>)
 800732a:	4293      	cmp	r3, r2
 800732c:	d013      	beq.n	8007356 <HAL_GPIO_Init+0x20e>
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	4a4b      	ldr	r2, [pc, #300]	; (8007460 <HAL_GPIO_Init+0x318>)
 8007332:	4293      	cmp	r3, r2
 8007334:	d00d      	beq.n	8007352 <HAL_GPIO_Init+0x20a>
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	4a4a      	ldr	r2, [pc, #296]	; (8007464 <HAL_GPIO_Init+0x31c>)
 800733a:	4293      	cmp	r3, r2
 800733c:	d007      	beq.n	800734e <HAL_GPIO_Init+0x206>
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	4a49      	ldr	r2, [pc, #292]	; (8007468 <HAL_GPIO_Init+0x320>)
 8007342:	4293      	cmp	r3, r2
 8007344:	d101      	bne.n	800734a <HAL_GPIO_Init+0x202>
 8007346:	2306      	movs	r3, #6
 8007348:	e00c      	b.n	8007364 <HAL_GPIO_Init+0x21c>
 800734a:	2307      	movs	r3, #7
 800734c:	e00a      	b.n	8007364 <HAL_GPIO_Init+0x21c>
 800734e:	2305      	movs	r3, #5
 8007350:	e008      	b.n	8007364 <HAL_GPIO_Init+0x21c>
 8007352:	2304      	movs	r3, #4
 8007354:	e006      	b.n	8007364 <HAL_GPIO_Init+0x21c>
 8007356:	2303      	movs	r3, #3
 8007358:	e004      	b.n	8007364 <HAL_GPIO_Init+0x21c>
 800735a:	2302      	movs	r3, #2
 800735c:	e002      	b.n	8007364 <HAL_GPIO_Init+0x21c>
 800735e:	2301      	movs	r3, #1
 8007360:	e000      	b.n	8007364 <HAL_GPIO_Init+0x21c>
 8007362:	2300      	movs	r3, #0
 8007364:	69fa      	ldr	r2, [r7, #28]
 8007366:	f002 0203 	and.w	r2, r2, #3
 800736a:	0092      	lsls	r2, r2, #2
 800736c:	4093      	lsls	r3, r2
 800736e:	69ba      	ldr	r2, [r7, #24]
 8007370:	4313      	orrs	r3, r2
 8007372:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007374:	4935      	ldr	r1, [pc, #212]	; (800744c <HAL_GPIO_Init+0x304>)
 8007376:	69fb      	ldr	r3, [r7, #28]
 8007378:	089b      	lsrs	r3, r3, #2
 800737a:	3302      	adds	r3, #2
 800737c:	69ba      	ldr	r2, [r7, #24]
 800737e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8007382:	4b3a      	ldr	r3, [pc, #232]	; (800746c <HAL_GPIO_Init+0x324>)
 8007384:	689b      	ldr	r3, [r3, #8]
 8007386:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007388:	693b      	ldr	r3, [r7, #16]
 800738a:	43db      	mvns	r3, r3
 800738c:	69ba      	ldr	r2, [r7, #24]
 800738e:	4013      	ands	r3, r2
 8007390:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007392:	683b      	ldr	r3, [r7, #0]
 8007394:	685b      	ldr	r3, [r3, #4]
 8007396:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800739a:	2b00      	cmp	r3, #0
 800739c:	d003      	beq.n	80073a6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800739e:	69ba      	ldr	r2, [r7, #24]
 80073a0:	693b      	ldr	r3, [r7, #16]
 80073a2:	4313      	orrs	r3, r2
 80073a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80073a6:	4a31      	ldr	r2, [pc, #196]	; (800746c <HAL_GPIO_Init+0x324>)
 80073a8:	69bb      	ldr	r3, [r7, #24]
 80073aa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80073ac:	4b2f      	ldr	r3, [pc, #188]	; (800746c <HAL_GPIO_Init+0x324>)
 80073ae:	68db      	ldr	r3, [r3, #12]
 80073b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80073b2:	693b      	ldr	r3, [r7, #16]
 80073b4:	43db      	mvns	r3, r3
 80073b6:	69ba      	ldr	r2, [r7, #24]
 80073b8:	4013      	ands	r3, r2
 80073ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80073bc:	683b      	ldr	r3, [r7, #0]
 80073be:	685b      	ldr	r3, [r3, #4]
 80073c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d003      	beq.n	80073d0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80073c8:	69ba      	ldr	r2, [r7, #24]
 80073ca:	693b      	ldr	r3, [r7, #16]
 80073cc:	4313      	orrs	r3, r2
 80073ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80073d0:	4a26      	ldr	r2, [pc, #152]	; (800746c <HAL_GPIO_Init+0x324>)
 80073d2:	69bb      	ldr	r3, [r7, #24]
 80073d4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80073d6:	4b25      	ldr	r3, [pc, #148]	; (800746c <HAL_GPIO_Init+0x324>)
 80073d8:	685b      	ldr	r3, [r3, #4]
 80073da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80073dc:	693b      	ldr	r3, [r7, #16]
 80073de:	43db      	mvns	r3, r3
 80073e0:	69ba      	ldr	r2, [r7, #24]
 80073e2:	4013      	ands	r3, r2
 80073e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80073e6:	683b      	ldr	r3, [r7, #0]
 80073e8:	685b      	ldr	r3, [r3, #4]
 80073ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d003      	beq.n	80073fa <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80073f2:	69ba      	ldr	r2, [r7, #24]
 80073f4:	693b      	ldr	r3, [r7, #16]
 80073f6:	4313      	orrs	r3, r2
 80073f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80073fa:	4a1c      	ldr	r2, [pc, #112]	; (800746c <HAL_GPIO_Init+0x324>)
 80073fc:	69bb      	ldr	r3, [r7, #24]
 80073fe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007400:	4b1a      	ldr	r3, [pc, #104]	; (800746c <HAL_GPIO_Init+0x324>)
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007406:	693b      	ldr	r3, [r7, #16]
 8007408:	43db      	mvns	r3, r3
 800740a:	69ba      	ldr	r2, [r7, #24]
 800740c:	4013      	ands	r3, r2
 800740e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007410:	683b      	ldr	r3, [r7, #0]
 8007412:	685b      	ldr	r3, [r3, #4]
 8007414:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007418:	2b00      	cmp	r3, #0
 800741a:	d003      	beq.n	8007424 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800741c:	69ba      	ldr	r2, [r7, #24]
 800741e:	693b      	ldr	r3, [r7, #16]
 8007420:	4313      	orrs	r3, r2
 8007422:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8007424:	4a11      	ldr	r2, [pc, #68]	; (800746c <HAL_GPIO_Init+0x324>)
 8007426:	69bb      	ldr	r3, [r7, #24]
 8007428:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800742a:	69fb      	ldr	r3, [r7, #28]
 800742c:	3301      	adds	r3, #1
 800742e:	61fb      	str	r3, [r7, #28]
 8007430:	69fb      	ldr	r3, [r7, #28]
 8007432:	2b0f      	cmp	r3, #15
 8007434:	f67f ae96 	bls.w	8007164 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8007438:	bf00      	nop
 800743a:	bf00      	nop
 800743c:	3724      	adds	r7, #36	; 0x24
 800743e:	46bd      	mov	sp, r7
 8007440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007444:	4770      	bx	lr
 8007446:	bf00      	nop
 8007448:	40023800 	.word	0x40023800
 800744c:	40013800 	.word	0x40013800
 8007450:	40020000 	.word	0x40020000
 8007454:	40020400 	.word	0x40020400
 8007458:	40020800 	.word	0x40020800
 800745c:	40020c00 	.word	0x40020c00
 8007460:	40021000 	.word	0x40021000
 8007464:	40021400 	.word	0x40021400
 8007468:	40021800 	.word	0x40021800
 800746c:	40013c00 	.word	0x40013c00

08007470 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007470:	b480      	push	{r7}
 8007472:	b085      	sub	sp, #20
 8007474:	af00      	add	r7, sp, #0
 8007476:	6078      	str	r0, [r7, #4]
 8007478:	460b      	mov	r3, r1
 800747a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	691a      	ldr	r2, [r3, #16]
 8007480:	887b      	ldrh	r3, [r7, #2]
 8007482:	4013      	ands	r3, r2
 8007484:	2b00      	cmp	r3, #0
 8007486:	d002      	beq.n	800748e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007488:	2301      	movs	r3, #1
 800748a:	73fb      	strb	r3, [r7, #15]
 800748c:	e001      	b.n	8007492 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800748e:	2300      	movs	r3, #0
 8007490:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007492:	7bfb      	ldrb	r3, [r7, #15]
}
 8007494:	4618      	mov	r0, r3
 8007496:	3714      	adds	r7, #20
 8007498:	46bd      	mov	sp, r7
 800749a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800749e:	4770      	bx	lr

080074a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80074a0:	b480      	push	{r7}
 80074a2:	b083      	sub	sp, #12
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	6078      	str	r0, [r7, #4]
 80074a8:	460b      	mov	r3, r1
 80074aa:	807b      	strh	r3, [r7, #2]
 80074ac:	4613      	mov	r3, r2
 80074ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80074b0:	787b      	ldrb	r3, [r7, #1]
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d003      	beq.n	80074be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80074b6:	887a      	ldrh	r2, [r7, #2]
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80074bc:	e003      	b.n	80074c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80074be:	887b      	ldrh	r3, [r7, #2]
 80074c0:	041a      	lsls	r2, r3, #16
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	619a      	str	r2, [r3, #24]
}
 80074c6:	bf00      	nop
 80074c8:	370c      	adds	r7, #12
 80074ca:	46bd      	mov	sp, r7
 80074cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d0:	4770      	bx	lr

080074d2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80074d2:	b480      	push	{r7}
 80074d4:	b085      	sub	sp, #20
 80074d6:	af00      	add	r7, sp, #0
 80074d8:	6078      	str	r0, [r7, #4]
 80074da:	460b      	mov	r3, r1
 80074dc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	695b      	ldr	r3, [r3, #20]
 80074e2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80074e4:	887a      	ldrh	r2, [r7, #2]
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	4013      	ands	r3, r2
 80074ea:	041a      	lsls	r2, r3, #16
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	43d9      	mvns	r1, r3
 80074f0:	887b      	ldrh	r3, [r7, #2]
 80074f2:	400b      	ands	r3, r1
 80074f4:	431a      	orrs	r2, r3
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	619a      	str	r2, [r3, #24]
}
 80074fa:	bf00      	nop
 80074fc:	3714      	adds	r7, #20
 80074fe:	46bd      	mov	sp, r7
 8007500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007504:	4770      	bx	lr
	...

08007508 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007508:	b580      	push	{r7, lr}
 800750a:	b082      	sub	sp, #8
 800750c:	af00      	add	r7, sp, #0
 800750e:	4603      	mov	r3, r0
 8007510:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8007512:	4b08      	ldr	r3, [pc, #32]	; (8007534 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007514:	695a      	ldr	r2, [r3, #20]
 8007516:	88fb      	ldrh	r3, [r7, #6]
 8007518:	4013      	ands	r3, r2
 800751a:	2b00      	cmp	r3, #0
 800751c:	d006      	beq.n	800752c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800751e:	4a05      	ldr	r2, [pc, #20]	; (8007534 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007520:	88fb      	ldrh	r3, [r7, #6]
 8007522:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8007524:	88fb      	ldrh	r3, [r7, #6]
 8007526:	4618      	mov	r0, r3
 8007528:	f7fc f856 	bl	80035d8 <HAL_GPIO_EXTI_Callback>
  }
}
 800752c:	bf00      	nop
 800752e:	3708      	adds	r7, #8
 8007530:	46bd      	mov	sp, r7
 8007532:	bd80      	pop	{r7, pc}
 8007534:	40013c00 	.word	0x40013c00

08007538 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8007538:	b580      	push	{r7, lr}
 800753a:	b082      	sub	sp, #8
 800753c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800753e:	2300      	movs	r3, #0
 8007540:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8007542:	2300      	movs	r3, #0
 8007544:	603b      	str	r3, [r7, #0]
 8007546:	4b20      	ldr	r3, [pc, #128]	; (80075c8 <HAL_PWREx_EnableOverDrive+0x90>)
 8007548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800754a:	4a1f      	ldr	r2, [pc, #124]	; (80075c8 <HAL_PWREx_EnableOverDrive+0x90>)
 800754c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007550:	6413      	str	r3, [r2, #64]	; 0x40
 8007552:	4b1d      	ldr	r3, [pc, #116]	; (80075c8 <HAL_PWREx_EnableOverDrive+0x90>)
 8007554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007556:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800755a:	603b      	str	r3, [r7, #0]
 800755c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800755e:	4b1b      	ldr	r3, [pc, #108]	; (80075cc <HAL_PWREx_EnableOverDrive+0x94>)
 8007560:	2201      	movs	r2, #1
 8007562:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007564:	f7fe fa90 	bl	8005a88 <HAL_GetTick>
 8007568:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800756a:	e009      	b.n	8007580 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800756c:	f7fe fa8c 	bl	8005a88 <HAL_GetTick>
 8007570:	4602      	mov	r2, r0
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	1ad3      	subs	r3, r2, r3
 8007576:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800757a:	d901      	bls.n	8007580 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800757c:	2303      	movs	r3, #3
 800757e:	e01f      	b.n	80075c0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8007580:	4b13      	ldr	r3, [pc, #76]	; (80075d0 <HAL_PWREx_EnableOverDrive+0x98>)
 8007582:	685b      	ldr	r3, [r3, #4]
 8007584:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007588:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800758c:	d1ee      	bne.n	800756c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800758e:	4b11      	ldr	r3, [pc, #68]	; (80075d4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007590:	2201      	movs	r2, #1
 8007592:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007594:	f7fe fa78 	bl	8005a88 <HAL_GetTick>
 8007598:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800759a:	e009      	b.n	80075b0 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800759c:	f7fe fa74 	bl	8005a88 <HAL_GetTick>
 80075a0:	4602      	mov	r2, r0
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	1ad3      	subs	r3, r2, r3
 80075a6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80075aa:	d901      	bls.n	80075b0 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80075ac:	2303      	movs	r3, #3
 80075ae:	e007      	b.n	80075c0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80075b0:	4b07      	ldr	r3, [pc, #28]	; (80075d0 <HAL_PWREx_EnableOverDrive+0x98>)
 80075b2:	685b      	ldr	r3, [r3, #4]
 80075b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80075b8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80075bc:	d1ee      	bne.n	800759c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80075be:	2300      	movs	r3, #0
}
 80075c0:	4618      	mov	r0, r3
 80075c2:	3708      	adds	r7, #8
 80075c4:	46bd      	mov	sp, r7
 80075c6:	bd80      	pop	{r7, pc}
 80075c8:	40023800 	.word	0x40023800
 80075cc:	420e0040 	.word	0x420e0040
 80075d0:	40007000 	.word	0x40007000
 80075d4:	420e0044 	.word	0x420e0044

080075d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80075d8:	b580      	push	{r7, lr}
 80075da:	b084      	sub	sp, #16
 80075dc:	af00      	add	r7, sp, #0
 80075de:	6078      	str	r0, [r7, #4]
 80075e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d101      	bne.n	80075ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80075e8:	2301      	movs	r3, #1
 80075ea:	e0cc      	b.n	8007786 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80075ec:	4b68      	ldr	r3, [pc, #416]	; (8007790 <HAL_RCC_ClockConfig+0x1b8>)
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	f003 030f 	and.w	r3, r3, #15
 80075f4:	683a      	ldr	r2, [r7, #0]
 80075f6:	429a      	cmp	r2, r3
 80075f8:	d90c      	bls.n	8007614 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80075fa:	4b65      	ldr	r3, [pc, #404]	; (8007790 <HAL_RCC_ClockConfig+0x1b8>)
 80075fc:	683a      	ldr	r2, [r7, #0]
 80075fe:	b2d2      	uxtb	r2, r2
 8007600:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007602:	4b63      	ldr	r3, [pc, #396]	; (8007790 <HAL_RCC_ClockConfig+0x1b8>)
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	f003 030f 	and.w	r3, r3, #15
 800760a:	683a      	ldr	r2, [r7, #0]
 800760c:	429a      	cmp	r2, r3
 800760e:	d001      	beq.n	8007614 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007610:	2301      	movs	r3, #1
 8007612:	e0b8      	b.n	8007786 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	f003 0302 	and.w	r3, r3, #2
 800761c:	2b00      	cmp	r3, #0
 800761e:	d020      	beq.n	8007662 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	f003 0304 	and.w	r3, r3, #4
 8007628:	2b00      	cmp	r3, #0
 800762a:	d005      	beq.n	8007638 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800762c:	4b59      	ldr	r3, [pc, #356]	; (8007794 <HAL_RCC_ClockConfig+0x1bc>)
 800762e:	689b      	ldr	r3, [r3, #8]
 8007630:	4a58      	ldr	r2, [pc, #352]	; (8007794 <HAL_RCC_ClockConfig+0x1bc>)
 8007632:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007636:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	f003 0308 	and.w	r3, r3, #8
 8007640:	2b00      	cmp	r3, #0
 8007642:	d005      	beq.n	8007650 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007644:	4b53      	ldr	r3, [pc, #332]	; (8007794 <HAL_RCC_ClockConfig+0x1bc>)
 8007646:	689b      	ldr	r3, [r3, #8]
 8007648:	4a52      	ldr	r2, [pc, #328]	; (8007794 <HAL_RCC_ClockConfig+0x1bc>)
 800764a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800764e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007650:	4b50      	ldr	r3, [pc, #320]	; (8007794 <HAL_RCC_ClockConfig+0x1bc>)
 8007652:	689b      	ldr	r3, [r3, #8]
 8007654:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	689b      	ldr	r3, [r3, #8]
 800765c:	494d      	ldr	r1, [pc, #308]	; (8007794 <HAL_RCC_ClockConfig+0x1bc>)
 800765e:	4313      	orrs	r3, r2
 8007660:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	f003 0301 	and.w	r3, r3, #1
 800766a:	2b00      	cmp	r3, #0
 800766c:	d044      	beq.n	80076f8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	685b      	ldr	r3, [r3, #4]
 8007672:	2b01      	cmp	r3, #1
 8007674:	d107      	bne.n	8007686 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007676:	4b47      	ldr	r3, [pc, #284]	; (8007794 <HAL_RCC_ClockConfig+0x1bc>)
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800767e:	2b00      	cmp	r3, #0
 8007680:	d119      	bne.n	80076b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007682:	2301      	movs	r3, #1
 8007684:	e07f      	b.n	8007786 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	685b      	ldr	r3, [r3, #4]
 800768a:	2b02      	cmp	r3, #2
 800768c:	d003      	beq.n	8007696 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007692:	2b03      	cmp	r3, #3
 8007694:	d107      	bne.n	80076a6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007696:	4b3f      	ldr	r3, [pc, #252]	; (8007794 <HAL_RCC_ClockConfig+0x1bc>)
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d109      	bne.n	80076b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80076a2:	2301      	movs	r3, #1
 80076a4:	e06f      	b.n	8007786 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80076a6:	4b3b      	ldr	r3, [pc, #236]	; (8007794 <HAL_RCC_ClockConfig+0x1bc>)
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	f003 0302 	and.w	r3, r3, #2
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d101      	bne.n	80076b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80076b2:	2301      	movs	r3, #1
 80076b4:	e067      	b.n	8007786 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80076b6:	4b37      	ldr	r3, [pc, #220]	; (8007794 <HAL_RCC_ClockConfig+0x1bc>)
 80076b8:	689b      	ldr	r3, [r3, #8]
 80076ba:	f023 0203 	bic.w	r2, r3, #3
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	685b      	ldr	r3, [r3, #4]
 80076c2:	4934      	ldr	r1, [pc, #208]	; (8007794 <HAL_RCC_ClockConfig+0x1bc>)
 80076c4:	4313      	orrs	r3, r2
 80076c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80076c8:	f7fe f9de 	bl	8005a88 <HAL_GetTick>
 80076cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80076ce:	e00a      	b.n	80076e6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80076d0:	f7fe f9da 	bl	8005a88 <HAL_GetTick>
 80076d4:	4602      	mov	r2, r0
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	1ad3      	subs	r3, r2, r3
 80076da:	f241 3288 	movw	r2, #5000	; 0x1388
 80076de:	4293      	cmp	r3, r2
 80076e0:	d901      	bls.n	80076e6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80076e2:	2303      	movs	r3, #3
 80076e4:	e04f      	b.n	8007786 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80076e6:	4b2b      	ldr	r3, [pc, #172]	; (8007794 <HAL_RCC_ClockConfig+0x1bc>)
 80076e8:	689b      	ldr	r3, [r3, #8]
 80076ea:	f003 020c 	and.w	r2, r3, #12
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	685b      	ldr	r3, [r3, #4]
 80076f2:	009b      	lsls	r3, r3, #2
 80076f4:	429a      	cmp	r2, r3
 80076f6:	d1eb      	bne.n	80076d0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80076f8:	4b25      	ldr	r3, [pc, #148]	; (8007790 <HAL_RCC_ClockConfig+0x1b8>)
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	f003 030f 	and.w	r3, r3, #15
 8007700:	683a      	ldr	r2, [r7, #0]
 8007702:	429a      	cmp	r2, r3
 8007704:	d20c      	bcs.n	8007720 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007706:	4b22      	ldr	r3, [pc, #136]	; (8007790 <HAL_RCC_ClockConfig+0x1b8>)
 8007708:	683a      	ldr	r2, [r7, #0]
 800770a:	b2d2      	uxtb	r2, r2
 800770c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800770e:	4b20      	ldr	r3, [pc, #128]	; (8007790 <HAL_RCC_ClockConfig+0x1b8>)
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	f003 030f 	and.w	r3, r3, #15
 8007716:	683a      	ldr	r2, [r7, #0]
 8007718:	429a      	cmp	r2, r3
 800771a:	d001      	beq.n	8007720 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800771c:	2301      	movs	r3, #1
 800771e:	e032      	b.n	8007786 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	f003 0304 	and.w	r3, r3, #4
 8007728:	2b00      	cmp	r3, #0
 800772a:	d008      	beq.n	800773e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800772c:	4b19      	ldr	r3, [pc, #100]	; (8007794 <HAL_RCC_ClockConfig+0x1bc>)
 800772e:	689b      	ldr	r3, [r3, #8]
 8007730:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	68db      	ldr	r3, [r3, #12]
 8007738:	4916      	ldr	r1, [pc, #88]	; (8007794 <HAL_RCC_ClockConfig+0x1bc>)
 800773a:	4313      	orrs	r3, r2
 800773c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	f003 0308 	and.w	r3, r3, #8
 8007746:	2b00      	cmp	r3, #0
 8007748:	d009      	beq.n	800775e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800774a:	4b12      	ldr	r3, [pc, #72]	; (8007794 <HAL_RCC_ClockConfig+0x1bc>)
 800774c:	689b      	ldr	r3, [r3, #8]
 800774e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	691b      	ldr	r3, [r3, #16]
 8007756:	00db      	lsls	r3, r3, #3
 8007758:	490e      	ldr	r1, [pc, #56]	; (8007794 <HAL_RCC_ClockConfig+0x1bc>)
 800775a:	4313      	orrs	r3, r2
 800775c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800775e:	f000 f873 	bl	8007848 <HAL_RCC_GetSysClockFreq>
 8007762:	4602      	mov	r2, r0
 8007764:	4b0b      	ldr	r3, [pc, #44]	; (8007794 <HAL_RCC_ClockConfig+0x1bc>)
 8007766:	689b      	ldr	r3, [r3, #8]
 8007768:	091b      	lsrs	r3, r3, #4
 800776a:	f003 030f 	and.w	r3, r3, #15
 800776e:	490a      	ldr	r1, [pc, #40]	; (8007798 <HAL_RCC_ClockConfig+0x1c0>)
 8007770:	5ccb      	ldrb	r3, [r1, r3]
 8007772:	fa22 f303 	lsr.w	r3, r2, r3
 8007776:	4a09      	ldr	r2, [pc, #36]	; (800779c <HAL_RCC_ClockConfig+0x1c4>)
 8007778:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800777a:	4b09      	ldr	r3, [pc, #36]	; (80077a0 <HAL_RCC_ClockConfig+0x1c8>)
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	4618      	mov	r0, r3
 8007780:	f7fd ff96 	bl	80056b0 <HAL_InitTick>

  return HAL_OK;
 8007784:	2300      	movs	r3, #0
}
 8007786:	4618      	mov	r0, r3
 8007788:	3710      	adds	r7, #16
 800778a:	46bd      	mov	sp, r7
 800778c:	bd80      	pop	{r7, pc}
 800778e:	bf00      	nop
 8007790:	40023c00 	.word	0x40023c00
 8007794:	40023800 	.word	0x40023800
 8007798:	0800a088 	.word	0x0800a088
 800779c:	20000008 	.word	0x20000008
 80077a0:	2000000c 	.word	0x2000000c

080077a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80077a4:	b480      	push	{r7}
 80077a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80077a8:	4b03      	ldr	r3, [pc, #12]	; (80077b8 <HAL_RCC_GetHCLKFreq+0x14>)
 80077aa:	681b      	ldr	r3, [r3, #0]
}
 80077ac:	4618      	mov	r0, r3
 80077ae:	46bd      	mov	sp, r7
 80077b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b4:	4770      	bx	lr
 80077b6:	bf00      	nop
 80077b8:	20000008 	.word	0x20000008

080077bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80077bc:	b580      	push	{r7, lr}
 80077be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80077c0:	f7ff fff0 	bl	80077a4 <HAL_RCC_GetHCLKFreq>
 80077c4:	4602      	mov	r2, r0
 80077c6:	4b05      	ldr	r3, [pc, #20]	; (80077dc <HAL_RCC_GetPCLK1Freq+0x20>)
 80077c8:	689b      	ldr	r3, [r3, #8]
 80077ca:	0a9b      	lsrs	r3, r3, #10
 80077cc:	f003 0307 	and.w	r3, r3, #7
 80077d0:	4903      	ldr	r1, [pc, #12]	; (80077e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80077d2:	5ccb      	ldrb	r3, [r1, r3]
 80077d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80077d8:	4618      	mov	r0, r3
 80077da:	bd80      	pop	{r7, pc}
 80077dc:	40023800 	.word	0x40023800
 80077e0:	0800a098 	.word	0x0800a098

080077e4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80077e4:	b480      	push	{r7}
 80077e6:	b083      	sub	sp, #12
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	6078      	str	r0, [r7, #4]
 80077ec:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	220f      	movs	r2, #15
 80077f2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80077f4:	4b12      	ldr	r3, [pc, #72]	; (8007840 <HAL_RCC_GetClockConfig+0x5c>)
 80077f6:	689b      	ldr	r3, [r3, #8]
 80077f8:	f003 0203 	and.w	r2, r3, #3
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8007800:	4b0f      	ldr	r3, [pc, #60]	; (8007840 <HAL_RCC_GetClockConfig+0x5c>)
 8007802:	689b      	ldr	r3, [r3, #8]
 8007804:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800780c:	4b0c      	ldr	r3, [pc, #48]	; (8007840 <HAL_RCC_GetClockConfig+0x5c>)
 800780e:	689b      	ldr	r3, [r3, #8]
 8007810:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8007818:	4b09      	ldr	r3, [pc, #36]	; (8007840 <HAL_RCC_GetClockConfig+0x5c>)
 800781a:	689b      	ldr	r3, [r3, #8]
 800781c:	08db      	lsrs	r3, r3, #3
 800781e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007826:	4b07      	ldr	r3, [pc, #28]	; (8007844 <HAL_RCC_GetClockConfig+0x60>)
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	f003 020f 	and.w	r2, r3, #15
 800782e:	683b      	ldr	r3, [r7, #0]
 8007830:	601a      	str	r2, [r3, #0]
}
 8007832:	bf00      	nop
 8007834:	370c      	adds	r7, #12
 8007836:	46bd      	mov	sp, r7
 8007838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800783c:	4770      	bx	lr
 800783e:	bf00      	nop
 8007840:	40023800 	.word	0x40023800
 8007844:	40023c00 	.word	0x40023c00

08007848 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007848:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800784c:	b0ae      	sub	sp, #184	; 0xb8
 800784e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8007850:	2300      	movs	r3, #0
 8007852:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8007856:	2300      	movs	r3, #0
 8007858:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 800785c:	2300      	movs	r3, #0
 800785e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8007862:	2300      	movs	r3, #0
 8007864:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8007868:	2300      	movs	r3, #0
 800786a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800786e:	4bcb      	ldr	r3, [pc, #812]	; (8007b9c <HAL_RCC_GetSysClockFreq+0x354>)
 8007870:	689b      	ldr	r3, [r3, #8]
 8007872:	f003 030c 	and.w	r3, r3, #12
 8007876:	2b0c      	cmp	r3, #12
 8007878:	f200 8206 	bhi.w	8007c88 <HAL_RCC_GetSysClockFreq+0x440>
 800787c:	a201      	add	r2, pc, #4	; (adr r2, 8007884 <HAL_RCC_GetSysClockFreq+0x3c>)
 800787e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007882:	bf00      	nop
 8007884:	080078b9 	.word	0x080078b9
 8007888:	08007c89 	.word	0x08007c89
 800788c:	08007c89 	.word	0x08007c89
 8007890:	08007c89 	.word	0x08007c89
 8007894:	080078c1 	.word	0x080078c1
 8007898:	08007c89 	.word	0x08007c89
 800789c:	08007c89 	.word	0x08007c89
 80078a0:	08007c89 	.word	0x08007c89
 80078a4:	080078c9 	.word	0x080078c9
 80078a8:	08007c89 	.word	0x08007c89
 80078ac:	08007c89 	.word	0x08007c89
 80078b0:	08007c89 	.word	0x08007c89
 80078b4:	08007ab9 	.word	0x08007ab9
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80078b8:	4bb9      	ldr	r3, [pc, #740]	; (8007ba0 <HAL_RCC_GetSysClockFreq+0x358>)
 80078ba:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 80078be:	e1e7      	b.n	8007c90 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80078c0:	4bb8      	ldr	r3, [pc, #736]	; (8007ba4 <HAL_RCC_GetSysClockFreq+0x35c>)
 80078c2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80078c6:	e1e3      	b.n	8007c90 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80078c8:	4bb4      	ldr	r3, [pc, #720]	; (8007b9c <HAL_RCC_GetSysClockFreq+0x354>)
 80078ca:	685b      	ldr	r3, [r3, #4]
 80078cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80078d0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80078d4:	4bb1      	ldr	r3, [pc, #708]	; (8007b9c <HAL_RCC_GetSysClockFreq+0x354>)
 80078d6:	685b      	ldr	r3, [r3, #4]
 80078d8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d071      	beq.n	80079c4 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80078e0:	4bae      	ldr	r3, [pc, #696]	; (8007b9c <HAL_RCC_GetSysClockFreq+0x354>)
 80078e2:	685b      	ldr	r3, [r3, #4]
 80078e4:	099b      	lsrs	r3, r3, #6
 80078e6:	2200      	movs	r2, #0
 80078e8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80078ec:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80078f0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80078f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80078f8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80078fc:	2300      	movs	r3, #0
 80078fe:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007902:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8007906:	4622      	mov	r2, r4
 8007908:	462b      	mov	r3, r5
 800790a:	f04f 0000 	mov.w	r0, #0
 800790e:	f04f 0100 	mov.w	r1, #0
 8007912:	0159      	lsls	r1, r3, #5
 8007914:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007918:	0150      	lsls	r0, r2, #5
 800791a:	4602      	mov	r2, r0
 800791c:	460b      	mov	r3, r1
 800791e:	4621      	mov	r1, r4
 8007920:	1a51      	subs	r1, r2, r1
 8007922:	6439      	str	r1, [r7, #64]	; 0x40
 8007924:	4629      	mov	r1, r5
 8007926:	eb63 0301 	sbc.w	r3, r3, r1
 800792a:	647b      	str	r3, [r7, #68]	; 0x44
 800792c:	f04f 0200 	mov.w	r2, #0
 8007930:	f04f 0300 	mov.w	r3, #0
 8007934:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8007938:	4649      	mov	r1, r9
 800793a:	018b      	lsls	r3, r1, #6
 800793c:	4641      	mov	r1, r8
 800793e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007942:	4641      	mov	r1, r8
 8007944:	018a      	lsls	r2, r1, #6
 8007946:	4641      	mov	r1, r8
 8007948:	1a51      	subs	r1, r2, r1
 800794a:	63b9      	str	r1, [r7, #56]	; 0x38
 800794c:	4649      	mov	r1, r9
 800794e:	eb63 0301 	sbc.w	r3, r3, r1
 8007952:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007954:	f04f 0200 	mov.w	r2, #0
 8007958:	f04f 0300 	mov.w	r3, #0
 800795c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8007960:	4649      	mov	r1, r9
 8007962:	00cb      	lsls	r3, r1, #3
 8007964:	4641      	mov	r1, r8
 8007966:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800796a:	4641      	mov	r1, r8
 800796c:	00ca      	lsls	r2, r1, #3
 800796e:	4610      	mov	r0, r2
 8007970:	4619      	mov	r1, r3
 8007972:	4603      	mov	r3, r0
 8007974:	4622      	mov	r2, r4
 8007976:	189b      	adds	r3, r3, r2
 8007978:	633b      	str	r3, [r7, #48]	; 0x30
 800797a:	462b      	mov	r3, r5
 800797c:	460a      	mov	r2, r1
 800797e:	eb42 0303 	adc.w	r3, r2, r3
 8007982:	637b      	str	r3, [r7, #52]	; 0x34
 8007984:	f04f 0200 	mov.w	r2, #0
 8007988:	f04f 0300 	mov.w	r3, #0
 800798c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8007990:	4629      	mov	r1, r5
 8007992:	024b      	lsls	r3, r1, #9
 8007994:	4621      	mov	r1, r4
 8007996:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800799a:	4621      	mov	r1, r4
 800799c:	024a      	lsls	r2, r1, #9
 800799e:	4610      	mov	r0, r2
 80079a0:	4619      	mov	r1, r3
 80079a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80079a6:	2200      	movs	r2, #0
 80079a8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80079ac:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80079b0:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80079b4:	f7f8 ffb2 	bl	800091c <__aeabi_uldivmod>
 80079b8:	4602      	mov	r2, r0
 80079ba:	460b      	mov	r3, r1
 80079bc:	4613      	mov	r3, r2
 80079be:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80079c2:	e067      	b.n	8007a94 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80079c4:	4b75      	ldr	r3, [pc, #468]	; (8007b9c <HAL_RCC_GetSysClockFreq+0x354>)
 80079c6:	685b      	ldr	r3, [r3, #4]
 80079c8:	099b      	lsrs	r3, r3, #6
 80079ca:	2200      	movs	r2, #0
 80079cc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80079d0:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80079d4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80079d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80079dc:	67bb      	str	r3, [r7, #120]	; 0x78
 80079de:	2300      	movs	r3, #0
 80079e0:	67fb      	str	r3, [r7, #124]	; 0x7c
 80079e2:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 80079e6:	4622      	mov	r2, r4
 80079e8:	462b      	mov	r3, r5
 80079ea:	f04f 0000 	mov.w	r0, #0
 80079ee:	f04f 0100 	mov.w	r1, #0
 80079f2:	0159      	lsls	r1, r3, #5
 80079f4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80079f8:	0150      	lsls	r0, r2, #5
 80079fa:	4602      	mov	r2, r0
 80079fc:	460b      	mov	r3, r1
 80079fe:	4621      	mov	r1, r4
 8007a00:	1a51      	subs	r1, r2, r1
 8007a02:	62b9      	str	r1, [r7, #40]	; 0x28
 8007a04:	4629      	mov	r1, r5
 8007a06:	eb63 0301 	sbc.w	r3, r3, r1
 8007a0a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007a0c:	f04f 0200 	mov.w	r2, #0
 8007a10:	f04f 0300 	mov.w	r3, #0
 8007a14:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8007a18:	4649      	mov	r1, r9
 8007a1a:	018b      	lsls	r3, r1, #6
 8007a1c:	4641      	mov	r1, r8
 8007a1e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007a22:	4641      	mov	r1, r8
 8007a24:	018a      	lsls	r2, r1, #6
 8007a26:	4641      	mov	r1, r8
 8007a28:	ebb2 0a01 	subs.w	sl, r2, r1
 8007a2c:	4649      	mov	r1, r9
 8007a2e:	eb63 0b01 	sbc.w	fp, r3, r1
 8007a32:	f04f 0200 	mov.w	r2, #0
 8007a36:	f04f 0300 	mov.w	r3, #0
 8007a3a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007a3e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007a42:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007a46:	4692      	mov	sl, r2
 8007a48:	469b      	mov	fp, r3
 8007a4a:	4623      	mov	r3, r4
 8007a4c:	eb1a 0303 	adds.w	r3, sl, r3
 8007a50:	623b      	str	r3, [r7, #32]
 8007a52:	462b      	mov	r3, r5
 8007a54:	eb4b 0303 	adc.w	r3, fp, r3
 8007a58:	627b      	str	r3, [r7, #36]	; 0x24
 8007a5a:	f04f 0200 	mov.w	r2, #0
 8007a5e:	f04f 0300 	mov.w	r3, #0
 8007a62:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8007a66:	4629      	mov	r1, r5
 8007a68:	028b      	lsls	r3, r1, #10
 8007a6a:	4621      	mov	r1, r4
 8007a6c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007a70:	4621      	mov	r1, r4
 8007a72:	028a      	lsls	r2, r1, #10
 8007a74:	4610      	mov	r0, r2
 8007a76:	4619      	mov	r1, r3
 8007a78:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007a7c:	2200      	movs	r2, #0
 8007a7e:	673b      	str	r3, [r7, #112]	; 0x70
 8007a80:	677a      	str	r2, [r7, #116]	; 0x74
 8007a82:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8007a86:	f7f8 ff49 	bl	800091c <__aeabi_uldivmod>
 8007a8a:	4602      	mov	r2, r0
 8007a8c:	460b      	mov	r3, r1
 8007a8e:	4613      	mov	r3, r2
 8007a90:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007a94:	4b41      	ldr	r3, [pc, #260]	; (8007b9c <HAL_RCC_GetSysClockFreq+0x354>)
 8007a96:	685b      	ldr	r3, [r3, #4]
 8007a98:	0c1b      	lsrs	r3, r3, #16
 8007a9a:	f003 0303 	and.w	r3, r3, #3
 8007a9e:	3301      	adds	r3, #1
 8007aa0:	005b      	lsls	r3, r3, #1
 8007aa2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8007aa6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007aaa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007aae:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ab2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8007ab6:	e0eb      	b.n	8007c90 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007ab8:	4b38      	ldr	r3, [pc, #224]	; (8007b9c <HAL_RCC_GetSysClockFreq+0x354>)
 8007aba:	685b      	ldr	r3, [r3, #4]
 8007abc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007ac0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007ac4:	4b35      	ldr	r3, [pc, #212]	; (8007b9c <HAL_RCC_GetSysClockFreq+0x354>)
 8007ac6:	685b      	ldr	r3, [r3, #4]
 8007ac8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d06b      	beq.n	8007ba8 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007ad0:	4b32      	ldr	r3, [pc, #200]	; (8007b9c <HAL_RCC_GetSysClockFreq+0x354>)
 8007ad2:	685b      	ldr	r3, [r3, #4]
 8007ad4:	099b      	lsrs	r3, r3, #6
 8007ad6:	2200      	movs	r2, #0
 8007ad8:	66bb      	str	r3, [r7, #104]	; 0x68
 8007ada:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007adc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007ade:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ae2:	663b      	str	r3, [r7, #96]	; 0x60
 8007ae4:	2300      	movs	r3, #0
 8007ae6:	667b      	str	r3, [r7, #100]	; 0x64
 8007ae8:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8007aec:	4622      	mov	r2, r4
 8007aee:	462b      	mov	r3, r5
 8007af0:	f04f 0000 	mov.w	r0, #0
 8007af4:	f04f 0100 	mov.w	r1, #0
 8007af8:	0159      	lsls	r1, r3, #5
 8007afa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007afe:	0150      	lsls	r0, r2, #5
 8007b00:	4602      	mov	r2, r0
 8007b02:	460b      	mov	r3, r1
 8007b04:	4621      	mov	r1, r4
 8007b06:	1a51      	subs	r1, r2, r1
 8007b08:	61b9      	str	r1, [r7, #24]
 8007b0a:	4629      	mov	r1, r5
 8007b0c:	eb63 0301 	sbc.w	r3, r3, r1
 8007b10:	61fb      	str	r3, [r7, #28]
 8007b12:	f04f 0200 	mov.w	r2, #0
 8007b16:	f04f 0300 	mov.w	r3, #0
 8007b1a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8007b1e:	4659      	mov	r1, fp
 8007b20:	018b      	lsls	r3, r1, #6
 8007b22:	4651      	mov	r1, sl
 8007b24:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007b28:	4651      	mov	r1, sl
 8007b2a:	018a      	lsls	r2, r1, #6
 8007b2c:	4651      	mov	r1, sl
 8007b2e:	ebb2 0801 	subs.w	r8, r2, r1
 8007b32:	4659      	mov	r1, fp
 8007b34:	eb63 0901 	sbc.w	r9, r3, r1
 8007b38:	f04f 0200 	mov.w	r2, #0
 8007b3c:	f04f 0300 	mov.w	r3, #0
 8007b40:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007b44:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007b48:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007b4c:	4690      	mov	r8, r2
 8007b4e:	4699      	mov	r9, r3
 8007b50:	4623      	mov	r3, r4
 8007b52:	eb18 0303 	adds.w	r3, r8, r3
 8007b56:	613b      	str	r3, [r7, #16]
 8007b58:	462b      	mov	r3, r5
 8007b5a:	eb49 0303 	adc.w	r3, r9, r3
 8007b5e:	617b      	str	r3, [r7, #20]
 8007b60:	f04f 0200 	mov.w	r2, #0
 8007b64:	f04f 0300 	mov.w	r3, #0
 8007b68:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8007b6c:	4629      	mov	r1, r5
 8007b6e:	024b      	lsls	r3, r1, #9
 8007b70:	4621      	mov	r1, r4
 8007b72:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007b76:	4621      	mov	r1, r4
 8007b78:	024a      	lsls	r2, r1, #9
 8007b7a:	4610      	mov	r0, r2
 8007b7c:	4619      	mov	r1, r3
 8007b7e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007b82:	2200      	movs	r2, #0
 8007b84:	65bb      	str	r3, [r7, #88]	; 0x58
 8007b86:	65fa      	str	r2, [r7, #92]	; 0x5c
 8007b88:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007b8c:	f7f8 fec6 	bl	800091c <__aeabi_uldivmod>
 8007b90:	4602      	mov	r2, r0
 8007b92:	460b      	mov	r3, r1
 8007b94:	4613      	mov	r3, r2
 8007b96:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007b9a:	e065      	b.n	8007c68 <HAL_RCC_GetSysClockFreq+0x420>
 8007b9c:	40023800 	.word	0x40023800
 8007ba0:	00f42400 	.word	0x00f42400
 8007ba4:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007ba8:	4b3d      	ldr	r3, [pc, #244]	; (8007ca0 <HAL_RCC_GetSysClockFreq+0x458>)
 8007baa:	685b      	ldr	r3, [r3, #4]
 8007bac:	099b      	lsrs	r3, r3, #6
 8007bae:	2200      	movs	r2, #0
 8007bb0:	4618      	mov	r0, r3
 8007bb2:	4611      	mov	r1, r2
 8007bb4:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8007bb8:	653b      	str	r3, [r7, #80]	; 0x50
 8007bba:	2300      	movs	r3, #0
 8007bbc:	657b      	str	r3, [r7, #84]	; 0x54
 8007bbe:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8007bc2:	4642      	mov	r2, r8
 8007bc4:	464b      	mov	r3, r9
 8007bc6:	f04f 0000 	mov.w	r0, #0
 8007bca:	f04f 0100 	mov.w	r1, #0
 8007bce:	0159      	lsls	r1, r3, #5
 8007bd0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007bd4:	0150      	lsls	r0, r2, #5
 8007bd6:	4602      	mov	r2, r0
 8007bd8:	460b      	mov	r3, r1
 8007bda:	4641      	mov	r1, r8
 8007bdc:	1a51      	subs	r1, r2, r1
 8007bde:	60b9      	str	r1, [r7, #8]
 8007be0:	4649      	mov	r1, r9
 8007be2:	eb63 0301 	sbc.w	r3, r3, r1
 8007be6:	60fb      	str	r3, [r7, #12]
 8007be8:	f04f 0200 	mov.w	r2, #0
 8007bec:	f04f 0300 	mov.w	r3, #0
 8007bf0:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8007bf4:	4659      	mov	r1, fp
 8007bf6:	018b      	lsls	r3, r1, #6
 8007bf8:	4651      	mov	r1, sl
 8007bfa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007bfe:	4651      	mov	r1, sl
 8007c00:	018a      	lsls	r2, r1, #6
 8007c02:	4651      	mov	r1, sl
 8007c04:	1a54      	subs	r4, r2, r1
 8007c06:	4659      	mov	r1, fp
 8007c08:	eb63 0501 	sbc.w	r5, r3, r1
 8007c0c:	f04f 0200 	mov.w	r2, #0
 8007c10:	f04f 0300 	mov.w	r3, #0
 8007c14:	00eb      	lsls	r3, r5, #3
 8007c16:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007c1a:	00e2      	lsls	r2, r4, #3
 8007c1c:	4614      	mov	r4, r2
 8007c1e:	461d      	mov	r5, r3
 8007c20:	4643      	mov	r3, r8
 8007c22:	18e3      	adds	r3, r4, r3
 8007c24:	603b      	str	r3, [r7, #0]
 8007c26:	464b      	mov	r3, r9
 8007c28:	eb45 0303 	adc.w	r3, r5, r3
 8007c2c:	607b      	str	r3, [r7, #4]
 8007c2e:	f04f 0200 	mov.w	r2, #0
 8007c32:	f04f 0300 	mov.w	r3, #0
 8007c36:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007c3a:	4629      	mov	r1, r5
 8007c3c:	028b      	lsls	r3, r1, #10
 8007c3e:	4621      	mov	r1, r4
 8007c40:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007c44:	4621      	mov	r1, r4
 8007c46:	028a      	lsls	r2, r1, #10
 8007c48:	4610      	mov	r0, r2
 8007c4a:	4619      	mov	r1, r3
 8007c4c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007c50:	2200      	movs	r2, #0
 8007c52:	64bb      	str	r3, [r7, #72]	; 0x48
 8007c54:	64fa      	str	r2, [r7, #76]	; 0x4c
 8007c56:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007c5a:	f7f8 fe5f 	bl	800091c <__aeabi_uldivmod>
 8007c5e:	4602      	mov	r2, r0
 8007c60:	460b      	mov	r3, r1
 8007c62:	4613      	mov	r3, r2
 8007c64:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8007c68:	4b0d      	ldr	r3, [pc, #52]	; (8007ca0 <HAL_RCC_GetSysClockFreq+0x458>)
 8007c6a:	685b      	ldr	r3, [r3, #4]
 8007c6c:	0f1b      	lsrs	r3, r3, #28
 8007c6e:	f003 0307 	and.w	r3, r3, #7
 8007c72:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8007c76:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007c7a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007c7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c82:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8007c86:	e003      	b.n	8007c90 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007c88:	4b06      	ldr	r3, [pc, #24]	; (8007ca4 <HAL_RCC_GetSysClockFreq+0x45c>)
 8007c8a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8007c8e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007c90:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8007c94:	4618      	mov	r0, r3
 8007c96:	37b8      	adds	r7, #184	; 0xb8
 8007c98:	46bd      	mov	sp, r7
 8007c9a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007c9e:	bf00      	nop
 8007ca0:	40023800 	.word	0x40023800
 8007ca4:	00f42400 	.word	0x00f42400

08007ca8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007ca8:	b580      	push	{r7, lr}
 8007caa:	b086      	sub	sp, #24
 8007cac:	af00      	add	r7, sp, #0
 8007cae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d101      	bne.n	8007cba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007cb6:	2301      	movs	r3, #1
 8007cb8:	e28d      	b.n	80081d6 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	f003 0301 	and.w	r3, r3, #1
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	f000 8083 	beq.w	8007dce <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8007cc8:	4b94      	ldr	r3, [pc, #592]	; (8007f1c <HAL_RCC_OscConfig+0x274>)
 8007cca:	689b      	ldr	r3, [r3, #8]
 8007ccc:	f003 030c 	and.w	r3, r3, #12
 8007cd0:	2b04      	cmp	r3, #4
 8007cd2:	d019      	beq.n	8007d08 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8007cd4:	4b91      	ldr	r3, [pc, #580]	; (8007f1c <HAL_RCC_OscConfig+0x274>)
 8007cd6:	689b      	ldr	r3, [r3, #8]
 8007cd8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8007cdc:	2b08      	cmp	r3, #8
 8007cde:	d106      	bne.n	8007cee <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8007ce0:	4b8e      	ldr	r3, [pc, #568]	; (8007f1c <HAL_RCC_OscConfig+0x274>)
 8007ce2:	685b      	ldr	r3, [r3, #4]
 8007ce4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007ce8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007cec:	d00c      	beq.n	8007d08 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007cee:	4b8b      	ldr	r3, [pc, #556]	; (8007f1c <HAL_RCC_OscConfig+0x274>)
 8007cf0:	689b      	ldr	r3, [r3, #8]
 8007cf2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8007cf6:	2b0c      	cmp	r3, #12
 8007cf8:	d112      	bne.n	8007d20 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007cfa:	4b88      	ldr	r3, [pc, #544]	; (8007f1c <HAL_RCC_OscConfig+0x274>)
 8007cfc:	685b      	ldr	r3, [r3, #4]
 8007cfe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007d02:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007d06:	d10b      	bne.n	8007d20 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007d08:	4b84      	ldr	r3, [pc, #528]	; (8007f1c <HAL_RCC_OscConfig+0x274>)
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d05b      	beq.n	8007dcc <HAL_RCC_OscConfig+0x124>
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	685b      	ldr	r3, [r3, #4]
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d157      	bne.n	8007dcc <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8007d1c:	2301      	movs	r3, #1
 8007d1e:	e25a      	b.n	80081d6 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	685b      	ldr	r3, [r3, #4]
 8007d24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007d28:	d106      	bne.n	8007d38 <HAL_RCC_OscConfig+0x90>
 8007d2a:	4b7c      	ldr	r3, [pc, #496]	; (8007f1c <HAL_RCC_OscConfig+0x274>)
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	4a7b      	ldr	r2, [pc, #492]	; (8007f1c <HAL_RCC_OscConfig+0x274>)
 8007d30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007d34:	6013      	str	r3, [r2, #0]
 8007d36:	e01d      	b.n	8007d74 <HAL_RCC_OscConfig+0xcc>
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	685b      	ldr	r3, [r3, #4]
 8007d3c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007d40:	d10c      	bne.n	8007d5c <HAL_RCC_OscConfig+0xb4>
 8007d42:	4b76      	ldr	r3, [pc, #472]	; (8007f1c <HAL_RCC_OscConfig+0x274>)
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	4a75      	ldr	r2, [pc, #468]	; (8007f1c <HAL_RCC_OscConfig+0x274>)
 8007d48:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007d4c:	6013      	str	r3, [r2, #0]
 8007d4e:	4b73      	ldr	r3, [pc, #460]	; (8007f1c <HAL_RCC_OscConfig+0x274>)
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	4a72      	ldr	r2, [pc, #456]	; (8007f1c <HAL_RCC_OscConfig+0x274>)
 8007d54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007d58:	6013      	str	r3, [r2, #0]
 8007d5a:	e00b      	b.n	8007d74 <HAL_RCC_OscConfig+0xcc>
 8007d5c:	4b6f      	ldr	r3, [pc, #444]	; (8007f1c <HAL_RCC_OscConfig+0x274>)
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	4a6e      	ldr	r2, [pc, #440]	; (8007f1c <HAL_RCC_OscConfig+0x274>)
 8007d62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007d66:	6013      	str	r3, [r2, #0]
 8007d68:	4b6c      	ldr	r3, [pc, #432]	; (8007f1c <HAL_RCC_OscConfig+0x274>)
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	4a6b      	ldr	r2, [pc, #428]	; (8007f1c <HAL_RCC_OscConfig+0x274>)
 8007d6e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007d72:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	685b      	ldr	r3, [r3, #4]
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d013      	beq.n	8007da4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d7c:	f7fd fe84 	bl	8005a88 <HAL_GetTick>
 8007d80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007d82:	e008      	b.n	8007d96 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007d84:	f7fd fe80 	bl	8005a88 <HAL_GetTick>
 8007d88:	4602      	mov	r2, r0
 8007d8a:	693b      	ldr	r3, [r7, #16]
 8007d8c:	1ad3      	subs	r3, r2, r3
 8007d8e:	2b64      	cmp	r3, #100	; 0x64
 8007d90:	d901      	bls.n	8007d96 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8007d92:	2303      	movs	r3, #3
 8007d94:	e21f      	b.n	80081d6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007d96:	4b61      	ldr	r3, [pc, #388]	; (8007f1c <HAL_RCC_OscConfig+0x274>)
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d0f0      	beq.n	8007d84 <HAL_RCC_OscConfig+0xdc>
 8007da2:	e014      	b.n	8007dce <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007da4:	f7fd fe70 	bl	8005a88 <HAL_GetTick>
 8007da8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007daa:	e008      	b.n	8007dbe <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007dac:	f7fd fe6c 	bl	8005a88 <HAL_GetTick>
 8007db0:	4602      	mov	r2, r0
 8007db2:	693b      	ldr	r3, [r7, #16]
 8007db4:	1ad3      	subs	r3, r2, r3
 8007db6:	2b64      	cmp	r3, #100	; 0x64
 8007db8:	d901      	bls.n	8007dbe <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8007dba:	2303      	movs	r3, #3
 8007dbc:	e20b      	b.n	80081d6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007dbe:	4b57      	ldr	r3, [pc, #348]	; (8007f1c <HAL_RCC_OscConfig+0x274>)
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d1f0      	bne.n	8007dac <HAL_RCC_OscConfig+0x104>
 8007dca:	e000      	b.n	8007dce <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007dcc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	f003 0302 	and.w	r3, r3, #2
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d06f      	beq.n	8007eba <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8007dda:	4b50      	ldr	r3, [pc, #320]	; (8007f1c <HAL_RCC_OscConfig+0x274>)
 8007ddc:	689b      	ldr	r3, [r3, #8]
 8007dde:	f003 030c 	and.w	r3, r3, #12
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d017      	beq.n	8007e16 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8007de6:	4b4d      	ldr	r3, [pc, #308]	; (8007f1c <HAL_RCC_OscConfig+0x274>)
 8007de8:	689b      	ldr	r3, [r3, #8]
 8007dea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8007dee:	2b08      	cmp	r3, #8
 8007df0:	d105      	bne.n	8007dfe <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8007df2:	4b4a      	ldr	r3, [pc, #296]	; (8007f1c <HAL_RCC_OscConfig+0x274>)
 8007df4:	685b      	ldr	r3, [r3, #4]
 8007df6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d00b      	beq.n	8007e16 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007dfe:	4b47      	ldr	r3, [pc, #284]	; (8007f1c <HAL_RCC_OscConfig+0x274>)
 8007e00:	689b      	ldr	r3, [r3, #8]
 8007e02:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8007e06:	2b0c      	cmp	r3, #12
 8007e08:	d11c      	bne.n	8007e44 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007e0a:	4b44      	ldr	r3, [pc, #272]	; (8007f1c <HAL_RCC_OscConfig+0x274>)
 8007e0c:	685b      	ldr	r3, [r3, #4]
 8007e0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d116      	bne.n	8007e44 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007e16:	4b41      	ldr	r3, [pc, #260]	; (8007f1c <HAL_RCC_OscConfig+0x274>)
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	f003 0302 	and.w	r3, r3, #2
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d005      	beq.n	8007e2e <HAL_RCC_OscConfig+0x186>
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	68db      	ldr	r3, [r3, #12]
 8007e26:	2b01      	cmp	r3, #1
 8007e28:	d001      	beq.n	8007e2e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8007e2a:	2301      	movs	r3, #1
 8007e2c:	e1d3      	b.n	80081d6 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007e2e:	4b3b      	ldr	r3, [pc, #236]	; (8007f1c <HAL_RCC_OscConfig+0x274>)
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	691b      	ldr	r3, [r3, #16]
 8007e3a:	00db      	lsls	r3, r3, #3
 8007e3c:	4937      	ldr	r1, [pc, #220]	; (8007f1c <HAL_RCC_OscConfig+0x274>)
 8007e3e:	4313      	orrs	r3, r2
 8007e40:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007e42:	e03a      	b.n	8007eba <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	68db      	ldr	r3, [r3, #12]
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d020      	beq.n	8007e8e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007e4c:	4b34      	ldr	r3, [pc, #208]	; (8007f20 <HAL_RCC_OscConfig+0x278>)
 8007e4e:	2201      	movs	r2, #1
 8007e50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e52:	f7fd fe19 	bl	8005a88 <HAL_GetTick>
 8007e56:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007e58:	e008      	b.n	8007e6c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007e5a:	f7fd fe15 	bl	8005a88 <HAL_GetTick>
 8007e5e:	4602      	mov	r2, r0
 8007e60:	693b      	ldr	r3, [r7, #16]
 8007e62:	1ad3      	subs	r3, r2, r3
 8007e64:	2b02      	cmp	r3, #2
 8007e66:	d901      	bls.n	8007e6c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8007e68:	2303      	movs	r3, #3
 8007e6a:	e1b4      	b.n	80081d6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007e6c:	4b2b      	ldr	r3, [pc, #172]	; (8007f1c <HAL_RCC_OscConfig+0x274>)
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	f003 0302 	and.w	r3, r3, #2
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d0f0      	beq.n	8007e5a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007e78:	4b28      	ldr	r3, [pc, #160]	; (8007f1c <HAL_RCC_OscConfig+0x274>)
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	691b      	ldr	r3, [r3, #16]
 8007e84:	00db      	lsls	r3, r3, #3
 8007e86:	4925      	ldr	r1, [pc, #148]	; (8007f1c <HAL_RCC_OscConfig+0x274>)
 8007e88:	4313      	orrs	r3, r2
 8007e8a:	600b      	str	r3, [r1, #0]
 8007e8c:	e015      	b.n	8007eba <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007e8e:	4b24      	ldr	r3, [pc, #144]	; (8007f20 <HAL_RCC_OscConfig+0x278>)
 8007e90:	2200      	movs	r2, #0
 8007e92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e94:	f7fd fdf8 	bl	8005a88 <HAL_GetTick>
 8007e98:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007e9a:	e008      	b.n	8007eae <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007e9c:	f7fd fdf4 	bl	8005a88 <HAL_GetTick>
 8007ea0:	4602      	mov	r2, r0
 8007ea2:	693b      	ldr	r3, [r7, #16]
 8007ea4:	1ad3      	subs	r3, r2, r3
 8007ea6:	2b02      	cmp	r3, #2
 8007ea8:	d901      	bls.n	8007eae <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8007eaa:	2303      	movs	r3, #3
 8007eac:	e193      	b.n	80081d6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007eae:	4b1b      	ldr	r3, [pc, #108]	; (8007f1c <HAL_RCC_OscConfig+0x274>)
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	f003 0302 	and.w	r3, r3, #2
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d1f0      	bne.n	8007e9c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	f003 0308 	and.w	r3, r3, #8
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d036      	beq.n	8007f34 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	695b      	ldr	r3, [r3, #20]
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d016      	beq.n	8007efc <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007ece:	4b15      	ldr	r3, [pc, #84]	; (8007f24 <HAL_RCC_OscConfig+0x27c>)
 8007ed0:	2201      	movs	r2, #1
 8007ed2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007ed4:	f7fd fdd8 	bl	8005a88 <HAL_GetTick>
 8007ed8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007eda:	e008      	b.n	8007eee <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007edc:	f7fd fdd4 	bl	8005a88 <HAL_GetTick>
 8007ee0:	4602      	mov	r2, r0
 8007ee2:	693b      	ldr	r3, [r7, #16]
 8007ee4:	1ad3      	subs	r3, r2, r3
 8007ee6:	2b02      	cmp	r3, #2
 8007ee8:	d901      	bls.n	8007eee <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8007eea:	2303      	movs	r3, #3
 8007eec:	e173      	b.n	80081d6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007eee:	4b0b      	ldr	r3, [pc, #44]	; (8007f1c <HAL_RCC_OscConfig+0x274>)
 8007ef0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007ef2:	f003 0302 	and.w	r3, r3, #2
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d0f0      	beq.n	8007edc <HAL_RCC_OscConfig+0x234>
 8007efa:	e01b      	b.n	8007f34 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007efc:	4b09      	ldr	r3, [pc, #36]	; (8007f24 <HAL_RCC_OscConfig+0x27c>)
 8007efe:	2200      	movs	r2, #0
 8007f00:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007f02:	f7fd fdc1 	bl	8005a88 <HAL_GetTick>
 8007f06:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007f08:	e00e      	b.n	8007f28 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007f0a:	f7fd fdbd 	bl	8005a88 <HAL_GetTick>
 8007f0e:	4602      	mov	r2, r0
 8007f10:	693b      	ldr	r3, [r7, #16]
 8007f12:	1ad3      	subs	r3, r2, r3
 8007f14:	2b02      	cmp	r3, #2
 8007f16:	d907      	bls.n	8007f28 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8007f18:	2303      	movs	r3, #3
 8007f1a:	e15c      	b.n	80081d6 <HAL_RCC_OscConfig+0x52e>
 8007f1c:	40023800 	.word	0x40023800
 8007f20:	42470000 	.word	0x42470000
 8007f24:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007f28:	4b8a      	ldr	r3, [pc, #552]	; (8008154 <HAL_RCC_OscConfig+0x4ac>)
 8007f2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007f2c:	f003 0302 	and.w	r3, r3, #2
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d1ea      	bne.n	8007f0a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	f003 0304 	and.w	r3, r3, #4
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	f000 8097 	beq.w	8008070 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007f42:	2300      	movs	r3, #0
 8007f44:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007f46:	4b83      	ldr	r3, [pc, #524]	; (8008154 <HAL_RCC_OscConfig+0x4ac>)
 8007f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d10f      	bne.n	8007f72 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007f52:	2300      	movs	r3, #0
 8007f54:	60bb      	str	r3, [r7, #8]
 8007f56:	4b7f      	ldr	r3, [pc, #508]	; (8008154 <HAL_RCC_OscConfig+0x4ac>)
 8007f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f5a:	4a7e      	ldr	r2, [pc, #504]	; (8008154 <HAL_RCC_OscConfig+0x4ac>)
 8007f5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007f60:	6413      	str	r3, [r2, #64]	; 0x40
 8007f62:	4b7c      	ldr	r3, [pc, #496]	; (8008154 <HAL_RCC_OscConfig+0x4ac>)
 8007f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007f6a:	60bb      	str	r3, [r7, #8]
 8007f6c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007f6e:	2301      	movs	r3, #1
 8007f70:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007f72:	4b79      	ldr	r3, [pc, #484]	; (8008158 <HAL_RCC_OscConfig+0x4b0>)
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d118      	bne.n	8007fb0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007f7e:	4b76      	ldr	r3, [pc, #472]	; (8008158 <HAL_RCC_OscConfig+0x4b0>)
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	4a75      	ldr	r2, [pc, #468]	; (8008158 <HAL_RCC_OscConfig+0x4b0>)
 8007f84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007f88:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007f8a:	f7fd fd7d 	bl	8005a88 <HAL_GetTick>
 8007f8e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007f90:	e008      	b.n	8007fa4 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007f92:	f7fd fd79 	bl	8005a88 <HAL_GetTick>
 8007f96:	4602      	mov	r2, r0
 8007f98:	693b      	ldr	r3, [r7, #16]
 8007f9a:	1ad3      	subs	r3, r2, r3
 8007f9c:	2b02      	cmp	r3, #2
 8007f9e:	d901      	bls.n	8007fa4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8007fa0:	2303      	movs	r3, #3
 8007fa2:	e118      	b.n	80081d6 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007fa4:	4b6c      	ldr	r3, [pc, #432]	; (8008158 <HAL_RCC_OscConfig+0x4b0>)
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d0f0      	beq.n	8007f92 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	689b      	ldr	r3, [r3, #8]
 8007fb4:	2b01      	cmp	r3, #1
 8007fb6:	d106      	bne.n	8007fc6 <HAL_RCC_OscConfig+0x31e>
 8007fb8:	4b66      	ldr	r3, [pc, #408]	; (8008154 <HAL_RCC_OscConfig+0x4ac>)
 8007fba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fbc:	4a65      	ldr	r2, [pc, #404]	; (8008154 <HAL_RCC_OscConfig+0x4ac>)
 8007fbe:	f043 0301 	orr.w	r3, r3, #1
 8007fc2:	6713      	str	r3, [r2, #112]	; 0x70
 8007fc4:	e01c      	b.n	8008000 <HAL_RCC_OscConfig+0x358>
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	689b      	ldr	r3, [r3, #8]
 8007fca:	2b05      	cmp	r3, #5
 8007fcc:	d10c      	bne.n	8007fe8 <HAL_RCC_OscConfig+0x340>
 8007fce:	4b61      	ldr	r3, [pc, #388]	; (8008154 <HAL_RCC_OscConfig+0x4ac>)
 8007fd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fd2:	4a60      	ldr	r2, [pc, #384]	; (8008154 <HAL_RCC_OscConfig+0x4ac>)
 8007fd4:	f043 0304 	orr.w	r3, r3, #4
 8007fd8:	6713      	str	r3, [r2, #112]	; 0x70
 8007fda:	4b5e      	ldr	r3, [pc, #376]	; (8008154 <HAL_RCC_OscConfig+0x4ac>)
 8007fdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fde:	4a5d      	ldr	r2, [pc, #372]	; (8008154 <HAL_RCC_OscConfig+0x4ac>)
 8007fe0:	f043 0301 	orr.w	r3, r3, #1
 8007fe4:	6713      	str	r3, [r2, #112]	; 0x70
 8007fe6:	e00b      	b.n	8008000 <HAL_RCC_OscConfig+0x358>
 8007fe8:	4b5a      	ldr	r3, [pc, #360]	; (8008154 <HAL_RCC_OscConfig+0x4ac>)
 8007fea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fec:	4a59      	ldr	r2, [pc, #356]	; (8008154 <HAL_RCC_OscConfig+0x4ac>)
 8007fee:	f023 0301 	bic.w	r3, r3, #1
 8007ff2:	6713      	str	r3, [r2, #112]	; 0x70
 8007ff4:	4b57      	ldr	r3, [pc, #348]	; (8008154 <HAL_RCC_OscConfig+0x4ac>)
 8007ff6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ff8:	4a56      	ldr	r2, [pc, #344]	; (8008154 <HAL_RCC_OscConfig+0x4ac>)
 8007ffa:	f023 0304 	bic.w	r3, r3, #4
 8007ffe:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	689b      	ldr	r3, [r3, #8]
 8008004:	2b00      	cmp	r3, #0
 8008006:	d015      	beq.n	8008034 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008008:	f7fd fd3e 	bl	8005a88 <HAL_GetTick>
 800800c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800800e:	e00a      	b.n	8008026 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008010:	f7fd fd3a 	bl	8005a88 <HAL_GetTick>
 8008014:	4602      	mov	r2, r0
 8008016:	693b      	ldr	r3, [r7, #16]
 8008018:	1ad3      	subs	r3, r2, r3
 800801a:	f241 3288 	movw	r2, #5000	; 0x1388
 800801e:	4293      	cmp	r3, r2
 8008020:	d901      	bls.n	8008026 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8008022:	2303      	movs	r3, #3
 8008024:	e0d7      	b.n	80081d6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008026:	4b4b      	ldr	r3, [pc, #300]	; (8008154 <HAL_RCC_OscConfig+0x4ac>)
 8008028:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800802a:	f003 0302 	and.w	r3, r3, #2
 800802e:	2b00      	cmp	r3, #0
 8008030:	d0ee      	beq.n	8008010 <HAL_RCC_OscConfig+0x368>
 8008032:	e014      	b.n	800805e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008034:	f7fd fd28 	bl	8005a88 <HAL_GetTick>
 8008038:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800803a:	e00a      	b.n	8008052 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800803c:	f7fd fd24 	bl	8005a88 <HAL_GetTick>
 8008040:	4602      	mov	r2, r0
 8008042:	693b      	ldr	r3, [r7, #16]
 8008044:	1ad3      	subs	r3, r2, r3
 8008046:	f241 3288 	movw	r2, #5000	; 0x1388
 800804a:	4293      	cmp	r3, r2
 800804c:	d901      	bls.n	8008052 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800804e:	2303      	movs	r3, #3
 8008050:	e0c1      	b.n	80081d6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008052:	4b40      	ldr	r3, [pc, #256]	; (8008154 <HAL_RCC_OscConfig+0x4ac>)
 8008054:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008056:	f003 0302 	and.w	r3, r3, #2
 800805a:	2b00      	cmp	r3, #0
 800805c:	d1ee      	bne.n	800803c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800805e:	7dfb      	ldrb	r3, [r7, #23]
 8008060:	2b01      	cmp	r3, #1
 8008062:	d105      	bne.n	8008070 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008064:	4b3b      	ldr	r3, [pc, #236]	; (8008154 <HAL_RCC_OscConfig+0x4ac>)
 8008066:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008068:	4a3a      	ldr	r2, [pc, #232]	; (8008154 <HAL_RCC_OscConfig+0x4ac>)
 800806a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800806e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	699b      	ldr	r3, [r3, #24]
 8008074:	2b00      	cmp	r3, #0
 8008076:	f000 80ad 	beq.w	80081d4 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800807a:	4b36      	ldr	r3, [pc, #216]	; (8008154 <HAL_RCC_OscConfig+0x4ac>)
 800807c:	689b      	ldr	r3, [r3, #8]
 800807e:	f003 030c 	and.w	r3, r3, #12
 8008082:	2b08      	cmp	r3, #8
 8008084:	d060      	beq.n	8008148 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	699b      	ldr	r3, [r3, #24]
 800808a:	2b02      	cmp	r3, #2
 800808c:	d145      	bne.n	800811a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800808e:	4b33      	ldr	r3, [pc, #204]	; (800815c <HAL_RCC_OscConfig+0x4b4>)
 8008090:	2200      	movs	r2, #0
 8008092:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008094:	f7fd fcf8 	bl	8005a88 <HAL_GetTick>
 8008098:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800809a:	e008      	b.n	80080ae <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800809c:	f7fd fcf4 	bl	8005a88 <HAL_GetTick>
 80080a0:	4602      	mov	r2, r0
 80080a2:	693b      	ldr	r3, [r7, #16]
 80080a4:	1ad3      	subs	r3, r2, r3
 80080a6:	2b02      	cmp	r3, #2
 80080a8:	d901      	bls.n	80080ae <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80080aa:	2303      	movs	r3, #3
 80080ac:	e093      	b.n	80081d6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80080ae:	4b29      	ldr	r3, [pc, #164]	; (8008154 <HAL_RCC_OscConfig+0x4ac>)
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d1f0      	bne.n	800809c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	69da      	ldr	r2, [r3, #28]
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	6a1b      	ldr	r3, [r3, #32]
 80080c2:	431a      	orrs	r2, r3
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080c8:	019b      	lsls	r3, r3, #6
 80080ca:	431a      	orrs	r2, r3
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080d0:	085b      	lsrs	r3, r3, #1
 80080d2:	3b01      	subs	r3, #1
 80080d4:	041b      	lsls	r3, r3, #16
 80080d6:	431a      	orrs	r2, r3
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080dc:	061b      	lsls	r3, r3, #24
 80080de:	431a      	orrs	r2, r3
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080e4:	071b      	lsls	r3, r3, #28
 80080e6:	491b      	ldr	r1, [pc, #108]	; (8008154 <HAL_RCC_OscConfig+0x4ac>)
 80080e8:	4313      	orrs	r3, r2
 80080ea:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80080ec:	4b1b      	ldr	r3, [pc, #108]	; (800815c <HAL_RCC_OscConfig+0x4b4>)
 80080ee:	2201      	movs	r2, #1
 80080f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80080f2:	f7fd fcc9 	bl	8005a88 <HAL_GetTick>
 80080f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80080f8:	e008      	b.n	800810c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80080fa:	f7fd fcc5 	bl	8005a88 <HAL_GetTick>
 80080fe:	4602      	mov	r2, r0
 8008100:	693b      	ldr	r3, [r7, #16]
 8008102:	1ad3      	subs	r3, r2, r3
 8008104:	2b02      	cmp	r3, #2
 8008106:	d901      	bls.n	800810c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8008108:	2303      	movs	r3, #3
 800810a:	e064      	b.n	80081d6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800810c:	4b11      	ldr	r3, [pc, #68]	; (8008154 <HAL_RCC_OscConfig+0x4ac>)
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008114:	2b00      	cmp	r3, #0
 8008116:	d0f0      	beq.n	80080fa <HAL_RCC_OscConfig+0x452>
 8008118:	e05c      	b.n	80081d4 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800811a:	4b10      	ldr	r3, [pc, #64]	; (800815c <HAL_RCC_OscConfig+0x4b4>)
 800811c:	2200      	movs	r2, #0
 800811e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008120:	f7fd fcb2 	bl	8005a88 <HAL_GetTick>
 8008124:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008126:	e008      	b.n	800813a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008128:	f7fd fcae 	bl	8005a88 <HAL_GetTick>
 800812c:	4602      	mov	r2, r0
 800812e:	693b      	ldr	r3, [r7, #16]
 8008130:	1ad3      	subs	r3, r2, r3
 8008132:	2b02      	cmp	r3, #2
 8008134:	d901      	bls.n	800813a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8008136:	2303      	movs	r3, #3
 8008138:	e04d      	b.n	80081d6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800813a:	4b06      	ldr	r3, [pc, #24]	; (8008154 <HAL_RCC_OscConfig+0x4ac>)
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008142:	2b00      	cmp	r3, #0
 8008144:	d1f0      	bne.n	8008128 <HAL_RCC_OscConfig+0x480>
 8008146:	e045      	b.n	80081d4 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	699b      	ldr	r3, [r3, #24]
 800814c:	2b01      	cmp	r3, #1
 800814e:	d107      	bne.n	8008160 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8008150:	2301      	movs	r3, #1
 8008152:	e040      	b.n	80081d6 <HAL_RCC_OscConfig+0x52e>
 8008154:	40023800 	.word	0x40023800
 8008158:	40007000 	.word	0x40007000
 800815c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008160:	4b1f      	ldr	r3, [pc, #124]	; (80081e0 <HAL_RCC_OscConfig+0x538>)
 8008162:	685b      	ldr	r3, [r3, #4]
 8008164:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	699b      	ldr	r3, [r3, #24]
 800816a:	2b01      	cmp	r3, #1
 800816c:	d030      	beq.n	80081d0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008178:	429a      	cmp	r2, r3
 800817a:	d129      	bne.n	80081d0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008186:	429a      	cmp	r2, r3
 8008188:	d122      	bne.n	80081d0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800818a:	68fa      	ldr	r2, [r7, #12]
 800818c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8008190:	4013      	ands	r3, r2
 8008192:	687a      	ldr	r2, [r7, #4]
 8008194:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008196:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008198:	4293      	cmp	r3, r2
 800819a:	d119      	bne.n	80081d0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081a6:	085b      	lsrs	r3, r3, #1
 80081a8:	3b01      	subs	r3, #1
 80081aa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80081ac:	429a      	cmp	r2, r3
 80081ae:	d10f      	bne.n	80081d0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081ba:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80081bc:	429a      	cmp	r2, r3
 80081be:	d107      	bne.n	80081d0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081ca:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80081cc:	429a      	cmp	r2, r3
 80081ce:	d001      	beq.n	80081d4 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80081d0:	2301      	movs	r3, #1
 80081d2:	e000      	b.n	80081d6 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80081d4:	2300      	movs	r3, #0
}
 80081d6:	4618      	mov	r0, r3
 80081d8:	3718      	adds	r7, #24
 80081da:	46bd      	mov	sp, r7
 80081dc:	bd80      	pop	{r7, pc}
 80081de:	bf00      	nop
 80081e0:	40023800 	.word	0x40023800

080081e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80081e4:	b580      	push	{r7, lr}
 80081e6:	b082      	sub	sp, #8
 80081e8:	af00      	add	r7, sp, #0
 80081ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d101      	bne.n	80081f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80081f2:	2301      	movs	r3, #1
 80081f4:	e041      	b.n	800827a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80081fc:	b2db      	uxtb	r3, r3
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d106      	bne.n	8008210 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	2200      	movs	r2, #0
 8008206:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800820a:	6878      	ldr	r0, [r7, #4]
 800820c:	f000 f839 	bl	8008282 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	2202      	movs	r2, #2
 8008214:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	681a      	ldr	r2, [r3, #0]
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	3304      	adds	r3, #4
 8008220:	4619      	mov	r1, r3
 8008222:	4610      	mov	r0, r2
 8008224:	f000 fbb2 	bl	800898c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	2201      	movs	r2, #1
 800822c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	2201      	movs	r2, #1
 8008234:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	2201      	movs	r2, #1
 800823c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	2201      	movs	r2, #1
 8008244:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	2201      	movs	r2, #1
 800824c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	2201      	movs	r2, #1
 8008254:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	2201      	movs	r2, #1
 800825c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	2201      	movs	r2, #1
 8008264:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	2201      	movs	r2, #1
 800826c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	2201      	movs	r2, #1
 8008274:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008278:	2300      	movs	r3, #0
}
 800827a:	4618      	mov	r0, r3
 800827c:	3708      	adds	r7, #8
 800827e:	46bd      	mov	sp, r7
 8008280:	bd80      	pop	{r7, pc}

08008282 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8008282:	b480      	push	{r7}
 8008284:	b083      	sub	sp, #12
 8008286:	af00      	add	r7, sp, #0
 8008288:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800828a:	bf00      	nop
 800828c:	370c      	adds	r7, #12
 800828e:	46bd      	mov	sp, r7
 8008290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008294:	4770      	bx	lr
	...

08008298 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008298:	b480      	push	{r7}
 800829a:	b085      	sub	sp, #20
 800829c:	af00      	add	r7, sp, #0
 800829e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80082a6:	b2db      	uxtb	r3, r3
 80082a8:	2b01      	cmp	r3, #1
 80082aa:	d001      	beq.n	80082b0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80082ac:	2301      	movs	r3, #1
 80082ae:	e04e      	b.n	800834e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	2202      	movs	r2, #2
 80082b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	68da      	ldr	r2, [r3, #12]
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	f042 0201 	orr.w	r2, r2, #1
 80082c6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	4a23      	ldr	r2, [pc, #140]	; (800835c <HAL_TIM_Base_Start_IT+0xc4>)
 80082ce:	4293      	cmp	r3, r2
 80082d0:	d022      	beq.n	8008318 <HAL_TIM_Base_Start_IT+0x80>
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80082da:	d01d      	beq.n	8008318 <HAL_TIM_Base_Start_IT+0x80>
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	4a1f      	ldr	r2, [pc, #124]	; (8008360 <HAL_TIM_Base_Start_IT+0xc8>)
 80082e2:	4293      	cmp	r3, r2
 80082e4:	d018      	beq.n	8008318 <HAL_TIM_Base_Start_IT+0x80>
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	4a1e      	ldr	r2, [pc, #120]	; (8008364 <HAL_TIM_Base_Start_IT+0xcc>)
 80082ec:	4293      	cmp	r3, r2
 80082ee:	d013      	beq.n	8008318 <HAL_TIM_Base_Start_IT+0x80>
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	4a1c      	ldr	r2, [pc, #112]	; (8008368 <HAL_TIM_Base_Start_IT+0xd0>)
 80082f6:	4293      	cmp	r3, r2
 80082f8:	d00e      	beq.n	8008318 <HAL_TIM_Base_Start_IT+0x80>
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	4a1b      	ldr	r2, [pc, #108]	; (800836c <HAL_TIM_Base_Start_IT+0xd4>)
 8008300:	4293      	cmp	r3, r2
 8008302:	d009      	beq.n	8008318 <HAL_TIM_Base_Start_IT+0x80>
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	4a19      	ldr	r2, [pc, #100]	; (8008370 <HAL_TIM_Base_Start_IT+0xd8>)
 800830a:	4293      	cmp	r3, r2
 800830c:	d004      	beq.n	8008318 <HAL_TIM_Base_Start_IT+0x80>
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	4a18      	ldr	r2, [pc, #96]	; (8008374 <HAL_TIM_Base_Start_IT+0xdc>)
 8008314:	4293      	cmp	r3, r2
 8008316:	d111      	bne.n	800833c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	689b      	ldr	r3, [r3, #8]
 800831e:	f003 0307 	and.w	r3, r3, #7
 8008322:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	2b06      	cmp	r3, #6
 8008328:	d010      	beq.n	800834c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	681a      	ldr	r2, [r3, #0]
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	f042 0201 	orr.w	r2, r2, #1
 8008338:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800833a:	e007      	b.n	800834c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	681a      	ldr	r2, [r3, #0]
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	f042 0201 	orr.w	r2, r2, #1
 800834a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800834c:	2300      	movs	r3, #0
}
 800834e:	4618      	mov	r0, r3
 8008350:	3714      	adds	r7, #20
 8008352:	46bd      	mov	sp, r7
 8008354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008358:	4770      	bx	lr
 800835a:	bf00      	nop
 800835c:	40010000 	.word	0x40010000
 8008360:	40000400 	.word	0x40000400
 8008364:	40000800 	.word	0x40000800
 8008368:	40000c00 	.word	0x40000c00
 800836c:	40010400 	.word	0x40010400
 8008370:	40014000 	.word	0x40014000
 8008374:	40001800 	.word	0x40001800

08008378 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008378:	b580      	push	{r7, lr}
 800837a:	b082      	sub	sp, #8
 800837c:	af00      	add	r7, sp, #0
 800837e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	2b00      	cmp	r3, #0
 8008384:	d101      	bne.n	800838a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008386:	2301      	movs	r3, #1
 8008388:	e041      	b.n	800840e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008390:	b2db      	uxtb	r3, r3
 8008392:	2b00      	cmp	r3, #0
 8008394:	d106      	bne.n	80083a4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	2200      	movs	r2, #0
 800839a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800839e:	6878      	ldr	r0, [r7, #4]
 80083a0:	f7fc ffb6 	bl	8005310 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	2202      	movs	r2, #2
 80083a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681a      	ldr	r2, [r3, #0]
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	3304      	adds	r3, #4
 80083b4:	4619      	mov	r1, r3
 80083b6:	4610      	mov	r0, r2
 80083b8:	f000 fae8 	bl	800898c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	2201      	movs	r2, #1
 80083c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	2201      	movs	r2, #1
 80083c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	2201      	movs	r2, #1
 80083d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	2201      	movs	r2, #1
 80083d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	2201      	movs	r2, #1
 80083e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	2201      	movs	r2, #1
 80083e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	2201      	movs	r2, #1
 80083f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	2201      	movs	r2, #1
 80083f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	2201      	movs	r2, #1
 8008400:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	2201      	movs	r2, #1
 8008408:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800840c:	2300      	movs	r3, #0
}
 800840e:	4618      	mov	r0, r3
 8008410:	3708      	adds	r7, #8
 8008412:	46bd      	mov	sp, r7
 8008414:	bd80      	pop	{r7, pc}
	...

08008418 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008418:	b580      	push	{r7, lr}
 800841a:	b084      	sub	sp, #16
 800841c:	af00      	add	r7, sp, #0
 800841e:	6078      	str	r0, [r7, #4]
 8008420:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008422:	683b      	ldr	r3, [r7, #0]
 8008424:	2b00      	cmp	r3, #0
 8008426:	d109      	bne.n	800843c <HAL_TIM_PWM_Start+0x24>
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800842e:	b2db      	uxtb	r3, r3
 8008430:	2b01      	cmp	r3, #1
 8008432:	bf14      	ite	ne
 8008434:	2301      	movne	r3, #1
 8008436:	2300      	moveq	r3, #0
 8008438:	b2db      	uxtb	r3, r3
 800843a:	e022      	b.n	8008482 <HAL_TIM_PWM_Start+0x6a>
 800843c:	683b      	ldr	r3, [r7, #0]
 800843e:	2b04      	cmp	r3, #4
 8008440:	d109      	bne.n	8008456 <HAL_TIM_PWM_Start+0x3e>
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008448:	b2db      	uxtb	r3, r3
 800844a:	2b01      	cmp	r3, #1
 800844c:	bf14      	ite	ne
 800844e:	2301      	movne	r3, #1
 8008450:	2300      	moveq	r3, #0
 8008452:	b2db      	uxtb	r3, r3
 8008454:	e015      	b.n	8008482 <HAL_TIM_PWM_Start+0x6a>
 8008456:	683b      	ldr	r3, [r7, #0]
 8008458:	2b08      	cmp	r3, #8
 800845a:	d109      	bne.n	8008470 <HAL_TIM_PWM_Start+0x58>
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008462:	b2db      	uxtb	r3, r3
 8008464:	2b01      	cmp	r3, #1
 8008466:	bf14      	ite	ne
 8008468:	2301      	movne	r3, #1
 800846a:	2300      	moveq	r3, #0
 800846c:	b2db      	uxtb	r3, r3
 800846e:	e008      	b.n	8008482 <HAL_TIM_PWM_Start+0x6a>
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008476:	b2db      	uxtb	r3, r3
 8008478:	2b01      	cmp	r3, #1
 800847a:	bf14      	ite	ne
 800847c:	2301      	movne	r3, #1
 800847e:	2300      	moveq	r3, #0
 8008480:	b2db      	uxtb	r3, r3
 8008482:	2b00      	cmp	r3, #0
 8008484:	d001      	beq.n	800848a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8008486:	2301      	movs	r3, #1
 8008488:	e07c      	b.n	8008584 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800848a:	683b      	ldr	r3, [r7, #0]
 800848c:	2b00      	cmp	r3, #0
 800848e:	d104      	bne.n	800849a <HAL_TIM_PWM_Start+0x82>
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	2202      	movs	r2, #2
 8008494:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008498:	e013      	b.n	80084c2 <HAL_TIM_PWM_Start+0xaa>
 800849a:	683b      	ldr	r3, [r7, #0]
 800849c:	2b04      	cmp	r3, #4
 800849e:	d104      	bne.n	80084aa <HAL_TIM_PWM_Start+0x92>
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	2202      	movs	r2, #2
 80084a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80084a8:	e00b      	b.n	80084c2 <HAL_TIM_PWM_Start+0xaa>
 80084aa:	683b      	ldr	r3, [r7, #0]
 80084ac:	2b08      	cmp	r3, #8
 80084ae:	d104      	bne.n	80084ba <HAL_TIM_PWM_Start+0xa2>
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	2202      	movs	r2, #2
 80084b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80084b8:	e003      	b.n	80084c2 <HAL_TIM_PWM_Start+0xaa>
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	2202      	movs	r2, #2
 80084be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	2201      	movs	r2, #1
 80084c8:	6839      	ldr	r1, [r7, #0]
 80084ca:	4618      	mov	r0, r3
 80084cc:	f000 fcae 	bl	8008e2c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	4a2d      	ldr	r2, [pc, #180]	; (800858c <HAL_TIM_PWM_Start+0x174>)
 80084d6:	4293      	cmp	r3, r2
 80084d8:	d004      	beq.n	80084e4 <HAL_TIM_PWM_Start+0xcc>
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	4a2c      	ldr	r2, [pc, #176]	; (8008590 <HAL_TIM_PWM_Start+0x178>)
 80084e0:	4293      	cmp	r3, r2
 80084e2:	d101      	bne.n	80084e8 <HAL_TIM_PWM_Start+0xd0>
 80084e4:	2301      	movs	r3, #1
 80084e6:	e000      	b.n	80084ea <HAL_TIM_PWM_Start+0xd2>
 80084e8:	2300      	movs	r3, #0
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d007      	beq.n	80084fe <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80084fc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	4a22      	ldr	r2, [pc, #136]	; (800858c <HAL_TIM_PWM_Start+0x174>)
 8008504:	4293      	cmp	r3, r2
 8008506:	d022      	beq.n	800854e <HAL_TIM_PWM_Start+0x136>
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008510:	d01d      	beq.n	800854e <HAL_TIM_PWM_Start+0x136>
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	4a1f      	ldr	r2, [pc, #124]	; (8008594 <HAL_TIM_PWM_Start+0x17c>)
 8008518:	4293      	cmp	r3, r2
 800851a:	d018      	beq.n	800854e <HAL_TIM_PWM_Start+0x136>
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	4a1d      	ldr	r2, [pc, #116]	; (8008598 <HAL_TIM_PWM_Start+0x180>)
 8008522:	4293      	cmp	r3, r2
 8008524:	d013      	beq.n	800854e <HAL_TIM_PWM_Start+0x136>
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	4a1c      	ldr	r2, [pc, #112]	; (800859c <HAL_TIM_PWM_Start+0x184>)
 800852c:	4293      	cmp	r3, r2
 800852e:	d00e      	beq.n	800854e <HAL_TIM_PWM_Start+0x136>
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	4a16      	ldr	r2, [pc, #88]	; (8008590 <HAL_TIM_PWM_Start+0x178>)
 8008536:	4293      	cmp	r3, r2
 8008538:	d009      	beq.n	800854e <HAL_TIM_PWM_Start+0x136>
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	4a18      	ldr	r2, [pc, #96]	; (80085a0 <HAL_TIM_PWM_Start+0x188>)
 8008540:	4293      	cmp	r3, r2
 8008542:	d004      	beq.n	800854e <HAL_TIM_PWM_Start+0x136>
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	4a16      	ldr	r2, [pc, #88]	; (80085a4 <HAL_TIM_PWM_Start+0x18c>)
 800854a:	4293      	cmp	r3, r2
 800854c:	d111      	bne.n	8008572 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	689b      	ldr	r3, [r3, #8]
 8008554:	f003 0307 	and.w	r3, r3, #7
 8008558:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	2b06      	cmp	r3, #6
 800855e:	d010      	beq.n	8008582 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	681a      	ldr	r2, [r3, #0]
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	f042 0201 	orr.w	r2, r2, #1
 800856e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008570:	e007      	b.n	8008582 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	681a      	ldr	r2, [r3, #0]
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	f042 0201 	orr.w	r2, r2, #1
 8008580:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008582:	2300      	movs	r3, #0
}
 8008584:	4618      	mov	r0, r3
 8008586:	3710      	adds	r7, #16
 8008588:	46bd      	mov	sp, r7
 800858a:	bd80      	pop	{r7, pc}
 800858c:	40010000 	.word	0x40010000
 8008590:	40010400 	.word	0x40010400
 8008594:	40000400 	.word	0x40000400
 8008598:	40000800 	.word	0x40000800
 800859c:	40000c00 	.word	0x40000c00
 80085a0:	40014000 	.word	0x40014000
 80085a4:	40001800 	.word	0x40001800

080085a8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80085a8:	b580      	push	{r7, lr}
 80085aa:	b082      	sub	sp, #8
 80085ac:	af00      	add	r7, sp, #0
 80085ae:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	691b      	ldr	r3, [r3, #16]
 80085b6:	f003 0302 	and.w	r3, r3, #2
 80085ba:	2b02      	cmp	r3, #2
 80085bc:	d122      	bne.n	8008604 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	68db      	ldr	r3, [r3, #12]
 80085c4:	f003 0302 	and.w	r3, r3, #2
 80085c8:	2b02      	cmp	r3, #2
 80085ca:	d11b      	bne.n	8008604 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	f06f 0202 	mvn.w	r2, #2
 80085d4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	2201      	movs	r2, #1
 80085da:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	699b      	ldr	r3, [r3, #24]
 80085e2:	f003 0303 	and.w	r3, r3, #3
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d003      	beq.n	80085f2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80085ea:	6878      	ldr	r0, [r7, #4]
 80085ec:	f000 f9b0 	bl	8008950 <HAL_TIM_IC_CaptureCallback>
 80085f0:	e005      	b.n	80085fe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80085f2:	6878      	ldr	r0, [r7, #4]
 80085f4:	f000 f9a2 	bl	800893c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80085f8:	6878      	ldr	r0, [r7, #4]
 80085fa:	f000 f9b3 	bl	8008964 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	2200      	movs	r2, #0
 8008602:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	691b      	ldr	r3, [r3, #16]
 800860a:	f003 0304 	and.w	r3, r3, #4
 800860e:	2b04      	cmp	r3, #4
 8008610:	d122      	bne.n	8008658 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	68db      	ldr	r3, [r3, #12]
 8008618:	f003 0304 	and.w	r3, r3, #4
 800861c:	2b04      	cmp	r3, #4
 800861e:	d11b      	bne.n	8008658 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	f06f 0204 	mvn.w	r2, #4
 8008628:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	2202      	movs	r2, #2
 800862e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	699b      	ldr	r3, [r3, #24]
 8008636:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800863a:	2b00      	cmp	r3, #0
 800863c:	d003      	beq.n	8008646 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800863e:	6878      	ldr	r0, [r7, #4]
 8008640:	f000 f986 	bl	8008950 <HAL_TIM_IC_CaptureCallback>
 8008644:	e005      	b.n	8008652 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008646:	6878      	ldr	r0, [r7, #4]
 8008648:	f000 f978 	bl	800893c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800864c:	6878      	ldr	r0, [r7, #4]
 800864e:	f000 f989 	bl	8008964 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	2200      	movs	r2, #0
 8008656:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	691b      	ldr	r3, [r3, #16]
 800865e:	f003 0308 	and.w	r3, r3, #8
 8008662:	2b08      	cmp	r3, #8
 8008664:	d122      	bne.n	80086ac <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	68db      	ldr	r3, [r3, #12]
 800866c:	f003 0308 	and.w	r3, r3, #8
 8008670:	2b08      	cmp	r3, #8
 8008672:	d11b      	bne.n	80086ac <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	f06f 0208 	mvn.w	r2, #8
 800867c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	2204      	movs	r2, #4
 8008682:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	69db      	ldr	r3, [r3, #28]
 800868a:	f003 0303 	and.w	r3, r3, #3
 800868e:	2b00      	cmp	r3, #0
 8008690:	d003      	beq.n	800869a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008692:	6878      	ldr	r0, [r7, #4]
 8008694:	f000 f95c 	bl	8008950 <HAL_TIM_IC_CaptureCallback>
 8008698:	e005      	b.n	80086a6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800869a:	6878      	ldr	r0, [r7, #4]
 800869c:	f000 f94e 	bl	800893c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80086a0:	6878      	ldr	r0, [r7, #4]
 80086a2:	f000 f95f 	bl	8008964 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	2200      	movs	r2, #0
 80086aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	691b      	ldr	r3, [r3, #16]
 80086b2:	f003 0310 	and.w	r3, r3, #16
 80086b6:	2b10      	cmp	r3, #16
 80086b8:	d122      	bne.n	8008700 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	68db      	ldr	r3, [r3, #12]
 80086c0:	f003 0310 	and.w	r3, r3, #16
 80086c4:	2b10      	cmp	r3, #16
 80086c6:	d11b      	bne.n	8008700 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	f06f 0210 	mvn.w	r2, #16
 80086d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	2208      	movs	r2, #8
 80086d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	69db      	ldr	r3, [r3, #28]
 80086de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d003      	beq.n	80086ee <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80086e6:	6878      	ldr	r0, [r7, #4]
 80086e8:	f000 f932 	bl	8008950 <HAL_TIM_IC_CaptureCallback>
 80086ec:	e005      	b.n	80086fa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80086ee:	6878      	ldr	r0, [r7, #4]
 80086f0:	f000 f924 	bl	800893c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80086f4:	6878      	ldr	r0, [r7, #4]
 80086f6:	f000 f935 	bl	8008964 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	2200      	movs	r2, #0
 80086fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	691b      	ldr	r3, [r3, #16]
 8008706:	f003 0301 	and.w	r3, r3, #1
 800870a:	2b01      	cmp	r3, #1
 800870c:	d10e      	bne.n	800872c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	68db      	ldr	r3, [r3, #12]
 8008714:	f003 0301 	and.w	r3, r3, #1
 8008718:	2b01      	cmp	r3, #1
 800871a:	d107      	bne.n	800872c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	f06f 0201 	mvn.w	r2, #1
 8008724:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008726:	6878      	ldr	r0, [r7, #4]
 8008728:	f7fc fcc0 	bl	80050ac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	691b      	ldr	r3, [r3, #16]
 8008732:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008736:	2b80      	cmp	r3, #128	; 0x80
 8008738:	d10e      	bne.n	8008758 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	68db      	ldr	r3, [r3, #12]
 8008740:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008744:	2b80      	cmp	r3, #128	; 0x80
 8008746:	d107      	bne.n	8008758 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008750:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008752:	6878      	ldr	r0, [r7, #4]
 8008754:	f000 fc68 	bl	8009028 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	691b      	ldr	r3, [r3, #16]
 800875e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008762:	2b40      	cmp	r3, #64	; 0x40
 8008764:	d10e      	bne.n	8008784 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	68db      	ldr	r3, [r3, #12]
 800876c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008770:	2b40      	cmp	r3, #64	; 0x40
 8008772:	d107      	bne.n	8008784 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800877c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800877e:	6878      	ldr	r0, [r7, #4]
 8008780:	f000 f8fa 	bl	8008978 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	691b      	ldr	r3, [r3, #16]
 800878a:	f003 0320 	and.w	r3, r3, #32
 800878e:	2b20      	cmp	r3, #32
 8008790:	d10e      	bne.n	80087b0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	68db      	ldr	r3, [r3, #12]
 8008798:	f003 0320 	and.w	r3, r3, #32
 800879c:	2b20      	cmp	r3, #32
 800879e:	d107      	bne.n	80087b0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	f06f 0220 	mvn.w	r2, #32
 80087a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80087aa:	6878      	ldr	r0, [r7, #4]
 80087ac:	f000 fc32 	bl	8009014 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80087b0:	bf00      	nop
 80087b2:	3708      	adds	r7, #8
 80087b4:	46bd      	mov	sp, r7
 80087b6:	bd80      	pop	{r7, pc}

080087b8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80087b8:	b580      	push	{r7, lr}
 80087ba:	b086      	sub	sp, #24
 80087bc:	af00      	add	r7, sp, #0
 80087be:	60f8      	str	r0, [r7, #12]
 80087c0:	60b9      	str	r1, [r7, #8]
 80087c2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80087c4:	2300      	movs	r3, #0
 80087c6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80087ce:	2b01      	cmp	r3, #1
 80087d0:	d101      	bne.n	80087d6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80087d2:	2302      	movs	r3, #2
 80087d4:	e0ae      	b.n	8008934 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	2201      	movs	r2, #1
 80087da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	2b0c      	cmp	r3, #12
 80087e2:	f200 809f 	bhi.w	8008924 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80087e6:	a201      	add	r2, pc, #4	; (adr r2, 80087ec <HAL_TIM_PWM_ConfigChannel+0x34>)
 80087e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087ec:	08008821 	.word	0x08008821
 80087f0:	08008925 	.word	0x08008925
 80087f4:	08008925 	.word	0x08008925
 80087f8:	08008925 	.word	0x08008925
 80087fc:	08008861 	.word	0x08008861
 8008800:	08008925 	.word	0x08008925
 8008804:	08008925 	.word	0x08008925
 8008808:	08008925 	.word	0x08008925
 800880c:	080088a3 	.word	0x080088a3
 8008810:	08008925 	.word	0x08008925
 8008814:	08008925 	.word	0x08008925
 8008818:	08008925 	.word	0x08008925
 800881c:	080088e3 	.word	0x080088e3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	68b9      	ldr	r1, [r7, #8]
 8008826:	4618      	mov	r0, r3
 8008828:	f000 f950 	bl	8008acc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	699a      	ldr	r2, [r3, #24]
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	f042 0208 	orr.w	r2, r2, #8
 800883a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	699a      	ldr	r2, [r3, #24]
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	f022 0204 	bic.w	r2, r2, #4
 800884a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	6999      	ldr	r1, [r3, #24]
 8008852:	68bb      	ldr	r3, [r7, #8]
 8008854:	691a      	ldr	r2, [r3, #16]
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	430a      	orrs	r2, r1
 800885c:	619a      	str	r2, [r3, #24]
      break;
 800885e:	e064      	b.n	800892a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	68b9      	ldr	r1, [r7, #8]
 8008866:	4618      	mov	r0, r3
 8008868:	f000 f9a0 	bl	8008bac <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	699a      	ldr	r2, [r3, #24]
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800887a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	699a      	ldr	r2, [r3, #24]
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800888a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	6999      	ldr	r1, [r3, #24]
 8008892:	68bb      	ldr	r3, [r7, #8]
 8008894:	691b      	ldr	r3, [r3, #16]
 8008896:	021a      	lsls	r2, r3, #8
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	430a      	orrs	r2, r1
 800889e:	619a      	str	r2, [r3, #24]
      break;
 80088a0:	e043      	b.n	800892a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	68b9      	ldr	r1, [r7, #8]
 80088a8:	4618      	mov	r0, r3
 80088aa:	f000 f9f5 	bl	8008c98 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	69da      	ldr	r2, [r3, #28]
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	f042 0208 	orr.w	r2, r2, #8
 80088bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	69da      	ldr	r2, [r3, #28]
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	f022 0204 	bic.w	r2, r2, #4
 80088cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	69d9      	ldr	r1, [r3, #28]
 80088d4:	68bb      	ldr	r3, [r7, #8]
 80088d6:	691a      	ldr	r2, [r3, #16]
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	430a      	orrs	r2, r1
 80088de:	61da      	str	r2, [r3, #28]
      break;
 80088e0:	e023      	b.n	800892a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	68b9      	ldr	r1, [r7, #8]
 80088e8:	4618      	mov	r0, r3
 80088ea:	f000 fa49 	bl	8008d80 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	69da      	ldr	r2, [r3, #28]
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80088fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	69da      	ldr	r2, [r3, #28]
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800890c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	69d9      	ldr	r1, [r3, #28]
 8008914:	68bb      	ldr	r3, [r7, #8]
 8008916:	691b      	ldr	r3, [r3, #16]
 8008918:	021a      	lsls	r2, r3, #8
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	430a      	orrs	r2, r1
 8008920:	61da      	str	r2, [r3, #28]
      break;
 8008922:	e002      	b.n	800892a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8008924:	2301      	movs	r3, #1
 8008926:	75fb      	strb	r3, [r7, #23]
      break;
 8008928:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	2200      	movs	r2, #0
 800892e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008932:	7dfb      	ldrb	r3, [r7, #23]
}
 8008934:	4618      	mov	r0, r3
 8008936:	3718      	adds	r7, #24
 8008938:	46bd      	mov	sp, r7
 800893a:	bd80      	pop	{r7, pc}

0800893c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800893c:	b480      	push	{r7}
 800893e:	b083      	sub	sp, #12
 8008940:	af00      	add	r7, sp, #0
 8008942:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008944:	bf00      	nop
 8008946:	370c      	adds	r7, #12
 8008948:	46bd      	mov	sp, r7
 800894a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800894e:	4770      	bx	lr

08008950 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008950:	b480      	push	{r7}
 8008952:	b083      	sub	sp, #12
 8008954:	af00      	add	r7, sp, #0
 8008956:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008958:	bf00      	nop
 800895a:	370c      	adds	r7, #12
 800895c:	46bd      	mov	sp, r7
 800895e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008962:	4770      	bx	lr

08008964 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008964:	b480      	push	{r7}
 8008966:	b083      	sub	sp, #12
 8008968:	af00      	add	r7, sp, #0
 800896a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800896c:	bf00      	nop
 800896e:	370c      	adds	r7, #12
 8008970:	46bd      	mov	sp, r7
 8008972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008976:	4770      	bx	lr

08008978 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008978:	b480      	push	{r7}
 800897a:	b083      	sub	sp, #12
 800897c:	af00      	add	r7, sp, #0
 800897e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008980:	bf00      	nop
 8008982:	370c      	adds	r7, #12
 8008984:	46bd      	mov	sp, r7
 8008986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800898a:	4770      	bx	lr

0800898c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800898c:	b480      	push	{r7}
 800898e:	b085      	sub	sp, #20
 8008990:	af00      	add	r7, sp, #0
 8008992:	6078      	str	r0, [r7, #4]
 8008994:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	4a40      	ldr	r2, [pc, #256]	; (8008aa0 <TIM_Base_SetConfig+0x114>)
 80089a0:	4293      	cmp	r3, r2
 80089a2:	d013      	beq.n	80089cc <TIM_Base_SetConfig+0x40>
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80089aa:	d00f      	beq.n	80089cc <TIM_Base_SetConfig+0x40>
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	4a3d      	ldr	r2, [pc, #244]	; (8008aa4 <TIM_Base_SetConfig+0x118>)
 80089b0:	4293      	cmp	r3, r2
 80089b2:	d00b      	beq.n	80089cc <TIM_Base_SetConfig+0x40>
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	4a3c      	ldr	r2, [pc, #240]	; (8008aa8 <TIM_Base_SetConfig+0x11c>)
 80089b8:	4293      	cmp	r3, r2
 80089ba:	d007      	beq.n	80089cc <TIM_Base_SetConfig+0x40>
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	4a3b      	ldr	r2, [pc, #236]	; (8008aac <TIM_Base_SetConfig+0x120>)
 80089c0:	4293      	cmp	r3, r2
 80089c2:	d003      	beq.n	80089cc <TIM_Base_SetConfig+0x40>
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	4a3a      	ldr	r2, [pc, #232]	; (8008ab0 <TIM_Base_SetConfig+0x124>)
 80089c8:	4293      	cmp	r3, r2
 80089ca:	d108      	bne.n	80089de <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80089d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80089d4:	683b      	ldr	r3, [r7, #0]
 80089d6:	685b      	ldr	r3, [r3, #4]
 80089d8:	68fa      	ldr	r2, [r7, #12]
 80089da:	4313      	orrs	r3, r2
 80089dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	4a2f      	ldr	r2, [pc, #188]	; (8008aa0 <TIM_Base_SetConfig+0x114>)
 80089e2:	4293      	cmp	r3, r2
 80089e4:	d02b      	beq.n	8008a3e <TIM_Base_SetConfig+0xb2>
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80089ec:	d027      	beq.n	8008a3e <TIM_Base_SetConfig+0xb2>
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	4a2c      	ldr	r2, [pc, #176]	; (8008aa4 <TIM_Base_SetConfig+0x118>)
 80089f2:	4293      	cmp	r3, r2
 80089f4:	d023      	beq.n	8008a3e <TIM_Base_SetConfig+0xb2>
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	4a2b      	ldr	r2, [pc, #172]	; (8008aa8 <TIM_Base_SetConfig+0x11c>)
 80089fa:	4293      	cmp	r3, r2
 80089fc:	d01f      	beq.n	8008a3e <TIM_Base_SetConfig+0xb2>
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	4a2a      	ldr	r2, [pc, #168]	; (8008aac <TIM_Base_SetConfig+0x120>)
 8008a02:	4293      	cmp	r3, r2
 8008a04:	d01b      	beq.n	8008a3e <TIM_Base_SetConfig+0xb2>
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	4a29      	ldr	r2, [pc, #164]	; (8008ab0 <TIM_Base_SetConfig+0x124>)
 8008a0a:	4293      	cmp	r3, r2
 8008a0c:	d017      	beq.n	8008a3e <TIM_Base_SetConfig+0xb2>
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	4a28      	ldr	r2, [pc, #160]	; (8008ab4 <TIM_Base_SetConfig+0x128>)
 8008a12:	4293      	cmp	r3, r2
 8008a14:	d013      	beq.n	8008a3e <TIM_Base_SetConfig+0xb2>
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	4a27      	ldr	r2, [pc, #156]	; (8008ab8 <TIM_Base_SetConfig+0x12c>)
 8008a1a:	4293      	cmp	r3, r2
 8008a1c:	d00f      	beq.n	8008a3e <TIM_Base_SetConfig+0xb2>
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	4a26      	ldr	r2, [pc, #152]	; (8008abc <TIM_Base_SetConfig+0x130>)
 8008a22:	4293      	cmp	r3, r2
 8008a24:	d00b      	beq.n	8008a3e <TIM_Base_SetConfig+0xb2>
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	4a25      	ldr	r2, [pc, #148]	; (8008ac0 <TIM_Base_SetConfig+0x134>)
 8008a2a:	4293      	cmp	r3, r2
 8008a2c:	d007      	beq.n	8008a3e <TIM_Base_SetConfig+0xb2>
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	4a24      	ldr	r2, [pc, #144]	; (8008ac4 <TIM_Base_SetConfig+0x138>)
 8008a32:	4293      	cmp	r3, r2
 8008a34:	d003      	beq.n	8008a3e <TIM_Base_SetConfig+0xb2>
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	4a23      	ldr	r2, [pc, #140]	; (8008ac8 <TIM_Base_SetConfig+0x13c>)
 8008a3a:	4293      	cmp	r3, r2
 8008a3c:	d108      	bne.n	8008a50 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008a44:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008a46:	683b      	ldr	r3, [r7, #0]
 8008a48:	68db      	ldr	r3, [r3, #12]
 8008a4a:	68fa      	ldr	r2, [r7, #12]
 8008a4c:	4313      	orrs	r3, r2
 8008a4e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008a56:	683b      	ldr	r3, [r7, #0]
 8008a58:	695b      	ldr	r3, [r3, #20]
 8008a5a:	4313      	orrs	r3, r2
 8008a5c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	68fa      	ldr	r2, [r7, #12]
 8008a62:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008a64:	683b      	ldr	r3, [r7, #0]
 8008a66:	689a      	ldr	r2, [r3, #8]
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008a6c:	683b      	ldr	r3, [r7, #0]
 8008a6e:	681a      	ldr	r2, [r3, #0]
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	4a0a      	ldr	r2, [pc, #40]	; (8008aa0 <TIM_Base_SetConfig+0x114>)
 8008a78:	4293      	cmp	r3, r2
 8008a7a:	d003      	beq.n	8008a84 <TIM_Base_SetConfig+0xf8>
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	4a0c      	ldr	r2, [pc, #48]	; (8008ab0 <TIM_Base_SetConfig+0x124>)
 8008a80:	4293      	cmp	r3, r2
 8008a82:	d103      	bne.n	8008a8c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008a84:	683b      	ldr	r3, [r7, #0]
 8008a86:	691a      	ldr	r2, [r3, #16]
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	2201      	movs	r2, #1
 8008a90:	615a      	str	r2, [r3, #20]
}
 8008a92:	bf00      	nop
 8008a94:	3714      	adds	r7, #20
 8008a96:	46bd      	mov	sp, r7
 8008a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a9c:	4770      	bx	lr
 8008a9e:	bf00      	nop
 8008aa0:	40010000 	.word	0x40010000
 8008aa4:	40000400 	.word	0x40000400
 8008aa8:	40000800 	.word	0x40000800
 8008aac:	40000c00 	.word	0x40000c00
 8008ab0:	40010400 	.word	0x40010400
 8008ab4:	40014000 	.word	0x40014000
 8008ab8:	40014400 	.word	0x40014400
 8008abc:	40014800 	.word	0x40014800
 8008ac0:	40001800 	.word	0x40001800
 8008ac4:	40001c00 	.word	0x40001c00
 8008ac8:	40002000 	.word	0x40002000

08008acc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008acc:	b480      	push	{r7}
 8008ace:	b087      	sub	sp, #28
 8008ad0:	af00      	add	r7, sp, #0
 8008ad2:	6078      	str	r0, [r7, #4]
 8008ad4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	6a1b      	ldr	r3, [r3, #32]
 8008ada:	f023 0201 	bic.w	r2, r3, #1
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	6a1b      	ldr	r3, [r3, #32]
 8008ae6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	685b      	ldr	r3, [r3, #4]
 8008aec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	699b      	ldr	r3, [r3, #24]
 8008af2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008afa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	f023 0303 	bic.w	r3, r3, #3
 8008b02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008b04:	683b      	ldr	r3, [r7, #0]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	68fa      	ldr	r2, [r7, #12]
 8008b0a:	4313      	orrs	r3, r2
 8008b0c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008b0e:	697b      	ldr	r3, [r7, #20]
 8008b10:	f023 0302 	bic.w	r3, r3, #2
 8008b14:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008b16:	683b      	ldr	r3, [r7, #0]
 8008b18:	689b      	ldr	r3, [r3, #8]
 8008b1a:	697a      	ldr	r2, [r7, #20]
 8008b1c:	4313      	orrs	r3, r2
 8008b1e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	4a20      	ldr	r2, [pc, #128]	; (8008ba4 <TIM_OC1_SetConfig+0xd8>)
 8008b24:	4293      	cmp	r3, r2
 8008b26:	d003      	beq.n	8008b30 <TIM_OC1_SetConfig+0x64>
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	4a1f      	ldr	r2, [pc, #124]	; (8008ba8 <TIM_OC1_SetConfig+0xdc>)
 8008b2c:	4293      	cmp	r3, r2
 8008b2e:	d10c      	bne.n	8008b4a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008b30:	697b      	ldr	r3, [r7, #20]
 8008b32:	f023 0308 	bic.w	r3, r3, #8
 8008b36:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008b38:	683b      	ldr	r3, [r7, #0]
 8008b3a:	68db      	ldr	r3, [r3, #12]
 8008b3c:	697a      	ldr	r2, [r7, #20]
 8008b3e:	4313      	orrs	r3, r2
 8008b40:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008b42:	697b      	ldr	r3, [r7, #20]
 8008b44:	f023 0304 	bic.w	r3, r3, #4
 8008b48:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	4a15      	ldr	r2, [pc, #84]	; (8008ba4 <TIM_OC1_SetConfig+0xd8>)
 8008b4e:	4293      	cmp	r3, r2
 8008b50:	d003      	beq.n	8008b5a <TIM_OC1_SetConfig+0x8e>
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	4a14      	ldr	r2, [pc, #80]	; (8008ba8 <TIM_OC1_SetConfig+0xdc>)
 8008b56:	4293      	cmp	r3, r2
 8008b58:	d111      	bne.n	8008b7e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008b5a:	693b      	ldr	r3, [r7, #16]
 8008b5c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008b60:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008b62:	693b      	ldr	r3, [r7, #16]
 8008b64:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008b68:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008b6a:	683b      	ldr	r3, [r7, #0]
 8008b6c:	695b      	ldr	r3, [r3, #20]
 8008b6e:	693a      	ldr	r2, [r7, #16]
 8008b70:	4313      	orrs	r3, r2
 8008b72:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008b74:	683b      	ldr	r3, [r7, #0]
 8008b76:	699b      	ldr	r3, [r3, #24]
 8008b78:	693a      	ldr	r2, [r7, #16]
 8008b7a:	4313      	orrs	r3, r2
 8008b7c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	693a      	ldr	r2, [r7, #16]
 8008b82:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	68fa      	ldr	r2, [r7, #12]
 8008b88:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008b8a:	683b      	ldr	r3, [r7, #0]
 8008b8c:	685a      	ldr	r2, [r3, #4]
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	697a      	ldr	r2, [r7, #20]
 8008b96:	621a      	str	r2, [r3, #32]
}
 8008b98:	bf00      	nop
 8008b9a:	371c      	adds	r7, #28
 8008b9c:	46bd      	mov	sp, r7
 8008b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ba2:	4770      	bx	lr
 8008ba4:	40010000 	.word	0x40010000
 8008ba8:	40010400 	.word	0x40010400

08008bac <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008bac:	b480      	push	{r7}
 8008bae:	b087      	sub	sp, #28
 8008bb0:	af00      	add	r7, sp, #0
 8008bb2:	6078      	str	r0, [r7, #4]
 8008bb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	6a1b      	ldr	r3, [r3, #32]
 8008bba:	f023 0210 	bic.w	r2, r3, #16
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	6a1b      	ldr	r3, [r3, #32]
 8008bc6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	685b      	ldr	r3, [r3, #4]
 8008bcc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	699b      	ldr	r3, [r3, #24]
 8008bd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008bda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008be2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008be4:	683b      	ldr	r3, [r7, #0]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	021b      	lsls	r3, r3, #8
 8008bea:	68fa      	ldr	r2, [r7, #12]
 8008bec:	4313      	orrs	r3, r2
 8008bee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008bf0:	697b      	ldr	r3, [r7, #20]
 8008bf2:	f023 0320 	bic.w	r3, r3, #32
 8008bf6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008bf8:	683b      	ldr	r3, [r7, #0]
 8008bfa:	689b      	ldr	r3, [r3, #8]
 8008bfc:	011b      	lsls	r3, r3, #4
 8008bfe:	697a      	ldr	r2, [r7, #20]
 8008c00:	4313      	orrs	r3, r2
 8008c02:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	4a22      	ldr	r2, [pc, #136]	; (8008c90 <TIM_OC2_SetConfig+0xe4>)
 8008c08:	4293      	cmp	r3, r2
 8008c0a:	d003      	beq.n	8008c14 <TIM_OC2_SetConfig+0x68>
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	4a21      	ldr	r2, [pc, #132]	; (8008c94 <TIM_OC2_SetConfig+0xe8>)
 8008c10:	4293      	cmp	r3, r2
 8008c12:	d10d      	bne.n	8008c30 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008c14:	697b      	ldr	r3, [r7, #20]
 8008c16:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008c1a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008c1c:	683b      	ldr	r3, [r7, #0]
 8008c1e:	68db      	ldr	r3, [r3, #12]
 8008c20:	011b      	lsls	r3, r3, #4
 8008c22:	697a      	ldr	r2, [r7, #20]
 8008c24:	4313      	orrs	r3, r2
 8008c26:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008c28:	697b      	ldr	r3, [r7, #20]
 8008c2a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008c2e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	4a17      	ldr	r2, [pc, #92]	; (8008c90 <TIM_OC2_SetConfig+0xe4>)
 8008c34:	4293      	cmp	r3, r2
 8008c36:	d003      	beq.n	8008c40 <TIM_OC2_SetConfig+0x94>
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	4a16      	ldr	r2, [pc, #88]	; (8008c94 <TIM_OC2_SetConfig+0xe8>)
 8008c3c:	4293      	cmp	r3, r2
 8008c3e:	d113      	bne.n	8008c68 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008c40:	693b      	ldr	r3, [r7, #16]
 8008c42:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008c46:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008c48:	693b      	ldr	r3, [r7, #16]
 8008c4a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008c4e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008c50:	683b      	ldr	r3, [r7, #0]
 8008c52:	695b      	ldr	r3, [r3, #20]
 8008c54:	009b      	lsls	r3, r3, #2
 8008c56:	693a      	ldr	r2, [r7, #16]
 8008c58:	4313      	orrs	r3, r2
 8008c5a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008c5c:	683b      	ldr	r3, [r7, #0]
 8008c5e:	699b      	ldr	r3, [r3, #24]
 8008c60:	009b      	lsls	r3, r3, #2
 8008c62:	693a      	ldr	r2, [r7, #16]
 8008c64:	4313      	orrs	r3, r2
 8008c66:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	693a      	ldr	r2, [r7, #16]
 8008c6c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	68fa      	ldr	r2, [r7, #12]
 8008c72:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008c74:	683b      	ldr	r3, [r7, #0]
 8008c76:	685a      	ldr	r2, [r3, #4]
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	697a      	ldr	r2, [r7, #20]
 8008c80:	621a      	str	r2, [r3, #32]
}
 8008c82:	bf00      	nop
 8008c84:	371c      	adds	r7, #28
 8008c86:	46bd      	mov	sp, r7
 8008c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c8c:	4770      	bx	lr
 8008c8e:	bf00      	nop
 8008c90:	40010000 	.word	0x40010000
 8008c94:	40010400 	.word	0x40010400

08008c98 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008c98:	b480      	push	{r7}
 8008c9a:	b087      	sub	sp, #28
 8008c9c:	af00      	add	r7, sp, #0
 8008c9e:	6078      	str	r0, [r7, #4]
 8008ca0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	6a1b      	ldr	r3, [r3, #32]
 8008ca6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	6a1b      	ldr	r3, [r3, #32]
 8008cb2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	685b      	ldr	r3, [r3, #4]
 8008cb8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	69db      	ldr	r3, [r3, #28]
 8008cbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008cc6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	f023 0303 	bic.w	r3, r3, #3
 8008cce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008cd0:	683b      	ldr	r3, [r7, #0]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	68fa      	ldr	r2, [r7, #12]
 8008cd6:	4313      	orrs	r3, r2
 8008cd8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008cda:	697b      	ldr	r3, [r7, #20]
 8008cdc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008ce0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008ce2:	683b      	ldr	r3, [r7, #0]
 8008ce4:	689b      	ldr	r3, [r3, #8]
 8008ce6:	021b      	lsls	r3, r3, #8
 8008ce8:	697a      	ldr	r2, [r7, #20]
 8008cea:	4313      	orrs	r3, r2
 8008cec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	4a21      	ldr	r2, [pc, #132]	; (8008d78 <TIM_OC3_SetConfig+0xe0>)
 8008cf2:	4293      	cmp	r3, r2
 8008cf4:	d003      	beq.n	8008cfe <TIM_OC3_SetConfig+0x66>
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	4a20      	ldr	r2, [pc, #128]	; (8008d7c <TIM_OC3_SetConfig+0xe4>)
 8008cfa:	4293      	cmp	r3, r2
 8008cfc:	d10d      	bne.n	8008d1a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008cfe:	697b      	ldr	r3, [r7, #20]
 8008d00:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008d04:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008d06:	683b      	ldr	r3, [r7, #0]
 8008d08:	68db      	ldr	r3, [r3, #12]
 8008d0a:	021b      	lsls	r3, r3, #8
 8008d0c:	697a      	ldr	r2, [r7, #20]
 8008d0e:	4313      	orrs	r3, r2
 8008d10:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008d12:	697b      	ldr	r3, [r7, #20]
 8008d14:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008d18:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	4a16      	ldr	r2, [pc, #88]	; (8008d78 <TIM_OC3_SetConfig+0xe0>)
 8008d1e:	4293      	cmp	r3, r2
 8008d20:	d003      	beq.n	8008d2a <TIM_OC3_SetConfig+0x92>
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	4a15      	ldr	r2, [pc, #84]	; (8008d7c <TIM_OC3_SetConfig+0xe4>)
 8008d26:	4293      	cmp	r3, r2
 8008d28:	d113      	bne.n	8008d52 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008d2a:	693b      	ldr	r3, [r7, #16]
 8008d2c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008d30:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008d32:	693b      	ldr	r3, [r7, #16]
 8008d34:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008d38:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008d3a:	683b      	ldr	r3, [r7, #0]
 8008d3c:	695b      	ldr	r3, [r3, #20]
 8008d3e:	011b      	lsls	r3, r3, #4
 8008d40:	693a      	ldr	r2, [r7, #16]
 8008d42:	4313      	orrs	r3, r2
 8008d44:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008d46:	683b      	ldr	r3, [r7, #0]
 8008d48:	699b      	ldr	r3, [r3, #24]
 8008d4a:	011b      	lsls	r3, r3, #4
 8008d4c:	693a      	ldr	r2, [r7, #16]
 8008d4e:	4313      	orrs	r3, r2
 8008d50:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	693a      	ldr	r2, [r7, #16]
 8008d56:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	68fa      	ldr	r2, [r7, #12]
 8008d5c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008d5e:	683b      	ldr	r3, [r7, #0]
 8008d60:	685a      	ldr	r2, [r3, #4]
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	697a      	ldr	r2, [r7, #20]
 8008d6a:	621a      	str	r2, [r3, #32]
}
 8008d6c:	bf00      	nop
 8008d6e:	371c      	adds	r7, #28
 8008d70:	46bd      	mov	sp, r7
 8008d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d76:	4770      	bx	lr
 8008d78:	40010000 	.word	0x40010000
 8008d7c:	40010400 	.word	0x40010400

08008d80 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008d80:	b480      	push	{r7}
 8008d82:	b087      	sub	sp, #28
 8008d84:	af00      	add	r7, sp, #0
 8008d86:	6078      	str	r0, [r7, #4]
 8008d88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	6a1b      	ldr	r3, [r3, #32]
 8008d8e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	6a1b      	ldr	r3, [r3, #32]
 8008d9a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	685b      	ldr	r3, [r3, #4]
 8008da0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	69db      	ldr	r3, [r3, #28]
 8008da6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008dae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008db6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008db8:	683b      	ldr	r3, [r7, #0]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	021b      	lsls	r3, r3, #8
 8008dbe:	68fa      	ldr	r2, [r7, #12]
 8008dc0:	4313      	orrs	r3, r2
 8008dc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008dc4:	693b      	ldr	r3, [r7, #16]
 8008dc6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008dca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008dcc:	683b      	ldr	r3, [r7, #0]
 8008dce:	689b      	ldr	r3, [r3, #8]
 8008dd0:	031b      	lsls	r3, r3, #12
 8008dd2:	693a      	ldr	r2, [r7, #16]
 8008dd4:	4313      	orrs	r3, r2
 8008dd6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	4a12      	ldr	r2, [pc, #72]	; (8008e24 <TIM_OC4_SetConfig+0xa4>)
 8008ddc:	4293      	cmp	r3, r2
 8008dde:	d003      	beq.n	8008de8 <TIM_OC4_SetConfig+0x68>
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	4a11      	ldr	r2, [pc, #68]	; (8008e28 <TIM_OC4_SetConfig+0xa8>)
 8008de4:	4293      	cmp	r3, r2
 8008de6:	d109      	bne.n	8008dfc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008de8:	697b      	ldr	r3, [r7, #20]
 8008dea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008dee:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008df0:	683b      	ldr	r3, [r7, #0]
 8008df2:	695b      	ldr	r3, [r3, #20]
 8008df4:	019b      	lsls	r3, r3, #6
 8008df6:	697a      	ldr	r2, [r7, #20]
 8008df8:	4313      	orrs	r3, r2
 8008dfa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	697a      	ldr	r2, [r7, #20]
 8008e00:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	68fa      	ldr	r2, [r7, #12]
 8008e06:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008e08:	683b      	ldr	r3, [r7, #0]
 8008e0a:	685a      	ldr	r2, [r3, #4]
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	693a      	ldr	r2, [r7, #16]
 8008e14:	621a      	str	r2, [r3, #32]
}
 8008e16:	bf00      	nop
 8008e18:	371c      	adds	r7, #28
 8008e1a:	46bd      	mov	sp, r7
 8008e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e20:	4770      	bx	lr
 8008e22:	bf00      	nop
 8008e24:	40010000 	.word	0x40010000
 8008e28:	40010400 	.word	0x40010400

08008e2c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008e2c:	b480      	push	{r7}
 8008e2e:	b087      	sub	sp, #28
 8008e30:	af00      	add	r7, sp, #0
 8008e32:	60f8      	str	r0, [r7, #12]
 8008e34:	60b9      	str	r1, [r7, #8]
 8008e36:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008e38:	68bb      	ldr	r3, [r7, #8]
 8008e3a:	f003 031f 	and.w	r3, r3, #31
 8008e3e:	2201      	movs	r2, #1
 8008e40:	fa02 f303 	lsl.w	r3, r2, r3
 8008e44:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	6a1a      	ldr	r2, [r3, #32]
 8008e4a:	697b      	ldr	r3, [r7, #20]
 8008e4c:	43db      	mvns	r3, r3
 8008e4e:	401a      	ands	r2, r3
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	6a1a      	ldr	r2, [r3, #32]
 8008e58:	68bb      	ldr	r3, [r7, #8]
 8008e5a:	f003 031f 	and.w	r3, r3, #31
 8008e5e:	6879      	ldr	r1, [r7, #4]
 8008e60:	fa01 f303 	lsl.w	r3, r1, r3
 8008e64:	431a      	orrs	r2, r3
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	621a      	str	r2, [r3, #32]
}
 8008e6a:	bf00      	nop
 8008e6c:	371c      	adds	r7, #28
 8008e6e:	46bd      	mov	sp, r7
 8008e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e74:	4770      	bx	lr
	...

08008e78 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008e78:	b480      	push	{r7}
 8008e7a:	b085      	sub	sp, #20
 8008e7c:	af00      	add	r7, sp, #0
 8008e7e:	6078      	str	r0, [r7, #4]
 8008e80:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008e88:	2b01      	cmp	r3, #1
 8008e8a:	d101      	bne.n	8008e90 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008e8c:	2302      	movs	r3, #2
 8008e8e:	e05a      	b.n	8008f46 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	2201      	movs	r2, #1
 8008e94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	2202      	movs	r2, #2
 8008e9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	685b      	ldr	r3, [r3, #4]
 8008ea6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	689b      	ldr	r3, [r3, #8]
 8008eae:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008eb6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008eb8:	683b      	ldr	r3, [r7, #0]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	68fa      	ldr	r2, [r7, #12]
 8008ebe:	4313      	orrs	r3, r2
 8008ec0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	68fa      	ldr	r2, [r7, #12]
 8008ec8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	4a21      	ldr	r2, [pc, #132]	; (8008f54 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008ed0:	4293      	cmp	r3, r2
 8008ed2:	d022      	beq.n	8008f1a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008edc:	d01d      	beq.n	8008f1a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	4a1d      	ldr	r2, [pc, #116]	; (8008f58 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008ee4:	4293      	cmp	r3, r2
 8008ee6:	d018      	beq.n	8008f1a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	4a1b      	ldr	r2, [pc, #108]	; (8008f5c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8008eee:	4293      	cmp	r3, r2
 8008ef0:	d013      	beq.n	8008f1a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	4a1a      	ldr	r2, [pc, #104]	; (8008f60 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008ef8:	4293      	cmp	r3, r2
 8008efa:	d00e      	beq.n	8008f1a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	4a18      	ldr	r2, [pc, #96]	; (8008f64 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8008f02:	4293      	cmp	r3, r2
 8008f04:	d009      	beq.n	8008f1a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	4a17      	ldr	r2, [pc, #92]	; (8008f68 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008f0c:	4293      	cmp	r3, r2
 8008f0e:	d004      	beq.n	8008f1a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	4a15      	ldr	r2, [pc, #84]	; (8008f6c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008f16:	4293      	cmp	r3, r2
 8008f18:	d10c      	bne.n	8008f34 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008f1a:	68bb      	ldr	r3, [r7, #8]
 8008f1c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008f20:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008f22:	683b      	ldr	r3, [r7, #0]
 8008f24:	685b      	ldr	r3, [r3, #4]
 8008f26:	68ba      	ldr	r2, [r7, #8]
 8008f28:	4313      	orrs	r3, r2
 8008f2a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	68ba      	ldr	r2, [r7, #8]
 8008f32:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	2201      	movs	r2, #1
 8008f38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	2200      	movs	r2, #0
 8008f40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008f44:	2300      	movs	r3, #0
}
 8008f46:	4618      	mov	r0, r3
 8008f48:	3714      	adds	r7, #20
 8008f4a:	46bd      	mov	sp, r7
 8008f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f50:	4770      	bx	lr
 8008f52:	bf00      	nop
 8008f54:	40010000 	.word	0x40010000
 8008f58:	40000400 	.word	0x40000400
 8008f5c:	40000800 	.word	0x40000800
 8008f60:	40000c00 	.word	0x40000c00
 8008f64:	40010400 	.word	0x40010400
 8008f68:	40014000 	.word	0x40014000
 8008f6c:	40001800 	.word	0x40001800

08008f70 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008f70:	b480      	push	{r7}
 8008f72:	b085      	sub	sp, #20
 8008f74:	af00      	add	r7, sp, #0
 8008f76:	6078      	str	r0, [r7, #4]
 8008f78:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008f7a:	2300      	movs	r3, #0
 8008f7c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008f84:	2b01      	cmp	r3, #1
 8008f86:	d101      	bne.n	8008f8c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008f88:	2302      	movs	r3, #2
 8008f8a:	e03d      	b.n	8009008 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	2201      	movs	r2, #1
 8008f90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008f9a:	683b      	ldr	r3, [r7, #0]
 8008f9c:	68db      	ldr	r3, [r3, #12]
 8008f9e:	4313      	orrs	r3, r2
 8008fa0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008fa8:	683b      	ldr	r3, [r7, #0]
 8008faa:	689b      	ldr	r3, [r3, #8]
 8008fac:	4313      	orrs	r3, r2
 8008fae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8008fb6:	683b      	ldr	r3, [r7, #0]
 8008fb8:	685b      	ldr	r3, [r3, #4]
 8008fba:	4313      	orrs	r3, r2
 8008fbc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8008fc4:	683b      	ldr	r3, [r7, #0]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	4313      	orrs	r3, r2
 8008fca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008fd2:	683b      	ldr	r3, [r7, #0]
 8008fd4:	691b      	ldr	r3, [r3, #16]
 8008fd6:	4313      	orrs	r3, r2
 8008fd8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8008fe0:	683b      	ldr	r3, [r7, #0]
 8008fe2:	695b      	ldr	r3, [r3, #20]
 8008fe4:	4313      	orrs	r3, r2
 8008fe6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8008fee:	683b      	ldr	r3, [r7, #0]
 8008ff0:	69db      	ldr	r3, [r3, #28]
 8008ff2:	4313      	orrs	r3, r2
 8008ff4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	68fa      	ldr	r2, [r7, #12]
 8008ffc:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	2200      	movs	r2, #0
 8009002:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009006:	2300      	movs	r3, #0
}
 8009008:	4618      	mov	r0, r3
 800900a:	3714      	adds	r7, #20
 800900c:	46bd      	mov	sp, r7
 800900e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009012:	4770      	bx	lr

08009014 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009014:	b480      	push	{r7}
 8009016:	b083      	sub	sp, #12
 8009018:	af00      	add	r7, sp, #0
 800901a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800901c:	bf00      	nop
 800901e:	370c      	adds	r7, #12
 8009020:	46bd      	mov	sp, r7
 8009022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009026:	4770      	bx	lr

08009028 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009028:	b480      	push	{r7}
 800902a:	b083      	sub	sp, #12
 800902c:	af00      	add	r7, sp, #0
 800902e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009030:	bf00      	nop
 8009032:	370c      	adds	r7, #12
 8009034:	46bd      	mov	sp, r7
 8009036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800903a:	4770      	bx	lr

0800903c <std>:
 800903c:	2300      	movs	r3, #0
 800903e:	b510      	push	{r4, lr}
 8009040:	4604      	mov	r4, r0
 8009042:	e9c0 3300 	strd	r3, r3, [r0]
 8009046:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800904a:	6083      	str	r3, [r0, #8]
 800904c:	8181      	strh	r1, [r0, #12]
 800904e:	6643      	str	r3, [r0, #100]	; 0x64
 8009050:	81c2      	strh	r2, [r0, #14]
 8009052:	6183      	str	r3, [r0, #24]
 8009054:	4619      	mov	r1, r3
 8009056:	2208      	movs	r2, #8
 8009058:	305c      	adds	r0, #92	; 0x5c
 800905a:	f000 f9e5 	bl	8009428 <memset>
 800905e:	4b05      	ldr	r3, [pc, #20]	; (8009074 <std+0x38>)
 8009060:	6263      	str	r3, [r4, #36]	; 0x24
 8009062:	4b05      	ldr	r3, [pc, #20]	; (8009078 <std+0x3c>)
 8009064:	62a3      	str	r3, [r4, #40]	; 0x28
 8009066:	4b05      	ldr	r3, [pc, #20]	; (800907c <std+0x40>)
 8009068:	62e3      	str	r3, [r4, #44]	; 0x2c
 800906a:	4b05      	ldr	r3, [pc, #20]	; (8009080 <std+0x44>)
 800906c:	6224      	str	r4, [r4, #32]
 800906e:	6323      	str	r3, [r4, #48]	; 0x30
 8009070:	bd10      	pop	{r4, pc}
 8009072:	bf00      	nop
 8009074:	08009279 	.word	0x08009279
 8009078:	0800929b 	.word	0x0800929b
 800907c:	080092d3 	.word	0x080092d3
 8009080:	080092f7 	.word	0x080092f7

08009084 <stdio_exit_handler>:
 8009084:	4a02      	ldr	r2, [pc, #8]	; (8009090 <stdio_exit_handler+0xc>)
 8009086:	4903      	ldr	r1, [pc, #12]	; (8009094 <stdio_exit_handler+0x10>)
 8009088:	4803      	ldr	r0, [pc, #12]	; (8009098 <stdio_exit_handler+0x14>)
 800908a:	f000 b869 	b.w	8009160 <_fwalk_sglue>
 800908e:	bf00      	nop
 8009090:	20000014 	.word	0x20000014
 8009094:	08009ddd 	.word	0x08009ddd
 8009098:	20000020 	.word	0x20000020

0800909c <cleanup_stdio>:
 800909c:	6841      	ldr	r1, [r0, #4]
 800909e:	4b0c      	ldr	r3, [pc, #48]	; (80090d0 <cleanup_stdio+0x34>)
 80090a0:	4299      	cmp	r1, r3
 80090a2:	b510      	push	{r4, lr}
 80090a4:	4604      	mov	r4, r0
 80090a6:	d001      	beq.n	80090ac <cleanup_stdio+0x10>
 80090a8:	f000 fe98 	bl	8009ddc <_fflush_r>
 80090ac:	68a1      	ldr	r1, [r4, #8]
 80090ae:	4b09      	ldr	r3, [pc, #36]	; (80090d4 <cleanup_stdio+0x38>)
 80090b0:	4299      	cmp	r1, r3
 80090b2:	d002      	beq.n	80090ba <cleanup_stdio+0x1e>
 80090b4:	4620      	mov	r0, r4
 80090b6:	f000 fe91 	bl	8009ddc <_fflush_r>
 80090ba:	68e1      	ldr	r1, [r4, #12]
 80090bc:	4b06      	ldr	r3, [pc, #24]	; (80090d8 <cleanup_stdio+0x3c>)
 80090be:	4299      	cmp	r1, r3
 80090c0:	d004      	beq.n	80090cc <cleanup_stdio+0x30>
 80090c2:	4620      	mov	r0, r4
 80090c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80090c8:	f000 be88 	b.w	8009ddc <_fflush_r>
 80090cc:	bd10      	pop	{r4, pc}
 80090ce:	bf00      	nop
 80090d0:	20013170 	.word	0x20013170
 80090d4:	200131d8 	.word	0x200131d8
 80090d8:	20013240 	.word	0x20013240

080090dc <global_stdio_init.part.0>:
 80090dc:	b510      	push	{r4, lr}
 80090de:	4b0b      	ldr	r3, [pc, #44]	; (800910c <global_stdio_init.part.0+0x30>)
 80090e0:	4c0b      	ldr	r4, [pc, #44]	; (8009110 <global_stdio_init.part.0+0x34>)
 80090e2:	4a0c      	ldr	r2, [pc, #48]	; (8009114 <global_stdio_init.part.0+0x38>)
 80090e4:	601a      	str	r2, [r3, #0]
 80090e6:	4620      	mov	r0, r4
 80090e8:	2200      	movs	r2, #0
 80090ea:	2104      	movs	r1, #4
 80090ec:	f7ff ffa6 	bl	800903c <std>
 80090f0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80090f4:	2201      	movs	r2, #1
 80090f6:	2109      	movs	r1, #9
 80090f8:	f7ff ffa0 	bl	800903c <std>
 80090fc:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8009100:	2202      	movs	r2, #2
 8009102:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009106:	2112      	movs	r1, #18
 8009108:	f7ff bf98 	b.w	800903c <std>
 800910c:	200132a8 	.word	0x200132a8
 8009110:	20013170 	.word	0x20013170
 8009114:	08009085 	.word	0x08009085

08009118 <__sfp_lock_acquire>:
 8009118:	4801      	ldr	r0, [pc, #4]	; (8009120 <__sfp_lock_acquire+0x8>)
 800911a:	f000 b9fd 	b.w	8009518 <__retarget_lock_acquire_recursive>
 800911e:	bf00      	nop
 8009120:	200132b1 	.word	0x200132b1

08009124 <__sfp_lock_release>:
 8009124:	4801      	ldr	r0, [pc, #4]	; (800912c <__sfp_lock_release+0x8>)
 8009126:	f000 b9f8 	b.w	800951a <__retarget_lock_release_recursive>
 800912a:	bf00      	nop
 800912c:	200132b1 	.word	0x200132b1

08009130 <__sinit>:
 8009130:	b510      	push	{r4, lr}
 8009132:	4604      	mov	r4, r0
 8009134:	f7ff fff0 	bl	8009118 <__sfp_lock_acquire>
 8009138:	6a23      	ldr	r3, [r4, #32]
 800913a:	b11b      	cbz	r3, 8009144 <__sinit+0x14>
 800913c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009140:	f7ff bff0 	b.w	8009124 <__sfp_lock_release>
 8009144:	4b04      	ldr	r3, [pc, #16]	; (8009158 <__sinit+0x28>)
 8009146:	6223      	str	r3, [r4, #32]
 8009148:	4b04      	ldr	r3, [pc, #16]	; (800915c <__sinit+0x2c>)
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	2b00      	cmp	r3, #0
 800914e:	d1f5      	bne.n	800913c <__sinit+0xc>
 8009150:	f7ff ffc4 	bl	80090dc <global_stdio_init.part.0>
 8009154:	e7f2      	b.n	800913c <__sinit+0xc>
 8009156:	bf00      	nop
 8009158:	0800909d 	.word	0x0800909d
 800915c:	200132a8 	.word	0x200132a8

08009160 <_fwalk_sglue>:
 8009160:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009164:	4607      	mov	r7, r0
 8009166:	4688      	mov	r8, r1
 8009168:	4614      	mov	r4, r2
 800916a:	2600      	movs	r6, #0
 800916c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009170:	f1b9 0901 	subs.w	r9, r9, #1
 8009174:	d505      	bpl.n	8009182 <_fwalk_sglue+0x22>
 8009176:	6824      	ldr	r4, [r4, #0]
 8009178:	2c00      	cmp	r4, #0
 800917a:	d1f7      	bne.n	800916c <_fwalk_sglue+0xc>
 800917c:	4630      	mov	r0, r6
 800917e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009182:	89ab      	ldrh	r3, [r5, #12]
 8009184:	2b01      	cmp	r3, #1
 8009186:	d907      	bls.n	8009198 <_fwalk_sglue+0x38>
 8009188:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800918c:	3301      	adds	r3, #1
 800918e:	d003      	beq.n	8009198 <_fwalk_sglue+0x38>
 8009190:	4629      	mov	r1, r5
 8009192:	4638      	mov	r0, r7
 8009194:	47c0      	blx	r8
 8009196:	4306      	orrs	r6, r0
 8009198:	3568      	adds	r5, #104	; 0x68
 800919a:	e7e9      	b.n	8009170 <_fwalk_sglue+0x10>

0800919c <iprintf>:
 800919c:	b40f      	push	{r0, r1, r2, r3}
 800919e:	b507      	push	{r0, r1, r2, lr}
 80091a0:	4906      	ldr	r1, [pc, #24]	; (80091bc <iprintf+0x20>)
 80091a2:	ab04      	add	r3, sp, #16
 80091a4:	6808      	ldr	r0, [r1, #0]
 80091a6:	f853 2b04 	ldr.w	r2, [r3], #4
 80091aa:	6881      	ldr	r1, [r0, #8]
 80091ac:	9301      	str	r3, [sp, #4]
 80091ae:	f000 fae5 	bl	800977c <_vfiprintf_r>
 80091b2:	b003      	add	sp, #12
 80091b4:	f85d eb04 	ldr.w	lr, [sp], #4
 80091b8:	b004      	add	sp, #16
 80091ba:	4770      	bx	lr
 80091bc:	2000006c 	.word	0x2000006c

080091c0 <_puts_r>:
 80091c0:	6a03      	ldr	r3, [r0, #32]
 80091c2:	b570      	push	{r4, r5, r6, lr}
 80091c4:	6884      	ldr	r4, [r0, #8]
 80091c6:	4605      	mov	r5, r0
 80091c8:	460e      	mov	r6, r1
 80091ca:	b90b      	cbnz	r3, 80091d0 <_puts_r+0x10>
 80091cc:	f7ff ffb0 	bl	8009130 <__sinit>
 80091d0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80091d2:	07db      	lsls	r3, r3, #31
 80091d4:	d405      	bmi.n	80091e2 <_puts_r+0x22>
 80091d6:	89a3      	ldrh	r3, [r4, #12]
 80091d8:	0598      	lsls	r0, r3, #22
 80091da:	d402      	bmi.n	80091e2 <_puts_r+0x22>
 80091dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80091de:	f000 f99b 	bl	8009518 <__retarget_lock_acquire_recursive>
 80091e2:	89a3      	ldrh	r3, [r4, #12]
 80091e4:	0719      	lsls	r1, r3, #28
 80091e6:	d513      	bpl.n	8009210 <_puts_r+0x50>
 80091e8:	6923      	ldr	r3, [r4, #16]
 80091ea:	b18b      	cbz	r3, 8009210 <_puts_r+0x50>
 80091ec:	3e01      	subs	r6, #1
 80091ee:	68a3      	ldr	r3, [r4, #8]
 80091f0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80091f4:	3b01      	subs	r3, #1
 80091f6:	60a3      	str	r3, [r4, #8]
 80091f8:	b9e9      	cbnz	r1, 8009236 <_puts_r+0x76>
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	da2e      	bge.n	800925c <_puts_r+0x9c>
 80091fe:	4622      	mov	r2, r4
 8009200:	210a      	movs	r1, #10
 8009202:	4628      	mov	r0, r5
 8009204:	f000 f87b 	bl	80092fe <__swbuf_r>
 8009208:	3001      	adds	r0, #1
 800920a:	d007      	beq.n	800921c <_puts_r+0x5c>
 800920c:	250a      	movs	r5, #10
 800920e:	e007      	b.n	8009220 <_puts_r+0x60>
 8009210:	4621      	mov	r1, r4
 8009212:	4628      	mov	r0, r5
 8009214:	f000 f8b0 	bl	8009378 <__swsetup_r>
 8009218:	2800      	cmp	r0, #0
 800921a:	d0e7      	beq.n	80091ec <_puts_r+0x2c>
 800921c:	f04f 35ff 	mov.w	r5, #4294967295
 8009220:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009222:	07da      	lsls	r2, r3, #31
 8009224:	d405      	bmi.n	8009232 <_puts_r+0x72>
 8009226:	89a3      	ldrh	r3, [r4, #12]
 8009228:	059b      	lsls	r3, r3, #22
 800922a:	d402      	bmi.n	8009232 <_puts_r+0x72>
 800922c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800922e:	f000 f974 	bl	800951a <__retarget_lock_release_recursive>
 8009232:	4628      	mov	r0, r5
 8009234:	bd70      	pop	{r4, r5, r6, pc}
 8009236:	2b00      	cmp	r3, #0
 8009238:	da04      	bge.n	8009244 <_puts_r+0x84>
 800923a:	69a2      	ldr	r2, [r4, #24]
 800923c:	429a      	cmp	r2, r3
 800923e:	dc06      	bgt.n	800924e <_puts_r+0x8e>
 8009240:	290a      	cmp	r1, #10
 8009242:	d004      	beq.n	800924e <_puts_r+0x8e>
 8009244:	6823      	ldr	r3, [r4, #0]
 8009246:	1c5a      	adds	r2, r3, #1
 8009248:	6022      	str	r2, [r4, #0]
 800924a:	7019      	strb	r1, [r3, #0]
 800924c:	e7cf      	b.n	80091ee <_puts_r+0x2e>
 800924e:	4622      	mov	r2, r4
 8009250:	4628      	mov	r0, r5
 8009252:	f000 f854 	bl	80092fe <__swbuf_r>
 8009256:	3001      	adds	r0, #1
 8009258:	d1c9      	bne.n	80091ee <_puts_r+0x2e>
 800925a:	e7df      	b.n	800921c <_puts_r+0x5c>
 800925c:	6823      	ldr	r3, [r4, #0]
 800925e:	250a      	movs	r5, #10
 8009260:	1c5a      	adds	r2, r3, #1
 8009262:	6022      	str	r2, [r4, #0]
 8009264:	701d      	strb	r5, [r3, #0]
 8009266:	e7db      	b.n	8009220 <_puts_r+0x60>

08009268 <puts>:
 8009268:	4b02      	ldr	r3, [pc, #8]	; (8009274 <puts+0xc>)
 800926a:	4601      	mov	r1, r0
 800926c:	6818      	ldr	r0, [r3, #0]
 800926e:	f7ff bfa7 	b.w	80091c0 <_puts_r>
 8009272:	bf00      	nop
 8009274:	2000006c 	.word	0x2000006c

08009278 <__sread>:
 8009278:	b510      	push	{r4, lr}
 800927a:	460c      	mov	r4, r1
 800927c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009280:	f000 f8fc 	bl	800947c <_read_r>
 8009284:	2800      	cmp	r0, #0
 8009286:	bfab      	itete	ge
 8009288:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800928a:	89a3      	ldrhlt	r3, [r4, #12]
 800928c:	181b      	addge	r3, r3, r0
 800928e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009292:	bfac      	ite	ge
 8009294:	6563      	strge	r3, [r4, #84]	; 0x54
 8009296:	81a3      	strhlt	r3, [r4, #12]
 8009298:	bd10      	pop	{r4, pc}

0800929a <__swrite>:
 800929a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800929e:	461f      	mov	r7, r3
 80092a0:	898b      	ldrh	r3, [r1, #12]
 80092a2:	05db      	lsls	r3, r3, #23
 80092a4:	4605      	mov	r5, r0
 80092a6:	460c      	mov	r4, r1
 80092a8:	4616      	mov	r6, r2
 80092aa:	d505      	bpl.n	80092b8 <__swrite+0x1e>
 80092ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80092b0:	2302      	movs	r3, #2
 80092b2:	2200      	movs	r2, #0
 80092b4:	f000 f8d0 	bl	8009458 <_lseek_r>
 80092b8:	89a3      	ldrh	r3, [r4, #12]
 80092ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80092be:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80092c2:	81a3      	strh	r3, [r4, #12]
 80092c4:	4632      	mov	r2, r6
 80092c6:	463b      	mov	r3, r7
 80092c8:	4628      	mov	r0, r5
 80092ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80092ce:	f000 b8e7 	b.w	80094a0 <_write_r>

080092d2 <__sseek>:
 80092d2:	b510      	push	{r4, lr}
 80092d4:	460c      	mov	r4, r1
 80092d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80092da:	f000 f8bd 	bl	8009458 <_lseek_r>
 80092de:	1c43      	adds	r3, r0, #1
 80092e0:	89a3      	ldrh	r3, [r4, #12]
 80092e2:	bf15      	itete	ne
 80092e4:	6560      	strne	r0, [r4, #84]	; 0x54
 80092e6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80092ea:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80092ee:	81a3      	strheq	r3, [r4, #12]
 80092f0:	bf18      	it	ne
 80092f2:	81a3      	strhne	r3, [r4, #12]
 80092f4:	bd10      	pop	{r4, pc}

080092f6 <__sclose>:
 80092f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80092fa:	f000 b89d 	b.w	8009438 <_close_r>

080092fe <__swbuf_r>:
 80092fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009300:	460e      	mov	r6, r1
 8009302:	4614      	mov	r4, r2
 8009304:	4605      	mov	r5, r0
 8009306:	b118      	cbz	r0, 8009310 <__swbuf_r+0x12>
 8009308:	6a03      	ldr	r3, [r0, #32]
 800930a:	b90b      	cbnz	r3, 8009310 <__swbuf_r+0x12>
 800930c:	f7ff ff10 	bl	8009130 <__sinit>
 8009310:	69a3      	ldr	r3, [r4, #24]
 8009312:	60a3      	str	r3, [r4, #8]
 8009314:	89a3      	ldrh	r3, [r4, #12]
 8009316:	071a      	lsls	r2, r3, #28
 8009318:	d525      	bpl.n	8009366 <__swbuf_r+0x68>
 800931a:	6923      	ldr	r3, [r4, #16]
 800931c:	b31b      	cbz	r3, 8009366 <__swbuf_r+0x68>
 800931e:	6823      	ldr	r3, [r4, #0]
 8009320:	6922      	ldr	r2, [r4, #16]
 8009322:	1a98      	subs	r0, r3, r2
 8009324:	6963      	ldr	r3, [r4, #20]
 8009326:	b2f6      	uxtb	r6, r6
 8009328:	4283      	cmp	r3, r0
 800932a:	4637      	mov	r7, r6
 800932c:	dc04      	bgt.n	8009338 <__swbuf_r+0x3a>
 800932e:	4621      	mov	r1, r4
 8009330:	4628      	mov	r0, r5
 8009332:	f000 fd53 	bl	8009ddc <_fflush_r>
 8009336:	b9e0      	cbnz	r0, 8009372 <__swbuf_r+0x74>
 8009338:	68a3      	ldr	r3, [r4, #8]
 800933a:	3b01      	subs	r3, #1
 800933c:	60a3      	str	r3, [r4, #8]
 800933e:	6823      	ldr	r3, [r4, #0]
 8009340:	1c5a      	adds	r2, r3, #1
 8009342:	6022      	str	r2, [r4, #0]
 8009344:	701e      	strb	r6, [r3, #0]
 8009346:	6962      	ldr	r2, [r4, #20]
 8009348:	1c43      	adds	r3, r0, #1
 800934a:	429a      	cmp	r2, r3
 800934c:	d004      	beq.n	8009358 <__swbuf_r+0x5a>
 800934e:	89a3      	ldrh	r3, [r4, #12]
 8009350:	07db      	lsls	r3, r3, #31
 8009352:	d506      	bpl.n	8009362 <__swbuf_r+0x64>
 8009354:	2e0a      	cmp	r6, #10
 8009356:	d104      	bne.n	8009362 <__swbuf_r+0x64>
 8009358:	4621      	mov	r1, r4
 800935a:	4628      	mov	r0, r5
 800935c:	f000 fd3e 	bl	8009ddc <_fflush_r>
 8009360:	b938      	cbnz	r0, 8009372 <__swbuf_r+0x74>
 8009362:	4638      	mov	r0, r7
 8009364:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009366:	4621      	mov	r1, r4
 8009368:	4628      	mov	r0, r5
 800936a:	f000 f805 	bl	8009378 <__swsetup_r>
 800936e:	2800      	cmp	r0, #0
 8009370:	d0d5      	beq.n	800931e <__swbuf_r+0x20>
 8009372:	f04f 37ff 	mov.w	r7, #4294967295
 8009376:	e7f4      	b.n	8009362 <__swbuf_r+0x64>

08009378 <__swsetup_r>:
 8009378:	b538      	push	{r3, r4, r5, lr}
 800937a:	4b2a      	ldr	r3, [pc, #168]	; (8009424 <__swsetup_r+0xac>)
 800937c:	4605      	mov	r5, r0
 800937e:	6818      	ldr	r0, [r3, #0]
 8009380:	460c      	mov	r4, r1
 8009382:	b118      	cbz	r0, 800938c <__swsetup_r+0x14>
 8009384:	6a03      	ldr	r3, [r0, #32]
 8009386:	b90b      	cbnz	r3, 800938c <__swsetup_r+0x14>
 8009388:	f7ff fed2 	bl	8009130 <__sinit>
 800938c:	89a3      	ldrh	r3, [r4, #12]
 800938e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009392:	0718      	lsls	r0, r3, #28
 8009394:	d422      	bmi.n	80093dc <__swsetup_r+0x64>
 8009396:	06d9      	lsls	r1, r3, #27
 8009398:	d407      	bmi.n	80093aa <__swsetup_r+0x32>
 800939a:	2309      	movs	r3, #9
 800939c:	602b      	str	r3, [r5, #0]
 800939e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80093a2:	81a3      	strh	r3, [r4, #12]
 80093a4:	f04f 30ff 	mov.w	r0, #4294967295
 80093a8:	e034      	b.n	8009414 <__swsetup_r+0x9c>
 80093aa:	0758      	lsls	r0, r3, #29
 80093ac:	d512      	bpl.n	80093d4 <__swsetup_r+0x5c>
 80093ae:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80093b0:	b141      	cbz	r1, 80093c4 <__swsetup_r+0x4c>
 80093b2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80093b6:	4299      	cmp	r1, r3
 80093b8:	d002      	beq.n	80093c0 <__swsetup_r+0x48>
 80093ba:	4628      	mov	r0, r5
 80093bc:	f000 f8bc 	bl	8009538 <_free_r>
 80093c0:	2300      	movs	r3, #0
 80093c2:	6363      	str	r3, [r4, #52]	; 0x34
 80093c4:	89a3      	ldrh	r3, [r4, #12]
 80093c6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80093ca:	81a3      	strh	r3, [r4, #12]
 80093cc:	2300      	movs	r3, #0
 80093ce:	6063      	str	r3, [r4, #4]
 80093d0:	6923      	ldr	r3, [r4, #16]
 80093d2:	6023      	str	r3, [r4, #0]
 80093d4:	89a3      	ldrh	r3, [r4, #12]
 80093d6:	f043 0308 	orr.w	r3, r3, #8
 80093da:	81a3      	strh	r3, [r4, #12]
 80093dc:	6923      	ldr	r3, [r4, #16]
 80093de:	b94b      	cbnz	r3, 80093f4 <__swsetup_r+0x7c>
 80093e0:	89a3      	ldrh	r3, [r4, #12]
 80093e2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80093e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80093ea:	d003      	beq.n	80093f4 <__swsetup_r+0x7c>
 80093ec:	4621      	mov	r1, r4
 80093ee:	4628      	mov	r0, r5
 80093f0:	f000 fd42 	bl	8009e78 <__smakebuf_r>
 80093f4:	89a0      	ldrh	r0, [r4, #12]
 80093f6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80093fa:	f010 0301 	ands.w	r3, r0, #1
 80093fe:	d00a      	beq.n	8009416 <__swsetup_r+0x9e>
 8009400:	2300      	movs	r3, #0
 8009402:	60a3      	str	r3, [r4, #8]
 8009404:	6963      	ldr	r3, [r4, #20]
 8009406:	425b      	negs	r3, r3
 8009408:	61a3      	str	r3, [r4, #24]
 800940a:	6923      	ldr	r3, [r4, #16]
 800940c:	b943      	cbnz	r3, 8009420 <__swsetup_r+0xa8>
 800940e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009412:	d1c4      	bne.n	800939e <__swsetup_r+0x26>
 8009414:	bd38      	pop	{r3, r4, r5, pc}
 8009416:	0781      	lsls	r1, r0, #30
 8009418:	bf58      	it	pl
 800941a:	6963      	ldrpl	r3, [r4, #20]
 800941c:	60a3      	str	r3, [r4, #8]
 800941e:	e7f4      	b.n	800940a <__swsetup_r+0x92>
 8009420:	2000      	movs	r0, #0
 8009422:	e7f7      	b.n	8009414 <__swsetup_r+0x9c>
 8009424:	2000006c 	.word	0x2000006c

08009428 <memset>:
 8009428:	4402      	add	r2, r0
 800942a:	4603      	mov	r3, r0
 800942c:	4293      	cmp	r3, r2
 800942e:	d100      	bne.n	8009432 <memset+0xa>
 8009430:	4770      	bx	lr
 8009432:	f803 1b01 	strb.w	r1, [r3], #1
 8009436:	e7f9      	b.n	800942c <memset+0x4>

08009438 <_close_r>:
 8009438:	b538      	push	{r3, r4, r5, lr}
 800943a:	4d06      	ldr	r5, [pc, #24]	; (8009454 <_close_r+0x1c>)
 800943c:	2300      	movs	r3, #0
 800943e:	4604      	mov	r4, r0
 8009440:	4608      	mov	r0, r1
 8009442:	602b      	str	r3, [r5, #0]
 8009444:	f7fc fa43 	bl	80058ce <_close>
 8009448:	1c43      	adds	r3, r0, #1
 800944a:	d102      	bne.n	8009452 <_close_r+0x1a>
 800944c:	682b      	ldr	r3, [r5, #0]
 800944e:	b103      	cbz	r3, 8009452 <_close_r+0x1a>
 8009450:	6023      	str	r3, [r4, #0]
 8009452:	bd38      	pop	{r3, r4, r5, pc}
 8009454:	200132ac 	.word	0x200132ac

08009458 <_lseek_r>:
 8009458:	b538      	push	{r3, r4, r5, lr}
 800945a:	4d07      	ldr	r5, [pc, #28]	; (8009478 <_lseek_r+0x20>)
 800945c:	4604      	mov	r4, r0
 800945e:	4608      	mov	r0, r1
 8009460:	4611      	mov	r1, r2
 8009462:	2200      	movs	r2, #0
 8009464:	602a      	str	r2, [r5, #0]
 8009466:	461a      	mov	r2, r3
 8009468:	f7fc fa58 	bl	800591c <_lseek>
 800946c:	1c43      	adds	r3, r0, #1
 800946e:	d102      	bne.n	8009476 <_lseek_r+0x1e>
 8009470:	682b      	ldr	r3, [r5, #0]
 8009472:	b103      	cbz	r3, 8009476 <_lseek_r+0x1e>
 8009474:	6023      	str	r3, [r4, #0]
 8009476:	bd38      	pop	{r3, r4, r5, pc}
 8009478:	200132ac 	.word	0x200132ac

0800947c <_read_r>:
 800947c:	b538      	push	{r3, r4, r5, lr}
 800947e:	4d07      	ldr	r5, [pc, #28]	; (800949c <_read_r+0x20>)
 8009480:	4604      	mov	r4, r0
 8009482:	4608      	mov	r0, r1
 8009484:	4611      	mov	r1, r2
 8009486:	2200      	movs	r2, #0
 8009488:	602a      	str	r2, [r5, #0]
 800948a:	461a      	mov	r2, r3
 800948c:	f7fc f9e6 	bl	800585c <_read>
 8009490:	1c43      	adds	r3, r0, #1
 8009492:	d102      	bne.n	800949a <_read_r+0x1e>
 8009494:	682b      	ldr	r3, [r5, #0]
 8009496:	b103      	cbz	r3, 800949a <_read_r+0x1e>
 8009498:	6023      	str	r3, [r4, #0]
 800949a:	bd38      	pop	{r3, r4, r5, pc}
 800949c:	200132ac 	.word	0x200132ac

080094a0 <_write_r>:
 80094a0:	b538      	push	{r3, r4, r5, lr}
 80094a2:	4d07      	ldr	r5, [pc, #28]	; (80094c0 <_write_r+0x20>)
 80094a4:	4604      	mov	r4, r0
 80094a6:	4608      	mov	r0, r1
 80094a8:	4611      	mov	r1, r2
 80094aa:	2200      	movs	r2, #0
 80094ac:	602a      	str	r2, [r5, #0]
 80094ae:	461a      	mov	r2, r3
 80094b0:	f7fc f9f1 	bl	8005896 <_write>
 80094b4:	1c43      	adds	r3, r0, #1
 80094b6:	d102      	bne.n	80094be <_write_r+0x1e>
 80094b8:	682b      	ldr	r3, [r5, #0]
 80094ba:	b103      	cbz	r3, 80094be <_write_r+0x1e>
 80094bc:	6023      	str	r3, [r4, #0]
 80094be:	bd38      	pop	{r3, r4, r5, pc}
 80094c0:	200132ac 	.word	0x200132ac

080094c4 <__errno>:
 80094c4:	4b01      	ldr	r3, [pc, #4]	; (80094cc <__errno+0x8>)
 80094c6:	6818      	ldr	r0, [r3, #0]
 80094c8:	4770      	bx	lr
 80094ca:	bf00      	nop
 80094cc:	2000006c 	.word	0x2000006c

080094d0 <__libc_init_array>:
 80094d0:	b570      	push	{r4, r5, r6, lr}
 80094d2:	4d0d      	ldr	r5, [pc, #52]	; (8009508 <__libc_init_array+0x38>)
 80094d4:	4c0d      	ldr	r4, [pc, #52]	; (800950c <__libc_init_array+0x3c>)
 80094d6:	1b64      	subs	r4, r4, r5
 80094d8:	10a4      	asrs	r4, r4, #2
 80094da:	2600      	movs	r6, #0
 80094dc:	42a6      	cmp	r6, r4
 80094de:	d109      	bne.n	80094f4 <__libc_init_array+0x24>
 80094e0:	4d0b      	ldr	r5, [pc, #44]	; (8009510 <__libc_init_array+0x40>)
 80094e2:	4c0c      	ldr	r4, [pc, #48]	; (8009514 <__libc_init_array+0x44>)
 80094e4:	f000 fd36 	bl	8009f54 <_init>
 80094e8:	1b64      	subs	r4, r4, r5
 80094ea:	10a4      	asrs	r4, r4, #2
 80094ec:	2600      	movs	r6, #0
 80094ee:	42a6      	cmp	r6, r4
 80094f0:	d105      	bne.n	80094fe <__libc_init_array+0x2e>
 80094f2:	bd70      	pop	{r4, r5, r6, pc}
 80094f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80094f8:	4798      	blx	r3
 80094fa:	3601      	adds	r6, #1
 80094fc:	e7ee      	b.n	80094dc <__libc_init_array+0xc>
 80094fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8009502:	4798      	blx	r3
 8009504:	3601      	adds	r6, #1
 8009506:	e7f2      	b.n	80094ee <__libc_init_array+0x1e>
 8009508:	0800a0dc 	.word	0x0800a0dc
 800950c:	0800a0dc 	.word	0x0800a0dc
 8009510:	0800a0dc 	.word	0x0800a0dc
 8009514:	0800a0e0 	.word	0x0800a0e0

08009518 <__retarget_lock_acquire_recursive>:
 8009518:	4770      	bx	lr

0800951a <__retarget_lock_release_recursive>:
 800951a:	4770      	bx	lr

0800951c <memcpy>:
 800951c:	440a      	add	r2, r1
 800951e:	4291      	cmp	r1, r2
 8009520:	f100 33ff 	add.w	r3, r0, #4294967295
 8009524:	d100      	bne.n	8009528 <memcpy+0xc>
 8009526:	4770      	bx	lr
 8009528:	b510      	push	{r4, lr}
 800952a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800952e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009532:	4291      	cmp	r1, r2
 8009534:	d1f9      	bne.n	800952a <memcpy+0xe>
 8009536:	bd10      	pop	{r4, pc}

08009538 <_free_r>:
 8009538:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800953a:	2900      	cmp	r1, #0
 800953c:	d044      	beq.n	80095c8 <_free_r+0x90>
 800953e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009542:	9001      	str	r0, [sp, #4]
 8009544:	2b00      	cmp	r3, #0
 8009546:	f1a1 0404 	sub.w	r4, r1, #4
 800954a:	bfb8      	it	lt
 800954c:	18e4      	addlt	r4, r4, r3
 800954e:	f000 f8df 	bl	8009710 <__malloc_lock>
 8009552:	4a1e      	ldr	r2, [pc, #120]	; (80095cc <_free_r+0x94>)
 8009554:	9801      	ldr	r0, [sp, #4]
 8009556:	6813      	ldr	r3, [r2, #0]
 8009558:	b933      	cbnz	r3, 8009568 <_free_r+0x30>
 800955a:	6063      	str	r3, [r4, #4]
 800955c:	6014      	str	r4, [r2, #0]
 800955e:	b003      	add	sp, #12
 8009560:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009564:	f000 b8da 	b.w	800971c <__malloc_unlock>
 8009568:	42a3      	cmp	r3, r4
 800956a:	d908      	bls.n	800957e <_free_r+0x46>
 800956c:	6825      	ldr	r5, [r4, #0]
 800956e:	1961      	adds	r1, r4, r5
 8009570:	428b      	cmp	r3, r1
 8009572:	bf01      	itttt	eq
 8009574:	6819      	ldreq	r1, [r3, #0]
 8009576:	685b      	ldreq	r3, [r3, #4]
 8009578:	1949      	addeq	r1, r1, r5
 800957a:	6021      	streq	r1, [r4, #0]
 800957c:	e7ed      	b.n	800955a <_free_r+0x22>
 800957e:	461a      	mov	r2, r3
 8009580:	685b      	ldr	r3, [r3, #4]
 8009582:	b10b      	cbz	r3, 8009588 <_free_r+0x50>
 8009584:	42a3      	cmp	r3, r4
 8009586:	d9fa      	bls.n	800957e <_free_r+0x46>
 8009588:	6811      	ldr	r1, [r2, #0]
 800958a:	1855      	adds	r5, r2, r1
 800958c:	42a5      	cmp	r5, r4
 800958e:	d10b      	bne.n	80095a8 <_free_r+0x70>
 8009590:	6824      	ldr	r4, [r4, #0]
 8009592:	4421      	add	r1, r4
 8009594:	1854      	adds	r4, r2, r1
 8009596:	42a3      	cmp	r3, r4
 8009598:	6011      	str	r1, [r2, #0]
 800959a:	d1e0      	bne.n	800955e <_free_r+0x26>
 800959c:	681c      	ldr	r4, [r3, #0]
 800959e:	685b      	ldr	r3, [r3, #4]
 80095a0:	6053      	str	r3, [r2, #4]
 80095a2:	440c      	add	r4, r1
 80095a4:	6014      	str	r4, [r2, #0]
 80095a6:	e7da      	b.n	800955e <_free_r+0x26>
 80095a8:	d902      	bls.n	80095b0 <_free_r+0x78>
 80095aa:	230c      	movs	r3, #12
 80095ac:	6003      	str	r3, [r0, #0]
 80095ae:	e7d6      	b.n	800955e <_free_r+0x26>
 80095b0:	6825      	ldr	r5, [r4, #0]
 80095b2:	1961      	adds	r1, r4, r5
 80095b4:	428b      	cmp	r3, r1
 80095b6:	bf04      	itt	eq
 80095b8:	6819      	ldreq	r1, [r3, #0]
 80095ba:	685b      	ldreq	r3, [r3, #4]
 80095bc:	6063      	str	r3, [r4, #4]
 80095be:	bf04      	itt	eq
 80095c0:	1949      	addeq	r1, r1, r5
 80095c2:	6021      	streq	r1, [r4, #0]
 80095c4:	6054      	str	r4, [r2, #4]
 80095c6:	e7ca      	b.n	800955e <_free_r+0x26>
 80095c8:	b003      	add	sp, #12
 80095ca:	bd30      	pop	{r4, r5, pc}
 80095cc:	200132b4 	.word	0x200132b4

080095d0 <sbrk_aligned>:
 80095d0:	b570      	push	{r4, r5, r6, lr}
 80095d2:	4e0e      	ldr	r6, [pc, #56]	; (800960c <sbrk_aligned+0x3c>)
 80095d4:	460c      	mov	r4, r1
 80095d6:	6831      	ldr	r1, [r6, #0]
 80095d8:	4605      	mov	r5, r0
 80095da:	b911      	cbnz	r1, 80095e2 <sbrk_aligned+0x12>
 80095dc:	f000 fcaa 	bl	8009f34 <_sbrk_r>
 80095e0:	6030      	str	r0, [r6, #0]
 80095e2:	4621      	mov	r1, r4
 80095e4:	4628      	mov	r0, r5
 80095e6:	f000 fca5 	bl	8009f34 <_sbrk_r>
 80095ea:	1c43      	adds	r3, r0, #1
 80095ec:	d00a      	beq.n	8009604 <sbrk_aligned+0x34>
 80095ee:	1cc4      	adds	r4, r0, #3
 80095f0:	f024 0403 	bic.w	r4, r4, #3
 80095f4:	42a0      	cmp	r0, r4
 80095f6:	d007      	beq.n	8009608 <sbrk_aligned+0x38>
 80095f8:	1a21      	subs	r1, r4, r0
 80095fa:	4628      	mov	r0, r5
 80095fc:	f000 fc9a 	bl	8009f34 <_sbrk_r>
 8009600:	3001      	adds	r0, #1
 8009602:	d101      	bne.n	8009608 <sbrk_aligned+0x38>
 8009604:	f04f 34ff 	mov.w	r4, #4294967295
 8009608:	4620      	mov	r0, r4
 800960a:	bd70      	pop	{r4, r5, r6, pc}
 800960c:	200132b8 	.word	0x200132b8

08009610 <_malloc_r>:
 8009610:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009614:	1ccd      	adds	r5, r1, #3
 8009616:	f025 0503 	bic.w	r5, r5, #3
 800961a:	3508      	adds	r5, #8
 800961c:	2d0c      	cmp	r5, #12
 800961e:	bf38      	it	cc
 8009620:	250c      	movcc	r5, #12
 8009622:	2d00      	cmp	r5, #0
 8009624:	4607      	mov	r7, r0
 8009626:	db01      	blt.n	800962c <_malloc_r+0x1c>
 8009628:	42a9      	cmp	r1, r5
 800962a:	d905      	bls.n	8009638 <_malloc_r+0x28>
 800962c:	230c      	movs	r3, #12
 800962e:	603b      	str	r3, [r7, #0]
 8009630:	2600      	movs	r6, #0
 8009632:	4630      	mov	r0, r6
 8009634:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009638:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800970c <_malloc_r+0xfc>
 800963c:	f000 f868 	bl	8009710 <__malloc_lock>
 8009640:	f8d8 3000 	ldr.w	r3, [r8]
 8009644:	461c      	mov	r4, r3
 8009646:	bb5c      	cbnz	r4, 80096a0 <_malloc_r+0x90>
 8009648:	4629      	mov	r1, r5
 800964a:	4638      	mov	r0, r7
 800964c:	f7ff ffc0 	bl	80095d0 <sbrk_aligned>
 8009650:	1c43      	adds	r3, r0, #1
 8009652:	4604      	mov	r4, r0
 8009654:	d155      	bne.n	8009702 <_malloc_r+0xf2>
 8009656:	f8d8 4000 	ldr.w	r4, [r8]
 800965a:	4626      	mov	r6, r4
 800965c:	2e00      	cmp	r6, #0
 800965e:	d145      	bne.n	80096ec <_malloc_r+0xdc>
 8009660:	2c00      	cmp	r4, #0
 8009662:	d048      	beq.n	80096f6 <_malloc_r+0xe6>
 8009664:	6823      	ldr	r3, [r4, #0]
 8009666:	4631      	mov	r1, r6
 8009668:	4638      	mov	r0, r7
 800966a:	eb04 0903 	add.w	r9, r4, r3
 800966e:	f000 fc61 	bl	8009f34 <_sbrk_r>
 8009672:	4581      	cmp	r9, r0
 8009674:	d13f      	bne.n	80096f6 <_malloc_r+0xe6>
 8009676:	6821      	ldr	r1, [r4, #0]
 8009678:	1a6d      	subs	r5, r5, r1
 800967a:	4629      	mov	r1, r5
 800967c:	4638      	mov	r0, r7
 800967e:	f7ff ffa7 	bl	80095d0 <sbrk_aligned>
 8009682:	3001      	adds	r0, #1
 8009684:	d037      	beq.n	80096f6 <_malloc_r+0xe6>
 8009686:	6823      	ldr	r3, [r4, #0]
 8009688:	442b      	add	r3, r5
 800968a:	6023      	str	r3, [r4, #0]
 800968c:	f8d8 3000 	ldr.w	r3, [r8]
 8009690:	2b00      	cmp	r3, #0
 8009692:	d038      	beq.n	8009706 <_malloc_r+0xf6>
 8009694:	685a      	ldr	r2, [r3, #4]
 8009696:	42a2      	cmp	r2, r4
 8009698:	d12b      	bne.n	80096f2 <_malloc_r+0xe2>
 800969a:	2200      	movs	r2, #0
 800969c:	605a      	str	r2, [r3, #4]
 800969e:	e00f      	b.n	80096c0 <_malloc_r+0xb0>
 80096a0:	6822      	ldr	r2, [r4, #0]
 80096a2:	1b52      	subs	r2, r2, r5
 80096a4:	d41f      	bmi.n	80096e6 <_malloc_r+0xd6>
 80096a6:	2a0b      	cmp	r2, #11
 80096a8:	d917      	bls.n	80096da <_malloc_r+0xca>
 80096aa:	1961      	adds	r1, r4, r5
 80096ac:	42a3      	cmp	r3, r4
 80096ae:	6025      	str	r5, [r4, #0]
 80096b0:	bf18      	it	ne
 80096b2:	6059      	strne	r1, [r3, #4]
 80096b4:	6863      	ldr	r3, [r4, #4]
 80096b6:	bf08      	it	eq
 80096b8:	f8c8 1000 	streq.w	r1, [r8]
 80096bc:	5162      	str	r2, [r4, r5]
 80096be:	604b      	str	r3, [r1, #4]
 80096c0:	4638      	mov	r0, r7
 80096c2:	f104 060b 	add.w	r6, r4, #11
 80096c6:	f000 f829 	bl	800971c <__malloc_unlock>
 80096ca:	f026 0607 	bic.w	r6, r6, #7
 80096ce:	1d23      	adds	r3, r4, #4
 80096d0:	1af2      	subs	r2, r6, r3
 80096d2:	d0ae      	beq.n	8009632 <_malloc_r+0x22>
 80096d4:	1b9b      	subs	r3, r3, r6
 80096d6:	50a3      	str	r3, [r4, r2]
 80096d8:	e7ab      	b.n	8009632 <_malloc_r+0x22>
 80096da:	42a3      	cmp	r3, r4
 80096dc:	6862      	ldr	r2, [r4, #4]
 80096de:	d1dd      	bne.n	800969c <_malloc_r+0x8c>
 80096e0:	f8c8 2000 	str.w	r2, [r8]
 80096e4:	e7ec      	b.n	80096c0 <_malloc_r+0xb0>
 80096e6:	4623      	mov	r3, r4
 80096e8:	6864      	ldr	r4, [r4, #4]
 80096ea:	e7ac      	b.n	8009646 <_malloc_r+0x36>
 80096ec:	4634      	mov	r4, r6
 80096ee:	6876      	ldr	r6, [r6, #4]
 80096f0:	e7b4      	b.n	800965c <_malloc_r+0x4c>
 80096f2:	4613      	mov	r3, r2
 80096f4:	e7cc      	b.n	8009690 <_malloc_r+0x80>
 80096f6:	230c      	movs	r3, #12
 80096f8:	603b      	str	r3, [r7, #0]
 80096fa:	4638      	mov	r0, r7
 80096fc:	f000 f80e 	bl	800971c <__malloc_unlock>
 8009700:	e797      	b.n	8009632 <_malloc_r+0x22>
 8009702:	6025      	str	r5, [r4, #0]
 8009704:	e7dc      	b.n	80096c0 <_malloc_r+0xb0>
 8009706:	605b      	str	r3, [r3, #4]
 8009708:	deff      	udf	#255	; 0xff
 800970a:	bf00      	nop
 800970c:	200132b4 	.word	0x200132b4

08009710 <__malloc_lock>:
 8009710:	4801      	ldr	r0, [pc, #4]	; (8009718 <__malloc_lock+0x8>)
 8009712:	f7ff bf01 	b.w	8009518 <__retarget_lock_acquire_recursive>
 8009716:	bf00      	nop
 8009718:	200132b0 	.word	0x200132b0

0800971c <__malloc_unlock>:
 800971c:	4801      	ldr	r0, [pc, #4]	; (8009724 <__malloc_unlock+0x8>)
 800971e:	f7ff befc 	b.w	800951a <__retarget_lock_release_recursive>
 8009722:	bf00      	nop
 8009724:	200132b0 	.word	0x200132b0

08009728 <__sfputc_r>:
 8009728:	6893      	ldr	r3, [r2, #8]
 800972a:	3b01      	subs	r3, #1
 800972c:	2b00      	cmp	r3, #0
 800972e:	b410      	push	{r4}
 8009730:	6093      	str	r3, [r2, #8]
 8009732:	da08      	bge.n	8009746 <__sfputc_r+0x1e>
 8009734:	6994      	ldr	r4, [r2, #24]
 8009736:	42a3      	cmp	r3, r4
 8009738:	db01      	blt.n	800973e <__sfputc_r+0x16>
 800973a:	290a      	cmp	r1, #10
 800973c:	d103      	bne.n	8009746 <__sfputc_r+0x1e>
 800973e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009742:	f7ff bddc 	b.w	80092fe <__swbuf_r>
 8009746:	6813      	ldr	r3, [r2, #0]
 8009748:	1c58      	adds	r0, r3, #1
 800974a:	6010      	str	r0, [r2, #0]
 800974c:	7019      	strb	r1, [r3, #0]
 800974e:	4608      	mov	r0, r1
 8009750:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009754:	4770      	bx	lr

08009756 <__sfputs_r>:
 8009756:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009758:	4606      	mov	r6, r0
 800975a:	460f      	mov	r7, r1
 800975c:	4614      	mov	r4, r2
 800975e:	18d5      	adds	r5, r2, r3
 8009760:	42ac      	cmp	r4, r5
 8009762:	d101      	bne.n	8009768 <__sfputs_r+0x12>
 8009764:	2000      	movs	r0, #0
 8009766:	e007      	b.n	8009778 <__sfputs_r+0x22>
 8009768:	f814 1b01 	ldrb.w	r1, [r4], #1
 800976c:	463a      	mov	r2, r7
 800976e:	4630      	mov	r0, r6
 8009770:	f7ff ffda 	bl	8009728 <__sfputc_r>
 8009774:	1c43      	adds	r3, r0, #1
 8009776:	d1f3      	bne.n	8009760 <__sfputs_r+0xa>
 8009778:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800977c <_vfiprintf_r>:
 800977c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009780:	460d      	mov	r5, r1
 8009782:	b09d      	sub	sp, #116	; 0x74
 8009784:	4614      	mov	r4, r2
 8009786:	4698      	mov	r8, r3
 8009788:	4606      	mov	r6, r0
 800978a:	b118      	cbz	r0, 8009794 <_vfiprintf_r+0x18>
 800978c:	6a03      	ldr	r3, [r0, #32]
 800978e:	b90b      	cbnz	r3, 8009794 <_vfiprintf_r+0x18>
 8009790:	f7ff fcce 	bl	8009130 <__sinit>
 8009794:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009796:	07d9      	lsls	r1, r3, #31
 8009798:	d405      	bmi.n	80097a6 <_vfiprintf_r+0x2a>
 800979a:	89ab      	ldrh	r3, [r5, #12]
 800979c:	059a      	lsls	r2, r3, #22
 800979e:	d402      	bmi.n	80097a6 <_vfiprintf_r+0x2a>
 80097a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80097a2:	f7ff feb9 	bl	8009518 <__retarget_lock_acquire_recursive>
 80097a6:	89ab      	ldrh	r3, [r5, #12]
 80097a8:	071b      	lsls	r3, r3, #28
 80097aa:	d501      	bpl.n	80097b0 <_vfiprintf_r+0x34>
 80097ac:	692b      	ldr	r3, [r5, #16]
 80097ae:	b99b      	cbnz	r3, 80097d8 <_vfiprintf_r+0x5c>
 80097b0:	4629      	mov	r1, r5
 80097b2:	4630      	mov	r0, r6
 80097b4:	f7ff fde0 	bl	8009378 <__swsetup_r>
 80097b8:	b170      	cbz	r0, 80097d8 <_vfiprintf_r+0x5c>
 80097ba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80097bc:	07dc      	lsls	r4, r3, #31
 80097be:	d504      	bpl.n	80097ca <_vfiprintf_r+0x4e>
 80097c0:	f04f 30ff 	mov.w	r0, #4294967295
 80097c4:	b01d      	add	sp, #116	; 0x74
 80097c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097ca:	89ab      	ldrh	r3, [r5, #12]
 80097cc:	0598      	lsls	r0, r3, #22
 80097ce:	d4f7      	bmi.n	80097c0 <_vfiprintf_r+0x44>
 80097d0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80097d2:	f7ff fea2 	bl	800951a <__retarget_lock_release_recursive>
 80097d6:	e7f3      	b.n	80097c0 <_vfiprintf_r+0x44>
 80097d8:	2300      	movs	r3, #0
 80097da:	9309      	str	r3, [sp, #36]	; 0x24
 80097dc:	2320      	movs	r3, #32
 80097de:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80097e2:	f8cd 800c 	str.w	r8, [sp, #12]
 80097e6:	2330      	movs	r3, #48	; 0x30
 80097e8:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800999c <_vfiprintf_r+0x220>
 80097ec:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80097f0:	f04f 0901 	mov.w	r9, #1
 80097f4:	4623      	mov	r3, r4
 80097f6:	469a      	mov	sl, r3
 80097f8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80097fc:	b10a      	cbz	r2, 8009802 <_vfiprintf_r+0x86>
 80097fe:	2a25      	cmp	r2, #37	; 0x25
 8009800:	d1f9      	bne.n	80097f6 <_vfiprintf_r+0x7a>
 8009802:	ebba 0b04 	subs.w	fp, sl, r4
 8009806:	d00b      	beq.n	8009820 <_vfiprintf_r+0xa4>
 8009808:	465b      	mov	r3, fp
 800980a:	4622      	mov	r2, r4
 800980c:	4629      	mov	r1, r5
 800980e:	4630      	mov	r0, r6
 8009810:	f7ff ffa1 	bl	8009756 <__sfputs_r>
 8009814:	3001      	adds	r0, #1
 8009816:	f000 80a9 	beq.w	800996c <_vfiprintf_r+0x1f0>
 800981a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800981c:	445a      	add	r2, fp
 800981e:	9209      	str	r2, [sp, #36]	; 0x24
 8009820:	f89a 3000 	ldrb.w	r3, [sl]
 8009824:	2b00      	cmp	r3, #0
 8009826:	f000 80a1 	beq.w	800996c <_vfiprintf_r+0x1f0>
 800982a:	2300      	movs	r3, #0
 800982c:	f04f 32ff 	mov.w	r2, #4294967295
 8009830:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009834:	f10a 0a01 	add.w	sl, sl, #1
 8009838:	9304      	str	r3, [sp, #16]
 800983a:	9307      	str	r3, [sp, #28]
 800983c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009840:	931a      	str	r3, [sp, #104]	; 0x68
 8009842:	4654      	mov	r4, sl
 8009844:	2205      	movs	r2, #5
 8009846:	f814 1b01 	ldrb.w	r1, [r4], #1
 800984a:	4854      	ldr	r0, [pc, #336]	; (800999c <_vfiprintf_r+0x220>)
 800984c:	f7f6 fce0 	bl	8000210 <memchr>
 8009850:	9a04      	ldr	r2, [sp, #16]
 8009852:	b9d8      	cbnz	r0, 800988c <_vfiprintf_r+0x110>
 8009854:	06d1      	lsls	r1, r2, #27
 8009856:	bf44      	itt	mi
 8009858:	2320      	movmi	r3, #32
 800985a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800985e:	0713      	lsls	r3, r2, #28
 8009860:	bf44      	itt	mi
 8009862:	232b      	movmi	r3, #43	; 0x2b
 8009864:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009868:	f89a 3000 	ldrb.w	r3, [sl]
 800986c:	2b2a      	cmp	r3, #42	; 0x2a
 800986e:	d015      	beq.n	800989c <_vfiprintf_r+0x120>
 8009870:	9a07      	ldr	r2, [sp, #28]
 8009872:	4654      	mov	r4, sl
 8009874:	2000      	movs	r0, #0
 8009876:	f04f 0c0a 	mov.w	ip, #10
 800987a:	4621      	mov	r1, r4
 800987c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009880:	3b30      	subs	r3, #48	; 0x30
 8009882:	2b09      	cmp	r3, #9
 8009884:	d94d      	bls.n	8009922 <_vfiprintf_r+0x1a6>
 8009886:	b1b0      	cbz	r0, 80098b6 <_vfiprintf_r+0x13a>
 8009888:	9207      	str	r2, [sp, #28]
 800988a:	e014      	b.n	80098b6 <_vfiprintf_r+0x13a>
 800988c:	eba0 0308 	sub.w	r3, r0, r8
 8009890:	fa09 f303 	lsl.w	r3, r9, r3
 8009894:	4313      	orrs	r3, r2
 8009896:	9304      	str	r3, [sp, #16]
 8009898:	46a2      	mov	sl, r4
 800989a:	e7d2      	b.n	8009842 <_vfiprintf_r+0xc6>
 800989c:	9b03      	ldr	r3, [sp, #12]
 800989e:	1d19      	adds	r1, r3, #4
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	9103      	str	r1, [sp, #12]
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	bfbb      	ittet	lt
 80098a8:	425b      	neglt	r3, r3
 80098aa:	f042 0202 	orrlt.w	r2, r2, #2
 80098ae:	9307      	strge	r3, [sp, #28]
 80098b0:	9307      	strlt	r3, [sp, #28]
 80098b2:	bfb8      	it	lt
 80098b4:	9204      	strlt	r2, [sp, #16]
 80098b6:	7823      	ldrb	r3, [r4, #0]
 80098b8:	2b2e      	cmp	r3, #46	; 0x2e
 80098ba:	d10c      	bne.n	80098d6 <_vfiprintf_r+0x15a>
 80098bc:	7863      	ldrb	r3, [r4, #1]
 80098be:	2b2a      	cmp	r3, #42	; 0x2a
 80098c0:	d134      	bne.n	800992c <_vfiprintf_r+0x1b0>
 80098c2:	9b03      	ldr	r3, [sp, #12]
 80098c4:	1d1a      	adds	r2, r3, #4
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	9203      	str	r2, [sp, #12]
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	bfb8      	it	lt
 80098ce:	f04f 33ff 	movlt.w	r3, #4294967295
 80098d2:	3402      	adds	r4, #2
 80098d4:	9305      	str	r3, [sp, #20]
 80098d6:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80099ac <_vfiprintf_r+0x230>
 80098da:	7821      	ldrb	r1, [r4, #0]
 80098dc:	2203      	movs	r2, #3
 80098de:	4650      	mov	r0, sl
 80098e0:	f7f6 fc96 	bl	8000210 <memchr>
 80098e4:	b138      	cbz	r0, 80098f6 <_vfiprintf_r+0x17a>
 80098e6:	9b04      	ldr	r3, [sp, #16]
 80098e8:	eba0 000a 	sub.w	r0, r0, sl
 80098ec:	2240      	movs	r2, #64	; 0x40
 80098ee:	4082      	lsls	r2, r0
 80098f0:	4313      	orrs	r3, r2
 80098f2:	3401      	adds	r4, #1
 80098f4:	9304      	str	r3, [sp, #16]
 80098f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80098fa:	4829      	ldr	r0, [pc, #164]	; (80099a0 <_vfiprintf_r+0x224>)
 80098fc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009900:	2206      	movs	r2, #6
 8009902:	f7f6 fc85 	bl	8000210 <memchr>
 8009906:	2800      	cmp	r0, #0
 8009908:	d03f      	beq.n	800998a <_vfiprintf_r+0x20e>
 800990a:	4b26      	ldr	r3, [pc, #152]	; (80099a4 <_vfiprintf_r+0x228>)
 800990c:	bb1b      	cbnz	r3, 8009956 <_vfiprintf_r+0x1da>
 800990e:	9b03      	ldr	r3, [sp, #12]
 8009910:	3307      	adds	r3, #7
 8009912:	f023 0307 	bic.w	r3, r3, #7
 8009916:	3308      	adds	r3, #8
 8009918:	9303      	str	r3, [sp, #12]
 800991a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800991c:	443b      	add	r3, r7
 800991e:	9309      	str	r3, [sp, #36]	; 0x24
 8009920:	e768      	b.n	80097f4 <_vfiprintf_r+0x78>
 8009922:	fb0c 3202 	mla	r2, ip, r2, r3
 8009926:	460c      	mov	r4, r1
 8009928:	2001      	movs	r0, #1
 800992a:	e7a6      	b.n	800987a <_vfiprintf_r+0xfe>
 800992c:	2300      	movs	r3, #0
 800992e:	3401      	adds	r4, #1
 8009930:	9305      	str	r3, [sp, #20]
 8009932:	4619      	mov	r1, r3
 8009934:	f04f 0c0a 	mov.w	ip, #10
 8009938:	4620      	mov	r0, r4
 800993a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800993e:	3a30      	subs	r2, #48	; 0x30
 8009940:	2a09      	cmp	r2, #9
 8009942:	d903      	bls.n	800994c <_vfiprintf_r+0x1d0>
 8009944:	2b00      	cmp	r3, #0
 8009946:	d0c6      	beq.n	80098d6 <_vfiprintf_r+0x15a>
 8009948:	9105      	str	r1, [sp, #20]
 800994a:	e7c4      	b.n	80098d6 <_vfiprintf_r+0x15a>
 800994c:	fb0c 2101 	mla	r1, ip, r1, r2
 8009950:	4604      	mov	r4, r0
 8009952:	2301      	movs	r3, #1
 8009954:	e7f0      	b.n	8009938 <_vfiprintf_r+0x1bc>
 8009956:	ab03      	add	r3, sp, #12
 8009958:	9300      	str	r3, [sp, #0]
 800995a:	462a      	mov	r2, r5
 800995c:	4b12      	ldr	r3, [pc, #72]	; (80099a8 <_vfiprintf_r+0x22c>)
 800995e:	a904      	add	r1, sp, #16
 8009960:	4630      	mov	r0, r6
 8009962:	f3af 8000 	nop.w
 8009966:	4607      	mov	r7, r0
 8009968:	1c78      	adds	r0, r7, #1
 800996a:	d1d6      	bne.n	800991a <_vfiprintf_r+0x19e>
 800996c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800996e:	07d9      	lsls	r1, r3, #31
 8009970:	d405      	bmi.n	800997e <_vfiprintf_r+0x202>
 8009972:	89ab      	ldrh	r3, [r5, #12]
 8009974:	059a      	lsls	r2, r3, #22
 8009976:	d402      	bmi.n	800997e <_vfiprintf_r+0x202>
 8009978:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800997a:	f7ff fdce 	bl	800951a <__retarget_lock_release_recursive>
 800997e:	89ab      	ldrh	r3, [r5, #12]
 8009980:	065b      	lsls	r3, r3, #25
 8009982:	f53f af1d 	bmi.w	80097c0 <_vfiprintf_r+0x44>
 8009986:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009988:	e71c      	b.n	80097c4 <_vfiprintf_r+0x48>
 800998a:	ab03      	add	r3, sp, #12
 800998c:	9300      	str	r3, [sp, #0]
 800998e:	462a      	mov	r2, r5
 8009990:	4b05      	ldr	r3, [pc, #20]	; (80099a8 <_vfiprintf_r+0x22c>)
 8009992:	a904      	add	r1, sp, #16
 8009994:	4630      	mov	r0, r6
 8009996:	f000 f879 	bl	8009a8c <_printf_i>
 800999a:	e7e4      	b.n	8009966 <_vfiprintf_r+0x1ea>
 800999c:	0800a0a0 	.word	0x0800a0a0
 80099a0:	0800a0aa 	.word	0x0800a0aa
 80099a4:	00000000 	.word	0x00000000
 80099a8:	08009757 	.word	0x08009757
 80099ac:	0800a0a6 	.word	0x0800a0a6

080099b0 <_printf_common>:
 80099b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80099b4:	4616      	mov	r6, r2
 80099b6:	4699      	mov	r9, r3
 80099b8:	688a      	ldr	r2, [r1, #8]
 80099ba:	690b      	ldr	r3, [r1, #16]
 80099bc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80099c0:	4293      	cmp	r3, r2
 80099c2:	bfb8      	it	lt
 80099c4:	4613      	movlt	r3, r2
 80099c6:	6033      	str	r3, [r6, #0]
 80099c8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80099cc:	4607      	mov	r7, r0
 80099ce:	460c      	mov	r4, r1
 80099d0:	b10a      	cbz	r2, 80099d6 <_printf_common+0x26>
 80099d2:	3301      	adds	r3, #1
 80099d4:	6033      	str	r3, [r6, #0]
 80099d6:	6823      	ldr	r3, [r4, #0]
 80099d8:	0699      	lsls	r1, r3, #26
 80099da:	bf42      	ittt	mi
 80099dc:	6833      	ldrmi	r3, [r6, #0]
 80099de:	3302      	addmi	r3, #2
 80099e0:	6033      	strmi	r3, [r6, #0]
 80099e2:	6825      	ldr	r5, [r4, #0]
 80099e4:	f015 0506 	ands.w	r5, r5, #6
 80099e8:	d106      	bne.n	80099f8 <_printf_common+0x48>
 80099ea:	f104 0a19 	add.w	sl, r4, #25
 80099ee:	68e3      	ldr	r3, [r4, #12]
 80099f0:	6832      	ldr	r2, [r6, #0]
 80099f2:	1a9b      	subs	r3, r3, r2
 80099f4:	42ab      	cmp	r3, r5
 80099f6:	dc26      	bgt.n	8009a46 <_printf_common+0x96>
 80099f8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80099fc:	1e13      	subs	r3, r2, #0
 80099fe:	6822      	ldr	r2, [r4, #0]
 8009a00:	bf18      	it	ne
 8009a02:	2301      	movne	r3, #1
 8009a04:	0692      	lsls	r2, r2, #26
 8009a06:	d42b      	bmi.n	8009a60 <_printf_common+0xb0>
 8009a08:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009a0c:	4649      	mov	r1, r9
 8009a0e:	4638      	mov	r0, r7
 8009a10:	47c0      	blx	r8
 8009a12:	3001      	adds	r0, #1
 8009a14:	d01e      	beq.n	8009a54 <_printf_common+0xa4>
 8009a16:	6823      	ldr	r3, [r4, #0]
 8009a18:	6922      	ldr	r2, [r4, #16]
 8009a1a:	f003 0306 	and.w	r3, r3, #6
 8009a1e:	2b04      	cmp	r3, #4
 8009a20:	bf02      	ittt	eq
 8009a22:	68e5      	ldreq	r5, [r4, #12]
 8009a24:	6833      	ldreq	r3, [r6, #0]
 8009a26:	1aed      	subeq	r5, r5, r3
 8009a28:	68a3      	ldr	r3, [r4, #8]
 8009a2a:	bf0c      	ite	eq
 8009a2c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009a30:	2500      	movne	r5, #0
 8009a32:	4293      	cmp	r3, r2
 8009a34:	bfc4      	itt	gt
 8009a36:	1a9b      	subgt	r3, r3, r2
 8009a38:	18ed      	addgt	r5, r5, r3
 8009a3a:	2600      	movs	r6, #0
 8009a3c:	341a      	adds	r4, #26
 8009a3e:	42b5      	cmp	r5, r6
 8009a40:	d11a      	bne.n	8009a78 <_printf_common+0xc8>
 8009a42:	2000      	movs	r0, #0
 8009a44:	e008      	b.n	8009a58 <_printf_common+0xa8>
 8009a46:	2301      	movs	r3, #1
 8009a48:	4652      	mov	r2, sl
 8009a4a:	4649      	mov	r1, r9
 8009a4c:	4638      	mov	r0, r7
 8009a4e:	47c0      	blx	r8
 8009a50:	3001      	adds	r0, #1
 8009a52:	d103      	bne.n	8009a5c <_printf_common+0xac>
 8009a54:	f04f 30ff 	mov.w	r0, #4294967295
 8009a58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a5c:	3501      	adds	r5, #1
 8009a5e:	e7c6      	b.n	80099ee <_printf_common+0x3e>
 8009a60:	18e1      	adds	r1, r4, r3
 8009a62:	1c5a      	adds	r2, r3, #1
 8009a64:	2030      	movs	r0, #48	; 0x30
 8009a66:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009a6a:	4422      	add	r2, r4
 8009a6c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009a70:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009a74:	3302      	adds	r3, #2
 8009a76:	e7c7      	b.n	8009a08 <_printf_common+0x58>
 8009a78:	2301      	movs	r3, #1
 8009a7a:	4622      	mov	r2, r4
 8009a7c:	4649      	mov	r1, r9
 8009a7e:	4638      	mov	r0, r7
 8009a80:	47c0      	blx	r8
 8009a82:	3001      	adds	r0, #1
 8009a84:	d0e6      	beq.n	8009a54 <_printf_common+0xa4>
 8009a86:	3601      	adds	r6, #1
 8009a88:	e7d9      	b.n	8009a3e <_printf_common+0x8e>
	...

08009a8c <_printf_i>:
 8009a8c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009a90:	7e0f      	ldrb	r7, [r1, #24]
 8009a92:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009a94:	2f78      	cmp	r7, #120	; 0x78
 8009a96:	4691      	mov	r9, r2
 8009a98:	4680      	mov	r8, r0
 8009a9a:	460c      	mov	r4, r1
 8009a9c:	469a      	mov	sl, r3
 8009a9e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009aa2:	d807      	bhi.n	8009ab4 <_printf_i+0x28>
 8009aa4:	2f62      	cmp	r7, #98	; 0x62
 8009aa6:	d80a      	bhi.n	8009abe <_printf_i+0x32>
 8009aa8:	2f00      	cmp	r7, #0
 8009aaa:	f000 80d4 	beq.w	8009c56 <_printf_i+0x1ca>
 8009aae:	2f58      	cmp	r7, #88	; 0x58
 8009ab0:	f000 80c0 	beq.w	8009c34 <_printf_i+0x1a8>
 8009ab4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009ab8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009abc:	e03a      	b.n	8009b34 <_printf_i+0xa8>
 8009abe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009ac2:	2b15      	cmp	r3, #21
 8009ac4:	d8f6      	bhi.n	8009ab4 <_printf_i+0x28>
 8009ac6:	a101      	add	r1, pc, #4	; (adr r1, 8009acc <_printf_i+0x40>)
 8009ac8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009acc:	08009b25 	.word	0x08009b25
 8009ad0:	08009b39 	.word	0x08009b39
 8009ad4:	08009ab5 	.word	0x08009ab5
 8009ad8:	08009ab5 	.word	0x08009ab5
 8009adc:	08009ab5 	.word	0x08009ab5
 8009ae0:	08009ab5 	.word	0x08009ab5
 8009ae4:	08009b39 	.word	0x08009b39
 8009ae8:	08009ab5 	.word	0x08009ab5
 8009aec:	08009ab5 	.word	0x08009ab5
 8009af0:	08009ab5 	.word	0x08009ab5
 8009af4:	08009ab5 	.word	0x08009ab5
 8009af8:	08009c3d 	.word	0x08009c3d
 8009afc:	08009b65 	.word	0x08009b65
 8009b00:	08009bf7 	.word	0x08009bf7
 8009b04:	08009ab5 	.word	0x08009ab5
 8009b08:	08009ab5 	.word	0x08009ab5
 8009b0c:	08009c5f 	.word	0x08009c5f
 8009b10:	08009ab5 	.word	0x08009ab5
 8009b14:	08009b65 	.word	0x08009b65
 8009b18:	08009ab5 	.word	0x08009ab5
 8009b1c:	08009ab5 	.word	0x08009ab5
 8009b20:	08009bff 	.word	0x08009bff
 8009b24:	682b      	ldr	r3, [r5, #0]
 8009b26:	1d1a      	adds	r2, r3, #4
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	602a      	str	r2, [r5, #0]
 8009b2c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009b30:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009b34:	2301      	movs	r3, #1
 8009b36:	e09f      	b.n	8009c78 <_printf_i+0x1ec>
 8009b38:	6820      	ldr	r0, [r4, #0]
 8009b3a:	682b      	ldr	r3, [r5, #0]
 8009b3c:	0607      	lsls	r7, r0, #24
 8009b3e:	f103 0104 	add.w	r1, r3, #4
 8009b42:	6029      	str	r1, [r5, #0]
 8009b44:	d501      	bpl.n	8009b4a <_printf_i+0xbe>
 8009b46:	681e      	ldr	r6, [r3, #0]
 8009b48:	e003      	b.n	8009b52 <_printf_i+0xc6>
 8009b4a:	0646      	lsls	r6, r0, #25
 8009b4c:	d5fb      	bpl.n	8009b46 <_printf_i+0xba>
 8009b4e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8009b52:	2e00      	cmp	r6, #0
 8009b54:	da03      	bge.n	8009b5e <_printf_i+0xd2>
 8009b56:	232d      	movs	r3, #45	; 0x2d
 8009b58:	4276      	negs	r6, r6
 8009b5a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009b5e:	485a      	ldr	r0, [pc, #360]	; (8009cc8 <_printf_i+0x23c>)
 8009b60:	230a      	movs	r3, #10
 8009b62:	e012      	b.n	8009b8a <_printf_i+0xfe>
 8009b64:	682b      	ldr	r3, [r5, #0]
 8009b66:	6820      	ldr	r0, [r4, #0]
 8009b68:	1d19      	adds	r1, r3, #4
 8009b6a:	6029      	str	r1, [r5, #0]
 8009b6c:	0605      	lsls	r5, r0, #24
 8009b6e:	d501      	bpl.n	8009b74 <_printf_i+0xe8>
 8009b70:	681e      	ldr	r6, [r3, #0]
 8009b72:	e002      	b.n	8009b7a <_printf_i+0xee>
 8009b74:	0641      	lsls	r1, r0, #25
 8009b76:	d5fb      	bpl.n	8009b70 <_printf_i+0xe4>
 8009b78:	881e      	ldrh	r6, [r3, #0]
 8009b7a:	4853      	ldr	r0, [pc, #332]	; (8009cc8 <_printf_i+0x23c>)
 8009b7c:	2f6f      	cmp	r7, #111	; 0x6f
 8009b7e:	bf0c      	ite	eq
 8009b80:	2308      	moveq	r3, #8
 8009b82:	230a      	movne	r3, #10
 8009b84:	2100      	movs	r1, #0
 8009b86:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009b8a:	6865      	ldr	r5, [r4, #4]
 8009b8c:	60a5      	str	r5, [r4, #8]
 8009b8e:	2d00      	cmp	r5, #0
 8009b90:	bfa2      	ittt	ge
 8009b92:	6821      	ldrge	r1, [r4, #0]
 8009b94:	f021 0104 	bicge.w	r1, r1, #4
 8009b98:	6021      	strge	r1, [r4, #0]
 8009b9a:	b90e      	cbnz	r6, 8009ba0 <_printf_i+0x114>
 8009b9c:	2d00      	cmp	r5, #0
 8009b9e:	d04b      	beq.n	8009c38 <_printf_i+0x1ac>
 8009ba0:	4615      	mov	r5, r2
 8009ba2:	fbb6 f1f3 	udiv	r1, r6, r3
 8009ba6:	fb03 6711 	mls	r7, r3, r1, r6
 8009baa:	5dc7      	ldrb	r7, [r0, r7]
 8009bac:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009bb0:	4637      	mov	r7, r6
 8009bb2:	42bb      	cmp	r3, r7
 8009bb4:	460e      	mov	r6, r1
 8009bb6:	d9f4      	bls.n	8009ba2 <_printf_i+0x116>
 8009bb8:	2b08      	cmp	r3, #8
 8009bba:	d10b      	bne.n	8009bd4 <_printf_i+0x148>
 8009bbc:	6823      	ldr	r3, [r4, #0]
 8009bbe:	07de      	lsls	r6, r3, #31
 8009bc0:	d508      	bpl.n	8009bd4 <_printf_i+0x148>
 8009bc2:	6923      	ldr	r3, [r4, #16]
 8009bc4:	6861      	ldr	r1, [r4, #4]
 8009bc6:	4299      	cmp	r1, r3
 8009bc8:	bfde      	ittt	le
 8009bca:	2330      	movle	r3, #48	; 0x30
 8009bcc:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009bd0:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009bd4:	1b52      	subs	r2, r2, r5
 8009bd6:	6122      	str	r2, [r4, #16]
 8009bd8:	f8cd a000 	str.w	sl, [sp]
 8009bdc:	464b      	mov	r3, r9
 8009bde:	aa03      	add	r2, sp, #12
 8009be0:	4621      	mov	r1, r4
 8009be2:	4640      	mov	r0, r8
 8009be4:	f7ff fee4 	bl	80099b0 <_printf_common>
 8009be8:	3001      	adds	r0, #1
 8009bea:	d14a      	bne.n	8009c82 <_printf_i+0x1f6>
 8009bec:	f04f 30ff 	mov.w	r0, #4294967295
 8009bf0:	b004      	add	sp, #16
 8009bf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009bf6:	6823      	ldr	r3, [r4, #0]
 8009bf8:	f043 0320 	orr.w	r3, r3, #32
 8009bfc:	6023      	str	r3, [r4, #0]
 8009bfe:	4833      	ldr	r0, [pc, #204]	; (8009ccc <_printf_i+0x240>)
 8009c00:	2778      	movs	r7, #120	; 0x78
 8009c02:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009c06:	6823      	ldr	r3, [r4, #0]
 8009c08:	6829      	ldr	r1, [r5, #0]
 8009c0a:	061f      	lsls	r7, r3, #24
 8009c0c:	f851 6b04 	ldr.w	r6, [r1], #4
 8009c10:	d402      	bmi.n	8009c18 <_printf_i+0x18c>
 8009c12:	065f      	lsls	r7, r3, #25
 8009c14:	bf48      	it	mi
 8009c16:	b2b6      	uxthmi	r6, r6
 8009c18:	07df      	lsls	r7, r3, #31
 8009c1a:	bf48      	it	mi
 8009c1c:	f043 0320 	orrmi.w	r3, r3, #32
 8009c20:	6029      	str	r1, [r5, #0]
 8009c22:	bf48      	it	mi
 8009c24:	6023      	strmi	r3, [r4, #0]
 8009c26:	b91e      	cbnz	r6, 8009c30 <_printf_i+0x1a4>
 8009c28:	6823      	ldr	r3, [r4, #0]
 8009c2a:	f023 0320 	bic.w	r3, r3, #32
 8009c2e:	6023      	str	r3, [r4, #0]
 8009c30:	2310      	movs	r3, #16
 8009c32:	e7a7      	b.n	8009b84 <_printf_i+0xf8>
 8009c34:	4824      	ldr	r0, [pc, #144]	; (8009cc8 <_printf_i+0x23c>)
 8009c36:	e7e4      	b.n	8009c02 <_printf_i+0x176>
 8009c38:	4615      	mov	r5, r2
 8009c3a:	e7bd      	b.n	8009bb8 <_printf_i+0x12c>
 8009c3c:	682b      	ldr	r3, [r5, #0]
 8009c3e:	6826      	ldr	r6, [r4, #0]
 8009c40:	6961      	ldr	r1, [r4, #20]
 8009c42:	1d18      	adds	r0, r3, #4
 8009c44:	6028      	str	r0, [r5, #0]
 8009c46:	0635      	lsls	r5, r6, #24
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	d501      	bpl.n	8009c50 <_printf_i+0x1c4>
 8009c4c:	6019      	str	r1, [r3, #0]
 8009c4e:	e002      	b.n	8009c56 <_printf_i+0x1ca>
 8009c50:	0670      	lsls	r0, r6, #25
 8009c52:	d5fb      	bpl.n	8009c4c <_printf_i+0x1c0>
 8009c54:	8019      	strh	r1, [r3, #0]
 8009c56:	2300      	movs	r3, #0
 8009c58:	6123      	str	r3, [r4, #16]
 8009c5a:	4615      	mov	r5, r2
 8009c5c:	e7bc      	b.n	8009bd8 <_printf_i+0x14c>
 8009c5e:	682b      	ldr	r3, [r5, #0]
 8009c60:	1d1a      	adds	r2, r3, #4
 8009c62:	602a      	str	r2, [r5, #0]
 8009c64:	681d      	ldr	r5, [r3, #0]
 8009c66:	6862      	ldr	r2, [r4, #4]
 8009c68:	2100      	movs	r1, #0
 8009c6a:	4628      	mov	r0, r5
 8009c6c:	f7f6 fad0 	bl	8000210 <memchr>
 8009c70:	b108      	cbz	r0, 8009c76 <_printf_i+0x1ea>
 8009c72:	1b40      	subs	r0, r0, r5
 8009c74:	6060      	str	r0, [r4, #4]
 8009c76:	6863      	ldr	r3, [r4, #4]
 8009c78:	6123      	str	r3, [r4, #16]
 8009c7a:	2300      	movs	r3, #0
 8009c7c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009c80:	e7aa      	b.n	8009bd8 <_printf_i+0x14c>
 8009c82:	6923      	ldr	r3, [r4, #16]
 8009c84:	462a      	mov	r2, r5
 8009c86:	4649      	mov	r1, r9
 8009c88:	4640      	mov	r0, r8
 8009c8a:	47d0      	blx	sl
 8009c8c:	3001      	adds	r0, #1
 8009c8e:	d0ad      	beq.n	8009bec <_printf_i+0x160>
 8009c90:	6823      	ldr	r3, [r4, #0]
 8009c92:	079b      	lsls	r3, r3, #30
 8009c94:	d413      	bmi.n	8009cbe <_printf_i+0x232>
 8009c96:	68e0      	ldr	r0, [r4, #12]
 8009c98:	9b03      	ldr	r3, [sp, #12]
 8009c9a:	4298      	cmp	r0, r3
 8009c9c:	bfb8      	it	lt
 8009c9e:	4618      	movlt	r0, r3
 8009ca0:	e7a6      	b.n	8009bf0 <_printf_i+0x164>
 8009ca2:	2301      	movs	r3, #1
 8009ca4:	4632      	mov	r2, r6
 8009ca6:	4649      	mov	r1, r9
 8009ca8:	4640      	mov	r0, r8
 8009caa:	47d0      	blx	sl
 8009cac:	3001      	adds	r0, #1
 8009cae:	d09d      	beq.n	8009bec <_printf_i+0x160>
 8009cb0:	3501      	adds	r5, #1
 8009cb2:	68e3      	ldr	r3, [r4, #12]
 8009cb4:	9903      	ldr	r1, [sp, #12]
 8009cb6:	1a5b      	subs	r3, r3, r1
 8009cb8:	42ab      	cmp	r3, r5
 8009cba:	dcf2      	bgt.n	8009ca2 <_printf_i+0x216>
 8009cbc:	e7eb      	b.n	8009c96 <_printf_i+0x20a>
 8009cbe:	2500      	movs	r5, #0
 8009cc0:	f104 0619 	add.w	r6, r4, #25
 8009cc4:	e7f5      	b.n	8009cb2 <_printf_i+0x226>
 8009cc6:	bf00      	nop
 8009cc8:	0800a0b1 	.word	0x0800a0b1
 8009ccc:	0800a0c2 	.word	0x0800a0c2

08009cd0 <__sflush_r>:
 8009cd0:	898a      	ldrh	r2, [r1, #12]
 8009cd2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009cd6:	4605      	mov	r5, r0
 8009cd8:	0710      	lsls	r0, r2, #28
 8009cda:	460c      	mov	r4, r1
 8009cdc:	d458      	bmi.n	8009d90 <__sflush_r+0xc0>
 8009cde:	684b      	ldr	r3, [r1, #4]
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	dc05      	bgt.n	8009cf0 <__sflush_r+0x20>
 8009ce4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	dc02      	bgt.n	8009cf0 <__sflush_r+0x20>
 8009cea:	2000      	movs	r0, #0
 8009cec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009cf0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009cf2:	2e00      	cmp	r6, #0
 8009cf4:	d0f9      	beq.n	8009cea <__sflush_r+0x1a>
 8009cf6:	2300      	movs	r3, #0
 8009cf8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009cfc:	682f      	ldr	r7, [r5, #0]
 8009cfe:	6a21      	ldr	r1, [r4, #32]
 8009d00:	602b      	str	r3, [r5, #0]
 8009d02:	d032      	beq.n	8009d6a <__sflush_r+0x9a>
 8009d04:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009d06:	89a3      	ldrh	r3, [r4, #12]
 8009d08:	075a      	lsls	r2, r3, #29
 8009d0a:	d505      	bpl.n	8009d18 <__sflush_r+0x48>
 8009d0c:	6863      	ldr	r3, [r4, #4]
 8009d0e:	1ac0      	subs	r0, r0, r3
 8009d10:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009d12:	b10b      	cbz	r3, 8009d18 <__sflush_r+0x48>
 8009d14:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009d16:	1ac0      	subs	r0, r0, r3
 8009d18:	2300      	movs	r3, #0
 8009d1a:	4602      	mov	r2, r0
 8009d1c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009d1e:	6a21      	ldr	r1, [r4, #32]
 8009d20:	4628      	mov	r0, r5
 8009d22:	47b0      	blx	r6
 8009d24:	1c43      	adds	r3, r0, #1
 8009d26:	89a3      	ldrh	r3, [r4, #12]
 8009d28:	d106      	bne.n	8009d38 <__sflush_r+0x68>
 8009d2a:	6829      	ldr	r1, [r5, #0]
 8009d2c:	291d      	cmp	r1, #29
 8009d2e:	d82b      	bhi.n	8009d88 <__sflush_r+0xb8>
 8009d30:	4a29      	ldr	r2, [pc, #164]	; (8009dd8 <__sflush_r+0x108>)
 8009d32:	410a      	asrs	r2, r1
 8009d34:	07d6      	lsls	r6, r2, #31
 8009d36:	d427      	bmi.n	8009d88 <__sflush_r+0xb8>
 8009d38:	2200      	movs	r2, #0
 8009d3a:	6062      	str	r2, [r4, #4]
 8009d3c:	04d9      	lsls	r1, r3, #19
 8009d3e:	6922      	ldr	r2, [r4, #16]
 8009d40:	6022      	str	r2, [r4, #0]
 8009d42:	d504      	bpl.n	8009d4e <__sflush_r+0x7e>
 8009d44:	1c42      	adds	r2, r0, #1
 8009d46:	d101      	bne.n	8009d4c <__sflush_r+0x7c>
 8009d48:	682b      	ldr	r3, [r5, #0]
 8009d4a:	b903      	cbnz	r3, 8009d4e <__sflush_r+0x7e>
 8009d4c:	6560      	str	r0, [r4, #84]	; 0x54
 8009d4e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009d50:	602f      	str	r7, [r5, #0]
 8009d52:	2900      	cmp	r1, #0
 8009d54:	d0c9      	beq.n	8009cea <__sflush_r+0x1a>
 8009d56:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009d5a:	4299      	cmp	r1, r3
 8009d5c:	d002      	beq.n	8009d64 <__sflush_r+0x94>
 8009d5e:	4628      	mov	r0, r5
 8009d60:	f7ff fbea 	bl	8009538 <_free_r>
 8009d64:	2000      	movs	r0, #0
 8009d66:	6360      	str	r0, [r4, #52]	; 0x34
 8009d68:	e7c0      	b.n	8009cec <__sflush_r+0x1c>
 8009d6a:	2301      	movs	r3, #1
 8009d6c:	4628      	mov	r0, r5
 8009d6e:	47b0      	blx	r6
 8009d70:	1c41      	adds	r1, r0, #1
 8009d72:	d1c8      	bne.n	8009d06 <__sflush_r+0x36>
 8009d74:	682b      	ldr	r3, [r5, #0]
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d0c5      	beq.n	8009d06 <__sflush_r+0x36>
 8009d7a:	2b1d      	cmp	r3, #29
 8009d7c:	d001      	beq.n	8009d82 <__sflush_r+0xb2>
 8009d7e:	2b16      	cmp	r3, #22
 8009d80:	d101      	bne.n	8009d86 <__sflush_r+0xb6>
 8009d82:	602f      	str	r7, [r5, #0]
 8009d84:	e7b1      	b.n	8009cea <__sflush_r+0x1a>
 8009d86:	89a3      	ldrh	r3, [r4, #12]
 8009d88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009d8c:	81a3      	strh	r3, [r4, #12]
 8009d8e:	e7ad      	b.n	8009cec <__sflush_r+0x1c>
 8009d90:	690f      	ldr	r7, [r1, #16]
 8009d92:	2f00      	cmp	r7, #0
 8009d94:	d0a9      	beq.n	8009cea <__sflush_r+0x1a>
 8009d96:	0793      	lsls	r3, r2, #30
 8009d98:	680e      	ldr	r6, [r1, #0]
 8009d9a:	bf08      	it	eq
 8009d9c:	694b      	ldreq	r3, [r1, #20]
 8009d9e:	600f      	str	r7, [r1, #0]
 8009da0:	bf18      	it	ne
 8009da2:	2300      	movne	r3, #0
 8009da4:	eba6 0807 	sub.w	r8, r6, r7
 8009da8:	608b      	str	r3, [r1, #8]
 8009daa:	f1b8 0f00 	cmp.w	r8, #0
 8009dae:	dd9c      	ble.n	8009cea <__sflush_r+0x1a>
 8009db0:	6a21      	ldr	r1, [r4, #32]
 8009db2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009db4:	4643      	mov	r3, r8
 8009db6:	463a      	mov	r2, r7
 8009db8:	4628      	mov	r0, r5
 8009dba:	47b0      	blx	r6
 8009dbc:	2800      	cmp	r0, #0
 8009dbe:	dc06      	bgt.n	8009dce <__sflush_r+0xfe>
 8009dc0:	89a3      	ldrh	r3, [r4, #12]
 8009dc2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009dc6:	81a3      	strh	r3, [r4, #12]
 8009dc8:	f04f 30ff 	mov.w	r0, #4294967295
 8009dcc:	e78e      	b.n	8009cec <__sflush_r+0x1c>
 8009dce:	4407      	add	r7, r0
 8009dd0:	eba8 0800 	sub.w	r8, r8, r0
 8009dd4:	e7e9      	b.n	8009daa <__sflush_r+0xda>
 8009dd6:	bf00      	nop
 8009dd8:	dfbffffe 	.word	0xdfbffffe

08009ddc <_fflush_r>:
 8009ddc:	b538      	push	{r3, r4, r5, lr}
 8009dde:	690b      	ldr	r3, [r1, #16]
 8009de0:	4605      	mov	r5, r0
 8009de2:	460c      	mov	r4, r1
 8009de4:	b913      	cbnz	r3, 8009dec <_fflush_r+0x10>
 8009de6:	2500      	movs	r5, #0
 8009de8:	4628      	mov	r0, r5
 8009dea:	bd38      	pop	{r3, r4, r5, pc}
 8009dec:	b118      	cbz	r0, 8009df6 <_fflush_r+0x1a>
 8009dee:	6a03      	ldr	r3, [r0, #32]
 8009df0:	b90b      	cbnz	r3, 8009df6 <_fflush_r+0x1a>
 8009df2:	f7ff f99d 	bl	8009130 <__sinit>
 8009df6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d0f3      	beq.n	8009de6 <_fflush_r+0xa>
 8009dfe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009e00:	07d0      	lsls	r0, r2, #31
 8009e02:	d404      	bmi.n	8009e0e <_fflush_r+0x32>
 8009e04:	0599      	lsls	r1, r3, #22
 8009e06:	d402      	bmi.n	8009e0e <_fflush_r+0x32>
 8009e08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009e0a:	f7ff fb85 	bl	8009518 <__retarget_lock_acquire_recursive>
 8009e0e:	4628      	mov	r0, r5
 8009e10:	4621      	mov	r1, r4
 8009e12:	f7ff ff5d 	bl	8009cd0 <__sflush_r>
 8009e16:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009e18:	07da      	lsls	r2, r3, #31
 8009e1a:	4605      	mov	r5, r0
 8009e1c:	d4e4      	bmi.n	8009de8 <_fflush_r+0xc>
 8009e1e:	89a3      	ldrh	r3, [r4, #12]
 8009e20:	059b      	lsls	r3, r3, #22
 8009e22:	d4e1      	bmi.n	8009de8 <_fflush_r+0xc>
 8009e24:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009e26:	f7ff fb78 	bl	800951a <__retarget_lock_release_recursive>
 8009e2a:	e7dd      	b.n	8009de8 <_fflush_r+0xc>

08009e2c <__swhatbuf_r>:
 8009e2c:	b570      	push	{r4, r5, r6, lr}
 8009e2e:	460c      	mov	r4, r1
 8009e30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e34:	2900      	cmp	r1, #0
 8009e36:	b096      	sub	sp, #88	; 0x58
 8009e38:	4615      	mov	r5, r2
 8009e3a:	461e      	mov	r6, r3
 8009e3c:	da0d      	bge.n	8009e5a <__swhatbuf_r+0x2e>
 8009e3e:	89a3      	ldrh	r3, [r4, #12]
 8009e40:	f013 0f80 	tst.w	r3, #128	; 0x80
 8009e44:	f04f 0100 	mov.w	r1, #0
 8009e48:	bf0c      	ite	eq
 8009e4a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8009e4e:	2340      	movne	r3, #64	; 0x40
 8009e50:	2000      	movs	r0, #0
 8009e52:	6031      	str	r1, [r6, #0]
 8009e54:	602b      	str	r3, [r5, #0]
 8009e56:	b016      	add	sp, #88	; 0x58
 8009e58:	bd70      	pop	{r4, r5, r6, pc}
 8009e5a:	466a      	mov	r2, sp
 8009e5c:	f000 f848 	bl	8009ef0 <_fstat_r>
 8009e60:	2800      	cmp	r0, #0
 8009e62:	dbec      	blt.n	8009e3e <__swhatbuf_r+0x12>
 8009e64:	9901      	ldr	r1, [sp, #4]
 8009e66:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8009e6a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8009e6e:	4259      	negs	r1, r3
 8009e70:	4159      	adcs	r1, r3
 8009e72:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009e76:	e7eb      	b.n	8009e50 <__swhatbuf_r+0x24>

08009e78 <__smakebuf_r>:
 8009e78:	898b      	ldrh	r3, [r1, #12]
 8009e7a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009e7c:	079d      	lsls	r5, r3, #30
 8009e7e:	4606      	mov	r6, r0
 8009e80:	460c      	mov	r4, r1
 8009e82:	d507      	bpl.n	8009e94 <__smakebuf_r+0x1c>
 8009e84:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009e88:	6023      	str	r3, [r4, #0]
 8009e8a:	6123      	str	r3, [r4, #16]
 8009e8c:	2301      	movs	r3, #1
 8009e8e:	6163      	str	r3, [r4, #20]
 8009e90:	b002      	add	sp, #8
 8009e92:	bd70      	pop	{r4, r5, r6, pc}
 8009e94:	ab01      	add	r3, sp, #4
 8009e96:	466a      	mov	r2, sp
 8009e98:	f7ff ffc8 	bl	8009e2c <__swhatbuf_r>
 8009e9c:	9900      	ldr	r1, [sp, #0]
 8009e9e:	4605      	mov	r5, r0
 8009ea0:	4630      	mov	r0, r6
 8009ea2:	f7ff fbb5 	bl	8009610 <_malloc_r>
 8009ea6:	b948      	cbnz	r0, 8009ebc <__smakebuf_r+0x44>
 8009ea8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009eac:	059a      	lsls	r2, r3, #22
 8009eae:	d4ef      	bmi.n	8009e90 <__smakebuf_r+0x18>
 8009eb0:	f023 0303 	bic.w	r3, r3, #3
 8009eb4:	f043 0302 	orr.w	r3, r3, #2
 8009eb8:	81a3      	strh	r3, [r4, #12]
 8009eba:	e7e3      	b.n	8009e84 <__smakebuf_r+0xc>
 8009ebc:	89a3      	ldrh	r3, [r4, #12]
 8009ebe:	6020      	str	r0, [r4, #0]
 8009ec0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009ec4:	81a3      	strh	r3, [r4, #12]
 8009ec6:	9b00      	ldr	r3, [sp, #0]
 8009ec8:	6163      	str	r3, [r4, #20]
 8009eca:	9b01      	ldr	r3, [sp, #4]
 8009ecc:	6120      	str	r0, [r4, #16]
 8009ece:	b15b      	cbz	r3, 8009ee8 <__smakebuf_r+0x70>
 8009ed0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009ed4:	4630      	mov	r0, r6
 8009ed6:	f000 f81d 	bl	8009f14 <_isatty_r>
 8009eda:	b128      	cbz	r0, 8009ee8 <__smakebuf_r+0x70>
 8009edc:	89a3      	ldrh	r3, [r4, #12]
 8009ede:	f023 0303 	bic.w	r3, r3, #3
 8009ee2:	f043 0301 	orr.w	r3, r3, #1
 8009ee6:	81a3      	strh	r3, [r4, #12]
 8009ee8:	89a3      	ldrh	r3, [r4, #12]
 8009eea:	431d      	orrs	r5, r3
 8009eec:	81a5      	strh	r5, [r4, #12]
 8009eee:	e7cf      	b.n	8009e90 <__smakebuf_r+0x18>

08009ef0 <_fstat_r>:
 8009ef0:	b538      	push	{r3, r4, r5, lr}
 8009ef2:	4d07      	ldr	r5, [pc, #28]	; (8009f10 <_fstat_r+0x20>)
 8009ef4:	2300      	movs	r3, #0
 8009ef6:	4604      	mov	r4, r0
 8009ef8:	4608      	mov	r0, r1
 8009efa:	4611      	mov	r1, r2
 8009efc:	602b      	str	r3, [r5, #0]
 8009efe:	f7fb fcf2 	bl	80058e6 <_fstat>
 8009f02:	1c43      	adds	r3, r0, #1
 8009f04:	d102      	bne.n	8009f0c <_fstat_r+0x1c>
 8009f06:	682b      	ldr	r3, [r5, #0]
 8009f08:	b103      	cbz	r3, 8009f0c <_fstat_r+0x1c>
 8009f0a:	6023      	str	r3, [r4, #0]
 8009f0c:	bd38      	pop	{r3, r4, r5, pc}
 8009f0e:	bf00      	nop
 8009f10:	200132ac 	.word	0x200132ac

08009f14 <_isatty_r>:
 8009f14:	b538      	push	{r3, r4, r5, lr}
 8009f16:	4d06      	ldr	r5, [pc, #24]	; (8009f30 <_isatty_r+0x1c>)
 8009f18:	2300      	movs	r3, #0
 8009f1a:	4604      	mov	r4, r0
 8009f1c:	4608      	mov	r0, r1
 8009f1e:	602b      	str	r3, [r5, #0]
 8009f20:	f7fb fcf1 	bl	8005906 <_isatty>
 8009f24:	1c43      	adds	r3, r0, #1
 8009f26:	d102      	bne.n	8009f2e <_isatty_r+0x1a>
 8009f28:	682b      	ldr	r3, [r5, #0]
 8009f2a:	b103      	cbz	r3, 8009f2e <_isatty_r+0x1a>
 8009f2c:	6023      	str	r3, [r4, #0]
 8009f2e:	bd38      	pop	{r3, r4, r5, pc}
 8009f30:	200132ac 	.word	0x200132ac

08009f34 <_sbrk_r>:
 8009f34:	b538      	push	{r3, r4, r5, lr}
 8009f36:	4d06      	ldr	r5, [pc, #24]	; (8009f50 <_sbrk_r+0x1c>)
 8009f38:	2300      	movs	r3, #0
 8009f3a:	4604      	mov	r4, r0
 8009f3c:	4608      	mov	r0, r1
 8009f3e:	602b      	str	r3, [r5, #0]
 8009f40:	f7fb fcfa 	bl	8005938 <_sbrk>
 8009f44:	1c43      	adds	r3, r0, #1
 8009f46:	d102      	bne.n	8009f4e <_sbrk_r+0x1a>
 8009f48:	682b      	ldr	r3, [r5, #0]
 8009f4a:	b103      	cbz	r3, 8009f4e <_sbrk_r+0x1a>
 8009f4c:	6023      	str	r3, [r4, #0]
 8009f4e:	bd38      	pop	{r3, r4, r5, pc}
 8009f50:	200132ac 	.word	0x200132ac

08009f54 <_init>:
 8009f54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f56:	bf00      	nop
 8009f58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009f5a:	bc08      	pop	{r3}
 8009f5c:	469e      	mov	lr, r3
 8009f5e:	4770      	bx	lr

08009f60 <_fini>:
 8009f60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f62:	bf00      	nop
 8009f64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009f66:	bc08      	pop	{r3}
 8009f68:	469e      	mov	lr, r3
 8009f6a:	4770      	bx	lr
