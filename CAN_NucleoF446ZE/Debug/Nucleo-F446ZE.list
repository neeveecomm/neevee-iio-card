
Nucleo-F446ZE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003b88  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000108  08003d58  08003d58  00013d58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003e60  08003e60  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08003e60  08003e60  00013e60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003e68  08003e68  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003e68  08003e68  00013e68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003e6c  08003e6c  00013e6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003e70  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a8  20000070  08003ee0  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000118  08003ee0  00020118  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000724c  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000016da  00000000  00000000  000272ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000688  00000000  00000000  000289c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000005d0  00000000  00000000  00029050  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021992  00000000  00000000  00029620  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00007a96  00000000  00000000  0004afb2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c9bb1  00000000  00000000  00052a48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011c5f9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000217c  00000000  00000000  0011c64c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08003d40 	.word	0x08003d40

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	08003d40 	.word	0x08003d40

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <HAL_GPIO_EXTI_Callback>:
uint32_t TxMailbox;

int datacheck = 0;

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b082      	sub	sp, #8
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	4603      	mov	r3, r0
 80005bc:	80fb      	strh	r3, [r7, #6]
	printf("button pressed\n");
 80005be:	4811      	ldr	r0, [pc, #68]	; (8000604 <HAL_GPIO_EXTI_Callback+0x50>)
 80005c0:	f002 fc32 	bl	8002e28 <puts>
	if(GPIO_Pin == USER_Btn_Pin)
 80005c4:	88fb      	ldrh	r3, [r7, #6]
 80005c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80005ca:	d116      	bne.n	80005fa <HAL_GPIO_EXTI_Callback+0x46>
	{
		TxData[0]=250;
 80005cc:	4b0e      	ldr	r3, [pc, #56]	; (8000608 <HAL_GPIO_EXTI_Callback+0x54>)
 80005ce:	22fa      	movs	r2, #250	; 0xfa
 80005d0:	701a      	strb	r2, [r3, #0]
		TxData[1]=10;
 80005d2:	4b0d      	ldr	r3, [pc, #52]	; (8000608 <HAL_GPIO_EXTI_Callback+0x54>)
 80005d4:	220a      	movs	r2, #10
 80005d6:	705a      	strb	r2, [r3, #1]

		if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK)
 80005d8:	4b0c      	ldr	r3, [pc, #48]	; (800060c <HAL_GPIO_EXTI_Callback+0x58>)
 80005da:	4a0b      	ldr	r2, [pc, #44]	; (8000608 <HAL_GPIO_EXTI_Callback+0x54>)
 80005dc:	490c      	ldr	r1, [pc, #48]	; (8000610 <HAL_GPIO_EXTI_Callback+0x5c>)
 80005de:	480d      	ldr	r0, [pc, #52]	; (8000614 <HAL_GPIO_EXTI_Callback+0x60>)
 80005e0:	f000 fe88 	bl	80012f4 <HAL_CAN_AddTxMessage>
 80005e4:	4603      	mov	r3, r0
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d004      	beq.n	80005f4 <HAL_GPIO_EXTI_Callback+0x40>
		{
			printf("msg NOT sent \n into the error_handler\n");
 80005ea:	480b      	ldr	r0, [pc, #44]	; (8000618 <HAL_GPIO_EXTI_Callback+0x64>)
 80005ec:	f002 fc1c 	bl	8002e28 <puts>
		    Error_Handler();
 80005f0:	f000 fa3e 	bl	8000a70 <Error_Handler>
		}
		printf("msg sent\n");
 80005f4:	4809      	ldr	r0, [pc, #36]	; (800061c <HAL_GPIO_EXTI_Callback+0x68>)
 80005f6:	f002 fc17 	bl	8002e28 <puts>
	}
}
 80005fa:	bf00      	nop
 80005fc:	3708      	adds	r7, #8
 80005fe:	46bd      	mov	sp, r7
 8000600:	bd80      	pop	{r7, pc}
 8000602:	bf00      	nop
 8000604:	08003d58 	.word	0x08003d58
 8000608:	200000e8 	.word	0x200000e8
 800060c:	200000f8 	.word	0x200000f8
 8000610:	200000b4 	.word	0x200000b4
 8000614:	2000008c 	.word	0x2000008c
 8000618:	08003d68 	.word	0x08003d68
 800061c:	08003d90 	.word	0x08003d90

08000620 <HAL_CAN_RxFifo0MsgPendingCallback>:
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b082      	sub	sp, #8
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
	printf("RXCALLBACK\n");
 8000628:	480e      	ldr	r0, [pc, #56]	; (8000664 <HAL_CAN_RxFifo0MsgPendingCallback+0x44>)
 800062a:	f002 fbfd 	bl	8002e28 <puts>
	HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, RxData);
 800062e:	4b0e      	ldr	r3, [pc, #56]	; (8000668 <HAL_CAN_RxFifo0MsgPendingCallback+0x48>)
 8000630:	4a0e      	ldr	r2, [pc, #56]	; (800066c <HAL_CAN_RxFifo0MsgPendingCallback+0x4c>)
 8000632:	2100      	movs	r1, #0
 8000634:	480e      	ldr	r0, [pc, #56]	; (8000670 <HAL_CAN_RxFifo0MsgPendingCallback+0x50>)
 8000636:	f000 ff38 	bl	80014aa <HAL_CAN_GetRxMessage>
	if(RxHeader.DLC == 2)
 800063a:	4b0c      	ldr	r3, [pc, #48]	; (800066c <HAL_CAN_RxFifo0MsgPendingCallback+0x4c>)
 800063c:	691b      	ldr	r3, [r3, #16]
 800063e:	2b02      	cmp	r3, #2
 8000640:	d10b      	bne.n	800065a <HAL_CAN_RxFifo0MsgPendingCallback+0x3a>
	{
		datacheck = 1;
 8000642:	4b0c      	ldr	r3, [pc, #48]	; (8000674 <HAL_CAN_RxFifo0MsgPendingCallback+0x54>)
 8000644:	2201      	movs	r2, #1
 8000646:	601a      	str	r2, [r3, #0]
		printf("RxData %d, %d\n",RxData[0],RxData[1]);
 8000648:	4b07      	ldr	r3, [pc, #28]	; (8000668 <HAL_CAN_RxFifo0MsgPendingCallback+0x48>)
 800064a:	781b      	ldrb	r3, [r3, #0]
 800064c:	4619      	mov	r1, r3
 800064e:	4b06      	ldr	r3, [pc, #24]	; (8000668 <HAL_CAN_RxFifo0MsgPendingCallback+0x48>)
 8000650:	785b      	ldrb	r3, [r3, #1]
 8000652:	461a      	mov	r2, r3
 8000654:	4808      	ldr	r0, [pc, #32]	; (8000678 <HAL_CAN_RxFifo0MsgPendingCallback+0x58>)
 8000656:	f002 fb61 	bl	8002d1c <iprintf>
	}
}
 800065a:	bf00      	nop
 800065c:	3708      	adds	r7, #8
 800065e:	46bd      	mov	sp, r7
 8000660:	bd80      	pop	{r7, pc}
 8000662:	bf00      	nop
 8000664:	08003d9c 	.word	0x08003d9c
 8000668:	200000f0 	.word	0x200000f0
 800066c:	200000cc 	.word	0x200000cc
 8000670:	2000008c 	.word	0x2000008c
 8000674:	200000fc 	.word	0x200000fc
 8000678:	08003da8 	.word	0x08003da8

0800067c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b082      	sub	sp, #8
 8000680:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000682:	f000 fb81 	bl	8000d88 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000686:	f000 f853 	bl	8000730 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800068a:	f000 f909 	bl	80008a0 <MX_GPIO_Init>
  MX_CAN1_Init();
 800068e:	f000 f8af 	bl	80007f0 <MX_CAN1_Init>
  /* USER CODE BEGIN 2 */
  if(HAL_CAN_Start(&hcan1) != HAL_OK)
 8000692:	4822      	ldr	r0, [pc, #136]	; (800071c <main+0xa0>)
 8000694:	f000 fdea 	bl	800126c <HAL_CAN_Start>
 8000698:	4603      	mov	r3, r0
 800069a:	2b00      	cmp	r3, #0
 800069c:	d001      	beq.n	80006a2 <main+0x26>
  {
	  Error_Handler();
 800069e:	f000 f9e7 	bl	8000a70 <Error_Handler>
  }
  if(HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 80006a2:	2102      	movs	r1, #2
 80006a4:	481d      	ldr	r0, [pc, #116]	; (800071c <main+0xa0>)
 80006a6:	f001 f812 	bl	80016ce <HAL_CAN_ActivateNotification>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d001      	beq.n	80006b4 <main+0x38>
  {
	  Error_Handler();
 80006b0:	f000 f9de 	bl	8000a70 <Error_Handler>
  }

  TxHeader.DLC = 2;
 80006b4:	4b1a      	ldr	r3, [pc, #104]	; (8000720 <main+0xa4>)
 80006b6:	2202      	movs	r2, #2
 80006b8:	611a      	str	r2, [r3, #16]
  TxHeader.IDE = CAN_ID_STD;
 80006ba:	4b19      	ldr	r3, [pc, #100]	; (8000720 <main+0xa4>)
 80006bc:	2200      	movs	r2, #0
 80006be:	609a      	str	r2, [r3, #8]
  TxHeader.RTR = CAN_RTR_DATA;
 80006c0:	4b17      	ldr	r3, [pc, #92]	; (8000720 <main+0xa4>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	60da      	str	r2, [r3, #12]
  TxHeader.StdId = 0x446;
 80006c6:	4b16      	ldr	r3, [pc, #88]	; (8000720 <main+0xa4>)
 80006c8:	f240 4246 	movw	r2, #1094	; 0x446
 80006cc:	601a      	str	r2, [r3, #0]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(datacheck)
 80006ce:	4b15      	ldr	r3, [pc, #84]	; (8000724 <main+0xa8>)
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d0fb      	beq.n	80006ce <main+0x52>
	  {
		  for(int i=0; i<RxData[1]; i++)
 80006d6:	2300      	movs	r3, #0
 80006d8:	607b      	str	r3, [r7, #4]
 80006da:	e014      	b.n	8000706 <main+0x8a>
		  {
			  HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 80006dc:	2101      	movs	r1, #1
 80006de:	4812      	ldr	r0, [pc, #72]	; (8000728 <main+0xac>)
 80006e0:	f001 fd09 	bl	80020f6 <HAL_GPIO_TogglePin>
			  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80006e4:	2180      	movs	r1, #128	; 0x80
 80006e6:	4810      	ldr	r0, [pc, #64]	; (8000728 <main+0xac>)
 80006e8:	f001 fd05 	bl	80020f6 <HAL_GPIO_TogglePin>
			  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 80006ec:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006f0:	480d      	ldr	r0, [pc, #52]	; (8000728 <main+0xac>)
 80006f2:	f001 fd00 	bl	80020f6 <HAL_GPIO_TogglePin>
			  HAL_Delay(RxData[0]);
 80006f6:	4b0d      	ldr	r3, [pc, #52]	; (800072c <main+0xb0>)
 80006f8:	781b      	ldrb	r3, [r3, #0]
 80006fa:	4618      	mov	r0, r3
 80006fc:	f000 fbb6 	bl	8000e6c <HAL_Delay>
		  for(int i=0; i<RxData[1]; i++)
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	3301      	adds	r3, #1
 8000704:	607b      	str	r3, [r7, #4]
 8000706:	4b09      	ldr	r3, [pc, #36]	; (800072c <main+0xb0>)
 8000708:	785b      	ldrb	r3, [r3, #1]
 800070a:	461a      	mov	r2, r3
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	4293      	cmp	r3, r2
 8000710:	dbe4      	blt.n	80006dc <main+0x60>
		  }
		  datacheck = 0;
 8000712:	4b04      	ldr	r3, [pc, #16]	; (8000724 <main+0xa8>)
 8000714:	2200      	movs	r2, #0
 8000716:	601a      	str	r2, [r3, #0]
	  if(datacheck)
 8000718:	e7d9      	b.n	80006ce <main+0x52>
 800071a:	bf00      	nop
 800071c:	2000008c 	.word	0x2000008c
 8000720:	200000b4 	.word	0x200000b4
 8000724:	200000fc 	.word	0x200000fc
 8000728:	40020400 	.word	0x40020400
 800072c:	200000f0 	.word	0x200000f0

08000730 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b094      	sub	sp, #80	; 0x50
 8000734:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000736:	f107 031c 	add.w	r3, r7, #28
 800073a:	2234      	movs	r2, #52	; 0x34
 800073c:	2100      	movs	r1, #0
 800073e:	4618      	mov	r0, r3
 8000740:	f002 fae4 	bl	8002d0c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000744:	f107 0308 	add.w	r3, r7, #8
 8000748:	2200      	movs	r2, #0
 800074a:	601a      	str	r2, [r3, #0]
 800074c:	605a      	str	r2, [r3, #4]
 800074e:	609a      	str	r2, [r3, #8]
 8000750:	60da      	str	r2, [r3, #12]
 8000752:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000754:	2300      	movs	r3, #0
 8000756:	607b      	str	r3, [r7, #4]
 8000758:	4b23      	ldr	r3, [pc, #140]	; (80007e8 <SystemClock_Config+0xb8>)
 800075a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800075c:	4a22      	ldr	r2, [pc, #136]	; (80007e8 <SystemClock_Config+0xb8>)
 800075e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000762:	6413      	str	r3, [r2, #64]	; 0x40
 8000764:	4b20      	ldr	r3, [pc, #128]	; (80007e8 <SystemClock_Config+0xb8>)
 8000766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000768:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800076c:	607b      	str	r3, [r7, #4]
 800076e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000770:	2300      	movs	r3, #0
 8000772:	603b      	str	r3, [r7, #0]
 8000774:	4b1d      	ldr	r3, [pc, #116]	; (80007ec <SystemClock_Config+0xbc>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800077c:	4a1b      	ldr	r2, [pc, #108]	; (80007ec <SystemClock_Config+0xbc>)
 800077e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000782:	6013      	str	r3, [r2, #0]
 8000784:	4b19      	ldr	r3, [pc, #100]	; (80007ec <SystemClock_Config+0xbc>)
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800078c:	603b      	str	r3, [r7, #0]
 800078e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000790:	2302      	movs	r3, #2
 8000792:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000794:	2301      	movs	r3, #1
 8000796:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000798:	2310      	movs	r3, #16
 800079a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800079c:	2300      	movs	r3, #0
 800079e:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007a0:	f107 031c 	add.w	r3, r7, #28
 80007a4:	4618      	mov	r0, r3
 80007a6:	f001 ffef 	bl	8002788 <HAL_RCC_OscConfig>
 80007aa:	4603      	mov	r3, r0
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d001      	beq.n	80007b4 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80007b0:	f000 f95e 	bl	8000a70 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007b4:	230f      	movs	r3, #15
 80007b6:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80007b8:	2300      	movs	r3, #0
 80007ba:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007bc:	2300      	movs	r3, #0
 80007be:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007c4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007c6:	2300      	movs	r3, #0
 80007c8:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80007ca:	f107 0308 	add.w	r3, r7, #8
 80007ce:	2100      	movs	r1, #0
 80007d0:	4618      	mov	r0, r3
 80007d2:	f001 fcc3 	bl	800215c <HAL_RCC_ClockConfig>
 80007d6:	4603      	mov	r3, r0
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d001      	beq.n	80007e0 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 80007dc:	f000 f948 	bl	8000a70 <Error_Handler>
  }
}
 80007e0:	bf00      	nop
 80007e2:	3750      	adds	r7, #80	; 0x50
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bd80      	pop	{r7, pc}
 80007e8:	40023800 	.word	0x40023800
 80007ec:	40007000 	.word	0x40007000

080007f0 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b08a      	sub	sp, #40	; 0x28
 80007f4:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80007f6:	4b28      	ldr	r3, [pc, #160]	; (8000898 <MX_CAN1_Init+0xa8>)
 80007f8:	4a28      	ldr	r2, [pc, #160]	; (800089c <MX_CAN1_Init+0xac>)
 80007fa:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 1;
 80007fc:	4b26      	ldr	r3, [pc, #152]	; (8000898 <MX_CAN1_Init+0xa8>)
 80007fe:	2201      	movs	r2, #1
 8000800:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000802:	4b25      	ldr	r3, [pc, #148]	; (8000898 <MX_CAN1_Init+0xa8>)
 8000804:	2200      	movs	r2, #0
 8000806:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000808:	4b23      	ldr	r3, [pc, #140]	; (8000898 <MX_CAN1_Init+0xa8>)
 800080a:	2200      	movs	r2, #0
 800080c:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_13TQ;
 800080e:	4b22      	ldr	r3, [pc, #136]	; (8000898 <MX_CAN1_Init+0xa8>)
 8000810:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 8000814:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000816:	4b20      	ldr	r3, [pc, #128]	; (8000898 <MX_CAN1_Init+0xa8>)
 8000818:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800081c:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800081e:	4b1e      	ldr	r3, [pc, #120]	; (8000898 <MX_CAN1_Init+0xa8>)
 8000820:	2200      	movs	r2, #0
 8000822:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000824:	4b1c      	ldr	r3, [pc, #112]	; (8000898 <MX_CAN1_Init+0xa8>)
 8000826:	2200      	movs	r2, #0
 8000828:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800082a:	4b1b      	ldr	r3, [pc, #108]	; (8000898 <MX_CAN1_Init+0xa8>)
 800082c:	2200      	movs	r2, #0
 800082e:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000830:	4b19      	ldr	r3, [pc, #100]	; (8000898 <MX_CAN1_Init+0xa8>)
 8000832:	2200      	movs	r2, #0
 8000834:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000836:	4b18      	ldr	r3, [pc, #96]	; (8000898 <MX_CAN1_Init+0xa8>)
 8000838:	2200      	movs	r2, #0
 800083a:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800083c:	4b16      	ldr	r3, [pc, #88]	; (8000898 <MX_CAN1_Init+0xa8>)
 800083e:	2200      	movs	r2, #0
 8000840:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000842:	4815      	ldr	r0, [pc, #84]	; (8000898 <MX_CAN1_Init+0xa8>)
 8000844:	f000 fb36 	bl	8000eb4 <HAL_CAN_Init>
 8000848:	4603      	mov	r3, r0
 800084a:	2b00      	cmp	r3, #0
 800084c:	d001      	beq.n	8000852 <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 800084e:	f000 f90f 	bl	8000a70 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  CAN_FilterTypeDef filter;

  filter.FilterActivation = CAN_FILTER_ENABLE;
 8000852:	2301      	movs	r3, #1
 8000854:	623b      	str	r3, [r7, #32]
  filter.FilterBank = 0;//18;
 8000856:	2300      	movs	r3, #0
 8000858:	617b      	str	r3, [r7, #20]
  filter.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 800085a:	2300      	movs	r3, #0
 800085c:	613b      	str	r3, [r7, #16]
  filter.FilterIdHigh = 0x0000;//0x103<<5;
 800085e:	2300      	movs	r3, #0
 8000860:	603b      	str	r3, [r7, #0]
  filter.FilterIdLow = 0x0000;
 8000862:	2300      	movs	r3, #0
 8000864:	607b      	str	r3, [r7, #4]
  filter.FilterMaskIdHigh = 0x0000;//0x103<<5;
 8000866:	2300      	movs	r3, #0
 8000868:	60bb      	str	r3, [r7, #8]
  filter.FilterMaskIdLow = 0x0000;
 800086a:	2300      	movs	r3, #0
 800086c:	60fb      	str	r3, [r7, #12]
  filter.FilterMode = CAN_FILTERMODE_IDMASK;
 800086e:	2300      	movs	r3, #0
 8000870:	61bb      	str	r3, [r7, #24]
  filter.FilterScale = CAN_FILTERSCALE_32BIT;
 8000872:	2301      	movs	r3, #1
 8000874:	61fb      	str	r3, [r7, #28]
  filter.SlaveStartFilterBank = 0;//20;
 8000876:	2300      	movs	r3, #0
 8000878:	627b      	str	r3, [r7, #36]	; 0x24

  if(HAL_CAN_ConfigFilter(&hcan1, &filter) != HAL_OK)
 800087a:	463b      	mov	r3, r7
 800087c:	4619      	mov	r1, r3
 800087e:	4806      	ldr	r0, [pc, #24]	; (8000898 <MX_CAN1_Init+0xa8>)
 8000880:	f000 fc14 	bl	80010ac <HAL_CAN_ConfigFilter>
 8000884:	4603      	mov	r3, r0
 8000886:	2b00      	cmp	r3, #0
 8000888:	d001      	beq.n	800088e <MX_CAN1_Init+0x9e>
  {
	  Error_Handler();
 800088a:	f000 f8f1 	bl	8000a70 <Error_Handler>
  }
  /* USER CODE END CAN1_Init 2 */

}
 800088e:	bf00      	nop
 8000890:	3728      	adds	r7, #40	; 0x28
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}
 8000896:	bf00      	nop
 8000898:	2000008c 	.word	0x2000008c
 800089c:	40006400 	.word	0x40006400

080008a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b08c      	sub	sp, #48	; 0x30
 80008a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008a6:	f107 031c 	add.w	r3, r7, #28
 80008aa:	2200      	movs	r2, #0
 80008ac:	601a      	str	r2, [r3, #0]
 80008ae:	605a      	str	r2, [r3, #4]
 80008b0:	609a      	str	r2, [r3, #8]
 80008b2:	60da      	str	r2, [r3, #12]
 80008b4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008b6:	2300      	movs	r3, #0
 80008b8:	61bb      	str	r3, [r7, #24]
 80008ba:	4b67      	ldr	r3, [pc, #412]	; (8000a58 <MX_GPIO_Init+0x1b8>)
 80008bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008be:	4a66      	ldr	r2, [pc, #408]	; (8000a58 <MX_GPIO_Init+0x1b8>)
 80008c0:	f043 0304 	orr.w	r3, r3, #4
 80008c4:	6313      	str	r3, [r2, #48]	; 0x30
 80008c6:	4b64      	ldr	r3, [pc, #400]	; (8000a58 <MX_GPIO_Init+0x1b8>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ca:	f003 0304 	and.w	r3, r3, #4
 80008ce:	61bb      	str	r3, [r7, #24]
 80008d0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008d2:	2300      	movs	r3, #0
 80008d4:	617b      	str	r3, [r7, #20]
 80008d6:	4b60      	ldr	r3, [pc, #384]	; (8000a58 <MX_GPIO_Init+0x1b8>)
 80008d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008da:	4a5f      	ldr	r2, [pc, #380]	; (8000a58 <MX_GPIO_Init+0x1b8>)
 80008dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008e0:	6313      	str	r3, [r2, #48]	; 0x30
 80008e2:	4b5d      	ldr	r3, [pc, #372]	; (8000a58 <MX_GPIO_Init+0x1b8>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008ea:	617b      	str	r3, [r7, #20]
 80008ec:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008ee:	2300      	movs	r3, #0
 80008f0:	613b      	str	r3, [r7, #16]
 80008f2:	4b59      	ldr	r3, [pc, #356]	; (8000a58 <MX_GPIO_Init+0x1b8>)
 80008f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f6:	4a58      	ldr	r2, [pc, #352]	; (8000a58 <MX_GPIO_Init+0x1b8>)
 80008f8:	f043 0302 	orr.w	r3, r3, #2
 80008fc:	6313      	str	r3, [r2, #48]	; 0x30
 80008fe:	4b56      	ldr	r3, [pc, #344]	; (8000a58 <MX_GPIO_Init+0x1b8>)
 8000900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000902:	f003 0302 	and.w	r3, r3, #2
 8000906:	613b      	str	r3, [r7, #16]
 8000908:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800090a:	2300      	movs	r3, #0
 800090c:	60fb      	str	r3, [r7, #12]
 800090e:	4b52      	ldr	r3, [pc, #328]	; (8000a58 <MX_GPIO_Init+0x1b8>)
 8000910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000912:	4a51      	ldr	r2, [pc, #324]	; (8000a58 <MX_GPIO_Init+0x1b8>)
 8000914:	f043 0308 	orr.w	r3, r3, #8
 8000918:	6313      	str	r3, [r2, #48]	; 0x30
 800091a:	4b4f      	ldr	r3, [pc, #316]	; (8000a58 <MX_GPIO_Init+0x1b8>)
 800091c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091e:	f003 0308 	and.w	r3, r3, #8
 8000922:	60fb      	str	r3, [r7, #12]
 8000924:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000926:	2300      	movs	r3, #0
 8000928:	60bb      	str	r3, [r7, #8]
 800092a:	4b4b      	ldr	r3, [pc, #300]	; (8000a58 <MX_GPIO_Init+0x1b8>)
 800092c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092e:	4a4a      	ldr	r2, [pc, #296]	; (8000a58 <MX_GPIO_Init+0x1b8>)
 8000930:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000934:	6313      	str	r3, [r2, #48]	; 0x30
 8000936:	4b48      	ldr	r3, [pc, #288]	; (8000a58 <MX_GPIO_Init+0x1b8>)
 8000938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800093e:	60bb      	str	r3, [r7, #8]
 8000940:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000942:	2300      	movs	r3, #0
 8000944:	607b      	str	r3, [r7, #4]
 8000946:	4b44      	ldr	r3, [pc, #272]	; (8000a58 <MX_GPIO_Init+0x1b8>)
 8000948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094a:	4a43      	ldr	r2, [pc, #268]	; (8000a58 <MX_GPIO_Init+0x1b8>)
 800094c:	f043 0301 	orr.w	r3, r3, #1
 8000950:	6313      	str	r3, [r2, #48]	; 0x30
 8000952:	4b41      	ldr	r3, [pc, #260]	; (8000a58 <MX_GPIO_Init+0x1b8>)
 8000954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000956:	f003 0301 	and.w	r3, r3, #1
 800095a:	607b      	str	r3, [r7, #4]
 800095c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800095e:	2200      	movs	r2, #0
 8000960:	f244 0181 	movw	r1, #16513	; 0x4081
 8000964:	483d      	ldr	r0, [pc, #244]	; (8000a5c <MX_GPIO_Init+0x1bc>)
 8000966:	f001 fbad 	bl	80020c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800096a:	2200      	movs	r2, #0
 800096c:	2140      	movs	r1, #64	; 0x40
 800096e:	483c      	ldr	r0, [pc, #240]	; (8000a60 <MX_GPIO_Init+0x1c0>)
 8000970:	f001 fba8 	bl	80020c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000974:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000978:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800097a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800097e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000980:	2300      	movs	r3, #0
 8000982:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000984:	f107 031c 	add.w	r3, r7, #28
 8000988:	4619      	mov	r1, r3
 800098a:	4836      	ldr	r0, [pc, #216]	; (8000a64 <MX_GPIO_Init+0x1c4>)
 800098c:	f001 fa06 	bl	8001d9c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000990:	f244 0381 	movw	r3, #16513	; 0x4081
 8000994:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000996:	2301      	movs	r3, #1
 8000998:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099a:	2300      	movs	r3, #0
 800099c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800099e:	2300      	movs	r3, #0
 80009a0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009a2:	f107 031c 	add.w	r3, r7, #28
 80009a6:	4619      	mov	r1, r3
 80009a8:	482c      	ldr	r0, [pc, #176]	; (8000a5c <MX_GPIO_Init+0x1bc>)
 80009aa:	f001 f9f7 	bl	8001d9c <HAL_GPIO_Init>

  /*Configure GPIO pins : STLK_RX_Pin STLK_TX_Pin */
  GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80009ae:	f44f 7340 	mov.w	r3, #768	; 0x300
 80009b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009b4:	2302      	movs	r3, #2
 80009b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b8:	2300      	movs	r3, #0
 80009ba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009bc:	2303      	movs	r3, #3
 80009be:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80009c0:	2307      	movs	r3, #7
 80009c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009c4:	f107 031c 	add.w	r3, r7, #28
 80009c8:	4619      	mov	r1, r3
 80009ca:	4827      	ldr	r0, [pc, #156]	; (8000a68 <MX_GPIO_Init+0x1c8>)
 80009cc:	f001 f9e6 	bl	8001d9c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80009d0:	2340      	movs	r3, #64	; 0x40
 80009d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009d4:	2301      	movs	r3, #1
 80009d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d8:	2300      	movs	r3, #0
 80009da:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009dc:	2300      	movs	r3, #0
 80009de:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80009e0:	f107 031c 	add.w	r3, r7, #28
 80009e4:	4619      	mov	r1, r3
 80009e6:	481e      	ldr	r0, [pc, #120]	; (8000a60 <MX_GPIO_Init+0x1c0>)
 80009e8:	f001 f9d8 	bl	8001d9c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80009ec:	2380      	movs	r3, #128	; 0x80
 80009ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009f0:	2300      	movs	r3, #0
 80009f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f4:	2300      	movs	r3, #0
 80009f6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80009f8:	f107 031c 	add.w	r3, r7, #28
 80009fc:	4619      	mov	r1, r3
 80009fe:	4818      	ldr	r0, [pc, #96]	; (8000a60 <MX_GPIO_Init+0x1c0>)
 8000a00:	f001 f9cc 	bl	8001d9c <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000a04:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000a08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a0a:	2302      	movs	r3, #2
 8000a0c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a12:	2303      	movs	r3, #3
 8000a14:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000a16:	230a      	movs	r3, #10
 8000a18:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a1a:	f107 031c 	add.w	r3, r7, #28
 8000a1e:	4619      	mov	r1, r3
 8000a20:	4812      	ldr	r0, [pc, #72]	; (8000a6c <MX_GPIO_Init+0x1cc>)
 8000a22:	f001 f9bb 	bl	8001d9c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000a26:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a2a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a30:	2300      	movs	r3, #0
 8000a32:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000a34:	f107 031c 	add.w	r3, r7, #28
 8000a38:	4619      	mov	r1, r3
 8000a3a:	480c      	ldr	r0, [pc, #48]	; (8000a6c <MX_GPIO_Init+0x1cc>)
 8000a3c:	f001 f9ae 	bl	8001d9c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000a40:	2200      	movs	r2, #0
 8000a42:	2100      	movs	r1, #0
 8000a44:	2028      	movs	r0, #40	; 0x28
 8000a46:	f001 f972 	bl	8001d2e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000a4a:	2028      	movs	r0, #40	; 0x28
 8000a4c:	f001 f98b 	bl	8001d66 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a50:	bf00      	nop
 8000a52:	3730      	adds	r7, #48	; 0x30
 8000a54:	46bd      	mov	sp, r7
 8000a56:	bd80      	pop	{r7, pc}
 8000a58:	40023800 	.word	0x40023800
 8000a5c:	40020400 	.word	0x40020400
 8000a60:	40021800 	.word	0x40021800
 8000a64:	40020800 	.word	0x40020800
 8000a68:	40020c00 	.word	0x40020c00
 8000a6c:	40020000 	.word	0x40020000

08000a70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a74:	b672      	cpsid	i
}
 8000a76:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a78:	e7fe      	b.n	8000a78 <Error_Handler+0x8>
	...

08000a7c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	b083      	sub	sp, #12
 8000a80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a82:	2300      	movs	r3, #0
 8000a84:	607b      	str	r3, [r7, #4]
 8000a86:	4b10      	ldr	r3, [pc, #64]	; (8000ac8 <HAL_MspInit+0x4c>)
 8000a88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a8a:	4a0f      	ldr	r2, [pc, #60]	; (8000ac8 <HAL_MspInit+0x4c>)
 8000a8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a90:	6453      	str	r3, [r2, #68]	; 0x44
 8000a92:	4b0d      	ldr	r3, [pc, #52]	; (8000ac8 <HAL_MspInit+0x4c>)
 8000a94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a9a:	607b      	str	r3, [r7, #4]
 8000a9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	603b      	str	r3, [r7, #0]
 8000aa2:	4b09      	ldr	r3, [pc, #36]	; (8000ac8 <HAL_MspInit+0x4c>)
 8000aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aa6:	4a08      	ldr	r2, [pc, #32]	; (8000ac8 <HAL_MspInit+0x4c>)
 8000aa8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000aac:	6413      	str	r3, [r2, #64]	; 0x40
 8000aae:	4b06      	ldr	r3, [pc, #24]	; (8000ac8 <HAL_MspInit+0x4c>)
 8000ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ab2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ab6:	603b      	str	r3, [r7, #0]
 8000ab8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aba:	bf00      	nop
 8000abc:	370c      	adds	r7, #12
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop
 8000ac8:	40023800 	.word	0x40023800

08000acc <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b08a      	sub	sp, #40	; 0x28
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ad4:	f107 0314 	add.w	r3, r7, #20
 8000ad8:	2200      	movs	r2, #0
 8000ada:	601a      	str	r2, [r3, #0]
 8000adc:	605a      	str	r2, [r3, #4]
 8000ade:	609a      	str	r2, [r3, #8]
 8000ae0:	60da      	str	r2, [r3, #12]
 8000ae2:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	4a1d      	ldr	r2, [pc, #116]	; (8000b60 <HAL_CAN_MspInit+0x94>)
 8000aea:	4293      	cmp	r3, r2
 8000aec:	d133      	bne.n	8000b56 <HAL_CAN_MspInit+0x8a>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000aee:	2300      	movs	r3, #0
 8000af0:	613b      	str	r3, [r7, #16]
 8000af2:	4b1c      	ldr	r3, [pc, #112]	; (8000b64 <HAL_CAN_MspInit+0x98>)
 8000af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000af6:	4a1b      	ldr	r2, [pc, #108]	; (8000b64 <HAL_CAN_MspInit+0x98>)
 8000af8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000afc:	6413      	str	r3, [r2, #64]	; 0x40
 8000afe:	4b19      	ldr	r3, [pc, #100]	; (8000b64 <HAL_CAN_MspInit+0x98>)
 8000b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000b06:	613b      	str	r3, [r7, #16]
 8000b08:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	60fb      	str	r3, [r7, #12]
 8000b0e:	4b15      	ldr	r3, [pc, #84]	; (8000b64 <HAL_CAN_MspInit+0x98>)
 8000b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b12:	4a14      	ldr	r2, [pc, #80]	; (8000b64 <HAL_CAN_MspInit+0x98>)
 8000b14:	f043 0308 	orr.w	r3, r3, #8
 8000b18:	6313      	str	r3, [r2, #48]	; 0x30
 8000b1a:	4b12      	ldr	r3, [pc, #72]	; (8000b64 <HAL_CAN_MspInit+0x98>)
 8000b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1e:	f003 0308 	and.w	r3, r3, #8
 8000b22:	60fb      	str	r3, [r7, #12]
 8000b24:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000b26:	2303      	movs	r3, #3
 8000b28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b2a:	2302      	movs	r3, #2
 8000b2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b32:	2303      	movs	r3, #3
 8000b34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000b36:	2309      	movs	r3, #9
 8000b38:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b3a:	f107 0314 	add.w	r3, r7, #20
 8000b3e:	4619      	mov	r1, r3
 8000b40:	4809      	ldr	r0, [pc, #36]	; (8000b68 <HAL_CAN_MspInit+0x9c>)
 8000b42:	f001 f92b 	bl	8001d9c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8000b46:	2200      	movs	r2, #0
 8000b48:	2100      	movs	r1, #0
 8000b4a:	2014      	movs	r0, #20
 8000b4c:	f001 f8ef 	bl	8001d2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000b50:	2014      	movs	r0, #20
 8000b52:	f001 f908 	bl	8001d66 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000b56:	bf00      	nop
 8000b58:	3728      	adds	r7, #40	; 0x28
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	40006400 	.word	0x40006400
 8000b64:	40023800 	.word	0x40023800
 8000b68:	40020c00 	.word	0x40020c00

08000b6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b70:	e7fe      	b.n	8000b70 <NMI_Handler+0x4>

08000b72 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b72:	b480      	push	{r7}
 8000b74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b76:	e7fe      	b.n	8000b76 <HardFault_Handler+0x4>

08000b78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b7c:	e7fe      	b.n	8000b7c <MemManage_Handler+0x4>

08000b7e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b7e:	b480      	push	{r7}
 8000b80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b82:	e7fe      	b.n	8000b82 <BusFault_Handler+0x4>

08000b84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b88:	e7fe      	b.n	8000b88 <UsageFault_Handler+0x4>

08000b8a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b8a:	b480      	push	{r7}
 8000b8c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b8e:	bf00      	nop
 8000b90:	46bd      	mov	sp, r7
 8000b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b96:	4770      	bx	lr

08000b98 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b9c:	bf00      	nop
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba4:	4770      	bx	lr

08000ba6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ba6:	b480      	push	{r7}
 8000ba8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000baa:	bf00      	nop
 8000bac:	46bd      	mov	sp, r7
 8000bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb2:	4770      	bx	lr

08000bb4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bb8:	f000 f938 	bl	8000e2c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bbc:	bf00      	nop
 8000bbe:	bd80      	pop	{r7, pc}

08000bc0 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000bc4:	4802      	ldr	r0, [pc, #8]	; (8000bd0 <CAN1_RX0_IRQHandler+0x10>)
 8000bc6:	f000 fda8 	bl	800171a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8000bca:	bf00      	nop
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	2000008c 	.word	0x2000008c

08000bd4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 8000bd8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000bdc:	f001 faa6 	bl	800212c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000be0:	bf00      	nop
 8000be2:	bd80      	pop	{r7, pc}

08000be4 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8000be4:	b480      	push	{r7}
 8000be6:	b083      	sub	sp, #12
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	4603      	mov	r3, r0
 8000bec:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 8000bee:	4b0f      	ldr	r3, [pc, #60]	; (8000c2c <ITM_SendChar+0x48>)
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	4a0e      	ldr	r2, [pc, #56]	; (8000c2c <ITM_SendChar+0x48>)
 8000bf4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000bf8:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 8000bfa:	4b0d      	ldr	r3, [pc, #52]	; (8000c30 <ITM_SendChar+0x4c>)
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	4a0c      	ldr	r2, [pc, #48]	; (8000c30 <ITM_SendChar+0x4c>)
 8000c00:	f043 0301 	orr.w	r3, r3, #1
 8000c04:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 8000c06:	bf00      	nop
 8000c08:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	f003 0301 	and.w	r3, r3, #1
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d0f8      	beq.n	8000c08 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 8000c16:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8000c1a:	79fb      	ldrb	r3, [r7, #7]
 8000c1c:	6013      	str	r3, [r2, #0]
}
 8000c1e:	bf00      	nop
 8000c20:	370c      	adds	r7, #12
 8000c22:	46bd      	mov	sp, r7
 8000c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c28:	4770      	bx	lr
 8000c2a:	bf00      	nop
 8000c2c:	e000edfc 	.word	0xe000edfc
 8000c30:	e0000e00 	.word	0xe0000e00

08000c34 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b086      	sub	sp, #24
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	60f8      	str	r0, [r7, #12]
 8000c3c:	60b9      	str	r1, [r7, #8]
 8000c3e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c40:	2300      	movs	r3, #0
 8000c42:	617b      	str	r3, [r7, #20]
 8000c44:	e00a      	b.n	8000c5c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000c46:	f3af 8000 	nop.w
 8000c4a:	4601      	mov	r1, r0
 8000c4c:	68bb      	ldr	r3, [r7, #8]
 8000c4e:	1c5a      	adds	r2, r3, #1
 8000c50:	60ba      	str	r2, [r7, #8]
 8000c52:	b2ca      	uxtb	r2, r1
 8000c54:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c56:	697b      	ldr	r3, [r7, #20]
 8000c58:	3301      	adds	r3, #1
 8000c5a:	617b      	str	r3, [r7, #20]
 8000c5c:	697a      	ldr	r2, [r7, #20]
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	429a      	cmp	r2, r3
 8000c62:	dbf0      	blt.n	8000c46 <_read+0x12>
  }

  return len;
 8000c64:	687b      	ldr	r3, [r7, #4]
}
 8000c66:	4618      	mov	r0, r3
 8000c68:	3718      	adds	r7, #24
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}

08000c6e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000c6e:	b580      	push	{r7, lr}
 8000c70:	b086      	sub	sp, #24
 8000c72:	af00      	add	r7, sp, #0
 8000c74:	60f8      	str	r0, [r7, #12]
 8000c76:	60b9      	str	r1, [r7, #8]
 8000c78:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	617b      	str	r3, [r7, #20]
 8000c7e:	e009      	b.n	8000c94 <_write+0x26>
  {
//    __io_putchar(*ptr++);
	  ITM_SendChar((*ptr++));
 8000c80:	68bb      	ldr	r3, [r7, #8]
 8000c82:	1c5a      	adds	r2, r3, #1
 8000c84:	60ba      	str	r2, [r7, #8]
 8000c86:	781b      	ldrb	r3, [r3, #0]
 8000c88:	4618      	mov	r0, r3
 8000c8a:	f7ff ffab 	bl	8000be4 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c8e:	697b      	ldr	r3, [r7, #20]
 8000c90:	3301      	adds	r3, #1
 8000c92:	617b      	str	r3, [r7, #20]
 8000c94:	697a      	ldr	r2, [r7, #20]
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	429a      	cmp	r2, r3
 8000c9a:	dbf1      	blt.n	8000c80 <_write+0x12>
  }
  return len;
 8000c9c:	687b      	ldr	r3, [r7, #4]
}
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	3718      	adds	r7, #24
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}

08000ca6 <_close>:

int _close(int file)
{
 8000ca6:	b480      	push	{r7}
 8000ca8:	b083      	sub	sp, #12
 8000caa:	af00      	add	r7, sp, #0
 8000cac:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000cae:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	370c      	adds	r7, #12
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbc:	4770      	bx	lr

08000cbe <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000cbe:	b480      	push	{r7}
 8000cc0:	b083      	sub	sp, #12
 8000cc2:	af00      	add	r7, sp, #0
 8000cc4:	6078      	str	r0, [r7, #4]
 8000cc6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000cc8:	683b      	ldr	r3, [r7, #0]
 8000cca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000cce:	605a      	str	r2, [r3, #4]
  return 0;
 8000cd0:	2300      	movs	r3, #0
}
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	370c      	adds	r7, #12
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cdc:	4770      	bx	lr

08000cde <_isatty>:

int _isatty(int file)
{
 8000cde:	b480      	push	{r7}
 8000ce0:	b083      	sub	sp, #12
 8000ce2:	af00      	add	r7, sp, #0
 8000ce4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000ce6:	2301      	movs	r3, #1
}
 8000ce8:	4618      	mov	r0, r3
 8000cea:	370c      	adds	r7, #12
 8000cec:	46bd      	mov	sp, r7
 8000cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf2:	4770      	bx	lr

08000cf4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	b085      	sub	sp, #20
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	60f8      	str	r0, [r7, #12]
 8000cfc:	60b9      	str	r1, [r7, #8]
 8000cfe:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000d00:	2300      	movs	r3, #0
}
 8000d02:	4618      	mov	r0, r3
 8000d04:	3714      	adds	r7, #20
 8000d06:	46bd      	mov	sp, r7
 8000d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0c:	4770      	bx	lr
	...

08000d10 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d14:	4b06      	ldr	r3, [pc, #24]	; (8000d30 <SystemInit+0x20>)
 8000d16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d1a:	4a05      	ldr	r2, [pc, #20]	; (8000d30 <SystemInit+0x20>)
 8000d1c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d20:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d24:	bf00      	nop
 8000d26:	46bd      	mov	sp, r7
 8000d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2c:	4770      	bx	lr
 8000d2e:	bf00      	nop
 8000d30:	e000ed00 	.word	0xe000ed00

08000d34 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000d34:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d6c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d38:	480d      	ldr	r0, [pc, #52]	; (8000d70 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000d3a:	490e      	ldr	r1, [pc, #56]	; (8000d74 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000d3c:	4a0e      	ldr	r2, [pc, #56]	; (8000d78 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d40:	e002      	b.n	8000d48 <LoopCopyDataInit>

08000d42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d46:	3304      	adds	r3, #4

08000d48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d4c:	d3f9      	bcc.n	8000d42 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d4e:	4a0b      	ldr	r2, [pc, #44]	; (8000d7c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000d50:	4c0b      	ldr	r4, [pc, #44]	; (8000d80 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000d52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d54:	e001      	b.n	8000d5a <LoopFillZerobss>

08000d56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d58:	3204      	adds	r2, #4

08000d5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d5c:	d3fb      	bcc.n	8000d56 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000d5e:	f7ff ffd7 	bl	8000d10 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d62:	f001 ffaf 	bl	8002cc4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d66:	f7ff fc89 	bl	800067c <main>
  bx  lr    
 8000d6a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000d6c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d70:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d74:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000d78:	08003e70 	.word	0x08003e70
  ldr r2, =_sbss
 8000d7c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000d80:	20000118 	.word	0x20000118

08000d84 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d84:	e7fe      	b.n	8000d84 <ADC_IRQHandler>
	...

08000d88 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d8c:	4b0e      	ldr	r3, [pc, #56]	; (8000dc8 <HAL_Init+0x40>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	4a0d      	ldr	r2, [pc, #52]	; (8000dc8 <HAL_Init+0x40>)
 8000d92:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d96:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d98:	4b0b      	ldr	r3, [pc, #44]	; (8000dc8 <HAL_Init+0x40>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	4a0a      	ldr	r2, [pc, #40]	; (8000dc8 <HAL_Init+0x40>)
 8000d9e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000da2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000da4:	4b08      	ldr	r3, [pc, #32]	; (8000dc8 <HAL_Init+0x40>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	4a07      	ldr	r2, [pc, #28]	; (8000dc8 <HAL_Init+0x40>)
 8000daa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000dae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000db0:	2003      	movs	r0, #3
 8000db2:	f000 ffb1 	bl	8001d18 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000db6:	2000      	movs	r0, #0
 8000db8:	f000 f808 	bl	8000dcc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000dbc:	f7ff fe5e 	bl	8000a7c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000dc0:	2300      	movs	r3, #0
}
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	40023c00 	.word	0x40023c00

08000dcc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b082      	sub	sp, #8
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000dd4:	4b12      	ldr	r3, [pc, #72]	; (8000e20 <HAL_InitTick+0x54>)
 8000dd6:	681a      	ldr	r2, [r3, #0]
 8000dd8:	4b12      	ldr	r3, [pc, #72]	; (8000e24 <HAL_InitTick+0x58>)
 8000dda:	781b      	ldrb	r3, [r3, #0]
 8000ddc:	4619      	mov	r1, r3
 8000dde:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000de2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000de6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dea:	4618      	mov	r0, r3
 8000dec:	f000 ffc9 	bl	8001d82 <HAL_SYSTICK_Config>
 8000df0:	4603      	mov	r3, r0
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d001      	beq.n	8000dfa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000df6:	2301      	movs	r3, #1
 8000df8:	e00e      	b.n	8000e18 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	2b0f      	cmp	r3, #15
 8000dfe:	d80a      	bhi.n	8000e16 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e00:	2200      	movs	r2, #0
 8000e02:	6879      	ldr	r1, [r7, #4]
 8000e04:	f04f 30ff 	mov.w	r0, #4294967295
 8000e08:	f000 ff91 	bl	8001d2e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e0c:	4a06      	ldr	r2, [pc, #24]	; (8000e28 <HAL_InitTick+0x5c>)
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e12:	2300      	movs	r3, #0
 8000e14:	e000      	b.n	8000e18 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e16:	2301      	movs	r3, #1
}
 8000e18:	4618      	mov	r0, r3
 8000e1a:	3708      	adds	r7, #8
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}
 8000e20:	20000000 	.word	0x20000000
 8000e24:	20000008 	.word	0x20000008
 8000e28:	20000004 	.word	0x20000004

08000e2c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e30:	4b06      	ldr	r3, [pc, #24]	; (8000e4c <HAL_IncTick+0x20>)
 8000e32:	781b      	ldrb	r3, [r3, #0]
 8000e34:	461a      	mov	r2, r3
 8000e36:	4b06      	ldr	r3, [pc, #24]	; (8000e50 <HAL_IncTick+0x24>)
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	4413      	add	r3, r2
 8000e3c:	4a04      	ldr	r2, [pc, #16]	; (8000e50 <HAL_IncTick+0x24>)
 8000e3e:	6013      	str	r3, [r2, #0]
}
 8000e40:	bf00      	nop
 8000e42:	46bd      	mov	sp, r7
 8000e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e48:	4770      	bx	lr
 8000e4a:	bf00      	nop
 8000e4c:	20000008 	.word	0x20000008
 8000e50:	20000100 	.word	0x20000100

08000e54 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e54:	b480      	push	{r7}
 8000e56:	af00      	add	r7, sp, #0
  return uwTick;
 8000e58:	4b03      	ldr	r3, [pc, #12]	; (8000e68 <HAL_GetTick+0x14>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
}
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e64:	4770      	bx	lr
 8000e66:	bf00      	nop
 8000e68:	20000100 	.word	0x20000100

08000e6c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b084      	sub	sp, #16
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e74:	f7ff ffee 	bl	8000e54 <HAL_GetTick>
 8000e78:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e7e:	68fb      	ldr	r3, [r7, #12]
 8000e80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e84:	d005      	beq.n	8000e92 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e86:	4b0a      	ldr	r3, [pc, #40]	; (8000eb0 <HAL_Delay+0x44>)
 8000e88:	781b      	ldrb	r3, [r3, #0]
 8000e8a:	461a      	mov	r2, r3
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	4413      	add	r3, r2
 8000e90:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e92:	bf00      	nop
 8000e94:	f7ff ffde 	bl	8000e54 <HAL_GetTick>
 8000e98:	4602      	mov	r2, r0
 8000e9a:	68bb      	ldr	r3, [r7, #8]
 8000e9c:	1ad3      	subs	r3, r2, r3
 8000e9e:	68fa      	ldr	r2, [r7, #12]
 8000ea0:	429a      	cmp	r2, r3
 8000ea2:	d8f7      	bhi.n	8000e94 <HAL_Delay+0x28>
  {
  }
}
 8000ea4:	bf00      	nop
 8000ea6:	bf00      	nop
 8000ea8:	3710      	adds	r7, #16
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	20000008 	.word	0x20000008

08000eb4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b084      	sub	sp, #16
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d101      	bne.n	8000ec6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000ec2:	2301      	movs	r3, #1
 8000ec4:	e0ed      	b.n	80010a2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000ecc:	b2db      	uxtb	r3, r3
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d102      	bne.n	8000ed8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000ed2:	6878      	ldr	r0, [r7, #4]
 8000ed4:	f7ff fdfa 	bl	8000acc <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	681a      	ldr	r2, [r3, #0]
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	f042 0201 	orr.w	r2, r2, #1
 8000ee6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000ee8:	f7ff ffb4 	bl	8000e54 <HAL_GetTick>
 8000eec:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000eee:	e012      	b.n	8000f16 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000ef0:	f7ff ffb0 	bl	8000e54 <HAL_GetTick>
 8000ef4:	4602      	mov	r2, r0
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	1ad3      	subs	r3, r2, r3
 8000efa:	2b0a      	cmp	r3, #10
 8000efc:	d90b      	bls.n	8000f16 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f02:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	2205      	movs	r2, #5
 8000f0e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000f12:	2301      	movs	r3, #1
 8000f14:	e0c5      	b.n	80010a2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	685b      	ldr	r3, [r3, #4]
 8000f1c:	f003 0301 	and.w	r3, r3, #1
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d0e5      	beq.n	8000ef0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	681a      	ldr	r2, [r3, #0]
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	f022 0202 	bic.w	r2, r2, #2
 8000f32:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000f34:	f7ff ff8e 	bl	8000e54 <HAL_GetTick>
 8000f38:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000f3a:	e012      	b.n	8000f62 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000f3c:	f7ff ff8a 	bl	8000e54 <HAL_GetTick>
 8000f40:	4602      	mov	r2, r0
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	1ad3      	subs	r3, r2, r3
 8000f46:	2b0a      	cmp	r3, #10
 8000f48:	d90b      	bls.n	8000f62 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f4e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	2205      	movs	r2, #5
 8000f5a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000f5e:	2301      	movs	r3, #1
 8000f60:	e09f      	b.n	80010a2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	685b      	ldr	r3, [r3, #4]
 8000f68:	f003 0302 	and.w	r3, r3, #2
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d1e5      	bne.n	8000f3c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	7e1b      	ldrb	r3, [r3, #24]
 8000f74:	2b01      	cmp	r3, #1
 8000f76:	d108      	bne.n	8000f8a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	681a      	ldr	r2, [r3, #0]
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000f86:	601a      	str	r2, [r3, #0]
 8000f88:	e007      	b.n	8000f9a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	681a      	ldr	r2, [r3, #0]
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000f98:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	7e5b      	ldrb	r3, [r3, #25]
 8000f9e:	2b01      	cmp	r3, #1
 8000fa0:	d108      	bne.n	8000fb4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	681a      	ldr	r2, [r3, #0]
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000fb0:	601a      	str	r2, [r3, #0]
 8000fb2:	e007      	b.n	8000fc4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	681a      	ldr	r2, [r3, #0]
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000fc2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	7e9b      	ldrb	r3, [r3, #26]
 8000fc8:	2b01      	cmp	r3, #1
 8000fca:	d108      	bne.n	8000fde <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	681a      	ldr	r2, [r3, #0]
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	f042 0220 	orr.w	r2, r2, #32
 8000fda:	601a      	str	r2, [r3, #0]
 8000fdc:	e007      	b.n	8000fee <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	681a      	ldr	r2, [r3, #0]
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	f022 0220 	bic.w	r2, r2, #32
 8000fec:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	7edb      	ldrb	r3, [r3, #27]
 8000ff2:	2b01      	cmp	r3, #1
 8000ff4:	d108      	bne.n	8001008 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	681a      	ldr	r2, [r3, #0]
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	f022 0210 	bic.w	r2, r2, #16
 8001004:	601a      	str	r2, [r3, #0]
 8001006:	e007      	b.n	8001018 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	681a      	ldr	r2, [r3, #0]
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	f042 0210 	orr.w	r2, r2, #16
 8001016:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	7f1b      	ldrb	r3, [r3, #28]
 800101c:	2b01      	cmp	r3, #1
 800101e:	d108      	bne.n	8001032 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	681a      	ldr	r2, [r3, #0]
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	f042 0208 	orr.w	r2, r2, #8
 800102e:	601a      	str	r2, [r3, #0]
 8001030:	e007      	b.n	8001042 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	681a      	ldr	r2, [r3, #0]
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	f022 0208 	bic.w	r2, r2, #8
 8001040:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	7f5b      	ldrb	r3, [r3, #29]
 8001046:	2b01      	cmp	r3, #1
 8001048:	d108      	bne.n	800105c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	681a      	ldr	r2, [r3, #0]
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	f042 0204 	orr.w	r2, r2, #4
 8001058:	601a      	str	r2, [r3, #0]
 800105a:	e007      	b.n	800106c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	681a      	ldr	r2, [r3, #0]
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	f022 0204 	bic.w	r2, r2, #4
 800106a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	689a      	ldr	r2, [r3, #8]
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	68db      	ldr	r3, [r3, #12]
 8001074:	431a      	orrs	r2, r3
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	691b      	ldr	r3, [r3, #16]
 800107a:	431a      	orrs	r2, r3
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	695b      	ldr	r3, [r3, #20]
 8001080:	ea42 0103 	orr.w	r1, r2, r3
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	685b      	ldr	r3, [r3, #4]
 8001088:	1e5a      	subs	r2, r3, #1
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	430a      	orrs	r2, r1
 8001090:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	2200      	movs	r2, #0
 8001096:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	2201      	movs	r2, #1
 800109c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80010a0:	2300      	movs	r3, #0
}
 80010a2:	4618      	mov	r0, r3
 80010a4:	3710      	adds	r7, #16
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}
	...

080010ac <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80010ac:	b480      	push	{r7}
 80010ae:	b087      	sub	sp, #28
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
 80010b4:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	f893 3020 	ldrb.w	r3, [r3, #32]
 80010c2:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80010c4:	7cfb      	ldrb	r3, [r7, #19]
 80010c6:	2b01      	cmp	r3, #1
 80010c8:	d003      	beq.n	80010d2 <HAL_CAN_ConfigFilter+0x26>
 80010ca:	7cfb      	ldrb	r3, [r7, #19]
 80010cc:	2b02      	cmp	r3, #2
 80010ce:	f040 80be 	bne.w	800124e <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 80010d2:	4b65      	ldr	r3, [pc, #404]	; (8001268 <HAL_CAN_ConfigFilter+0x1bc>)
 80010d4:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80010d6:	697b      	ldr	r3, [r7, #20]
 80010d8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80010dc:	f043 0201 	orr.w	r2, r3, #1
 80010e0:	697b      	ldr	r3, [r7, #20]
 80010e2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80010e6:	697b      	ldr	r3, [r7, #20]
 80010e8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80010ec:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80010f0:	697b      	ldr	r3, [r7, #20]
 80010f2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80010f6:	697b      	ldr	r3, [r7, #20]
 80010f8:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001100:	021b      	lsls	r3, r3, #8
 8001102:	431a      	orrs	r2, r3
 8001104:	697b      	ldr	r3, [r7, #20]
 8001106:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	695b      	ldr	r3, [r3, #20]
 800110e:	f003 031f 	and.w	r3, r3, #31
 8001112:	2201      	movs	r2, #1
 8001114:	fa02 f303 	lsl.w	r3, r2, r3
 8001118:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800111a:	697b      	ldr	r3, [r7, #20]
 800111c:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	43db      	mvns	r3, r3
 8001124:	401a      	ands	r2, r3
 8001126:	697b      	ldr	r3, [r7, #20]
 8001128:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	69db      	ldr	r3, [r3, #28]
 8001130:	2b00      	cmp	r3, #0
 8001132:	d123      	bne.n	800117c <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001134:	697b      	ldr	r3, [r7, #20]
 8001136:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	43db      	mvns	r3, r3
 800113e:	401a      	ands	r2, r3
 8001140:	697b      	ldr	r3, [r7, #20]
 8001142:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	68db      	ldr	r3, [r3, #12]
 800114a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	685b      	ldr	r3, [r3, #4]
 8001150:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001152:	683a      	ldr	r2, [r7, #0]
 8001154:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001156:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001158:	697b      	ldr	r3, [r7, #20]
 800115a:	3248      	adds	r2, #72	; 0x48
 800115c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	689b      	ldr	r3, [r3, #8]
 8001164:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001170:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001172:	6979      	ldr	r1, [r7, #20]
 8001174:	3348      	adds	r3, #72	; 0x48
 8001176:	00db      	lsls	r3, r3, #3
 8001178:	440b      	add	r3, r1
 800117a:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	69db      	ldr	r3, [r3, #28]
 8001180:	2b01      	cmp	r3, #1
 8001182:	d122      	bne.n	80011ca <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001184:	697b      	ldr	r3, [r7, #20]
 8001186:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	431a      	orrs	r2, r3
 800118e:	697b      	ldr	r3, [r7, #20]
 8001190:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	685b      	ldr	r3, [r3, #4]
 800119e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80011a0:	683a      	ldr	r2, [r7, #0]
 80011a2:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80011a4:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80011a6:	697b      	ldr	r3, [r7, #20]
 80011a8:	3248      	adds	r2, #72	; 0x48
 80011aa:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	689b      	ldr	r3, [r3, #8]
 80011b2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	68db      	ldr	r3, [r3, #12]
 80011b8:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80011be:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80011c0:	6979      	ldr	r1, [r7, #20]
 80011c2:	3348      	adds	r3, #72	; 0x48
 80011c4:	00db      	lsls	r3, r3, #3
 80011c6:	440b      	add	r3, r1
 80011c8:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	699b      	ldr	r3, [r3, #24]
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d109      	bne.n	80011e6 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80011d2:	697b      	ldr	r3, [r7, #20]
 80011d4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	43db      	mvns	r3, r3
 80011dc:	401a      	ands	r2, r3
 80011de:	697b      	ldr	r3, [r7, #20]
 80011e0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80011e4:	e007      	b.n	80011f6 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80011e6:	697b      	ldr	r3, [r7, #20]
 80011e8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	431a      	orrs	r2, r3
 80011f0:	697b      	ldr	r3, [r7, #20]
 80011f2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	691b      	ldr	r3, [r3, #16]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d109      	bne.n	8001212 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80011fe:	697b      	ldr	r3, [r7, #20]
 8001200:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	43db      	mvns	r3, r3
 8001208:	401a      	ands	r2, r3
 800120a:	697b      	ldr	r3, [r7, #20]
 800120c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8001210:	e007      	b.n	8001222 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001212:	697b      	ldr	r3, [r7, #20]
 8001214:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	431a      	orrs	r2, r3
 800121c:	697b      	ldr	r3, [r7, #20]
 800121e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	6a1b      	ldr	r3, [r3, #32]
 8001226:	2b01      	cmp	r3, #1
 8001228:	d107      	bne.n	800123a <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800122a:	697b      	ldr	r3, [r7, #20]
 800122c:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	431a      	orrs	r2, r3
 8001234:	697b      	ldr	r3, [r7, #20]
 8001236:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800123a:	697b      	ldr	r3, [r7, #20]
 800123c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001240:	f023 0201 	bic.w	r2, r3, #1
 8001244:	697b      	ldr	r3, [r7, #20]
 8001246:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800124a:	2300      	movs	r3, #0
 800124c:	e006      	b.n	800125c <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001252:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800125a:	2301      	movs	r3, #1
  }
}
 800125c:	4618      	mov	r0, r3
 800125e:	371c      	adds	r7, #28
 8001260:	46bd      	mov	sp, r7
 8001262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001266:	4770      	bx	lr
 8001268:	40006400 	.word	0x40006400

0800126c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b084      	sub	sp, #16
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	f893 3020 	ldrb.w	r3, [r3, #32]
 800127a:	b2db      	uxtb	r3, r3
 800127c:	2b01      	cmp	r3, #1
 800127e:	d12e      	bne.n	80012de <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	2202      	movs	r2, #2
 8001284:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	681a      	ldr	r2, [r3, #0]
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f022 0201 	bic.w	r2, r2, #1
 8001296:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001298:	f7ff fddc 	bl	8000e54 <HAL_GetTick>
 800129c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800129e:	e012      	b.n	80012c6 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80012a0:	f7ff fdd8 	bl	8000e54 <HAL_GetTick>
 80012a4:	4602      	mov	r2, r0
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	1ad3      	subs	r3, r2, r3
 80012aa:	2b0a      	cmp	r3, #10
 80012ac:	d90b      	bls.n	80012c6 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012b2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	2205      	movs	r2, #5
 80012be:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80012c2:	2301      	movs	r3, #1
 80012c4:	e012      	b.n	80012ec <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	685b      	ldr	r3, [r3, #4]
 80012cc:	f003 0301 	and.w	r3, r3, #1
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d1e5      	bne.n	80012a0 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	2200      	movs	r2, #0
 80012d8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80012da:	2300      	movs	r3, #0
 80012dc:	e006      	b.n	80012ec <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012e2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80012ea:	2301      	movs	r3, #1
  }
}
 80012ec:	4618      	mov	r0, r3
 80012ee:	3710      	adds	r7, #16
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bd80      	pop	{r7, pc}

080012f4 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80012f4:	b480      	push	{r7}
 80012f6:	b089      	sub	sp, #36	; 0x24
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	60f8      	str	r0, [r7, #12]
 80012fc:	60b9      	str	r1, [r7, #8]
 80012fe:	607a      	str	r2, [r7, #4]
 8001300:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001308:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	689b      	ldr	r3, [r3, #8]
 8001310:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001312:	7ffb      	ldrb	r3, [r7, #31]
 8001314:	2b01      	cmp	r3, #1
 8001316:	d003      	beq.n	8001320 <HAL_CAN_AddTxMessage+0x2c>
 8001318:	7ffb      	ldrb	r3, [r7, #31]
 800131a:	2b02      	cmp	r3, #2
 800131c:	f040 80b8 	bne.w	8001490 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001320:	69bb      	ldr	r3, [r7, #24]
 8001322:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001326:	2b00      	cmp	r3, #0
 8001328:	d10a      	bne.n	8001340 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800132a:	69bb      	ldr	r3, [r7, #24]
 800132c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001330:	2b00      	cmp	r3, #0
 8001332:	d105      	bne.n	8001340 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001334:	69bb      	ldr	r3, [r7, #24]
 8001336:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800133a:	2b00      	cmp	r3, #0
 800133c:	f000 80a0 	beq.w	8001480 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001340:	69bb      	ldr	r3, [r7, #24]
 8001342:	0e1b      	lsrs	r3, r3, #24
 8001344:	f003 0303 	and.w	r3, r3, #3
 8001348:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 800134a:	697b      	ldr	r3, [r7, #20]
 800134c:	2b02      	cmp	r3, #2
 800134e:	d907      	bls.n	8001360 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001354:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800135c:	2301      	movs	r3, #1
 800135e:	e09e      	b.n	800149e <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001360:	2201      	movs	r2, #1
 8001362:	697b      	ldr	r3, [r7, #20]
 8001364:	409a      	lsls	r2, r3
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800136a:	68bb      	ldr	r3, [r7, #8]
 800136c:	689b      	ldr	r3, [r3, #8]
 800136e:	2b00      	cmp	r3, #0
 8001370:	d10d      	bne.n	800138e <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001372:	68bb      	ldr	r3, [r7, #8]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001378:	68bb      	ldr	r3, [r7, #8]
 800137a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800137c:	68f9      	ldr	r1, [r7, #12]
 800137e:	6809      	ldr	r1, [r1, #0]
 8001380:	431a      	orrs	r2, r3
 8001382:	697b      	ldr	r3, [r7, #20]
 8001384:	3318      	adds	r3, #24
 8001386:	011b      	lsls	r3, r3, #4
 8001388:	440b      	add	r3, r1
 800138a:	601a      	str	r2, [r3, #0]
 800138c:	e00f      	b.n	80013ae <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800138e:	68bb      	ldr	r3, [r7, #8]
 8001390:	685b      	ldr	r3, [r3, #4]
 8001392:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001394:	68bb      	ldr	r3, [r7, #8]
 8001396:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001398:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800139a:	68bb      	ldr	r3, [r7, #8]
 800139c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800139e:	68f9      	ldr	r1, [r7, #12]
 80013a0:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80013a2:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80013a4:	697b      	ldr	r3, [r7, #20]
 80013a6:	3318      	adds	r3, #24
 80013a8:	011b      	lsls	r3, r3, #4
 80013aa:	440b      	add	r3, r1
 80013ac:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	6819      	ldr	r1, [r3, #0]
 80013b2:	68bb      	ldr	r3, [r7, #8]
 80013b4:	691a      	ldr	r2, [r3, #16]
 80013b6:	697b      	ldr	r3, [r7, #20]
 80013b8:	3318      	adds	r3, #24
 80013ba:	011b      	lsls	r3, r3, #4
 80013bc:	440b      	add	r3, r1
 80013be:	3304      	adds	r3, #4
 80013c0:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80013c2:	68bb      	ldr	r3, [r7, #8]
 80013c4:	7d1b      	ldrb	r3, [r3, #20]
 80013c6:	2b01      	cmp	r3, #1
 80013c8:	d111      	bne.n	80013ee <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	681a      	ldr	r2, [r3, #0]
 80013ce:	697b      	ldr	r3, [r7, #20]
 80013d0:	3318      	adds	r3, #24
 80013d2:	011b      	lsls	r3, r3, #4
 80013d4:	4413      	add	r3, r2
 80013d6:	3304      	adds	r3, #4
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	68fa      	ldr	r2, [r7, #12]
 80013dc:	6811      	ldr	r1, [r2, #0]
 80013de:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80013e2:	697b      	ldr	r3, [r7, #20]
 80013e4:	3318      	adds	r3, #24
 80013e6:	011b      	lsls	r3, r3, #4
 80013e8:	440b      	add	r3, r1
 80013ea:	3304      	adds	r3, #4
 80013ec:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	3307      	adds	r3, #7
 80013f2:	781b      	ldrb	r3, [r3, #0]
 80013f4:	061a      	lsls	r2, r3, #24
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	3306      	adds	r3, #6
 80013fa:	781b      	ldrb	r3, [r3, #0]
 80013fc:	041b      	lsls	r3, r3, #16
 80013fe:	431a      	orrs	r2, r3
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	3305      	adds	r3, #5
 8001404:	781b      	ldrb	r3, [r3, #0]
 8001406:	021b      	lsls	r3, r3, #8
 8001408:	4313      	orrs	r3, r2
 800140a:	687a      	ldr	r2, [r7, #4]
 800140c:	3204      	adds	r2, #4
 800140e:	7812      	ldrb	r2, [r2, #0]
 8001410:	4610      	mov	r0, r2
 8001412:	68fa      	ldr	r2, [r7, #12]
 8001414:	6811      	ldr	r1, [r2, #0]
 8001416:	ea43 0200 	orr.w	r2, r3, r0
 800141a:	697b      	ldr	r3, [r7, #20]
 800141c:	011b      	lsls	r3, r3, #4
 800141e:	440b      	add	r3, r1
 8001420:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8001424:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	3303      	adds	r3, #3
 800142a:	781b      	ldrb	r3, [r3, #0]
 800142c:	061a      	lsls	r2, r3, #24
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	3302      	adds	r3, #2
 8001432:	781b      	ldrb	r3, [r3, #0]
 8001434:	041b      	lsls	r3, r3, #16
 8001436:	431a      	orrs	r2, r3
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	3301      	adds	r3, #1
 800143c:	781b      	ldrb	r3, [r3, #0]
 800143e:	021b      	lsls	r3, r3, #8
 8001440:	4313      	orrs	r3, r2
 8001442:	687a      	ldr	r2, [r7, #4]
 8001444:	7812      	ldrb	r2, [r2, #0]
 8001446:	4610      	mov	r0, r2
 8001448:	68fa      	ldr	r2, [r7, #12]
 800144a:	6811      	ldr	r1, [r2, #0]
 800144c:	ea43 0200 	orr.w	r2, r3, r0
 8001450:	697b      	ldr	r3, [r7, #20]
 8001452:	011b      	lsls	r3, r3, #4
 8001454:	440b      	add	r3, r1
 8001456:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800145a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	681a      	ldr	r2, [r3, #0]
 8001460:	697b      	ldr	r3, [r7, #20]
 8001462:	3318      	adds	r3, #24
 8001464:	011b      	lsls	r3, r3, #4
 8001466:	4413      	add	r3, r2
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	68fa      	ldr	r2, [r7, #12]
 800146c:	6811      	ldr	r1, [r2, #0]
 800146e:	f043 0201 	orr.w	r2, r3, #1
 8001472:	697b      	ldr	r3, [r7, #20]
 8001474:	3318      	adds	r3, #24
 8001476:	011b      	lsls	r3, r3, #4
 8001478:	440b      	add	r3, r1
 800147a:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800147c:	2300      	movs	r3, #0
 800147e:	e00e      	b.n	800149e <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001484:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 800148c:	2301      	movs	r3, #1
 800148e:	e006      	b.n	800149e <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001494:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800149c:	2301      	movs	r3, #1
  }
}
 800149e:	4618      	mov	r0, r3
 80014a0:	3724      	adds	r7, #36	; 0x24
 80014a2:	46bd      	mov	sp, r7
 80014a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a8:	4770      	bx	lr

080014aa <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80014aa:	b480      	push	{r7}
 80014ac:	b087      	sub	sp, #28
 80014ae:	af00      	add	r7, sp, #0
 80014b0:	60f8      	str	r0, [r7, #12]
 80014b2:	60b9      	str	r1, [r7, #8]
 80014b4:	607a      	str	r2, [r7, #4]
 80014b6:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	f893 3020 	ldrb.w	r3, [r3, #32]
 80014be:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80014c0:	7dfb      	ldrb	r3, [r7, #23]
 80014c2:	2b01      	cmp	r3, #1
 80014c4:	d003      	beq.n	80014ce <HAL_CAN_GetRxMessage+0x24>
 80014c6:	7dfb      	ldrb	r3, [r7, #23]
 80014c8:	2b02      	cmp	r3, #2
 80014ca:	f040 80f3 	bne.w	80016b4 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80014ce:	68bb      	ldr	r3, [r7, #8]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d10e      	bne.n	80014f2 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	68db      	ldr	r3, [r3, #12]
 80014da:	f003 0303 	and.w	r3, r3, #3
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d116      	bne.n	8001510 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014e6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80014ee:	2301      	movs	r3, #1
 80014f0:	e0e7      	b.n	80016c2 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	691b      	ldr	r3, [r3, #16]
 80014f8:	f003 0303 	and.w	r3, r3, #3
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d107      	bne.n	8001510 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001504:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800150c:	2301      	movs	r3, #1
 800150e:	e0d8      	b.n	80016c2 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	681a      	ldr	r2, [r3, #0]
 8001514:	68bb      	ldr	r3, [r7, #8]
 8001516:	331b      	adds	r3, #27
 8001518:	011b      	lsls	r3, r3, #4
 800151a:	4413      	add	r3, r2
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f003 0204 	and.w	r2, r3, #4
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	689b      	ldr	r3, [r3, #8]
 800152a:	2b00      	cmp	r3, #0
 800152c:	d10c      	bne.n	8001548 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	681a      	ldr	r2, [r3, #0]
 8001532:	68bb      	ldr	r3, [r7, #8]
 8001534:	331b      	adds	r3, #27
 8001536:	011b      	lsls	r3, r3, #4
 8001538:	4413      	add	r3, r2
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	0d5b      	lsrs	r3, r3, #21
 800153e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	601a      	str	r2, [r3, #0]
 8001546:	e00b      	b.n	8001560 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	681a      	ldr	r2, [r3, #0]
 800154c:	68bb      	ldr	r3, [r7, #8]
 800154e:	331b      	adds	r3, #27
 8001550:	011b      	lsls	r3, r3, #4
 8001552:	4413      	add	r3, r2
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	08db      	lsrs	r3, r3, #3
 8001558:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	681a      	ldr	r2, [r3, #0]
 8001564:	68bb      	ldr	r3, [r7, #8]
 8001566:	331b      	adds	r3, #27
 8001568:	011b      	lsls	r3, r3, #4
 800156a:	4413      	add	r3, r2
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f003 0202 	and.w	r2, r3, #2
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	681a      	ldr	r2, [r3, #0]
 800157a:	68bb      	ldr	r3, [r7, #8]
 800157c:	331b      	adds	r3, #27
 800157e:	011b      	lsls	r3, r3, #4
 8001580:	4413      	add	r3, r2
 8001582:	3304      	adds	r3, #4
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f003 020f 	and.w	r2, r3, #15
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	681a      	ldr	r2, [r3, #0]
 8001592:	68bb      	ldr	r3, [r7, #8]
 8001594:	331b      	adds	r3, #27
 8001596:	011b      	lsls	r3, r3, #4
 8001598:	4413      	add	r3, r2
 800159a:	3304      	adds	r3, #4
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	0a1b      	lsrs	r3, r3, #8
 80015a0:	b2da      	uxtb	r2, r3
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	681a      	ldr	r2, [r3, #0]
 80015aa:	68bb      	ldr	r3, [r7, #8]
 80015ac:	331b      	adds	r3, #27
 80015ae:	011b      	lsls	r3, r3, #4
 80015b0:	4413      	add	r3, r2
 80015b2:	3304      	adds	r3, #4
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	0c1b      	lsrs	r3, r3, #16
 80015b8:	b29a      	uxth	r2, r3
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	681a      	ldr	r2, [r3, #0]
 80015c2:	68bb      	ldr	r3, [r7, #8]
 80015c4:	011b      	lsls	r3, r3, #4
 80015c6:	4413      	add	r3, r2
 80015c8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	b2da      	uxtb	r2, r3
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	681a      	ldr	r2, [r3, #0]
 80015d8:	68bb      	ldr	r3, [r7, #8]
 80015da:	011b      	lsls	r3, r3, #4
 80015dc:	4413      	add	r3, r2
 80015de:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	0a1a      	lsrs	r2, r3, #8
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	3301      	adds	r3, #1
 80015ea:	b2d2      	uxtb	r2, r2
 80015ec:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	681a      	ldr	r2, [r3, #0]
 80015f2:	68bb      	ldr	r3, [r7, #8]
 80015f4:	011b      	lsls	r3, r3, #4
 80015f6:	4413      	add	r3, r2
 80015f8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	0c1a      	lsrs	r2, r3, #16
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	3302      	adds	r3, #2
 8001604:	b2d2      	uxtb	r2, r2
 8001606:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	681a      	ldr	r2, [r3, #0]
 800160c:	68bb      	ldr	r3, [r7, #8]
 800160e:	011b      	lsls	r3, r3, #4
 8001610:	4413      	add	r3, r2
 8001612:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	0e1a      	lsrs	r2, r3, #24
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	3303      	adds	r3, #3
 800161e:	b2d2      	uxtb	r2, r2
 8001620:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	681a      	ldr	r2, [r3, #0]
 8001626:	68bb      	ldr	r3, [r7, #8]
 8001628:	011b      	lsls	r3, r3, #4
 800162a:	4413      	add	r3, r2
 800162c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001630:	681a      	ldr	r2, [r3, #0]
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	3304      	adds	r3, #4
 8001636:	b2d2      	uxtb	r2, r2
 8001638:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	681a      	ldr	r2, [r3, #0]
 800163e:	68bb      	ldr	r3, [r7, #8]
 8001640:	011b      	lsls	r3, r3, #4
 8001642:	4413      	add	r3, r2
 8001644:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	0a1a      	lsrs	r2, r3, #8
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	3305      	adds	r3, #5
 8001650:	b2d2      	uxtb	r2, r2
 8001652:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	681a      	ldr	r2, [r3, #0]
 8001658:	68bb      	ldr	r3, [r7, #8]
 800165a:	011b      	lsls	r3, r3, #4
 800165c:	4413      	add	r3, r2
 800165e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	0c1a      	lsrs	r2, r3, #16
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	3306      	adds	r3, #6
 800166a:	b2d2      	uxtb	r2, r2
 800166c:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	681a      	ldr	r2, [r3, #0]
 8001672:	68bb      	ldr	r3, [r7, #8]
 8001674:	011b      	lsls	r3, r3, #4
 8001676:	4413      	add	r3, r2
 8001678:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	0e1a      	lsrs	r2, r3, #24
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	3307      	adds	r3, #7
 8001684:	b2d2      	uxtb	r2, r2
 8001686:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001688:	68bb      	ldr	r3, [r7, #8]
 800168a:	2b00      	cmp	r3, #0
 800168c:	d108      	bne.n	80016a0 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	68da      	ldr	r2, [r3, #12]
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f042 0220 	orr.w	r2, r2, #32
 800169c:	60da      	str	r2, [r3, #12]
 800169e:	e007      	b.n	80016b0 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	691a      	ldr	r2, [r3, #16]
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f042 0220 	orr.w	r2, r2, #32
 80016ae:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80016b0:	2300      	movs	r3, #0
 80016b2:	e006      	b.n	80016c2 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016b8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80016c0:	2301      	movs	r3, #1
  }
}
 80016c2:	4618      	mov	r0, r3
 80016c4:	371c      	adds	r7, #28
 80016c6:	46bd      	mov	sp, r7
 80016c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016cc:	4770      	bx	lr

080016ce <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80016ce:	b480      	push	{r7}
 80016d0:	b085      	sub	sp, #20
 80016d2:	af00      	add	r7, sp, #0
 80016d4:	6078      	str	r0, [r7, #4]
 80016d6:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	f893 3020 	ldrb.w	r3, [r3, #32]
 80016de:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80016e0:	7bfb      	ldrb	r3, [r7, #15]
 80016e2:	2b01      	cmp	r3, #1
 80016e4:	d002      	beq.n	80016ec <HAL_CAN_ActivateNotification+0x1e>
 80016e6:	7bfb      	ldrb	r3, [r7, #15]
 80016e8:	2b02      	cmp	r3, #2
 80016ea:	d109      	bne.n	8001700 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	6959      	ldr	r1, [r3, #20]
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	683a      	ldr	r2, [r7, #0]
 80016f8:	430a      	orrs	r2, r1
 80016fa:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80016fc:	2300      	movs	r3, #0
 80016fe:	e006      	b.n	800170e <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001704:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800170c:	2301      	movs	r3, #1
  }
}
 800170e:	4618      	mov	r0, r3
 8001710:	3714      	adds	r7, #20
 8001712:	46bd      	mov	sp, r7
 8001714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001718:	4770      	bx	lr

0800171a <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800171a:	b580      	push	{r7, lr}
 800171c:	b08a      	sub	sp, #40	; 0x28
 800171e:	af00      	add	r7, sp, #0
 8001720:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001722:	2300      	movs	r3, #0
 8001724:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	695b      	ldr	r3, [r3, #20]
 800172c:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	689b      	ldr	r3, [r3, #8]
 800173c:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	68db      	ldr	r3, [r3, #12]
 8001744:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	691b      	ldr	r3, [r3, #16]
 800174c:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	699b      	ldr	r3, [r3, #24]
 8001754:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001756:	6a3b      	ldr	r3, [r7, #32]
 8001758:	f003 0301 	and.w	r3, r3, #1
 800175c:	2b00      	cmp	r3, #0
 800175e:	d07c      	beq.n	800185a <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001760:	69bb      	ldr	r3, [r7, #24]
 8001762:	f003 0301 	and.w	r3, r3, #1
 8001766:	2b00      	cmp	r3, #0
 8001768:	d023      	beq.n	80017b2 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	2201      	movs	r2, #1
 8001770:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001772:	69bb      	ldr	r3, [r7, #24]
 8001774:	f003 0302 	and.w	r3, r3, #2
 8001778:	2b00      	cmp	r3, #0
 800177a:	d003      	beq.n	8001784 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800177c:	6878      	ldr	r0, [r7, #4]
 800177e:	f000 f983 	bl	8001a88 <HAL_CAN_TxMailbox0CompleteCallback>
 8001782:	e016      	b.n	80017b2 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001784:	69bb      	ldr	r3, [r7, #24]
 8001786:	f003 0304 	and.w	r3, r3, #4
 800178a:	2b00      	cmp	r3, #0
 800178c:	d004      	beq.n	8001798 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800178e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001790:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001794:	627b      	str	r3, [r7, #36]	; 0x24
 8001796:	e00c      	b.n	80017b2 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001798:	69bb      	ldr	r3, [r7, #24]
 800179a:	f003 0308 	and.w	r3, r3, #8
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d004      	beq.n	80017ac <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80017a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017a4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80017a8:	627b      	str	r3, [r7, #36]	; 0x24
 80017aa:	e002      	b.n	80017b2 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80017ac:	6878      	ldr	r0, [r7, #4]
 80017ae:	f000 f989 	bl	8001ac4 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80017b2:	69bb      	ldr	r3, [r7, #24]
 80017b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d024      	beq.n	8001806 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80017c4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80017c6:	69bb      	ldr	r3, [r7, #24]
 80017c8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d003      	beq.n	80017d8 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80017d0:	6878      	ldr	r0, [r7, #4]
 80017d2:	f000 f963 	bl	8001a9c <HAL_CAN_TxMailbox1CompleteCallback>
 80017d6:	e016      	b.n	8001806 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80017d8:	69bb      	ldr	r3, [r7, #24]
 80017da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d004      	beq.n	80017ec <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80017e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017e4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80017e8:	627b      	str	r3, [r7, #36]	; 0x24
 80017ea:	e00c      	b.n	8001806 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80017ec:	69bb      	ldr	r3, [r7, #24]
 80017ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d004      	beq.n	8001800 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80017f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017fc:	627b      	str	r3, [r7, #36]	; 0x24
 80017fe:	e002      	b.n	8001806 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001800:	6878      	ldr	r0, [r7, #4]
 8001802:	f000 f969 	bl	8001ad8 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001806:	69bb      	ldr	r3, [r7, #24]
 8001808:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800180c:	2b00      	cmp	r3, #0
 800180e:	d024      	beq.n	800185a <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001818:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800181a:	69bb      	ldr	r3, [r7, #24]
 800181c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001820:	2b00      	cmp	r3, #0
 8001822:	d003      	beq.n	800182c <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001824:	6878      	ldr	r0, [r7, #4]
 8001826:	f000 f943 	bl	8001ab0 <HAL_CAN_TxMailbox2CompleteCallback>
 800182a:	e016      	b.n	800185a <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800182c:	69bb      	ldr	r3, [r7, #24]
 800182e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001832:	2b00      	cmp	r3, #0
 8001834:	d004      	beq.n	8001840 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001838:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800183c:	627b      	str	r3, [r7, #36]	; 0x24
 800183e:	e00c      	b.n	800185a <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001840:	69bb      	ldr	r3, [r7, #24]
 8001842:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001846:	2b00      	cmp	r3, #0
 8001848:	d004      	beq.n	8001854 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800184a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800184c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001850:	627b      	str	r3, [r7, #36]	; 0x24
 8001852:	e002      	b.n	800185a <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001854:	6878      	ldr	r0, [r7, #4]
 8001856:	f000 f949 	bl	8001aec <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800185a:	6a3b      	ldr	r3, [r7, #32]
 800185c:	f003 0308 	and.w	r3, r3, #8
 8001860:	2b00      	cmp	r3, #0
 8001862:	d00c      	beq.n	800187e <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001864:	697b      	ldr	r3, [r7, #20]
 8001866:	f003 0310 	and.w	r3, r3, #16
 800186a:	2b00      	cmp	r3, #0
 800186c:	d007      	beq.n	800187e <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800186e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001870:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001874:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	2210      	movs	r2, #16
 800187c:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800187e:	6a3b      	ldr	r3, [r7, #32]
 8001880:	f003 0304 	and.w	r3, r3, #4
 8001884:	2b00      	cmp	r3, #0
 8001886:	d00b      	beq.n	80018a0 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001888:	697b      	ldr	r3, [r7, #20]
 800188a:	f003 0308 	and.w	r3, r3, #8
 800188e:	2b00      	cmp	r3, #0
 8001890:	d006      	beq.n	80018a0 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	2208      	movs	r2, #8
 8001898:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800189a:	6878      	ldr	r0, [r7, #4]
 800189c:	f000 f930 	bl	8001b00 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80018a0:	6a3b      	ldr	r3, [r7, #32]
 80018a2:	f003 0302 	and.w	r3, r3, #2
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d009      	beq.n	80018be <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	68db      	ldr	r3, [r3, #12]
 80018b0:	f003 0303 	and.w	r3, r3, #3
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d002      	beq.n	80018be <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80018b8:	6878      	ldr	r0, [r7, #4]
 80018ba:	f7fe feb1 	bl	8000620 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80018be:	6a3b      	ldr	r3, [r7, #32]
 80018c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d00c      	beq.n	80018e2 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80018c8:	693b      	ldr	r3, [r7, #16]
 80018ca:	f003 0310 	and.w	r3, r3, #16
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d007      	beq.n	80018e2 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80018d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018d4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80018d8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	2210      	movs	r2, #16
 80018e0:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80018e2:	6a3b      	ldr	r3, [r7, #32]
 80018e4:	f003 0320 	and.w	r3, r3, #32
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d00b      	beq.n	8001904 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80018ec:	693b      	ldr	r3, [r7, #16]
 80018ee:	f003 0308 	and.w	r3, r3, #8
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d006      	beq.n	8001904 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	2208      	movs	r2, #8
 80018fc:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80018fe:	6878      	ldr	r0, [r7, #4]
 8001900:	f000 f912 	bl	8001b28 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001904:	6a3b      	ldr	r3, [r7, #32]
 8001906:	f003 0310 	and.w	r3, r3, #16
 800190a:	2b00      	cmp	r3, #0
 800190c:	d009      	beq.n	8001922 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	691b      	ldr	r3, [r3, #16]
 8001914:	f003 0303 	and.w	r3, r3, #3
 8001918:	2b00      	cmp	r3, #0
 800191a:	d002      	beq.n	8001922 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800191c:	6878      	ldr	r0, [r7, #4]
 800191e:	f000 f8f9 	bl	8001b14 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001922:	6a3b      	ldr	r3, [r7, #32]
 8001924:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001928:	2b00      	cmp	r3, #0
 800192a:	d00b      	beq.n	8001944 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800192c:	69fb      	ldr	r3, [r7, #28]
 800192e:	f003 0310 	and.w	r3, r3, #16
 8001932:	2b00      	cmp	r3, #0
 8001934:	d006      	beq.n	8001944 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	2210      	movs	r2, #16
 800193c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800193e:	6878      	ldr	r0, [r7, #4]
 8001940:	f000 f8fc 	bl	8001b3c <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001944:	6a3b      	ldr	r3, [r7, #32]
 8001946:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800194a:	2b00      	cmp	r3, #0
 800194c:	d00b      	beq.n	8001966 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800194e:	69fb      	ldr	r3, [r7, #28]
 8001950:	f003 0308 	and.w	r3, r3, #8
 8001954:	2b00      	cmp	r3, #0
 8001956:	d006      	beq.n	8001966 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	2208      	movs	r2, #8
 800195e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001960:	6878      	ldr	r0, [r7, #4]
 8001962:	f000 f8f5 	bl	8001b50 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001966:	6a3b      	ldr	r3, [r7, #32]
 8001968:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800196c:	2b00      	cmp	r3, #0
 800196e:	d07b      	beq.n	8001a68 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001970:	69fb      	ldr	r3, [r7, #28]
 8001972:	f003 0304 	and.w	r3, r3, #4
 8001976:	2b00      	cmp	r3, #0
 8001978:	d072      	beq.n	8001a60 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800197a:	6a3b      	ldr	r3, [r7, #32]
 800197c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001980:	2b00      	cmp	r3, #0
 8001982:	d008      	beq.n	8001996 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800198a:	2b00      	cmp	r3, #0
 800198c:	d003      	beq.n	8001996 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800198e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001990:	f043 0301 	orr.w	r3, r3, #1
 8001994:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001996:	6a3b      	ldr	r3, [r7, #32]
 8001998:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800199c:	2b00      	cmp	r3, #0
 800199e:	d008      	beq.n	80019b2 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d003      	beq.n	80019b2 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80019aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ac:	f043 0302 	orr.w	r3, r3, #2
 80019b0:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80019b2:	6a3b      	ldr	r3, [r7, #32]
 80019b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d008      	beq.n	80019ce <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d003      	beq.n	80019ce <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80019c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019c8:	f043 0304 	orr.w	r3, r3, #4
 80019cc:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80019ce:	6a3b      	ldr	r3, [r7, #32]
 80019d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d043      	beq.n	8001a60 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d03e      	beq.n	8001a60 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80019e8:	2b60      	cmp	r3, #96	; 0x60
 80019ea:	d02b      	beq.n	8001a44 <HAL_CAN_IRQHandler+0x32a>
 80019ec:	2b60      	cmp	r3, #96	; 0x60
 80019ee:	d82e      	bhi.n	8001a4e <HAL_CAN_IRQHandler+0x334>
 80019f0:	2b50      	cmp	r3, #80	; 0x50
 80019f2:	d022      	beq.n	8001a3a <HAL_CAN_IRQHandler+0x320>
 80019f4:	2b50      	cmp	r3, #80	; 0x50
 80019f6:	d82a      	bhi.n	8001a4e <HAL_CAN_IRQHandler+0x334>
 80019f8:	2b40      	cmp	r3, #64	; 0x40
 80019fa:	d019      	beq.n	8001a30 <HAL_CAN_IRQHandler+0x316>
 80019fc:	2b40      	cmp	r3, #64	; 0x40
 80019fe:	d826      	bhi.n	8001a4e <HAL_CAN_IRQHandler+0x334>
 8001a00:	2b30      	cmp	r3, #48	; 0x30
 8001a02:	d010      	beq.n	8001a26 <HAL_CAN_IRQHandler+0x30c>
 8001a04:	2b30      	cmp	r3, #48	; 0x30
 8001a06:	d822      	bhi.n	8001a4e <HAL_CAN_IRQHandler+0x334>
 8001a08:	2b10      	cmp	r3, #16
 8001a0a:	d002      	beq.n	8001a12 <HAL_CAN_IRQHandler+0x2f8>
 8001a0c:	2b20      	cmp	r3, #32
 8001a0e:	d005      	beq.n	8001a1c <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001a10:	e01d      	b.n	8001a4e <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a14:	f043 0308 	orr.w	r3, r3, #8
 8001a18:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001a1a:	e019      	b.n	8001a50 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a1e:	f043 0310 	orr.w	r3, r3, #16
 8001a22:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001a24:	e014      	b.n	8001a50 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a28:	f043 0320 	orr.w	r3, r3, #32
 8001a2c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001a2e:	e00f      	b.n	8001a50 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a36:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001a38:	e00a      	b.n	8001a50 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a40:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001a42:	e005      	b.n	8001a50 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a4a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001a4c:	e000      	b.n	8001a50 <HAL_CAN_IRQHandler+0x336>
            break;
 8001a4e:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	699a      	ldr	r2, [r3, #24]
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001a5e:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	2204      	movs	r2, #4
 8001a66:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d008      	beq.n	8001a80 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a74:	431a      	orrs	r2, r3
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001a7a:	6878      	ldr	r0, [r7, #4]
 8001a7c:	f000 f872 	bl	8001b64 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001a80:	bf00      	nop
 8001a82:	3728      	adds	r7, #40	; 0x28
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bd80      	pop	{r7, pc}

08001a88 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b083      	sub	sp, #12
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001a90:	bf00      	nop
 8001a92:	370c      	adds	r7, #12
 8001a94:	46bd      	mov	sp, r7
 8001a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9a:	4770      	bx	lr

08001a9c <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	b083      	sub	sp, #12
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001aa4:	bf00      	nop
 8001aa6:	370c      	adds	r7, #12
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aae:	4770      	bx	lr

08001ab0 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b083      	sub	sp, #12
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001ab8:	bf00      	nop
 8001aba:	370c      	adds	r7, #12
 8001abc:	46bd      	mov	sp, r7
 8001abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac2:	4770      	bx	lr

08001ac4 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	b083      	sub	sp, #12
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001acc:	bf00      	nop
 8001ace:	370c      	adds	r7, #12
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad6:	4770      	bx	lr

08001ad8 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	b083      	sub	sp, #12
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001ae0:	bf00      	nop
 8001ae2:	370c      	adds	r7, #12
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aea:	4770      	bx	lr

08001aec <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001aec:	b480      	push	{r7}
 8001aee:	b083      	sub	sp, #12
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001af4:	bf00      	nop
 8001af6:	370c      	adds	r7, #12
 8001af8:	46bd      	mov	sp, r7
 8001afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afe:	4770      	bx	lr

08001b00 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001b00:	b480      	push	{r7}
 8001b02:	b083      	sub	sp, #12
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001b08:	bf00      	nop
 8001b0a:	370c      	adds	r7, #12
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b12:	4770      	bx	lr

08001b14 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001b14:	b480      	push	{r7}
 8001b16:	b083      	sub	sp, #12
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001b1c:	bf00      	nop
 8001b1e:	370c      	adds	r7, #12
 8001b20:	46bd      	mov	sp, r7
 8001b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b26:	4770      	bx	lr

08001b28 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	b083      	sub	sp, #12
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001b30:	bf00      	nop
 8001b32:	370c      	adds	r7, #12
 8001b34:	46bd      	mov	sp, r7
 8001b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3a:	4770      	bx	lr

08001b3c <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	b083      	sub	sp, #12
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001b44:	bf00      	nop
 8001b46:	370c      	adds	r7, #12
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4e:	4770      	bx	lr

08001b50 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001b50:	b480      	push	{r7}
 8001b52:	b083      	sub	sp, #12
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001b58:	bf00      	nop
 8001b5a:	370c      	adds	r7, #12
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b62:	4770      	bx	lr

08001b64 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001b64:	b480      	push	{r7}
 8001b66:	b083      	sub	sp, #12
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001b6c:	bf00      	nop
 8001b6e:	370c      	adds	r7, #12
 8001b70:	46bd      	mov	sp, r7
 8001b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b76:	4770      	bx	lr

08001b78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	b085      	sub	sp, #20
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	f003 0307 	and.w	r3, r3, #7
 8001b86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b88:	4b0c      	ldr	r3, [pc, #48]	; (8001bbc <__NVIC_SetPriorityGrouping+0x44>)
 8001b8a:	68db      	ldr	r3, [r3, #12]
 8001b8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b8e:	68ba      	ldr	r2, [r7, #8]
 8001b90:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b94:	4013      	ands	r3, r2
 8001b96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b9c:	68bb      	ldr	r3, [r7, #8]
 8001b9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ba0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ba4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ba8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001baa:	4a04      	ldr	r2, [pc, #16]	; (8001bbc <__NVIC_SetPriorityGrouping+0x44>)
 8001bac:	68bb      	ldr	r3, [r7, #8]
 8001bae:	60d3      	str	r3, [r2, #12]
}
 8001bb0:	bf00      	nop
 8001bb2:	3714      	adds	r7, #20
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bba:	4770      	bx	lr
 8001bbc:	e000ed00 	.word	0xe000ed00

08001bc0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bc4:	4b04      	ldr	r3, [pc, #16]	; (8001bd8 <__NVIC_GetPriorityGrouping+0x18>)
 8001bc6:	68db      	ldr	r3, [r3, #12]
 8001bc8:	0a1b      	lsrs	r3, r3, #8
 8001bca:	f003 0307 	and.w	r3, r3, #7
}
 8001bce:	4618      	mov	r0, r3
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd6:	4770      	bx	lr
 8001bd8:	e000ed00 	.word	0xe000ed00

08001bdc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	b083      	sub	sp, #12
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	4603      	mov	r3, r0
 8001be4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001be6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	db0b      	blt.n	8001c06 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bee:	79fb      	ldrb	r3, [r7, #7]
 8001bf0:	f003 021f 	and.w	r2, r3, #31
 8001bf4:	4907      	ldr	r1, [pc, #28]	; (8001c14 <__NVIC_EnableIRQ+0x38>)
 8001bf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bfa:	095b      	lsrs	r3, r3, #5
 8001bfc:	2001      	movs	r0, #1
 8001bfe:	fa00 f202 	lsl.w	r2, r0, r2
 8001c02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c06:	bf00      	nop
 8001c08:	370c      	adds	r7, #12
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c10:	4770      	bx	lr
 8001c12:	bf00      	nop
 8001c14:	e000e100 	.word	0xe000e100

08001c18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	b083      	sub	sp, #12
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	4603      	mov	r3, r0
 8001c20:	6039      	str	r1, [r7, #0]
 8001c22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	db0a      	blt.n	8001c42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	b2da      	uxtb	r2, r3
 8001c30:	490c      	ldr	r1, [pc, #48]	; (8001c64 <__NVIC_SetPriority+0x4c>)
 8001c32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c36:	0112      	lsls	r2, r2, #4
 8001c38:	b2d2      	uxtb	r2, r2
 8001c3a:	440b      	add	r3, r1
 8001c3c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c40:	e00a      	b.n	8001c58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	b2da      	uxtb	r2, r3
 8001c46:	4908      	ldr	r1, [pc, #32]	; (8001c68 <__NVIC_SetPriority+0x50>)
 8001c48:	79fb      	ldrb	r3, [r7, #7]
 8001c4a:	f003 030f 	and.w	r3, r3, #15
 8001c4e:	3b04      	subs	r3, #4
 8001c50:	0112      	lsls	r2, r2, #4
 8001c52:	b2d2      	uxtb	r2, r2
 8001c54:	440b      	add	r3, r1
 8001c56:	761a      	strb	r2, [r3, #24]
}
 8001c58:	bf00      	nop
 8001c5a:	370c      	adds	r7, #12
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c62:	4770      	bx	lr
 8001c64:	e000e100 	.word	0xe000e100
 8001c68:	e000ed00 	.word	0xe000ed00

08001c6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b089      	sub	sp, #36	; 0x24
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	60f8      	str	r0, [r7, #12]
 8001c74:	60b9      	str	r1, [r7, #8]
 8001c76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	f003 0307 	and.w	r3, r3, #7
 8001c7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c80:	69fb      	ldr	r3, [r7, #28]
 8001c82:	f1c3 0307 	rsb	r3, r3, #7
 8001c86:	2b04      	cmp	r3, #4
 8001c88:	bf28      	it	cs
 8001c8a:	2304      	movcs	r3, #4
 8001c8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c8e:	69fb      	ldr	r3, [r7, #28]
 8001c90:	3304      	adds	r3, #4
 8001c92:	2b06      	cmp	r3, #6
 8001c94:	d902      	bls.n	8001c9c <NVIC_EncodePriority+0x30>
 8001c96:	69fb      	ldr	r3, [r7, #28]
 8001c98:	3b03      	subs	r3, #3
 8001c9a:	e000      	b.n	8001c9e <NVIC_EncodePriority+0x32>
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ca0:	f04f 32ff 	mov.w	r2, #4294967295
 8001ca4:	69bb      	ldr	r3, [r7, #24]
 8001ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8001caa:	43da      	mvns	r2, r3
 8001cac:	68bb      	ldr	r3, [r7, #8]
 8001cae:	401a      	ands	r2, r3
 8001cb0:	697b      	ldr	r3, [r7, #20]
 8001cb2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cb4:	f04f 31ff 	mov.w	r1, #4294967295
 8001cb8:	697b      	ldr	r3, [r7, #20]
 8001cba:	fa01 f303 	lsl.w	r3, r1, r3
 8001cbe:	43d9      	mvns	r1, r3
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cc4:	4313      	orrs	r3, r2
         );
}
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	3724      	adds	r7, #36	; 0x24
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd0:	4770      	bx	lr
	...

08001cd4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b082      	sub	sp, #8
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	3b01      	subs	r3, #1
 8001ce0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ce4:	d301      	bcc.n	8001cea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	e00f      	b.n	8001d0a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001cea:	4a0a      	ldr	r2, [pc, #40]	; (8001d14 <SysTick_Config+0x40>)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	3b01      	subs	r3, #1
 8001cf0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001cf2:	210f      	movs	r1, #15
 8001cf4:	f04f 30ff 	mov.w	r0, #4294967295
 8001cf8:	f7ff ff8e 	bl	8001c18 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001cfc:	4b05      	ldr	r3, [pc, #20]	; (8001d14 <SysTick_Config+0x40>)
 8001cfe:	2200      	movs	r2, #0
 8001d00:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d02:	4b04      	ldr	r3, [pc, #16]	; (8001d14 <SysTick_Config+0x40>)
 8001d04:	2207      	movs	r2, #7
 8001d06:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d08:	2300      	movs	r3, #0
}
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	3708      	adds	r7, #8
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}
 8001d12:	bf00      	nop
 8001d14:	e000e010 	.word	0xe000e010

08001d18 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b082      	sub	sp, #8
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d20:	6878      	ldr	r0, [r7, #4]
 8001d22:	f7ff ff29 	bl	8001b78 <__NVIC_SetPriorityGrouping>
}
 8001d26:	bf00      	nop
 8001d28:	3708      	adds	r7, #8
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}

08001d2e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d2e:	b580      	push	{r7, lr}
 8001d30:	b086      	sub	sp, #24
 8001d32:	af00      	add	r7, sp, #0
 8001d34:	4603      	mov	r3, r0
 8001d36:	60b9      	str	r1, [r7, #8]
 8001d38:	607a      	str	r2, [r7, #4]
 8001d3a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d40:	f7ff ff3e 	bl	8001bc0 <__NVIC_GetPriorityGrouping>
 8001d44:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d46:	687a      	ldr	r2, [r7, #4]
 8001d48:	68b9      	ldr	r1, [r7, #8]
 8001d4a:	6978      	ldr	r0, [r7, #20]
 8001d4c:	f7ff ff8e 	bl	8001c6c <NVIC_EncodePriority>
 8001d50:	4602      	mov	r2, r0
 8001d52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d56:	4611      	mov	r1, r2
 8001d58:	4618      	mov	r0, r3
 8001d5a:	f7ff ff5d 	bl	8001c18 <__NVIC_SetPriority>
}
 8001d5e:	bf00      	nop
 8001d60:	3718      	adds	r7, #24
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}

08001d66 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d66:	b580      	push	{r7, lr}
 8001d68:	b082      	sub	sp, #8
 8001d6a:	af00      	add	r7, sp, #0
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d74:	4618      	mov	r0, r3
 8001d76:	f7ff ff31 	bl	8001bdc <__NVIC_EnableIRQ>
}
 8001d7a:	bf00      	nop
 8001d7c:	3708      	adds	r7, #8
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}

08001d82 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d82:	b580      	push	{r7, lr}
 8001d84:	b082      	sub	sp, #8
 8001d86:	af00      	add	r7, sp, #0
 8001d88:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d8a:	6878      	ldr	r0, [r7, #4]
 8001d8c:	f7ff ffa2 	bl	8001cd4 <SysTick_Config>
 8001d90:	4603      	mov	r3, r0
}
 8001d92:	4618      	mov	r0, r3
 8001d94:	3708      	adds	r7, #8
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}
	...

08001d9c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	b089      	sub	sp, #36	; 0x24
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
 8001da4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001da6:	2300      	movs	r3, #0
 8001da8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001daa:	2300      	movs	r3, #0
 8001dac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001dae:	2300      	movs	r3, #0
 8001db0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001db2:	2300      	movs	r3, #0
 8001db4:	61fb      	str	r3, [r7, #28]
 8001db6:	e165      	b.n	8002084 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001db8:	2201      	movs	r2, #1
 8001dba:	69fb      	ldr	r3, [r7, #28]
 8001dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	697a      	ldr	r2, [r7, #20]
 8001dc8:	4013      	ands	r3, r2
 8001dca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001dcc:	693a      	ldr	r2, [r7, #16]
 8001dce:	697b      	ldr	r3, [r7, #20]
 8001dd0:	429a      	cmp	r2, r3
 8001dd2:	f040 8154 	bne.w	800207e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	685b      	ldr	r3, [r3, #4]
 8001dda:	f003 0303 	and.w	r3, r3, #3
 8001dde:	2b01      	cmp	r3, #1
 8001de0:	d005      	beq.n	8001dee <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	685b      	ldr	r3, [r3, #4]
 8001de6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001dea:	2b02      	cmp	r3, #2
 8001dec:	d130      	bne.n	8001e50 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	689b      	ldr	r3, [r3, #8]
 8001df2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001df4:	69fb      	ldr	r3, [r7, #28]
 8001df6:	005b      	lsls	r3, r3, #1
 8001df8:	2203      	movs	r2, #3
 8001dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8001dfe:	43db      	mvns	r3, r3
 8001e00:	69ba      	ldr	r2, [r7, #24]
 8001e02:	4013      	ands	r3, r2
 8001e04:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	68da      	ldr	r2, [r3, #12]
 8001e0a:	69fb      	ldr	r3, [r7, #28]
 8001e0c:	005b      	lsls	r3, r3, #1
 8001e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e12:	69ba      	ldr	r2, [r7, #24]
 8001e14:	4313      	orrs	r3, r2
 8001e16:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	69ba      	ldr	r2, [r7, #24]
 8001e1c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e24:	2201      	movs	r2, #1
 8001e26:	69fb      	ldr	r3, [r7, #28]
 8001e28:	fa02 f303 	lsl.w	r3, r2, r3
 8001e2c:	43db      	mvns	r3, r3
 8001e2e:	69ba      	ldr	r2, [r7, #24]
 8001e30:	4013      	ands	r3, r2
 8001e32:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	091b      	lsrs	r3, r3, #4
 8001e3a:	f003 0201 	and.w	r2, r3, #1
 8001e3e:	69fb      	ldr	r3, [r7, #28]
 8001e40:	fa02 f303 	lsl.w	r3, r2, r3
 8001e44:	69ba      	ldr	r2, [r7, #24]
 8001e46:	4313      	orrs	r3, r2
 8001e48:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	69ba      	ldr	r2, [r7, #24]
 8001e4e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	f003 0303 	and.w	r3, r3, #3
 8001e58:	2b03      	cmp	r3, #3
 8001e5a:	d017      	beq.n	8001e8c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	68db      	ldr	r3, [r3, #12]
 8001e60:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001e62:	69fb      	ldr	r3, [r7, #28]
 8001e64:	005b      	lsls	r3, r3, #1
 8001e66:	2203      	movs	r2, #3
 8001e68:	fa02 f303 	lsl.w	r3, r2, r3
 8001e6c:	43db      	mvns	r3, r3
 8001e6e:	69ba      	ldr	r2, [r7, #24]
 8001e70:	4013      	ands	r3, r2
 8001e72:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	689a      	ldr	r2, [r3, #8]
 8001e78:	69fb      	ldr	r3, [r7, #28]
 8001e7a:	005b      	lsls	r3, r3, #1
 8001e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e80:	69ba      	ldr	r2, [r7, #24]
 8001e82:	4313      	orrs	r3, r2
 8001e84:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	69ba      	ldr	r2, [r7, #24]
 8001e8a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	f003 0303 	and.w	r3, r3, #3
 8001e94:	2b02      	cmp	r3, #2
 8001e96:	d123      	bne.n	8001ee0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e98:	69fb      	ldr	r3, [r7, #28]
 8001e9a:	08da      	lsrs	r2, r3, #3
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	3208      	adds	r2, #8
 8001ea0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ea4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001ea6:	69fb      	ldr	r3, [r7, #28]
 8001ea8:	f003 0307 	and.w	r3, r3, #7
 8001eac:	009b      	lsls	r3, r3, #2
 8001eae:	220f      	movs	r2, #15
 8001eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb4:	43db      	mvns	r3, r3
 8001eb6:	69ba      	ldr	r2, [r7, #24]
 8001eb8:	4013      	ands	r3, r2
 8001eba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	691a      	ldr	r2, [r3, #16]
 8001ec0:	69fb      	ldr	r3, [r7, #28]
 8001ec2:	f003 0307 	and.w	r3, r3, #7
 8001ec6:	009b      	lsls	r3, r3, #2
 8001ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ecc:	69ba      	ldr	r2, [r7, #24]
 8001ece:	4313      	orrs	r3, r2
 8001ed0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001ed2:	69fb      	ldr	r3, [r7, #28]
 8001ed4:	08da      	lsrs	r2, r3, #3
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	3208      	adds	r2, #8
 8001eda:	69b9      	ldr	r1, [r7, #24]
 8001edc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001ee6:	69fb      	ldr	r3, [r7, #28]
 8001ee8:	005b      	lsls	r3, r3, #1
 8001eea:	2203      	movs	r2, #3
 8001eec:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef0:	43db      	mvns	r3, r3
 8001ef2:	69ba      	ldr	r2, [r7, #24]
 8001ef4:	4013      	ands	r3, r2
 8001ef6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	f003 0203 	and.w	r2, r3, #3
 8001f00:	69fb      	ldr	r3, [r7, #28]
 8001f02:	005b      	lsls	r3, r3, #1
 8001f04:	fa02 f303 	lsl.w	r3, r2, r3
 8001f08:	69ba      	ldr	r2, [r7, #24]
 8001f0a:	4313      	orrs	r3, r2
 8001f0c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	69ba      	ldr	r2, [r7, #24]
 8001f12:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	f000 80ae 	beq.w	800207e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f22:	2300      	movs	r3, #0
 8001f24:	60fb      	str	r3, [r7, #12]
 8001f26:	4b5d      	ldr	r3, [pc, #372]	; (800209c <HAL_GPIO_Init+0x300>)
 8001f28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f2a:	4a5c      	ldr	r2, [pc, #368]	; (800209c <HAL_GPIO_Init+0x300>)
 8001f2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f30:	6453      	str	r3, [r2, #68]	; 0x44
 8001f32:	4b5a      	ldr	r3, [pc, #360]	; (800209c <HAL_GPIO_Init+0x300>)
 8001f34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f3a:	60fb      	str	r3, [r7, #12]
 8001f3c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001f3e:	4a58      	ldr	r2, [pc, #352]	; (80020a0 <HAL_GPIO_Init+0x304>)
 8001f40:	69fb      	ldr	r3, [r7, #28]
 8001f42:	089b      	lsrs	r3, r3, #2
 8001f44:	3302      	adds	r3, #2
 8001f46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001f4c:	69fb      	ldr	r3, [r7, #28]
 8001f4e:	f003 0303 	and.w	r3, r3, #3
 8001f52:	009b      	lsls	r3, r3, #2
 8001f54:	220f      	movs	r2, #15
 8001f56:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5a:	43db      	mvns	r3, r3
 8001f5c:	69ba      	ldr	r2, [r7, #24]
 8001f5e:	4013      	ands	r3, r2
 8001f60:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	4a4f      	ldr	r2, [pc, #316]	; (80020a4 <HAL_GPIO_Init+0x308>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d025      	beq.n	8001fb6 <HAL_GPIO_Init+0x21a>
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	4a4e      	ldr	r2, [pc, #312]	; (80020a8 <HAL_GPIO_Init+0x30c>)
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d01f      	beq.n	8001fb2 <HAL_GPIO_Init+0x216>
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	4a4d      	ldr	r2, [pc, #308]	; (80020ac <HAL_GPIO_Init+0x310>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d019      	beq.n	8001fae <HAL_GPIO_Init+0x212>
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	4a4c      	ldr	r2, [pc, #304]	; (80020b0 <HAL_GPIO_Init+0x314>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d013      	beq.n	8001faa <HAL_GPIO_Init+0x20e>
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	4a4b      	ldr	r2, [pc, #300]	; (80020b4 <HAL_GPIO_Init+0x318>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d00d      	beq.n	8001fa6 <HAL_GPIO_Init+0x20a>
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	4a4a      	ldr	r2, [pc, #296]	; (80020b8 <HAL_GPIO_Init+0x31c>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d007      	beq.n	8001fa2 <HAL_GPIO_Init+0x206>
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	4a49      	ldr	r2, [pc, #292]	; (80020bc <HAL_GPIO_Init+0x320>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d101      	bne.n	8001f9e <HAL_GPIO_Init+0x202>
 8001f9a:	2306      	movs	r3, #6
 8001f9c:	e00c      	b.n	8001fb8 <HAL_GPIO_Init+0x21c>
 8001f9e:	2307      	movs	r3, #7
 8001fa0:	e00a      	b.n	8001fb8 <HAL_GPIO_Init+0x21c>
 8001fa2:	2305      	movs	r3, #5
 8001fa4:	e008      	b.n	8001fb8 <HAL_GPIO_Init+0x21c>
 8001fa6:	2304      	movs	r3, #4
 8001fa8:	e006      	b.n	8001fb8 <HAL_GPIO_Init+0x21c>
 8001faa:	2303      	movs	r3, #3
 8001fac:	e004      	b.n	8001fb8 <HAL_GPIO_Init+0x21c>
 8001fae:	2302      	movs	r3, #2
 8001fb0:	e002      	b.n	8001fb8 <HAL_GPIO_Init+0x21c>
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	e000      	b.n	8001fb8 <HAL_GPIO_Init+0x21c>
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	69fa      	ldr	r2, [r7, #28]
 8001fba:	f002 0203 	and.w	r2, r2, #3
 8001fbe:	0092      	lsls	r2, r2, #2
 8001fc0:	4093      	lsls	r3, r2
 8001fc2:	69ba      	ldr	r2, [r7, #24]
 8001fc4:	4313      	orrs	r3, r2
 8001fc6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001fc8:	4935      	ldr	r1, [pc, #212]	; (80020a0 <HAL_GPIO_Init+0x304>)
 8001fca:	69fb      	ldr	r3, [r7, #28]
 8001fcc:	089b      	lsrs	r3, r3, #2
 8001fce:	3302      	adds	r3, #2
 8001fd0:	69ba      	ldr	r2, [r7, #24]
 8001fd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001fd6:	4b3a      	ldr	r3, [pc, #232]	; (80020c0 <HAL_GPIO_Init+0x324>)
 8001fd8:	689b      	ldr	r3, [r3, #8]
 8001fda:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fdc:	693b      	ldr	r3, [r7, #16]
 8001fde:	43db      	mvns	r3, r3
 8001fe0:	69ba      	ldr	r2, [r7, #24]
 8001fe2:	4013      	ands	r3, r2
 8001fe4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d003      	beq.n	8001ffa <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001ff2:	69ba      	ldr	r2, [r7, #24]
 8001ff4:	693b      	ldr	r3, [r7, #16]
 8001ff6:	4313      	orrs	r3, r2
 8001ff8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001ffa:	4a31      	ldr	r2, [pc, #196]	; (80020c0 <HAL_GPIO_Init+0x324>)
 8001ffc:	69bb      	ldr	r3, [r7, #24]
 8001ffe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002000:	4b2f      	ldr	r3, [pc, #188]	; (80020c0 <HAL_GPIO_Init+0x324>)
 8002002:	68db      	ldr	r3, [r3, #12]
 8002004:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002006:	693b      	ldr	r3, [r7, #16]
 8002008:	43db      	mvns	r3, r3
 800200a:	69ba      	ldr	r2, [r7, #24]
 800200c:	4013      	ands	r3, r2
 800200e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002018:	2b00      	cmp	r3, #0
 800201a:	d003      	beq.n	8002024 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800201c:	69ba      	ldr	r2, [r7, #24]
 800201e:	693b      	ldr	r3, [r7, #16]
 8002020:	4313      	orrs	r3, r2
 8002022:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002024:	4a26      	ldr	r2, [pc, #152]	; (80020c0 <HAL_GPIO_Init+0x324>)
 8002026:	69bb      	ldr	r3, [r7, #24]
 8002028:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800202a:	4b25      	ldr	r3, [pc, #148]	; (80020c0 <HAL_GPIO_Init+0x324>)
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002030:	693b      	ldr	r3, [r7, #16]
 8002032:	43db      	mvns	r3, r3
 8002034:	69ba      	ldr	r2, [r7, #24]
 8002036:	4013      	ands	r3, r2
 8002038:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	685b      	ldr	r3, [r3, #4]
 800203e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002042:	2b00      	cmp	r3, #0
 8002044:	d003      	beq.n	800204e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002046:	69ba      	ldr	r2, [r7, #24]
 8002048:	693b      	ldr	r3, [r7, #16]
 800204a:	4313      	orrs	r3, r2
 800204c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800204e:	4a1c      	ldr	r2, [pc, #112]	; (80020c0 <HAL_GPIO_Init+0x324>)
 8002050:	69bb      	ldr	r3, [r7, #24]
 8002052:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002054:	4b1a      	ldr	r3, [pc, #104]	; (80020c0 <HAL_GPIO_Init+0x324>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800205a:	693b      	ldr	r3, [r7, #16]
 800205c:	43db      	mvns	r3, r3
 800205e:	69ba      	ldr	r2, [r7, #24]
 8002060:	4013      	ands	r3, r2
 8002062:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800206c:	2b00      	cmp	r3, #0
 800206e:	d003      	beq.n	8002078 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002070:	69ba      	ldr	r2, [r7, #24]
 8002072:	693b      	ldr	r3, [r7, #16]
 8002074:	4313      	orrs	r3, r2
 8002076:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002078:	4a11      	ldr	r2, [pc, #68]	; (80020c0 <HAL_GPIO_Init+0x324>)
 800207a:	69bb      	ldr	r3, [r7, #24]
 800207c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800207e:	69fb      	ldr	r3, [r7, #28]
 8002080:	3301      	adds	r3, #1
 8002082:	61fb      	str	r3, [r7, #28]
 8002084:	69fb      	ldr	r3, [r7, #28]
 8002086:	2b0f      	cmp	r3, #15
 8002088:	f67f ae96 	bls.w	8001db8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800208c:	bf00      	nop
 800208e:	bf00      	nop
 8002090:	3724      	adds	r7, #36	; 0x24
 8002092:	46bd      	mov	sp, r7
 8002094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002098:	4770      	bx	lr
 800209a:	bf00      	nop
 800209c:	40023800 	.word	0x40023800
 80020a0:	40013800 	.word	0x40013800
 80020a4:	40020000 	.word	0x40020000
 80020a8:	40020400 	.word	0x40020400
 80020ac:	40020800 	.word	0x40020800
 80020b0:	40020c00 	.word	0x40020c00
 80020b4:	40021000 	.word	0x40021000
 80020b8:	40021400 	.word	0x40021400
 80020bc:	40021800 	.word	0x40021800
 80020c0:	40013c00 	.word	0x40013c00

080020c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020c4:	b480      	push	{r7}
 80020c6:	b083      	sub	sp, #12
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
 80020cc:	460b      	mov	r3, r1
 80020ce:	807b      	strh	r3, [r7, #2]
 80020d0:	4613      	mov	r3, r2
 80020d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80020d4:	787b      	ldrb	r3, [r7, #1]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d003      	beq.n	80020e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80020da:	887a      	ldrh	r2, [r7, #2]
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80020e0:	e003      	b.n	80020ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80020e2:	887b      	ldrh	r3, [r7, #2]
 80020e4:	041a      	lsls	r2, r3, #16
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	619a      	str	r2, [r3, #24]
}
 80020ea:	bf00      	nop
 80020ec:	370c      	adds	r7, #12
 80020ee:	46bd      	mov	sp, r7
 80020f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f4:	4770      	bx	lr

080020f6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80020f6:	b480      	push	{r7}
 80020f8:	b085      	sub	sp, #20
 80020fa:	af00      	add	r7, sp, #0
 80020fc:	6078      	str	r0, [r7, #4]
 80020fe:	460b      	mov	r3, r1
 8002100:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	695b      	ldr	r3, [r3, #20]
 8002106:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002108:	887a      	ldrh	r2, [r7, #2]
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	4013      	ands	r3, r2
 800210e:	041a      	lsls	r2, r3, #16
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	43d9      	mvns	r1, r3
 8002114:	887b      	ldrh	r3, [r7, #2]
 8002116:	400b      	ands	r3, r1
 8002118:	431a      	orrs	r2, r3
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	619a      	str	r2, [r3, #24]
}
 800211e:	bf00      	nop
 8002120:	3714      	adds	r7, #20
 8002122:	46bd      	mov	sp, r7
 8002124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002128:	4770      	bx	lr
	...

0800212c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b082      	sub	sp, #8
 8002130:	af00      	add	r7, sp, #0
 8002132:	4603      	mov	r3, r0
 8002134:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002136:	4b08      	ldr	r3, [pc, #32]	; (8002158 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002138:	695a      	ldr	r2, [r3, #20]
 800213a:	88fb      	ldrh	r3, [r7, #6]
 800213c:	4013      	ands	r3, r2
 800213e:	2b00      	cmp	r3, #0
 8002140:	d006      	beq.n	8002150 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002142:	4a05      	ldr	r2, [pc, #20]	; (8002158 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002144:	88fb      	ldrh	r3, [r7, #6]
 8002146:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002148:	88fb      	ldrh	r3, [r7, #6]
 800214a:	4618      	mov	r0, r3
 800214c:	f7fe fa32 	bl	80005b4 <HAL_GPIO_EXTI_Callback>
  }
}
 8002150:	bf00      	nop
 8002152:	3708      	adds	r7, #8
 8002154:	46bd      	mov	sp, r7
 8002156:	bd80      	pop	{r7, pc}
 8002158:	40013c00 	.word	0x40013c00

0800215c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b084      	sub	sp, #16
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
 8002164:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d101      	bne.n	8002170 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800216c:	2301      	movs	r3, #1
 800216e:	e0cc      	b.n	800230a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002170:	4b68      	ldr	r3, [pc, #416]	; (8002314 <HAL_RCC_ClockConfig+0x1b8>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f003 030f 	and.w	r3, r3, #15
 8002178:	683a      	ldr	r2, [r7, #0]
 800217a:	429a      	cmp	r2, r3
 800217c:	d90c      	bls.n	8002198 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800217e:	4b65      	ldr	r3, [pc, #404]	; (8002314 <HAL_RCC_ClockConfig+0x1b8>)
 8002180:	683a      	ldr	r2, [r7, #0]
 8002182:	b2d2      	uxtb	r2, r2
 8002184:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002186:	4b63      	ldr	r3, [pc, #396]	; (8002314 <HAL_RCC_ClockConfig+0x1b8>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f003 030f 	and.w	r3, r3, #15
 800218e:	683a      	ldr	r2, [r7, #0]
 8002190:	429a      	cmp	r2, r3
 8002192:	d001      	beq.n	8002198 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002194:	2301      	movs	r3, #1
 8002196:	e0b8      	b.n	800230a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f003 0302 	and.w	r3, r3, #2
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d020      	beq.n	80021e6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f003 0304 	and.w	r3, r3, #4
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d005      	beq.n	80021bc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80021b0:	4b59      	ldr	r3, [pc, #356]	; (8002318 <HAL_RCC_ClockConfig+0x1bc>)
 80021b2:	689b      	ldr	r3, [r3, #8]
 80021b4:	4a58      	ldr	r2, [pc, #352]	; (8002318 <HAL_RCC_ClockConfig+0x1bc>)
 80021b6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80021ba:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f003 0308 	and.w	r3, r3, #8
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d005      	beq.n	80021d4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80021c8:	4b53      	ldr	r3, [pc, #332]	; (8002318 <HAL_RCC_ClockConfig+0x1bc>)
 80021ca:	689b      	ldr	r3, [r3, #8]
 80021cc:	4a52      	ldr	r2, [pc, #328]	; (8002318 <HAL_RCC_ClockConfig+0x1bc>)
 80021ce:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80021d2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021d4:	4b50      	ldr	r3, [pc, #320]	; (8002318 <HAL_RCC_ClockConfig+0x1bc>)
 80021d6:	689b      	ldr	r3, [r3, #8]
 80021d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	689b      	ldr	r3, [r3, #8]
 80021e0:	494d      	ldr	r1, [pc, #308]	; (8002318 <HAL_RCC_ClockConfig+0x1bc>)
 80021e2:	4313      	orrs	r3, r2
 80021e4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f003 0301 	and.w	r3, r3, #1
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d044      	beq.n	800227c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	2b01      	cmp	r3, #1
 80021f8:	d107      	bne.n	800220a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021fa:	4b47      	ldr	r3, [pc, #284]	; (8002318 <HAL_RCC_ClockConfig+0x1bc>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002202:	2b00      	cmp	r3, #0
 8002204:	d119      	bne.n	800223a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002206:	2301      	movs	r3, #1
 8002208:	e07f      	b.n	800230a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	2b02      	cmp	r3, #2
 8002210:	d003      	beq.n	800221a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002216:	2b03      	cmp	r3, #3
 8002218:	d107      	bne.n	800222a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800221a:	4b3f      	ldr	r3, [pc, #252]	; (8002318 <HAL_RCC_ClockConfig+0x1bc>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002222:	2b00      	cmp	r3, #0
 8002224:	d109      	bne.n	800223a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002226:	2301      	movs	r3, #1
 8002228:	e06f      	b.n	800230a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800222a:	4b3b      	ldr	r3, [pc, #236]	; (8002318 <HAL_RCC_ClockConfig+0x1bc>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f003 0302 	and.w	r3, r3, #2
 8002232:	2b00      	cmp	r3, #0
 8002234:	d101      	bne.n	800223a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002236:	2301      	movs	r3, #1
 8002238:	e067      	b.n	800230a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800223a:	4b37      	ldr	r3, [pc, #220]	; (8002318 <HAL_RCC_ClockConfig+0x1bc>)
 800223c:	689b      	ldr	r3, [r3, #8]
 800223e:	f023 0203 	bic.w	r2, r3, #3
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	4934      	ldr	r1, [pc, #208]	; (8002318 <HAL_RCC_ClockConfig+0x1bc>)
 8002248:	4313      	orrs	r3, r2
 800224a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800224c:	f7fe fe02 	bl	8000e54 <HAL_GetTick>
 8002250:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002252:	e00a      	b.n	800226a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002254:	f7fe fdfe 	bl	8000e54 <HAL_GetTick>
 8002258:	4602      	mov	r2, r0
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	1ad3      	subs	r3, r2, r3
 800225e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002262:	4293      	cmp	r3, r2
 8002264:	d901      	bls.n	800226a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002266:	2303      	movs	r3, #3
 8002268:	e04f      	b.n	800230a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800226a:	4b2b      	ldr	r3, [pc, #172]	; (8002318 <HAL_RCC_ClockConfig+0x1bc>)
 800226c:	689b      	ldr	r3, [r3, #8]
 800226e:	f003 020c 	and.w	r2, r3, #12
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	009b      	lsls	r3, r3, #2
 8002278:	429a      	cmp	r2, r3
 800227a:	d1eb      	bne.n	8002254 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800227c:	4b25      	ldr	r3, [pc, #148]	; (8002314 <HAL_RCC_ClockConfig+0x1b8>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f003 030f 	and.w	r3, r3, #15
 8002284:	683a      	ldr	r2, [r7, #0]
 8002286:	429a      	cmp	r2, r3
 8002288:	d20c      	bcs.n	80022a4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800228a:	4b22      	ldr	r3, [pc, #136]	; (8002314 <HAL_RCC_ClockConfig+0x1b8>)
 800228c:	683a      	ldr	r2, [r7, #0]
 800228e:	b2d2      	uxtb	r2, r2
 8002290:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002292:	4b20      	ldr	r3, [pc, #128]	; (8002314 <HAL_RCC_ClockConfig+0x1b8>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f003 030f 	and.w	r3, r3, #15
 800229a:	683a      	ldr	r2, [r7, #0]
 800229c:	429a      	cmp	r2, r3
 800229e:	d001      	beq.n	80022a4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80022a0:	2301      	movs	r3, #1
 80022a2:	e032      	b.n	800230a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f003 0304 	and.w	r3, r3, #4
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d008      	beq.n	80022c2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80022b0:	4b19      	ldr	r3, [pc, #100]	; (8002318 <HAL_RCC_ClockConfig+0x1bc>)
 80022b2:	689b      	ldr	r3, [r3, #8]
 80022b4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	68db      	ldr	r3, [r3, #12]
 80022bc:	4916      	ldr	r1, [pc, #88]	; (8002318 <HAL_RCC_ClockConfig+0x1bc>)
 80022be:	4313      	orrs	r3, r2
 80022c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f003 0308 	and.w	r3, r3, #8
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d009      	beq.n	80022e2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80022ce:	4b12      	ldr	r3, [pc, #72]	; (8002318 <HAL_RCC_ClockConfig+0x1bc>)
 80022d0:	689b      	ldr	r3, [r3, #8]
 80022d2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	691b      	ldr	r3, [r3, #16]
 80022da:	00db      	lsls	r3, r3, #3
 80022dc:	490e      	ldr	r1, [pc, #56]	; (8002318 <HAL_RCC_ClockConfig+0x1bc>)
 80022de:	4313      	orrs	r3, r2
 80022e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80022e2:	f000 f821 	bl	8002328 <HAL_RCC_GetSysClockFreq>
 80022e6:	4602      	mov	r2, r0
 80022e8:	4b0b      	ldr	r3, [pc, #44]	; (8002318 <HAL_RCC_ClockConfig+0x1bc>)
 80022ea:	689b      	ldr	r3, [r3, #8]
 80022ec:	091b      	lsrs	r3, r3, #4
 80022ee:	f003 030f 	and.w	r3, r3, #15
 80022f2:	490a      	ldr	r1, [pc, #40]	; (800231c <HAL_RCC_ClockConfig+0x1c0>)
 80022f4:	5ccb      	ldrb	r3, [r1, r3]
 80022f6:	fa22 f303 	lsr.w	r3, r2, r3
 80022fa:	4a09      	ldr	r2, [pc, #36]	; (8002320 <HAL_RCC_ClockConfig+0x1c4>)
 80022fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80022fe:	4b09      	ldr	r3, [pc, #36]	; (8002324 <HAL_RCC_ClockConfig+0x1c8>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4618      	mov	r0, r3
 8002304:	f7fe fd62 	bl	8000dcc <HAL_InitTick>

  return HAL_OK;
 8002308:	2300      	movs	r3, #0
}
 800230a:	4618      	mov	r0, r3
 800230c:	3710      	adds	r7, #16
 800230e:	46bd      	mov	sp, r7
 8002310:	bd80      	pop	{r7, pc}
 8002312:	bf00      	nop
 8002314:	40023c00 	.word	0x40023c00
 8002318:	40023800 	.word	0x40023800
 800231c:	08003db8 	.word	0x08003db8
 8002320:	20000000 	.word	0x20000000
 8002324:	20000004 	.word	0x20000004

08002328 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002328:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800232c:	b0ae      	sub	sp, #184	; 0xb8
 800232e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002330:	2300      	movs	r3, #0
 8002332:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8002336:	2300      	movs	r3, #0
 8002338:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 800233c:	2300      	movs	r3, #0
 800233e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8002342:	2300      	movs	r3, #0
 8002344:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8002348:	2300      	movs	r3, #0
 800234a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800234e:	4bcb      	ldr	r3, [pc, #812]	; (800267c <HAL_RCC_GetSysClockFreq+0x354>)
 8002350:	689b      	ldr	r3, [r3, #8]
 8002352:	f003 030c 	and.w	r3, r3, #12
 8002356:	2b0c      	cmp	r3, #12
 8002358:	f200 8206 	bhi.w	8002768 <HAL_RCC_GetSysClockFreq+0x440>
 800235c:	a201      	add	r2, pc, #4	; (adr r2, 8002364 <HAL_RCC_GetSysClockFreq+0x3c>)
 800235e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002362:	bf00      	nop
 8002364:	08002399 	.word	0x08002399
 8002368:	08002769 	.word	0x08002769
 800236c:	08002769 	.word	0x08002769
 8002370:	08002769 	.word	0x08002769
 8002374:	080023a1 	.word	0x080023a1
 8002378:	08002769 	.word	0x08002769
 800237c:	08002769 	.word	0x08002769
 8002380:	08002769 	.word	0x08002769
 8002384:	080023a9 	.word	0x080023a9
 8002388:	08002769 	.word	0x08002769
 800238c:	08002769 	.word	0x08002769
 8002390:	08002769 	.word	0x08002769
 8002394:	08002599 	.word	0x08002599
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002398:	4bb9      	ldr	r3, [pc, #740]	; (8002680 <HAL_RCC_GetSysClockFreq+0x358>)
 800239a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 800239e:	e1e7      	b.n	8002770 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80023a0:	4bb8      	ldr	r3, [pc, #736]	; (8002684 <HAL_RCC_GetSysClockFreq+0x35c>)
 80023a2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80023a6:	e1e3      	b.n	8002770 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80023a8:	4bb4      	ldr	r3, [pc, #720]	; (800267c <HAL_RCC_GetSysClockFreq+0x354>)
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80023b0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80023b4:	4bb1      	ldr	r3, [pc, #708]	; (800267c <HAL_RCC_GetSysClockFreq+0x354>)
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d071      	beq.n	80024a4 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80023c0:	4bae      	ldr	r3, [pc, #696]	; (800267c <HAL_RCC_GetSysClockFreq+0x354>)
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	099b      	lsrs	r3, r3, #6
 80023c6:	2200      	movs	r2, #0
 80023c8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80023cc:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80023d0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80023d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80023d8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80023dc:	2300      	movs	r3, #0
 80023de:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80023e2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80023e6:	4622      	mov	r2, r4
 80023e8:	462b      	mov	r3, r5
 80023ea:	f04f 0000 	mov.w	r0, #0
 80023ee:	f04f 0100 	mov.w	r1, #0
 80023f2:	0159      	lsls	r1, r3, #5
 80023f4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80023f8:	0150      	lsls	r0, r2, #5
 80023fa:	4602      	mov	r2, r0
 80023fc:	460b      	mov	r3, r1
 80023fe:	4621      	mov	r1, r4
 8002400:	1a51      	subs	r1, r2, r1
 8002402:	6439      	str	r1, [r7, #64]	; 0x40
 8002404:	4629      	mov	r1, r5
 8002406:	eb63 0301 	sbc.w	r3, r3, r1
 800240a:	647b      	str	r3, [r7, #68]	; 0x44
 800240c:	f04f 0200 	mov.w	r2, #0
 8002410:	f04f 0300 	mov.w	r3, #0
 8002414:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8002418:	4649      	mov	r1, r9
 800241a:	018b      	lsls	r3, r1, #6
 800241c:	4641      	mov	r1, r8
 800241e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002422:	4641      	mov	r1, r8
 8002424:	018a      	lsls	r2, r1, #6
 8002426:	4641      	mov	r1, r8
 8002428:	1a51      	subs	r1, r2, r1
 800242a:	63b9      	str	r1, [r7, #56]	; 0x38
 800242c:	4649      	mov	r1, r9
 800242e:	eb63 0301 	sbc.w	r3, r3, r1
 8002432:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002434:	f04f 0200 	mov.w	r2, #0
 8002438:	f04f 0300 	mov.w	r3, #0
 800243c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8002440:	4649      	mov	r1, r9
 8002442:	00cb      	lsls	r3, r1, #3
 8002444:	4641      	mov	r1, r8
 8002446:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800244a:	4641      	mov	r1, r8
 800244c:	00ca      	lsls	r2, r1, #3
 800244e:	4610      	mov	r0, r2
 8002450:	4619      	mov	r1, r3
 8002452:	4603      	mov	r3, r0
 8002454:	4622      	mov	r2, r4
 8002456:	189b      	adds	r3, r3, r2
 8002458:	633b      	str	r3, [r7, #48]	; 0x30
 800245a:	462b      	mov	r3, r5
 800245c:	460a      	mov	r2, r1
 800245e:	eb42 0303 	adc.w	r3, r2, r3
 8002462:	637b      	str	r3, [r7, #52]	; 0x34
 8002464:	f04f 0200 	mov.w	r2, #0
 8002468:	f04f 0300 	mov.w	r3, #0
 800246c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002470:	4629      	mov	r1, r5
 8002472:	024b      	lsls	r3, r1, #9
 8002474:	4621      	mov	r1, r4
 8002476:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800247a:	4621      	mov	r1, r4
 800247c:	024a      	lsls	r2, r1, #9
 800247e:	4610      	mov	r0, r2
 8002480:	4619      	mov	r1, r3
 8002482:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002486:	2200      	movs	r2, #0
 8002488:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800248c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002490:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8002494:	f7fd ff0c 	bl	80002b0 <__aeabi_uldivmod>
 8002498:	4602      	mov	r2, r0
 800249a:	460b      	mov	r3, r1
 800249c:	4613      	mov	r3, r2
 800249e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80024a2:	e067      	b.n	8002574 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80024a4:	4b75      	ldr	r3, [pc, #468]	; (800267c <HAL_RCC_GetSysClockFreq+0x354>)
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	099b      	lsrs	r3, r3, #6
 80024aa:	2200      	movs	r2, #0
 80024ac:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80024b0:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80024b4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80024b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80024bc:	67bb      	str	r3, [r7, #120]	; 0x78
 80024be:	2300      	movs	r3, #0
 80024c0:	67fb      	str	r3, [r7, #124]	; 0x7c
 80024c2:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 80024c6:	4622      	mov	r2, r4
 80024c8:	462b      	mov	r3, r5
 80024ca:	f04f 0000 	mov.w	r0, #0
 80024ce:	f04f 0100 	mov.w	r1, #0
 80024d2:	0159      	lsls	r1, r3, #5
 80024d4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80024d8:	0150      	lsls	r0, r2, #5
 80024da:	4602      	mov	r2, r0
 80024dc:	460b      	mov	r3, r1
 80024de:	4621      	mov	r1, r4
 80024e0:	1a51      	subs	r1, r2, r1
 80024e2:	62b9      	str	r1, [r7, #40]	; 0x28
 80024e4:	4629      	mov	r1, r5
 80024e6:	eb63 0301 	sbc.w	r3, r3, r1
 80024ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 80024ec:	f04f 0200 	mov.w	r2, #0
 80024f0:	f04f 0300 	mov.w	r3, #0
 80024f4:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 80024f8:	4649      	mov	r1, r9
 80024fa:	018b      	lsls	r3, r1, #6
 80024fc:	4641      	mov	r1, r8
 80024fe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002502:	4641      	mov	r1, r8
 8002504:	018a      	lsls	r2, r1, #6
 8002506:	4641      	mov	r1, r8
 8002508:	ebb2 0a01 	subs.w	sl, r2, r1
 800250c:	4649      	mov	r1, r9
 800250e:	eb63 0b01 	sbc.w	fp, r3, r1
 8002512:	f04f 0200 	mov.w	r2, #0
 8002516:	f04f 0300 	mov.w	r3, #0
 800251a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800251e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002522:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002526:	4692      	mov	sl, r2
 8002528:	469b      	mov	fp, r3
 800252a:	4623      	mov	r3, r4
 800252c:	eb1a 0303 	adds.w	r3, sl, r3
 8002530:	623b      	str	r3, [r7, #32]
 8002532:	462b      	mov	r3, r5
 8002534:	eb4b 0303 	adc.w	r3, fp, r3
 8002538:	627b      	str	r3, [r7, #36]	; 0x24
 800253a:	f04f 0200 	mov.w	r2, #0
 800253e:	f04f 0300 	mov.w	r3, #0
 8002542:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002546:	4629      	mov	r1, r5
 8002548:	028b      	lsls	r3, r1, #10
 800254a:	4621      	mov	r1, r4
 800254c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002550:	4621      	mov	r1, r4
 8002552:	028a      	lsls	r2, r1, #10
 8002554:	4610      	mov	r0, r2
 8002556:	4619      	mov	r1, r3
 8002558:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800255c:	2200      	movs	r2, #0
 800255e:	673b      	str	r3, [r7, #112]	; 0x70
 8002560:	677a      	str	r2, [r7, #116]	; 0x74
 8002562:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8002566:	f7fd fea3 	bl	80002b0 <__aeabi_uldivmod>
 800256a:	4602      	mov	r2, r0
 800256c:	460b      	mov	r3, r1
 800256e:	4613      	mov	r3, r2
 8002570:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002574:	4b41      	ldr	r3, [pc, #260]	; (800267c <HAL_RCC_GetSysClockFreq+0x354>)
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	0c1b      	lsrs	r3, r3, #16
 800257a:	f003 0303 	and.w	r3, r3, #3
 800257e:	3301      	adds	r3, #1
 8002580:	005b      	lsls	r3, r3, #1
 8002582:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8002586:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800258a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800258e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002592:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002596:	e0eb      	b.n	8002770 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002598:	4b38      	ldr	r3, [pc, #224]	; (800267c <HAL_RCC_GetSysClockFreq+0x354>)
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80025a0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80025a4:	4b35      	ldr	r3, [pc, #212]	; (800267c <HAL_RCC_GetSysClockFreq+0x354>)
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d06b      	beq.n	8002688 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025b0:	4b32      	ldr	r3, [pc, #200]	; (800267c <HAL_RCC_GetSysClockFreq+0x354>)
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	099b      	lsrs	r3, r3, #6
 80025b6:	2200      	movs	r2, #0
 80025b8:	66bb      	str	r3, [r7, #104]	; 0x68
 80025ba:	66fa      	str	r2, [r7, #108]	; 0x6c
 80025bc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80025be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80025c2:	663b      	str	r3, [r7, #96]	; 0x60
 80025c4:	2300      	movs	r3, #0
 80025c6:	667b      	str	r3, [r7, #100]	; 0x64
 80025c8:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80025cc:	4622      	mov	r2, r4
 80025ce:	462b      	mov	r3, r5
 80025d0:	f04f 0000 	mov.w	r0, #0
 80025d4:	f04f 0100 	mov.w	r1, #0
 80025d8:	0159      	lsls	r1, r3, #5
 80025da:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80025de:	0150      	lsls	r0, r2, #5
 80025e0:	4602      	mov	r2, r0
 80025e2:	460b      	mov	r3, r1
 80025e4:	4621      	mov	r1, r4
 80025e6:	1a51      	subs	r1, r2, r1
 80025e8:	61b9      	str	r1, [r7, #24]
 80025ea:	4629      	mov	r1, r5
 80025ec:	eb63 0301 	sbc.w	r3, r3, r1
 80025f0:	61fb      	str	r3, [r7, #28]
 80025f2:	f04f 0200 	mov.w	r2, #0
 80025f6:	f04f 0300 	mov.w	r3, #0
 80025fa:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80025fe:	4659      	mov	r1, fp
 8002600:	018b      	lsls	r3, r1, #6
 8002602:	4651      	mov	r1, sl
 8002604:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002608:	4651      	mov	r1, sl
 800260a:	018a      	lsls	r2, r1, #6
 800260c:	4651      	mov	r1, sl
 800260e:	ebb2 0801 	subs.w	r8, r2, r1
 8002612:	4659      	mov	r1, fp
 8002614:	eb63 0901 	sbc.w	r9, r3, r1
 8002618:	f04f 0200 	mov.w	r2, #0
 800261c:	f04f 0300 	mov.w	r3, #0
 8002620:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002624:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002628:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800262c:	4690      	mov	r8, r2
 800262e:	4699      	mov	r9, r3
 8002630:	4623      	mov	r3, r4
 8002632:	eb18 0303 	adds.w	r3, r8, r3
 8002636:	613b      	str	r3, [r7, #16]
 8002638:	462b      	mov	r3, r5
 800263a:	eb49 0303 	adc.w	r3, r9, r3
 800263e:	617b      	str	r3, [r7, #20]
 8002640:	f04f 0200 	mov.w	r2, #0
 8002644:	f04f 0300 	mov.w	r3, #0
 8002648:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800264c:	4629      	mov	r1, r5
 800264e:	024b      	lsls	r3, r1, #9
 8002650:	4621      	mov	r1, r4
 8002652:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002656:	4621      	mov	r1, r4
 8002658:	024a      	lsls	r2, r1, #9
 800265a:	4610      	mov	r0, r2
 800265c:	4619      	mov	r1, r3
 800265e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002662:	2200      	movs	r2, #0
 8002664:	65bb      	str	r3, [r7, #88]	; 0x58
 8002666:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002668:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800266c:	f7fd fe20 	bl	80002b0 <__aeabi_uldivmod>
 8002670:	4602      	mov	r2, r0
 8002672:	460b      	mov	r3, r1
 8002674:	4613      	mov	r3, r2
 8002676:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800267a:	e065      	b.n	8002748 <HAL_RCC_GetSysClockFreq+0x420>
 800267c:	40023800 	.word	0x40023800
 8002680:	00f42400 	.word	0x00f42400
 8002684:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002688:	4b3d      	ldr	r3, [pc, #244]	; (8002780 <HAL_RCC_GetSysClockFreq+0x458>)
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	099b      	lsrs	r3, r3, #6
 800268e:	2200      	movs	r2, #0
 8002690:	4618      	mov	r0, r3
 8002692:	4611      	mov	r1, r2
 8002694:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002698:	653b      	str	r3, [r7, #80]	; 0x50
 800269a:	2300      	movs	r3, #0
 800269c:	657b      	str	r3, [r7, #84]	; 0x54
 800269e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 80026a2:	4642      	mov	r2, r8
 80026a4:	464b      	mov	r3, r9
 80026a6:	f04f 0000 	mov.w	r0, #0
 80026aa:	f04f 0100 	mov.w	r1, #0
 80026ae:	0159      	lsls	r1, r3, #5
 80026b0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80026b4:	0150      	lsls	r0, r2, #5
 80026b6:	4602      	mov	r2, r0
 80026b8:	460b      	mov	r3, r1
 80026ba:	4641      	mov	r1, r8
 80026bc:	1a51      	subs	r1, r2, r1
 80026be:	60b9      	str	r1, [r7, #8]
 80026c0:	4649      	mov	r1, r9
 80026c2:	eb63 0301 	sbc.w	r3, r3, r1
 80026c6:	60fb      	str	r3, [r7, #12]
 80026c8:	f04f 0200 	mov.w	r2, #0
 80026cc:	f04f 0300 	mov.w	r3, #0
 80026d0:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80026d4:	4659      	mov	r1, fp
 80026d6:	018b      	lsls	r3, r1, #6
 80026d8:	4651      	mov	r1, sl
 80026da:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80026de:	4651      	mov	r1, sl
 80026e0:	018a      	lsls	r2, r1, #6
 80026e2:	4651      	mov	r1, sl
 80026e4:	1a54      	subs	r4, r2, r1
 80026e6:	4659      	mov	r1, fp
 80026e8:	eb63 0501 	sbc.w	r5, r3, r1
 80026ec:	f04f 0200 	mov.w	r2, #0
 80026f0:	f04f 0300 	mov.w	r3, #0
 80026f4:	00eb      	lsls	r3, r5, #3
 80026f6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80026fa:	00e2      	lsls	r2, r4, #3
 80026fc:	4614      	mov	r4, r2
 80026fe:	461d      	mov	r5, r3
 8002700:	4643      	mov	r3, r8
 8002702:	18e3      	adds	r3, r4, r3
 8002704:	603b      	str	r3, [r7, #0]
 8002706:	464b      	mov	r3, r9
 8002708:	eb45 0303 	adc.w	r3, r5, r3
 800270c:	607b      	str	r3, [r7, #4]
 800270e:	f04f 0200 	mov.w	r2, #0
 8002712:	f04f 0300 	mov.w	r3, #0
 8002716:	e9d7 4500 	ldrd	r4, r5, [r7]
 800271a:	4629      	mov	r1, r5
 800271c:	028b      	lsls	r3, r1, #10
 800271e:	4621      	mov	r1, r4
 8002720:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002724:	4621      	mov	r1, r4
 8002726:	028a      	lsls	r2, r1, #10
 8002728:	4610      	mov	r0, r2
 800272a:	4619      	mov	r1, r3
 800272c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002730:	2200      	movs	r2, #0
 8002732:	64bb      	str	r3, [r7, #72]	; 0x48
 8002734:	64fa      	str	r2, [r7, #76]	; 0x4c
 8002736:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800273a:	f7fd fdb9 	bl	80002b0 <__aeabi_uldivmod>
 800273e:	4602      	mov	r2, r0
 8002740:	460b      	mov	r3, r1
 8002742:	4613      	mov	r3, r2
 8002744:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002748:	4b0d      	ldr	r3, [pc, #52]	; (8002780 <HAL_RCC_GetSysClockFreq+0x458>)
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	0f1b      	lsrs	r3, r3, #28
 800274e:	f003 0307 	and.w	r3, r3, #7
 8002752:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8002756:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800275a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800275e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002762:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002766:	e003      	b.n	8002770 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002768:	4b06      	ldr	r3, [pc, #24]	; (8002784 <HAL_RCC_GetSysClockFreq+0x45c>)
 800276a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800276e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002770:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8002774:	4618      	mov	r0, r3
 8002776:	37b8      	adds	r7, #184	; 0xb8
 8002778:	46bd      	mov	sp, r7
 800277a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800277e:	bf00      	nop
 8002780:	40023800 	.word	0x40023800
 8002784:	00f42400 	.word	0x00f42400

08002788 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b086      	sub	sp, #24
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d101      	bne.n	800279a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002796:	2301      	movs	r3, #1
 8002798:	e28d      	b.n	8002cb6 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f003 0301 	and.w	r3, r3, #1
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	f000 8083 	beq.w	80028ae <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80027a8:	4b94      	ldr	r3, [pc, #592]	; (80029fc <HAL_RCC_OscConfig+0x274>)
 80027aa:	689b      	ldr	r3, [r3, #8]
 80027ac:	f003 030c 	and.w	r3, r3, #12
 80027b0:	2b04      	cmp	r3, #4
 80027b2:	d019      	beq.n	80027e8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80027b4:	4b91      	ldr	r3, [pc, #580]	; (80029fc <HAL_RCC_OscConfig+0x274>)
 80027b6:	689b      	ldr	r3, [r3, #8]
 80027b8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80027bc:	2b08      	cmp	r3, #8
 80027be:	d106      	bne.n	80027ce <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80027c0:	4b8e      	ldr	r3, [pc, #568]	; (80029fc <HAL_RCC_OscConfig+0x274>)
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027c8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80027cc:	d00c      	beq.n	80027e8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80027ce:	4b8b      	ldr	r3, [pc, #556]	; (80029fc <HAL_RCC_OscConfig+0x274>)
 80027d0:	689b      	ldr	r3, [r3, #8]
 80027d2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80027d6:	2b0c      	cmp	r3, #12
 80027d8:	d112      	bne.n	8002800 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80027da:	4b88      	ldr	r3, [pc, #544]	; (80029fc <HAL_RCC_OscConfig+0x274>)
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027e2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80027e6:	d10b      	bne.n	8002800 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027e8:	4b84      	ldr	r3, [pc, #528]	; (80029fc <HAL_RCC_OscConfig+0x274>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d05b      	beq.n	80028ac <HAL_RCC_OscConfig+0x124>
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d157      	bne.n	80028ac <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80027fc:	2301      	movs	r3, #1
 80027fe:	e25a      	b.n	8002cb6 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002808:	d106      	bne.n	8002818 <HAL_RCC_OscConfig+0x90>
 800280a:	4b7c      	ldr	r3, [pc, #496]	; (80029fc <HAL_RCC_OscConfig+0x274>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4a7b      	ldr	r2, [pc, #492]	; (80029fc <HAL_RCC_OscConfig+0x274>)
 8002810:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002814:	6013      	str	r3, [r2, #0]
 8002816:	e01d      	b.n	8002854 <HAL_RCC_OscConfig+0xcc>
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002820:	d10c      	bne.n	800283c <HAL_RCC_OscConfig+0xb4>
 8002822:	4b76      	ldr	r3, [pc, #472]	; (80029fc <HAL_RCC_OscConfig+0x274>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4a75      	ldr	r2, [pc, #468]	; (80029fc <HAL_RCC_OscConfig+0x274>)
 8002828:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800282c:	6013      	str	r3, [r2, #0]
 800282e:	4b73      	ldr	r3, [pc, #460]	; (80029fc <HAL_RCC_OscConfig+0x274>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4a72      	ldr	r2, [pc, #456]	; (80029fc <HAL_RCC_OscConfig+0x274>)
 8002834:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002838:	6013      	str	r3, [r2, #0]
 800283a:	e00b      	b.n	8002854 <HAL_RCC_OscConfig+0xcc>
 800283c:	4b6f      	ldr	r3, [pc, #444]	; (80029fc <HAL_RCC_OscConfig+0x274>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4a6e      	ldr	r2, [pc, #440]	; (80029fc <HAL_RCC_OscConfig+0x274>)
 8002842:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002846:	6013      	str	r3, [r2, #0]
 8002848:	4b6c      	ldr	r3, [pc, #432]	; (80029fc <HAL_RCC_OscConfig+0x274>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4a6b      	ldr	r2, [pc, #428]	; (80029fc <HAL_RCC_OscConfig+0x274>)
 800284e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002852:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d013      	beq.n	8002884 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800285c:	f7fe fafa 	bl	8000e54 <HAL_GetTick>
 8002860:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002862:	e008      	b.n	8002876 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002864:	f7fe faf6 	bl	8000e54 <HAL_GetTick>
 8002868:	4602      	mov	r2, r0
 800286a:	693b      	ldr	r3, [r7, #16]
 800286c:	1ad3      	subs	r3, r2, r3
 800286e:	2b64      	cmp	r3, #100	; 0x64
 8002870:	d901      	bls.n	8002876 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002872:	2303      	movs	r3, #3
 8002874:	e21f      	b.n	8002cb6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002876:	4b61      	ldr	r3, [pc, #388]	; (80029fc <HAL_RCC_OscConfig+0x274>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800287e:	2b00      	cmp	r3, #0
 8002880:	d0f0      	beq.n	8002864 <HAL_RCC_OscConfig+0xdc>
 8002882:	e014      	b.n	80028ae <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002884:	f7fe fae6 	bl	8000e54 <HAL_GetTick>
 8002888:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800288a:	e008      	b.n	800289e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800288c:	f7fe fae2 	bl	8000e54 <HAL_GetTick>
 8002890:	4602      	mov	r2, r0
 8002892:	693b      	ldr	r3, [r7, #16]
 8002894:	1ad3      	subs	r3, r2, r3
 8002896:	2b64      	cmp	r3, #100	; 0x64
 8002898:	d901      	bls.n	800289e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800289a:	2303      	movs	r3, #3
 800289c:	e20b      	b.n	8002cb6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800289e:	4b57      	ldr	r3, [pc, #348]	; (80029fc <HAL_RCC_OscConfig+0x274>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d1f0      	bne.n	800288c <HAL_RCC_OscConfig+0x104>
 80028aa:	e000      	b.n	80028ae <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f003 0302 	and.w	r3, r3, #2
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d06f      	beq.n	800299a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80028ba:	4b50      	ldr	r3, [pc, #320]	; (80029fc <HAL_RCC_OscConfig+0x274>)
 80028bc:	689b      	ldr	r3, [r3, #8]
 80028be:	f003 030c 	and.w	r3, r3, #12
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d017      	beq.n	80028f6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80028c6:	4b4d      	ldr	r3, [pc, #308]	; (80029fc <HAL_RCC_OscConfig+0x274>)
 80028c8:	689b      	ldr	r3, [r3, #8]
 80028ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80028ce:	2b08      	cmp	r3, #8
 80028d0:	d105      	bne.n	80028de <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80028d2:	4b4a      	ldr	r3, [pc, #296]	; (80029fc <HAL_RCC_OscConfig+0x274>)
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d00b      	beq.n	80028f6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80028de:	4b47      	ldr	r3, [pc, #284]	; (80029fc <HAL_RCC_OscConfig+0x274>)
 80028e0:	689b      	ldr	r3, [r3, #8]
 80028e2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80028e6:	2b0c      	cmp	r3, #12
 80028e8:	d11c      	bne.n	8002924 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80028ea:	4b44      	ldr	r3, [pc, #272]	; (80029fc <HAL_RCC_OscConfig+0x274>)
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d116      	bne.n	8002924 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028f6:	4b41      	ldr	r3, [pc, #260]	; (80029fc <HAL_RCC_OscConfig+0x274>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f003 0302 	and.w	r3, r3, #2
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d005      	beq.n	800290e <HAL_RCC_OscConfig+0x186>
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	68db      	ldr	r3, [r3, #12]
 8002906:	2b01      	cmp	r3, #1
 8002908:	d001      	beq.n	800290e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800290a:	2301      	movs	r3, #1
 800290c:	e1d3      	b.n	8002cb6 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800290e:	4b3b      	ldr	r3, [pc, #236]	; (80029fc <HAL_RCC_OscConfig+0x274>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	691b      	ldr	r3, [r3, #16]
 800291a:	00db      	lsls	r3, r3, #3
 800291c:	4937      	ldr	r1, [pc, #220]	; (80029fc <HAL_RCC_OscConfig+0x274>)
 800291e:	4313      	orrs	r3, r2
 8002920:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002922:	e03a      	b.n	800299a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	68db      	ldr	r3, [r3, #12]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d020      	beq.n	800296e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800292c:	4b34      	ldr	r3, [pc, #208]	; (8002a00 <HAL_RCC_OscConfig+0x278>)
 800292e:	2201      	movs	r2, #1
 8002930:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002932:	f7fe fa8f 	bl	8000e54 <HAL_GetTick>
 8002936:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002938:	e008      	b.n	800294c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800293a:	f7fe fa8b 	bl	8000e54 <HAL_GetTick>
 800293e:	4602      	mov	r2, r0
 8002940:	693b      	ldr	r3, [r7, #16]
 8002942:	1ad3      	subs	r3, r2, r3
 8002944:	2b02      	cmp	r3, #2
 8002946:	d901      	bls.n	800294c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002948:	2303      	movs	r3, #3
 800294a:	e1b4      	b.n	8002cb6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800294c:	4b2b      	ldr	r3, [pc, #172]	; (80029fc <HAL_RCC_OscConfig+0x274>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f003 0302 	and.w	r3, r3, #2
 8002954:	2b00      	cmp	r3, #0
 8002956:	d0f0      	beq.n	800293a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002958:	4b28      	ldr	r3, [pc, #160]	; (80029fc <HAL_RCC_OscConfig+0x274>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	691b      	ldr	r3, [r3, #16]
 8002964:	00db      	lsls	r3, r3, #3
 8002966:	4925      	ldr	r1, [pc, #148]	; (80029fc <HAL_RCC_OscConfig+0x274>)
 8002968:	4313      	orrs	r3, r2
 800296a:	600b      	str	r3, [r1, #0]
 800296c:	e015      	b.n	800299a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800296e:	4b24      	ldr	r3, [pc, #144]	; (8002a00 <HAL_RCC_OscConfig+0x278>)
 8002970:	2200      	movs	r2, #0
 8002972:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002974:	f7fe fa6e 	bl	8000e54 <HAL_GetTick>
 8002978:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800297a:	e008      	b.n	800298e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800297c:	f7fe fa6a 	bl	8000e54 <HAL_GetTick>
 8002980:	4602      	mov	r2, r0
 8002982:	693b      	ldr	r3, [r7, #16]
 8002984:	1ad3      	subs	r3, r2, r3
 8002986:	2b02      	cmp	r3, #2
 8002988:	d901      	bls.n	800298e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800298a:	2303      	movs	r3, #3
 800298c:	e193      	b.n	8002cb6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800298e:	4b1b      	ldr	r3, [pc, #108]	; (80029fc <HAL_RCC_OscConfig+0x274>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f003 0302 	and.w	r3, r3, #2
 8002996:	2b00      	cmp	r3, #0
 8002998:	d1f0      	bne.n	800297c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f003 0308 	and.w	r3, r3, #8
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d036      	beq.n	8002a14 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	695b      	ldr	r3, [r3, #20]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d016      	beq.n	80029dc <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029ae:	4b15      	ldr	r3, [pc, #84]	; (8002a04 <HAL_RCC_OscConfig+0x27c>)
 80029b0:	2201      	movs	r2, #1
 80029b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029b4:	f7fe fa4e 	bl	8000e54 <HAL_GetTick>
 80029b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029ba:	e008      	b.n	80029ce <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80029bc:	f7fe fa4a 	bl	8000e54 <HAL_GetTick>
 80029c0:	4602      	mov	r2, r0
 80029c2:	693b      	ldr	r3, [r7, #16]
 80029c4:	1ad3      	subs	r3, r2, r3
 80029c6:	2b02      	cmp	r3, #2
 80029c8:	d901      	bls.n	80029ce <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80029ca:	2303      	movs	r3, #3
 80029cc:	e173      	b.n	8002cb6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029ce:	4b0b      	ldr	r3, [pc, #44]	; (80029fc <HAL_RCC_OscConfig+0x274>)
 80029d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029d2:	f003 0302 	and.w	r3, r3, #2
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d0f0      	beq.n	80029bc <HAL_RCC_OscConfig+0x234>
 80029da:	e01b      	b.n	8002a14 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029dc:	4b09      	ldr	r3, [pc, #36]	; (8002a04 <HAL_RCC_OscConfig+0x27c>)
 80029de:	2200      	movs	r2, #0
 80029e0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029e2:	f7fe fa37 	bl	8000e54 <HAL_GetTick>
 80029e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029e8:	e00e      	b.n	8002a08 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80029ea:	f7fe fa33 	bl	8000e54 <HAL_GetTick>
 80029ee:	4602      	mov	r2, r0
 80029f0:	693b      	ldr	r3, [r7, #16]
 80029f2:	1ad3      	subs	r3, r2, r3
 80029f4:	2b02      	cmp	r3, #2
 80029f6:	d907      	bls.n	8002a08 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80029f8:	2303      	movs	r3, #3
 80029fa:	e15c      	b.n	8002cb6 <HAL_RCC_OscConfig+0x52e>
 80029fc:	40023800 	.word	0x40023800
 8002a00:	42470000 	.word	0x42470000
 8002a04:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a08:	4b8a      	ldr	r3, [pc, #552]	; (8002c34 <HAL_RCC_OscConfig+0x4ac>)
 8002a0a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a0c:	f003 0302 	and.w	r3, r3, #2
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d1ea      	bne.n	80029ea <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f003 0304 	and.w	r3, r3, #4
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	f000 8097 	beq.w	8002b50 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a22:	2300      	movs	r3, #0
 8002a24:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a26:	4b83      	ldr	r3, [pc, #524]	; (8002c34 <HAL_RCC_OscConfig+0x4ac>)
 8002a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d10f      	bne.n	8002a52 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a32:	2300      	movs	r3, #0
 8002a34:	60bb      	str	r3, [r7, #8]
 8002a36:	4b7f      	ldr	r3, [pc, #508]	; (8002c34 <HAL_RCC_OscConfig+0x4ac>)
 8002a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a3a:	4a7e      	ldr	r2, [pc, #504]	; (8002c34 <HAL_RCC_OscConfig+0x4ac>)
 8002a3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a40:	6413      	str	r3, [r2, #64]	; 0x40
 8002a42:	4b7c      	ldr	r3, [pc, #496]	; (8002c34 <HAL_RCC_OscConfig+0x4ac>)
 8002a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a4a:	60bb      	str	r3, [r7, #8]
 8002a4c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a52:	4b79      	ldr	r3, [pc, #484]	; (8002c38 <HAL_RCC_OscConfig+0x4b0>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d118      	bne.n	8002a90 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a5e:	4b76      	ldr	r3, [pc, #472]	; (8002c38 <HAL_RCC_OscConfig+0x4b0>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4a75      	ldr	r2, [pc, #468]	; (8002c38 <HAL_RCC_OscConfig+0x4b0>)
 8002a64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a68:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a6a:	f7fe f9f3 	bl	8000e54 <HAL_GetTick>
 8002a6e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a70:	e008      	b.n	8002a84 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a72:	f7fe f9ef 	bl	8000e54 <HAL_GetTick>
 8002a76:	4602      	mov	r2, r0
 8002a78:	693b      	ldr	r3, [r7, #16]
 8002a7a:	1ad3      	subs	r3, r2, r3
 8002a7c:	2b02      	cmp	r3, #2
 8002a7e:	d901      	bls.n	8002a84 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002a80:	2303      	movs	r3, #3
 8002a82:	e118      	b.n	8002cb6 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a84:	4b6c      	ldr	r3, [pc, #432]	; (8002c38 <HAL_RCC_OscConfig+0x4b0>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d0f0      	beq.n	8002a72 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	689b      	ldr	r3, [r3, #8]
 8002a94:	2b01      	cmp	r3, #1
 8002a96:	d106      	bne.n	8002aa6 <HAL_RCC_OscConfig+0x31e>
 8002a98:	4b66      	ldr	r3, [pc, #408]	; (8002c34 <HAL_RCC_OscConfig+0x4ac>)
 8002a9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a9c:	4a65      	ldr	r2, [pc, #404]	; (8002c34 <HAL_RCC_OscConfig+0x4ac>)
 8002a9e:	f043 0301 	orr.w	r3, r3, #1
 8002aa2:	6713      	str	r3, [r2, #112]	; 0x70
 8002aa4:	e01c      	b.n	8002ae0 <HAL_RCC_OscConfig+0x358>
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	689b      	ldr	r3, [r3, #8]
 8002aaa:	2b05      	cmp	r3, #5
 8002aac:	d10c      	bne.n	8002ac8 <HAL_RCC_OscConfig+0x340>
 8002aae:	4b61      	ldr	r3, [pc, #388]	; (8002c34 <HAL_RCC_OscConfig+0x4ac>)
 8002ab0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ab2:	4a60      	ldr	r2, [pc, #384]	; (8002c34 <HAL_RCC_OscConfig+0x4ac>)
 8002ab4:	f043 0304 	orr.w	r3, r3, #4
 8002ab8:	6713      	str	r3, [r2, #112]	; 0x70
 8002aba:	4b5e      	ldr	r3, [pc, #376]	; (8002c34 <HAL_RCC_OscConfig+0x4ac>)
 8002abc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002abe:	4a5d      	ldr	r2, [pc, #372]	; (8002c34 <HAL_RCC_OscConfig+0x4ac>)
 8002ac0:	f043 0301 	orr.w	r3, r3, #1
 8002ac4:	6713      	str	r3, [r2, #112]	; 0x70
 8002ac6:	e00b      	b.n	8002ae0 <HAL_RCC_OscConfig+0x358>
 8002ac8:	4b5a      	ldr	r3, [pc, #360]	; (8002c34 <HAL_RCC_OscConfig+0x4ac>)
 8002aca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002acc:	4a59      	ldr	r2, [pc, #356]	; (8002c34 <HAL_RCC_OscConfig+0x4ac>)
 8002ace:	f023 0301 	bic.w	r3, r3, #1
 8002ad2:	6713      	str	r3, [r2, #112]	; 0x70
 8002ad4:	4b57      	ldr	r3, [pc, #348]	; (8002c34 <HAL_RCC_OscConfig+0x4ac>)
 8002ad6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ad8:	4a56      	ldr	r2, [pc, #344]	; (8002c34 <HAL_RCC_OscConfig+0x4ac>)
 8002ada:	f023 0304 	bic.w	r3, r3, #4
 8002ade:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	689b      	ldr	r3, [r3, #8]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d015      	beq.n	8002b14 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ae8:	f7fe f9b4 	bl	8000e54 <HAL_GetTick>
 8002aec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002aee:	e00a      	b.n	8002b06 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002af0:	f7fe f9b0 	bl	8000e54 <HAL_GetTick>
 8002af4:	4602      	mov	r2, r0
 8002af6:	693b      	ldr	r3, [r7, #16]
 8002af8:	1ad3      	subs	r3, r2, r3
 8002afa:	f241 3288 	movw	r2, #5000	; 0x1388
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d901      	bls.n	8002b06 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002b02:	2303      	movs	r3, #3
 8002b04:	e0d7      	b.n	8002cb6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b06:	4b4b      	ldr	r3, [pc, #300]	; (8002c34 <HAL_RCC_OscConfig+0x4ac>)
 8002b08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b0a:	f003 0302 	and.w	r3, r3, #2
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d0ee      	beq.n	8002af0 <HAL_RCC_OscConfig+0x368>
 8002b12:	e014      	b.n	8002b3e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b14:	f7fe f99e 	bl	8000e54 <HAL_GetTick>
 8002b18:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b1a:	e00a      	b.n	8002b32 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b1c:	f7fe f99a 	bl	8000e54 <HAL_GetTick>
 8002b20:	4602      	mov	r2, r0
 8002b22:	693b      	ldr	r3, [r7, #16]
 8002b24:	1ad3      	subs	r3, r2, r3
 8002b26:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d901      	bls.n	8002b32 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002b2e:	2303      	movs	r3, #3
 8002b30:	e0c1      	b.n	8002cb6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b32:	4b40      	ldr	r3, [pc, #256]	; (8002c34 <HAL_RCC_OscConfig+0x4ac>)
 8002b34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b36:	f003 0302 	and.w	r3, r3, #2
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d1ee      	bne.n	8002b1c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002b3e:	7dfb      	ldrb	r3, [r7, #23]
 8002b40:	2b01      	cmp	r3, #1
 8002b42:	d105      	bne.n	8002b50 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b44:	4b3b      	ldr	r3, [pc, #236]	; (8002c34 <HAL_RCC_OscConfig+0x4ac>)
 8002b46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b48:	4a3a      	ldr	r2, [pc, #232]	; (8002c34 <HAL_RCC_OscConfig+0x4ac>)
 8002b4a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b4e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	699b      	ldr	r3, [r3, #24]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	f000 80ad 	beq.w	8002cb4 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002b5a:	4b36      	ldr	r3, [pc, #216]	; (8002c34 <HAL_RCC_OscConfig+0x4ac>)
 8002b5c:	689b      	ldr	r3, [r3, #8]
 8002b5e:	f003 030c 	and.w	r3, r3, #12
 8002b62:	2b08      	cmp	r3, #8
 8002b64:	d060      	beq.n	8002c28 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	699b      	ldr	r3, [r3, #24]
 8002b6a:	2b02      	cmp	r3, #2
 8002b6c:	d145      	bne.n	8002bfa <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b6e:	4b33      	ldr	r3, [pc, #204]	; (8002c3c <HAL_RCC_OscConfig+0x4b4>)
 8002b70:	2200      	movs	r2, #0
 8002b72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b74:	f7fe f96e 	bl	8000e54 <HAL_GetTick>
 8002b78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b7a:	e008      	b.n	8002b8e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b7c:	f7fe f96a 	bl	8000e54 <HAL_GetTick>
 8002b80:	4602      	mov	r2, r0
 8002b82:	693b      	ldr	r3, [r7, #16]
 8002b84:	1ad3      	subs	r3, r2, r3
 8002b86:	2b02      	cmp	r3, #2
 8002b88:	d901      	bls.n	8002b8e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002b8a:	2303      	movs	r3, #3
 8002b8c:	e093      	b.n	8002cb6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b8e:	4b29      	ldr	r3, [pc, #164]	; (8002c34 <HAL_RCC_OscConfig+0x4ac>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d1f0      	bne.n	8002b7c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	69da      	ldr	r2, [r3, #28]
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6a1b      	ldr	r3, [r3, #32]
 8002ba2:	431a      	orrs	r2, r3
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ba8:	019b      	lsls	r3, r3, #6
 8002baa:	431a      	orrs	r2, r3
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bb0:	085b      	lsrs	r3, r3, #1
 8002bb2:	3b01      	subs	r3, #1
 8002bb4:	041b      	lsls	r3, r3, #16
 8002bb6:	431a      	orrs	r2, r3
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bbc:	061b      	lsls	r3, r3, #24
 8002bbe:	431a      	orrs	r2, r3
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bc4:	071b      	lsls	r3, r3, #28
 8002bc6:	491b      	ldr	r1, [pc, #108]	; (8002c34 <HAL_RCC_OscConfig+0x4ac>)
 8002bc8:	4313      	orrs	r3, r2
 8002bca:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002bcc:	4b1b      	ldr	r3, [pc, #108]	; (8002c3c <HAL_RCC_OscConfig+0x4b4>)
 8002bce:	2201      	movs	r2, #1
 8002bd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bd2:	f7fe f93f 	bl	8000e54 <HAL_GetTick>
 8002bd6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bd8:	e008      	b.n	8002bec <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bda:	f7fe f93b 	bl	8000e54 <HAL_GetTick>
 8002bde:	4602      	mov	r2, r0
 8002be0:	693b      	ldr	r3, [r7, #16]
 8002be2:	1ad3      	subs	r3, r2, r3
 8002be4:	2b02      	cmp	r3, #2
 8002be6:	d901      	bls.n	8002bec <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002be8:	2303      	movs	r3, #3
 8002bea:	e064      	b.n	8002cb6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bec:	4b11      	ldr	r3, [pc, #68]	; (8002c34 <HAL_RCC_OscConfig+0x4ac>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d0f0      	beq.n	8002bda <HAL_RCC_OscConfig+0x452>
 8002bf8:	e05c      	b.n	8002cb4 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bfa:	4b10      	ldr	r3, [pc, #64]	; (8002c3c <HAL_RCC_OscConfig+0x4b4>)
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c00:	f7fe f928 	bl	8000e54 <HAL_GetTick>
 8002c04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c06:	e008      	b.n	8002c1a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c08:	f7fe f924 	bl	8000e54 <HAL_GetTick>
 8002c0c:	4602      	mov	r2, r0
 8002c0e:	693b      	ldr	r3, [r7, #16]
 8002c10:	1ad3      	subs	r3, r2, r3
 8002c12:	2b02      	cmp	r3, #2
 8002c14:	d901      	bls.n	8002c1a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002c16:	2303      	movs	r3, #3
 8002c18:	e04d      	b.n	8002cb6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c1a:	4b06      	ldr	r3, [pc, #24]	; (8002c34 <HAL_RCC_OscConfig+0x4ac>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d1f0      	bne.n	8002c08 <HAL_RCC_OscConfig+0x480>
 8002c26:	e045      	b.n	8002cb4 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	699b      	ldr	r3, [r3, #24]
 8002c2c:	2b01      	cmp	r3, #1
 8002c2e:	d107      	bne.n	8002c40 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002c30:	2301      	movs	r3, #1
 8002c32:	e040      	b.n	8002cb6 <HAL_RCC_OscConfig+0x52e>
 8002c34:	40023800 	.word	0x40023800
 8002c38:	40007000 	.word	0x40007000
 8002c3c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002c40:	4b1f      	ldr	r3, [pc, #124]	; (8002cc0 <HAL_RCC_OscConfig+0x538>)
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	699b      	ldr	r3, [r3, #24]
 8002c4a:	2b01      	cmp	r3, #1
 8002c4c:	d030      	beq.n	8002cb0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c58:	429a      	cmp	r2, r3
 8002c5a:	d129      	bne.n	8002cb0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c66:	429a      	cmp	r2, r3
 8002c68:	d122      	bne.n	8002cb0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c6a:	68fa      	ldr	r2, [r7, #12]
 8002c6c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002c70:	4013      	ands	r3, r2
 8002c72:	687a      	ldr	r2, [r7, #4]
 8002c74:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002c76:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c78:	4293      	cmp	r3, r2
 8002c7a:	d119      	bne.n	8002cb0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c86:	085b      	lsrs	r3, r3, #1
 8002c88:	3b01      	subs	r3, #1
 8002c8a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c8c:	429a      	cmp	r2, r3
 8002c8e:	d10f      	bne.n	8002cb0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c9a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c9c:	429a      	cmp	r2, r3
 8002c9e:	d107      	bne.n	8002cb0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002caa:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002cac:	429a      	cmp	r2, r3
 8002cae:	d001      	beq.n	8002cb4 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	e000      	b.n	8002cb6 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002cb4:	2300      	movs	r3, #0
}
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	3718      	adds	r7, #24
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bd80      	pop	{r7, pc}
 8002cbe:	bf00      	nop
 8002cc0:	40023800 	.word	0x40023800

08002cc4 <__libc_init_array>:
 8002cc4:	b570      	push	{r4, r5, r6, lr}
 8002cc6:	4d0d      	ldr	r5, [pc, #52]	; (8002cfc <__libc_init_array+0x38>)
 8002cc8:	4c0d      	ldr	r4, [pc, #52]	; (8002d00 <__libc_init_array+0x3c>)
 8002cca:	1b64      	subs	r4, r4, r5
 8002ccc:	10a4      	asrs	r4, r4, #2
 8002cce:	2600      	movs	r6, #0
 8002cd0:	42a6      	cmp	r6, r4
 8002cd2:	d109      	bne.n	8002ce8 <__libc_init_array+0x24>
 8002cd4:	4d0b      	ldr	r5, [pc, #44]	; (8002d04 <__libc_init_array+0x40>)
 8002cd6:	4c0c      	ldr	r4, [pc, #48]	; (8002d08 <__libc_init_array+0x44>)
 8002cd8:	f001 f832 	bl	8003d40 <_init>
 8002cdc:	1b64      	subs	r4, r4, r5
 8002cde:	10a4      	asrs	r4, r4, #2
 8002ce0:	2600      	movs	r6, #0
 8002ce2:	42a6      	cmp	r6, r4
 8002ce4:	d105      	bne.n	8002cf2 <__libc_init_array+0x2e>
 8002ce6:	bd70      	pop	{r4, r5, r6, pc}
 8002ce8:	f855 3b04 	ldr.w	r3, [r5], #4
 8002cec:	4798      	blx	r3
 8002cee:	3601      	adds	r6, #1
 8002cf0:	e7ee      	b.n	8002cd0 <__libc_init_array+0xc>
 8002cf2:	f855 3b04 	ldr.w	r3, [r5], #4
 8002cf6:	4798      	blx	r3
 8002cf8:	3601      	adds	r6, #1
 8002cfa:	e7f2      	b.n	8002ce2 <__libc_init_array+0x1e>
 8002cfc:	08003e68 	.word	0x08003e68
 8002d00:	08003e68 	.word	0x08003e68
 8002d04:	08003e68 	.word	0x08003e68
 8002d08:	08003e6c 	.word	0x08003e6c

08002d0c <memset>:
 8002d0c:	4402      	add	r2, r0
 8002d0e:	4603      	mov	r3, r0
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d100      	bne.n	8002d16 <memset+0xa>
 8002d14:	4770      	bx	lr
 8002d16:	f803 1b01 	strb.w	r1, [r3], #1
 8002d1a:	e7f9      	b.n	8002d10 <memset+0x4>

08002d1c <iprintf>:
 8002d1c:	b40f      	push	{r0, r1, r2, r3}
 8002d1e:	4b0a      	ldr	r3, [pc, #40]	; (8002d48 <iprintf+0x2c>)
 8002d20:	b513      	push	{r0, r1, r4, lr}
 8002d22:	681c      	ldr	r4, [r3, #0]
 8002d24:	b124      	cbz	r4, 8002d30 <iprintf+0x14>
 8002d26:	69a3      	ldr	r3, [r4, #24]
 8002d28:	b913      	cbnz	r3, 8002d30 <iprintf+0x14>
 8002d2a:	4620      	mov	r0, r4
 8002d2c:	f000 fa5e 	bl	80031ec <__sinit>
 8002d30:	ab05      	add	r3, sp, #20
 8002d32:	9a04      	ldr	r2, [sp, #16]
 8002d34:	68a1      	ldr	r1, [r4, #8]
 8002d36:	9301      	str	r3, [sp, #4]
 8002d38:	4620      	mov	r0, r4
 8002d3a:	f000 fc67 	bl	800360c <_vfiprintf_r>
 8002d3e:	b002      	add	sp, #8
 8002d40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002d44:	b004      	add	sp, #16
 8002d46:	4770      	bx	lr
 8002d48:	2000000c 	.word	0x2000000c

08002d4c <_puts_r>:
 8002d4c:	b570      	push	{r4, r5, r6, lr}
 8002d4e:	460e      	mov	r6, r1
 8002d50:	4605      	mov	r5, r0
 8002d52:	b118      	cbz	r0, 8002d5c <_puts_r+0x10>
 8002d54:	6983      	ldr	r3, [r0, #24]
 8002d56:	b90b      	cbnz	r3, 8002d5c <_puts_r+0x10>
 8002d58:	f000 fa48 	bl	80031ec <__sinit>
 8002d5c:	69ab      	ldr	r3, [r5, #24]
 8002d5e:	68ac      	ldr	r4, [r5, #8]
 8002d60:	b913      	cbnz	r3, 8002d68 <_puts_r+0x1c>
 8002d62:	4628      	mov	r0, r5
 8002d64:	f000 fa42 	bl	80031ec <__sinit>
 8002d68:	4b2c      	ldr	r3, [pc, #176]	; (8002e1c <_puts_r+0xd0>)
 8002d6a:	429c      	cmp	r4, r3
 8002d6c:	d120      	bne.n	8002db0 <_puts_r+0x64>
 8002d6e:	686c      	ldr	r4, [r5, #4]
 8002d70:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002d72:	07db      	lsls	r3, r3, #31
 8002d74:	d405      	bmi.n	8002d82 <_puts_r+0x36>
 8002d76:	89a3      	ldrh	r3, [r4, #12]
 8002d78:	0598      	lsls	r0, r3, #22
 8002d7a:	d402      	bmi.n	8002d82 <_puts_r+0x36>
 8002d7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002d7e:	f000 fad3 	bl	8003328 <__retarget_lock_acquire_recursive>
 8002d82:	89a3      	ldrh	r3, [r4, #12]
 8002d84:	0719      	lsls	r1, r3, #28
 8002d86:	d51d      	bpl.n	8002dc4 <_puts_r+0x78>
 8002d88:	6923      	ldr	r3, [r4, #16]
 8002d8a:	b1db      	cbz	r3, 8002dc4 <_puts_r+0x78>
 8002d8c:	3e01      	subs	r6, #1
 8002d8e:	68a3      	ldr	r3, [r4, #8]
 8002d90:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002d94:	3b01      	subs	r3, #1
 8002d96:	60a3      	str	r3, [r4, #8]
 8002d98:	bb39      	cbnz	r1, 8002dea <_puts_r+0x9e>
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	da38      	bge.n	8002e10 <_puts_r+0xc4>
 8002d9e:	4622      	mov	r2, r4
 8002da0:	210a      	movs	r1, #10
 8002da2:	4628      	mov	r0, r5
 8002da4:	f000 f848 	bl	8002e38 <__swbuf_r>
 8002da8:	3001      	adds	r0, #1
 8002daa:	d011      	beq.n	8002dd0 <_puts_r+0x84>
 8002dac:	250a      	movs	r5, #10
 8002dae:	e011      	b.n	8002dd4 <_puts_r+0x88>
 8002db0:	4b1b      	ldr	r3, [pc, #108]	; (8002e20 <_puts_r+0xd4>)
 8002db2:	429c      	cmp	r4, r3
 8002db4:	d101      	bne.n	8002dba <_puts_r+0x6e>
 8002db6:	68ac      	ldr	r4, [r5, #8]
 8002db8:	e7da      	b.n	8002d70 <_puts_r+0x24>
 8002dba:	4b1a      	ldr	r3, [pc, #104]	; (8002e24 <_puts_r+0xd8>)
 8002dbc:	429c      	cmp	r4, r3
 8002dbe:	bf08      	it	eq
 8002dc0:	68ec      	ldreq	r4, [r5, #12]
 8002dc2:	e7d5      	b.n	8002d70 <_puts_r+0x24>
 8002dc4:	4621      	mov	r1, r4
 8002dc6:	4628      	mov	r0, r5
 8002dc8:	f000 f888 	bl	8002edc <__swsetup_r>
 8002dcc:	2800      	cmp	r0, #0
 8002dce:	d0dd      	beq.n	8002d8c <_puts_r+0x40>
 8002dd0:	f04f 35ff 	mov.w	r5, #4294967295
 8002dd4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002dd6:	07da      	lsls	r2, r3, #31
 8002dd8:	d405      	bmi.n	8002de6 <_puts_r+0x9a>
 8002dda:	89a3      	ldrh	r3, [r4, #12]
 8002ddc:	059b      	lsls	r3, r3, #22
 8002dde:	d402      	bmi.n	8002de6 <_puts_r+0x9a>
 8002de0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002de2:	f000 faa2 	bl	800332a <__retarget_lock_release_recursive>
 8002de6:	4628      	mov	r0, r5
 8002de8:	bd70      	pop	{r4, r5, r6, pc}
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	da04      	bge.n	8002df8 <_puts_r+0xac>
 8002dee:	69a2      	ldr	r2, [r4, #24]
 8002df0:	429a      	cmp	r2, r3
 8002df2:	dc06      	bgt.n	8002e02 <_puts_r+0xb6>
 8002df4:	290a      	cmp	r1, #10
 8002df6:	d004      	beq.n	8002e02 <_puts_r+0xb6>
 8002df8:	6823      	ldr	r3, [r4, #0]
 8002dfa:	1c5a      	adds	r2, r3, #1
 8002dfc:	6022      	str	r2, [r4, #0]
 8002dfe:	7019      	strb	r1, [r3, #0]
 8002e00:	e7c5      	b.n	8002d8e <_puts_r+0x42>
 8002e02:	4622      	mov	r2, r4
 8002e04:	4628      	mov	r0, r5
 8002e06:	f000 f817 	bl	8002e38 <__swbuf_r>
 8002e0a:	3001      	adds	r0, #1
 8002e0c:	d1bf      	bne.n	8002d8e <_puts_r+0x42>
 8002e0e:	e7df      	b.n	8002dd0 <_puts_r+0x84>
 8002e10:	6823      	ldr	r3, [r4, #0]
 8002e12:	250a      	movs	r5, #10
 8002e14:	1c5a      	adds	r2, r3, #1
 8002e16:	6022      	str	r2, [r4, #0]
 8002e18:	701d      	strb	r5, [r3, #0]
 8002e1a:	e7db      	b.n	8002dd4 <_puts_r+0x88>
 8002e1c:	08003dec 	.word	0x08003dec
 8002e20:	08003e0c 	.word	0x08003e0c
 8002e24:	08003dcc 	.word	0x08003dcc

08002e28 <puts>:
 8002e28:	4b02      	ldr	r3, [pc, #8]	; (8002e34 <puts+0xc>)
 8002e2a:	4601      	mov	r1, r0
 8002e2c:	6818      	ldr	r0, [r3, #0]
 8002e2e:	f7ff bf8d 	b.w	8002d4c <_puts_r>
 8002e32:	bf00      	nop
 8002e34:	2000000c 	.word	0x2000000c

08002e38 <__swbuf_r>:
 8002e38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e3a:	460e      	mov	r6, r1
 8002e3c:	4614      	mov	r4, r2
 8002e3e:	4605      	mov	r5, r0
 8002e40:	b118      	cbz	r0, 8002e4a <__swbuf_r+0x12>
 8002e42:	6983      	ldr	r3, [r0, #24]
 8002e44:	b90b      	cbnz	r3, 8002e4a <__swbuf_r+0x12>
 8002e46:	f000 f9d1 	bl	80031ec <__sinit>
 8002e4a:	4b21      	ldr	r3, [pc, #132]	; (8002ed0 <__swbuf_r+0x98>)
 8002e4c:	429c      	cmp	r4, r3
 8002e4e:	d12b      	bne.n	8002ea8 <__swbuf_r+0x70>
 8002e50:	686c      	ldr	r4, [r5, #4]
 8002e52:	69a3      	ldr	r3, [r4, #24]
 8002e54:	60a3      	str	r3, [r4, #8]
 8002e56:	89a3      	ldrh	r3, [r4, #12]
 8002e58:	071a      	lsls	r2, r3, #28
 8002e5a:	d52f      	bpl.n	8002ebc <__swbuf_r+0x84>
 8002e5c:	6923      	ldr	r3, [r4, #16]
 8002e5e:	b36b      	cbz	r3, 8002ebc <__swbuf_r+0x84>
 8002e60:	6923      	ldr	r3, [r4, #16]
 8002e62:	6820      	ldr	r0, [r4, #0]
 8002e64:	1ac0      	subs	r0, r0, r3
 8002e66:	6963      	ldr	r3, [r4, #20]
 8002e68:	b2f6      	uxtb	r6, r6
 8002e6a:	4283      	cmp	r3, r0
 8002e6c:	4637      	mov	r7, r6
 8002e6e:	dc04      	bgt.n	8002e7a <__swbuf_r+0x42>
 8002e70:	4621      	mov	r1, r4
 8002e72:	4628      	mov	r0, r5
 8002e74:	f000 f926 	bl	80030c4 <_fflush_r>
 8002e78:	bb30      	cbnz	r0, 8002ec8 <__swbuf_r+0x90>
 8002e7a:	68a3      	ldr	r3, [r4, #8]
 8002e7c:	3b01      	subs	r3, #1
 8002e7e:	60a3      	str	r3, [r4, #8]
 8002e80:	6823      	ldr	r3, [r4, #0]
 8002e82:	1c5a      	adds	r2, r3, #1
 8002e84:	6022      	str	r2, [r4, #0]
 8002e86:	701e      	strb	r6, [r3, #0]
 8002e88:	6963      	ldr	r3, [r4, #20]
 8002e8a:	3001      	adds	r0, #1
 8002e8c:	4283      	cmp	r3, r0
 8002e8e:	d004      	beq.n	8002e9a <__swbuf_r+0x62>
 8002e90:	89a3      	ldrh	r3, [r4, #12]
 8002e92:	07db      	lsls	r3, r3, #31
 8002e94:	d506      	bpl.n	8002ea4 <__swbuf_r+0x6c>
 8002e96:	2e0a      	cmp	r6, #10
 8002e98:	d104      	bne.n	8002ea4 <__swbuf_r+0x6c>
 8002e9a:	4621      	mov	r1, r4
 8002e9c:	4628      	mov	r0, r5
 8002e9e:	f000 f911 	bl	80030c4 <_fflush_r>
 8002ea2:	b988      	cbnz	r0, 8002ec8 <__swbuf_r+0x90>
 8002ea4:	4638      	mov	r0, r7
 8002ea6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002ea8:	4b0a      	ldr	r3, [pc, #40]	; (8002ed4 <__swbuf_r+0x9c>)
 8002eaa:	429c      	cmp	r4, r3
 8002eac:	d101      	bne.n	8002eb2 <__swbuf_r+0x7a>
 8002eae:	68ac      	ldr	r4, [r5, #8]
 8002eb0:	e7cf      	b.n	8002e52 <__swbuf_r+0x1a>
 8002eb2:	4b09      	ldr	r3, [pc, #36]	; (8002ed8 <__swbuf_r+0xa0>)
 8002eb4:	429c      	cmp	r4, r3
 8002eb6:	bf08      	it	eq
 8002eb8:	68ec      	ldreq	r4, [r5, #12]
 8002eba:	e7ca      	b.n	8002e52 <__swbuf_r+0x1a>
 8002ebc:	4621      	mov	r1, r4
 8002ebe:	4628      	mov	r0, r5
 8002ec0:	f000 f80c 	bl	8002edc <__swsetup_r>
 8002ec4:	2800      	cmp	r0, #0
 8002ec6:	d0cb      	beq.n	8002e60 <__swbuf_r+0x28>
 8002ec8:	f04f 37ff 	mov.w	r7, #4294967295
 8002ecc:	e7ea      	b.n	8002ea4 <__swbuf_r+0x6c>
 8002ece:	bf00      	nop
 8002ed0:	08003dec 	.word	0x08003dec
 8002ed4:	08003e0c 	.word	0x08003e0c
 8002ed8:	08003dcc 	.word	0x08003dcc

08002edc <__swsetup_r>:
 8002edc:	4b32      	ldr	r3, [pc, #200]	; (8002fa8 <__swsetup_r+0xcc>)
 8002ede:	b570      	push	{r4, r5, r6, lr}
 8002ee0:	681d      	ldr	r5, [r3, #0]
 8002ee2:	4606      	mov	r6, r0
 8002ee4:	460c      	mov	r4, r1
 8002ee6:	b125      	cbz	r5, 8002ef2 <__swsetup_r+0x16>
 8002ee8:	69ab      	ldr	r3, [r5, #24]
 8002eea:	b913      	cbnz	r3, 8002ef2 <__swsetup_r+0x16>
 8002eec:	4628      	mov	r0, r5
 8002eee:	f000 f97d 	bl	80031ec <__sinit>
 8002ef2:	4b2e      	ldr	r3, [pc, #184]	; (8002fac <__swsetup_r+0xd0>)
 8002ef4:	429c      	cmp	r4, r3
 8002ef6:	d10f      	bne.n	8002f18 <__swsetup_r+0x3c>
 8002ef8:	686c      	ldr	r4, [r5, #4]
 8002efa:	89a3      	ldrh	r3, [r4, #12]
 8002efc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002f00:	0719      	lsls	r1, r3, #28
 8002f02:	d42c      	bmi.n	8002f5e <__swsetup_r+0x82>
 8002f04:	06dd      	lsls	r5, r3, #27
 8002f06:	d411      	bmi.n	8002f2c <__swsetup_r+0x50>
 8002f08:	2309      	movs	r3, #9
 8002f0a:	6033      	str	r3, [r6, #0]
 8002f0c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8002f10:	81a3      	strh	r3, [r4, #12]
 8002f12:	f04f 30ff 	mov.w	r0, #4294967295
 8002f16:	e03e      	b.n	8002f96 <__swsetup_r+0xba>
 8002f18:	4b25      	ldr	r3, [pc, #148]	; (8002fb0 <__swsetup_r+0xd4>)
 8002f1a:	429c      	cmp	r4, r3
 8002f1c:	d101      	bne.n	8002f22 <__swsetup_r+0x46>
 8002f1e:	68ac      	ldr	r4, [r5, #8]
 8002f20:	e7eb      	b.n	8002efa <__swsetup_r+0x1e>
 8002f22:	4b24      	ldr	r3, [pc, #144]	; (8002fb4 <__swsetup_r+0xd8>)
 8002f24:	429c      	cmp	r4, r3
 8002f26:	bf08      	it	eq
 8002f28:	68ec      	ldreq	r4, [r5, #12]
 8002f2a:	e7e6      	b.n	8002efa <__swsetup_r+0x1e>
 8002f2c:	0758      	lsls	r0, r3, #29
 8002f2e:	d512      	bpl.n	8002f56 <__swsetup_r+0x7a>
 8002f30:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002f32:	b141      	cbz	r1, 8002f46 <__swsetup_r+0x6a>
 8002f34:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002f38:	4299      	cmp	r1, r3
 8002f3a:	d002      	beq.n	8002f42 <__swsetup_r+0x66>
 8002f3c:	4630      	mov	r0, r6
 8002f3e:	f000 fa5b 	bl	80033f8 <_free_r>
 8002f42:	2300      	movs	r3, #0
 8002f44:	6363      	str	r3, [r4, #52]	; 0x34
 8002f46:	89a3      	ldrh	r3, [r4, #12]
 8002f48:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002f4c:	81a3      	strh	r3, [r4, #12]
 8002f4e:	2300      	movs	r3, #0
 8002f50:	6063      	str	r3, [r4, #4]
 8002f52:	6923      	ldr	r3, [r4, #16]
 8002f54:	6023      	str	r3, [r4, #0]
 8002f56:	89a3      	ldrh	r3, [r4, #12]
 8002f58:	f043 0308 	orr.w	r3, r3, #8
 8002f5c:	81a3      	strh	r3, [r4, #12]
 8002f5e:	6923      	ldr	r3, [r4, #16]
 8002f60:	b94b      	cbnz	r3, 8002f76 <__swsetup_r+0x9a>
 8002f62:	89a3      	ldrh	r3, [r4, #12]
 8002f64:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002f68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f6c:	d003      	beq.n	8002f76 <__swsetup_r+0x9a>
 8002f6e:	4621      	mov	r1, r4
 8002f70:	4630      	mov	r0, r6
 8002f72:	f000 fa01 	bl	8003378 <__smakebuf_r>
 8002f76:	89a0      	ldrh	r0, [r4, #12]
 8002f78:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002f7c:	f010 0301 	ands.w	r3, r0, #1
 8002f80:	d00a      	beq.n	8002f98 <__swsetup_r+0xbc>
 8002f82:	2300      	movs	r3, #0
 8002f84:	60a3      	str	r3, [r4, #8]
 8002f86:	6963      	ldr	r3, [r4, #20]
 8002f88:	425b      	negs	r3, r3
 8002f8a:	61a3      	str	r3, [r4, #24]
 8002f8c:	6923      	ldr	r3, [r4, #16]
 8002f8e:	b943      	cbnz	r3, 8002fa2 <__swsetup_r+0xc6>
 8002f90:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8002f94:	d1ba      	bne.n	8002f0c <__swsetup_r+0x30>
 8002f96:	bd70      	pop	{r4, r5, r6, pc}
 8002f98:	0781      	lsls	r1, r0, #30
 8002f9a:	bf58      	it	pl
 8002f9c:	6963      	ldrpl	r3, [r4, #20]
 8002f9e:	60a3      	str	r3, [r4, #8]
 8002fa0:	e7f4      	b.n	8002f8c <__swsetup_r+0xb0>
 8002fa2:	2000      	movs	r0, #0
 8002fa4:	e7f7      	b.n	8002f96 <__swsetup_r+0xba>
 8002fa6:	bf00      	nop
 8002fa8:	2000000c 	.word	0x2000000c
 8002fac:	08003dec 	.word	0x08003dec
 8002fb0:	08003e0c 	.word	0x08003e0c
 8002fb4:	08003dcc 	.word	0x08003dcc

08002fb8 <__sflush_r>:
 8002fb8:	898a      	ldrh	r2, [r1, #12]
 8002fba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002fbe:	4605      	mov	r5, r0
 8002fc0:	0710      	lsls	r0, r2, #28
 8002fc2:	460c      	mov	r4, r1
 8002fc4:	d458      	bmi.n	8003078 <__sflush_r+0xc0>
 8002fc6:	684b      	ldr	r3, [r1, #4]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	dc05      	bgt.n	8002fd8 <__sflush_r+0x20>
 8002fcc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	dc02      	bgt.n	8002fd8 <__sflush_r+0x20>
 8002fd2:	2000      	movs	r0, #0
 8002fd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002fd8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002fda:	2e00      	cmp	r6, #0
 8002fdc:	d0f9      	beq.n	8002fd2 <__sflush_r+0x1a>
 8002fde:	2300      	movs	r3, #0
 8002fe0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002fe4:	682f      	ldr	r7, [r5, #0]
 8002fe6:	602b      	str	r3, [r5, #0]
 8002fe8:	d032      	beq.n	8003050 <__sflush_r+0x98>
 8002fea:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002fec:	89a3      	ldrh	r3, [r4, #12]
 8002fee:	075a      	lsls	r2, r3, #29
 8002ff0:	d505      	bpl.n	8002ffe <__sflush_r+0x46>
 8002ff2:	6863      	ldr	r3, [r4, #4]
 8002ff4:	1ac0      	subs	r0, r0, r3
 8002ff6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002ff8:	b10b      	cbz	r3, 8002ffe <__sflush_r+0x46>
 8002ffa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002ffc:	1ac0      	subs	r0, r0, r3
 8002ffe:	2300      	movs	r3, #0
 8003000:	4602      	mov	r2, r0
 8003002:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003004:	6a21      	ldr	r1, [r4, #32]
 8003006:	4628      	mov	r0, r5
 8003008:	47b0      	blx	r6
 800300a:	1c43      	adds	r3, r0, #1
 800300c:	89a3      	ldrh	r3, [r4, #12]
 800300e:	d106      	bne.n	800301e <__sflush_r+0x66>
 8003010:	6829      	ldr	r1, [r5, #0]
 8003012:	291d      	cmp	r1, #29
 8003014:	d82c      	bhi.n	8003070 <__sflush_r+0xb8>
 8003016:	4a2a      	ldr	r2, [pc, #168]	; (80030c0 <__sflush_r+0x108>)
 8003018:	40ca      	lsrs	r2, r1
 800301a:	07d6      	lsls	r6, r2, #31
 800301c:	d528      	bpl.n	8003070 <__sflush_r+0xb8>
 800301e:	2200      	movs	r2, #0
 8003020:	6062      	str	r2, [r4, #4]
 8003022:	04d9      	lsls	r1, r3, #19
 8003024:	6922      	ldr	r2, [r4, #16]
 8003026:	6022      	str	r2, [r4, #0]
 8003028:	d504      	bpl.n	8003034 <__sflush_r+0x7c>
 800302a:	1c42      	adds	r2, r0, #1
 800302c:	d101      	bne.n	8003032 <__sflush_r+0x7a>
 800302e:	682b      	ldr	r3, [r5, #0]
 8003030:	b903      	cbnz	r3, 8003034 <__sflush_r+0x7c>
 8003032:	6560      	str	r0, [r4, #84]	; 0x54
 8003034:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003036:	602f      	str	r7, [r5, #0]
 8003038:	2900      	cmp	r1, #0
 800303a:	d0ca      	beq.n	8002fd2 <__sflush_r+0x1a>
 800303c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003040:	4299      	cmp	r1, r3
 8003042:	d002      	beq.n	800304a <__sflush_r+0x92>
 8003044:	4628      	mov	r0, r5
 8003046:	f000 f9d7 	bl	80033f8 <_free_r>
 800304a:	2000      	movs	r0, #0
 800304c:	6360      	str	r0, [r4, #52]	; 0x34
 800304e:	e7c1      	b.n	8002fd4 <__sflush_r+0x1c>
 8003050:	6a21      	ldr	r1, [r4, #32]
 8003052:	2301      	movs	r3, #1
 8003054:	4628      	mov	r0, r5
 8003056:	47b0      	blx	r6
 8003058:	1c41      	adds	r1, r0, #1
 800305a:	d1c7      	bne.n	8002fec <__sflush_r+0x34>
 800305c:	682b      	ldr	r3, [r5, #0]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d0c4      	beq.n	8002fec <__sflush_r+0x34>
 8003062:	2b1d      	cmp	r3, #29
 8003064:	d001      	beq.n	800306a <__sflush_r+0xb2>
 8003066:	2b16      	cmp	r3, #22
 8003068:	d101      	bne.n	800306e <__sflush_r+0xb6>
 800306a:	602f      	str	r7, [r5, #0]
 800306c:	e7b1      	b.n	8002fd2 <__sflush_r+0x1a>
 800306e:	89a3      	ldrh	r3, [r4, #12]
 8003070:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003074:	81a3      	strh	r3, [r4, #12]
 8003076:	e7ad      	b.n	8002fd4 <__sflush_r+0x1c>
 8003078:	690f      	ldr	r7, [r1, #16]
 800307a:	2f00      	cmp	r7, #0
 800307c:	d0a9      	beq.n	8002fd2 <__sflush_r+0x1a>
 800307e:	0793      	lsls	r3, r2, #30
 8003080:	680e      	ldr	r6, [r1, #0]
 8003082:	bf08      	it	eq
 8003084:	694b      	ldreq	r3, [r1, #20]
 8003086:	600f      	str	r7, [r1, #0]
 8003088:	bf18      	it	ne
 800308a:	2300      	movne	r3, #0
 800308c:	eba6 0807 	sub.w	r8, r6, r7
 8003090:	608b      	str	r3, [r1, #8]
 8003092:	f1b8 0f00 	cmp.w	r8, #0
 8003096:	dd9c      	ble.n	8002fd2 <__sflush_r+0x1a>
 8003098:	6a21      	ldr	r1, [r4, #32]
 800309a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800309c:	4643      	mov	r3, r8
 800309e:	463a      	mov	r2, r7
 80030a0:	4628      	mov	r0, r5
 80030a2:	47b0      	blx	r6
 80030a4:	2800      	cmp	r0, #0
 80030a6:	dc06      	bgt.n	80030b6 <__sflush_r+0xfe>
 80030a8:	89a3      	ldrh	r3, [r4, #12]
 80030aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80030ae:	81a3      	strh	r3, [r4, #12]
 80030b0:	f04f 30ff 	mov.w	r0, #4294967295
 80030b4:	e78e      	b.n	8002fd4 <__sflush_r+0x1c>
 80030b6:	4407      	add	r7, r0
 80030b8:	eba8 0800 	sub.w	r8, r8, r0
 80030bc:	e7e9      	b.n	8003092 <__sflush_r+0xda>
 80030be:	bf00      	nop
 80030c0:	20400001 	.word	0x20400001

080030c4 <_fflush_r>:
 80030c4:	b538      	push	{r3, r4, r5, lr}
 80030c6:	690b      	ldr	r3, [r1, #16]
 80030c8:	4605      	mov	r5, r0
 80030ca:	460c      	mov	r4, r1
 80030cc:	b913      	cbnz	r3, 80030d4 <_fflush_r+0x10>
 80030ce:	2500      	movs	r5, #0
 80030d0:	4628      	mov	r0, r5
 80030d2:	bd38      	pop	{r3, r4, r5, pc}
 80030d4:	b118      	cbz	r0, 80030de <_fflush_r+0x1a>
 80030d6:	6983      	ldr	r3, [r0, #24]
 80030d8:	b90b      	cbnz	r3, 80030de <_fflush_r+0x1a>
 80030da:	f000 f887 	bl	80031ec <__sinit>
 80030de:	4b14      	ldr	r3, [pc, #80]	; (8003130 <_fflush_r+0x6c>)
 80030e0:	429c      	cmp	r4, r3
 80030e2:	d11b      	bne.n	800311c <_fflush_r+0x58>
 80030e4:	686c      	ldr	r4, [r5, #4]
 80030e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d0ef      	beq.n	80030ce <_fflush_r+0xa>
 80030ee:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80030f0:	07d0      	lsls	r0, r2, #31
 80030f2:	d404      	bmi.n	80030fe <_fflush_r+0x3a>
 80030f4:	0599      	lsls	r1, r3, #22
 80030f6:	d402      	bmi.n	80030fe <_fflush_r+0x3a>
 80030f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80030fa:	f000 f915 	bl	8003328 <__retarget_lock_acquire_recursive>
 80030fe:	4628      	mov	r0, r5
 8003100:	4621      	mov	r1, r4
 8003102:	f7ff ff59 	bl	8002fb8 <__sflush_r>
 8003106:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003108:	07da      	lsls	r2, r3, #31
 800310a:	4605      	mov	r5, r0
 800310c:	d4e0      	bmi.n	80030d0 <_fflush_r+0xc>
 800310e:	89a3      	ldrh	r3, [r4, #12]
 8003110:	059b      	lsls	r3, r3, #22
 8003112:	d4dd      	bmi.n	80030d0 <_fflush_r+0xc>
 8003114:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003116:	f000 f908 	bl	800332a <__retarget_lock_release_recursive>
 800311a:	e7d9      	b.n	80030d0 <_fflush_r+0xc>
 800311c:	4b05      	ldr	r3, [pc, #20]	; (8003134 <_fflush_r+0x70>)
 800311e:	429c      	cmp	r4, r3
 8003120:	d101      	bne.n	8003126 <_fflush_r+0x62>
 8003122:	68ac      	ldr	r4, [r5, #8]
 8003124:	e7df      	b.n	80030e6 <_fflush_r+0x22>
 8003126:	4b04      	ldr	r3, [pc, #16]	; (8003138 <_fflush_r+0x74>)
 8003128:	429c      	cmp	r4, r3
 800312a:	bf08      	it	eq
 800312c:	68ec      	ldreq	r4, [r5, #12]
 800312e:	e7da      	b.n	80030e6 <_fflush_r+0x22>
 8003130:	08003dec 	.word	0x08003dec
 8003134:	08003e0c 	.word	0x08003e0c
 8003138:	08003dcc 	.word	0x08003dcc

0800313c <std>:
 800313c:	2300      	movs	r3, #0
 800313e:	b510      	push	{r4, lr}
 8003140:	4604      	mov	r4, r0
 8003142:	e9c0 3300 	strd	r3, r3, [r0]
 8003146:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800314a:	6083      	str	r3, [r0, #8]
 800314c:	8181      	strh	r1, [r0, #12]
 800314e:	6643      	str	r3, [r0, #100]	; 0x64
 8003150:	81c2      	strh	r2, [r0, #14]
 8003152:	6183      	str	r3, [r0, #24]
 8003154:	4619      	mov	r1, r3
 8003156:	2208      	movs	r2, #8
 8003158:	305c      	adds	r0, #92	; 0x5c
 800315a:	f7ff fdd7 	bl	8002d0c <memset>
 800315e:	4b05      	ldr	r3, [pc, #20]	; (8003174 <std+0x38>)
 8003160:	6263      	str	r3, [r4, #36]	; 0x24
 8003162:	4b05      	ldr	r3, [pc, #20]	; (8003178 <std+0x3c>)
 8003164:	62a3      	str	r3, [r4, #40]	; 0x28
 8003166:	4b05      	ldr	r3, [pc, #20]	; (800317c <std+0x40>)
 8003168:	62e3      	str	r3, [r4, #44]	; 0x2c
 800316a:	4b05      	ldr	r3, [pc, #20]	; (8003180 <std+0x44>)
 800316c:	6224      	str	r4, [r4, #32]
 800316e:	6323      	str	r3, [r4, #48]	; 0x30
 8003170:	bd10      	pop	{r4, pc}
 8003172:	bf00      	nop
 8003174:	08003bb5 	.word	0x08003bb5
 8003178:	08003bd7 	.word	0x08003bd7
 800317c:	08003c0f 	.word	0x08003c0f
 8003180:	08003c33 	.word	0x08003c33

08003184 <_cleanup_r>:
 8003184:	4901      	ldr	r1, [pc, #4]	; (800318c <_cleanup_r+0x8>)
 8003186:	f000 b8af 	b.w	80032e8 <_fwalk_reent>
 800318a:	bf00      	nop
 800318c:	080030c5 	.word	0x080030c5

08003190 <__sfmoreglue>:
 8003190:	b570      	push	{r4, r5, r6, lr}
 8003192:	2268      	movs	r2, #104	; 0x68
 8003194:	1e4d      	subs	r5, r1, #1
 8003196:	4355      	muls	r5, r2
 8003198:	460e      	mov	r6, r1
 800319a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800319e:	f000 f997 	bl	80034d0 <_malloc_r>
 80031a2:	4604      	mov	r4, r0
 80031a4:	b140      	cbz	r0, 80031b8 <__sfmoreglue+0x28>
 80031a6:	2100      	movs	r1, #0
 80031a8:	e9c0 1600 	strd	r1, r6, [r0]
 80031ac:	300c      	adds	r0, #12
 80031ae:	60a0      	str	r0, [r4, #8]
 80031b0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80031b4:	f7ff fdaa 	bl	8002d0c <memset>
 80031b8:	4620      	mov	r0, r4
 80031ba:	bd70      	pop	{r4, r5, r6, pc}

080031bc <__sfp_lock_acquire>:
 80031bc:	4801      	ldr	r0, [pc, #4]	; (80031c4 <__sfp_lock_acquire+0x8>)
 80031be:	f000 b8b3 	b.w	8003328 <__retarget_lock_acquire_recursive>
 80031c2:	bf00      	nop
 80031c4:	20000105 	.word	0x20000105

080031c8 <__sfp_lock_release>:
 80031c8:	4801      	ldr	r0, [pc, #4]	; (80031d0 <__sfp_lock_release+0x8>)
 80031ca:	f000 b8ae 	b.w	800332a <__retarget_lock_release_recursive>
 80031ce:	bf00      	nop
 80031d0:	20000105 	.word	0x20000105

080031d4 <__sinit_lock_acquire>:
 80031d4:	4801      	ldr	r0, [pc, #4]	; (80031dc <__sinit_lock_acquire+0x8>)
 80031d6:	f000 b8a7 	b.w	8003328 <__retarget_lock_acquire_recursive>
 80031da:	bf00      	nop
 80031dc:	20000106 	.word	0x20000106

080031e0 <__sinit_lock_release>:
 80031e0:	4801      	ldr	r0, [pc, #4]	; (80031e8 <__sinit_lock_release+0x8>)
 80031e2:	f000 b8a2 	b.w	800332a <__retarget_lock_release_recursive>
 80031e6:	bf00      	nop
 80031e8:	20000106 	.word	0x20000106

080031ec <__sinit>:
 80031ec:	b510      	push	{r4, lr}
 80031ee:	4604      	mov	r4, r0
 80031f0:	f7ff fff0 	bl	80031d4 <__sinit_lock_acquire>
 80031f4:	69a3      	ldr	r3, [r4, #24]
 80031f6:	b11b      	cbz	r3, 8003200 <__sinit+0x14>
 80031f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80031fc:	f7ff bff0 	b.w	80031e0 <__sinit_lock_release>
 8003200:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003204:	6523      	str	r3, [r4, #80]	; 0x50
 8003206:	4b13      	ldr	r3, [pc, #76]	; (8003254 <__sinit+0x68>)
 8003208:	4a13      	ldr	r2, [pc, #76]	; (8003258 <__sinit+0x6c>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	62a2      	str	r2, [r4, #40]	; 0x28
 800320e:	42a3      	cmp	r3, r4
 8003210:	bf04      	itt	eq
 8003212:	2301      	moveq	r3, #1
 8003214:	61a3      	streq	r3, [r4, #24]
 8003216:	4620      	mov	r0, r4
 8003218:	f000 f820 	bl	800325c <__sfp>
 800321c:	6060      	str	r0, [r4, #4]
 800321e:	4620      	mov	r0, r4
 8003220:	f000 f81c 	bl	800325c <__sfp>
 8003224:	60a0      	str	r0, [r4, #8]
 8003226:	4620      	mov	r0, r4
 8003228:	f000 f818 	bl	800325c <__sfp>
 800322c:	2200      	movs	r2, #0
 800322e:	60e0      	str	r0, [r4, #12]
 8003230:	2104      	movs	r1, #4
 8003232:	6860      	ldr	r0, [r4, #4]
 8003234:	f7ff ff82 	bl	800313c <std>
 8003238:	68a0      	ldr	r0, [r4, #8]
 800323a:	2201      	movs	r2, #1
 800323c:	2109      	movs	r1, #9
 800323e:	f7ff ff7d 	bl	800313c <std>
 8003242:	68e0      	ldr	r0, [r4, #12]
 8003244:	2202      	movs	r2, #2
 8003246:	2112      	movs	r1, #18
 8003248:	f7ff ff78 	bl	800313c <std>
 800324c:	2301      	movs	r3, #1
 800324e:	61a3      	str	r3, [r4, #24]
 8003250:	e7d2      	b.n	80031f8 <__sinit+0xc>
 8003252:	bf00      	nop
 8003254:	08003dc8 	.word	0x08003dc8
 8003258:	08003185 	.word	0x08003185

0800325c <__sfp>:
 800325c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800325e:	4607      	mov	r7, r0
 8003260:	f7ff ffac 	bl	80031bc <__sfp_lock_acquire>
 8003264:	4b1e      	ldr	r3, [pc, #120]	; (80032e0 <__sfp+0x84>)
 8003266:	681e      	ldr	r6, [r3, #0]
 8003268:	69b3      	ldr	r3, [r6, #24]
 800326a:	b913      	cbnz	r3, 8003272 <__sfp+0x16>
 800326c:	4630      	mov	r0, r6
 800326e:	f7ff ffbd 	bl	80031ec <__sinit>
 8003272:	3648      	adds	r6, #72	; 0x48
 8003274:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003278:	3b01      	subs	r3, #1
 800327a:	d503      	bpl.n	8003284 <__sfp+0x28>
 800327c:	6833      	ldr	r3, [r6, #0]
 800327e:	b30b      	cbz	r3, 80032c4 <__sfp+0x68>
 8003280:	6836      	ldr	r6, [r6, #0]
 8003282:	e7f7      	b.n	8003274 <__sfp+0x18>
 8003284:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003288:	b9d5      	cbnz	r5, 80032c0 <__sfp+0x64>
 800328a:	4b16      	ldr	r3, [pc, #88]	; (80032e4 <__sfp+0x88>)
 800328c:	60e3      	str	r3, [r4, #12]
 800328e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003292:	6665      	str	r5, [r4, #100]	; 0x64
 8003294:	f000 f847 	bl	8003326 <__retarget_lock_init_recursive>
 8003298:	f7ff ff96 	bl	80031c8 <__sfp_lock_release>
 800329c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80032a0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80032a4:	6025      	str	r5, [r4, #0]
 80032a6:	61a5      	str	r5, [r4, #24]
 80032a8:	2208      	movs	r2, #8
 80032aa:	4629      	mov	r1, r5
 80032ac:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80032b0:	f7ff fd2c 	bl	8002d0c <memset>
 80032b4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80032b8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80032bc:	4620      	mov	r0, r4
 80032be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80032c0:	3468      	adds	r4, #104	; 0x68
 80032c2:	e7d9      	b.n	8003278 <__sfp+0x1c>
 80032c4:	2104      	movs	r1, #4
 80032c6:	4638      	mov	r0, r7
 80032c8:	f7ff ff62 	bl	8003190 <__sfmoreglue>
 80032cc:	4604      	mov	r4, r0
 80032ce:	6030      	str	r0, [r6, #0]
 80032d0:	2800      	cmp	r0, #0
 80032d2:	d1d5      	bne.n	8003280 <__sfp+0x24>
 80032d4:	f7ff ff78 	bl	80031c8 <__sfp_lock_release>
 80032d8:	230c      	movs	r3, #12
 80032da:	603b      	str	r3, [r7, #0]
 80032dc:	e7ee      	b.n	80032bc <__sfp+0x60>
 80032de:	bf00      	nop
 80032e0:	08003dc8 	.word	0x08003dc8
 80032e4:	ffff0001 	.word	0xffff0001

080032e8 <_fwalk_reent>:
 80032e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80032ec:	4606      	mov	r6, r0
 80032ee:	4688      	mov	r8, r1
 80032f0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80032f4:	2700      	movs	r7, #0
 80032f6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80032fa:	f1b9 0901 	subs.w	r9, r9, #1
 80032fe:	d505      	bpl.n	800330c <_fwalk_reent+0x24>
 8003300:	6824      	ldr	r4, [r4, #0]
 8003302:	2c00      	cmp	r4, #0
 8003304:	d1f7      	bne.n	80032f6 <_fwalk_reent+0xe>
 8003306:	4638      	mov	r0, r7
 8003308:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800330c:	89ab      	ldrh	r3, [r5, #12]
 800330e:	2b01      	cmp	r3, #1
 8003310:	d907      	bls.n	8003322 <_fwalk_reent+0x3a>
 8003312:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003316:	3301      	adds	r3, #1
 8003318:	d003      	beq.n	8003322 <_fwalk_reent+0x3a>
 800331a:	4629      	mov	r1, r5
 800331c:	4630      	mov	r0, r6
 800331e:	47c0      	blx	r8
 8003320:	4307      	orrs	r7, r0
 8003322:	3568      	adds	r5, #104	; 0x68
 8003324:	e7e9      	b.n	80032fa <_fwalk_reent+0x12>

08003326 <__retarget_lock_init_recursive>:
 8003326:	4770      	bx	lr

08003328 <__retarget_lock_acquire_recursive>:
 8003328:	4770      	bx	lr

0800332a <__retarget_lock_release_recursive>:
 800332a:	4770      	bx	lr

0800332c <__swhatbuf_r>:
 800332c:	b570      	push	{r4, r5, r6, lr}
 800332e:	460e      	mov	r6, r1
 8003330:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003334:	2900      	cmp	r1, #0
 8003336:	b096      	sub	sp, #88	; 0x58
 8003338:	4614      	mov	r4, r2
 800333a:	461d      	mov	r5, r3
 800333c:	da08      	bge.n	8003350 <__swhatbuf_r+0x24>
 800333e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8003342:	2200      	movs	r2, #0
 8003344:	602a      	str	r2, [r5, #0]
 8003346:	061a      	lsls	r2, r3, #24
 8003348:	d410      	bmi.n	800336c <__swhatbuf_r+0x40>
 800334a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800334e:	e00e      	b.n	800336e <__swhatbuf_r+0x42>
 8003350:	466a      	mov	r2, sp
 8003352:	f000 fc95 	bl	8003c80 <_fstat_r>
 8003356:	2800      	cmp	r0, #0
 8003358:	dbf1      	blt.n	800333e <__swhatbuf_r+0x12>
 800335a:	9a01      	ldr	r2, [sp, #4]
 800335c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003360:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003364:	425a      	negs	r2, r3
 8003366:	415a      	adcs	r2, r3
 8003368:	602a      	str	r2, [r5, #0]
 800336a:	e7ee      	b.n	800334a <__swhatbuf_r+0x1e>
 800336c:	2340      	movs	r3, #64	; 0x40
 800336e:	2000      	movs	r0, #0
 8003370:	6023      	str	r3, [r4, #0]
 8003372:	b016      	add	sp, #88	; 0x58
 8003374:	bd70      	pop	{r4, r5, r6, pc}
	...

08003378 <__smakebuf_r>:
 8003378:	898b      	ldrh	r3, [r1, #12]
 800337a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800337c:	079d      	lsls	r5, r3, #30
 800337e:	4606      	mov	r6, r0
 8003380:	460c      	mov	r4, r1
 8003382:	d507      	bpl.n	8003394 <__smakebuf_r+0x1c>
 8003384:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003388:	6023      	str	r3, [r4, #0]
 800338a:	6123      	str	r3, [r4, #16]
 800338c:	2301      	movs	r3, #1
 800338e:	6163      	str	r3, [r4, #20]
 8003390:	b002      	add	sp, #8
 8003392:	bd70      	pop	{r4, r5, r6, pc}
 8003394:	ab01      	add	r3, sp, #4
 8003396:	466a      	mov	r2, sp
 8003398:	f7ff ffc8 	bl	800332c <__swhatbuf_r>
 800339c:	9900      	ldr	r1, [sp, #0]
 800339e:	4605      	mov	r5, r0
 80033a0:	4630      	mov	r0, r6
 80033a2:	f000 f895 	bl	80034d0 <_malloc_r>
 80033a6:	b948      	cbnz	r0, 80033bc <__smakebuf_r+0x44>
 80033a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80033ac:	059a      	lsls	r2, r3, #22
 80033ae:	d4ef      	bmi.n	8003390 <__smakebuf_r+0x18>
 80033b0:	f023 0303 	bic.w	r3, r3, #3
 80033b4:	f043 0302 	orr.w	r3, r3, #2
 80033b8:	81a3      	strh	r3, [r4, #12]
 80033ba:	e7e3      	b.n	8003384 <__smakebuf_r+0xc>
 80033bc:	4b0d      	ldr	r3, [pc, #52]	; (80033f4 <__smakebuf_r+0x7c>)
 80033be:	62b3      	str	r3, [r6, #40]	; 0x28
 80033c0:	89a3      	ldrh	r3, [r4, #12]
 80033c2:	6020      	str	r0, [r4, #0]
 80033c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033c8:	81a3      	strh	r3, [r4, #12]
 80033ca:	9b00      	ldr	r3, [sp, #0]
 80033cc:	6163      	str	r3, [r4, #20]
 80033ce:	9b01      	ldr	r3, [sp, #4]
 80033d0:	6120      	str	r0, [r4, #16]
 80033d2:	b15b      	cbz	r3, 80033ec <__smakebuf_r+0x74>
 80033d4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80033d8:	4630      	mov	r0, r6
 80033da:	f000 fc63 	bl	8003ca4 <_isatty_r>
 80033de:	b128      	cbz	r0, 80033ec <__smakebuf_r+0x74>
 80033e0:	89a3      	ldrh	r3, [r4, #12]
 80033e2:	f023 0303 	bic.w	r3, r3, #3
 80033e6:	f043 0301 	orr.w	r3, r3, #1
 80033ea:	81a3      	strh	r3, [r4, #12]
 80033ec:	89a0      	ldrh	r0, [r4, #12]
 80033ee:	4305      	orrs	r5, r0
 80033f0:	81a5      	strh	r5, [r4, #12]
 80033f2:	e7cd      	b.n	8003390 <__smakebuf_r+0x18>
 80033f4:	08003185 	.word	0x08003185

080033f8 <_free_r>:
 80033f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80033fa:	2900      	cmp	r1, #0
 80033fc:	d044      	beq.n	8003488 <_free_r+0x90>
 80033fe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003402:	9001      	str	r0, [sp, #4]
 8003404:	2b00      	cmp	r3, #0
 8003406:	f1a1 0404 	sub.w	r4, r1, #4
 800340a:	bfb8      	it	lt
 800340c:	18e4      	addlt	r4, r4, r3
 800340e:	f000 fc6b 	bl	8003ce8 <__malloc_lock>
 8003412:	4a1e      	ldr	r2, [pc, #120]	; (800348c <_free_r+0x94>)
 8003414:	9801      	ldr	r0, [sp, #4]
 8003416:	6813      	ldr	r3, [r2, #0]
 8003418:	b933      	cbnz	r3, 8003428 <_free_r+0x30>
 800341a:	6063      	str	r3, [r4, #4]
 800341c:	6014      	str	r4, [r2, #0]
 800341e:	b003      	add	sp, #12
 8003420:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003424:	f000 bc66 	b.w	8003cf4 <__malloc_unlock>
 8003428:	42a3      	cmp	r3, r4
 800342a:	d908      	bls.n	800343e <_free_r+0x46>
 800342c:	6825      	ldr	r5, [r4, #0]
 800342e:	1961      	adds	r1, r4, r5
 8003430:	428b      	cmp	r3, r1
 8003432:	bf01      	itttt	eq
 8003434:	6819      	ldreq	r1, [r3, #0]
 8003436:	685b      	ldreq	r3, [r3, #4]
 8003438:	1949      	addeq	r1, r1, r5
 800343a:	6021      	streq	r1, [r4, #0]
 800343c:	e7ed      	b.n	800341a <_free_r+0x22>
 800343e:	461a      	mov	r2, r3
 8003440:	685b      	ldr	r3, [r3, #4]
 8003442:	b10b      	cbz	r3, 8003448 <_free_r+0x50>
 8003444:	42a3      	cmp	r3, r4
 8003446:	d9fa      	bls.n	800343e <_free_r+0x46>
 8003448:	6811      	ldr	r1, [r2, #0]
 800344a:	1855      	adds	r5, r2, r1
 800344c:	42a5      	cmp	r5, r4
 800344e:	d10b      	bne.n	8003468 <_free_r+0x70>
 8003450:	6824      	ldr	r4, [r4, #0]
 8003452:	4421      	add	r1, r4
 8003454:	1854      	adds	r4, r2, r1
 8003456:	42a3      	cmp	r3, r4
 8003458:	6011      	str	r1, [r2, #0]
 800345a:	d1e0      	bne.n	800341e <_free_r+0x26>
 800345c:	681c      	ldr	r4, [r3, #0]
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	6053      	str	r3, [r2, #4]
 8003462:	4421      	add	r1, r4
 8003464:	6011      	str	r1, [r2, #0]
 8003466:	e7da      	b.n	800341e <_free_r+0x26>
 8003468:	d902      	bls.n	8003470 <_free_r+0x78>
 800346a:	230c      	movs	r3, #12
 800346c:	6003      	str	r3, [r0, #0]
 800346e:	e7d6      	b.n	800341e <_free_r+0x26>
 8003470:	6825      	ldr	r5, [r4, #0]
 8003472:	1961      	adds	r1, r4, r5
 8003474:	428b      	cmp	r3, r1
 8003476:	bf04      	itt	eq
 8003478:	6819      	ldreq	r1, [r3, #0]
 800347a:	685b      	ldreq	r3, [r3, #4]
 800347c:	6063      	str	r3, [r4, #4]
 800347e:	bf04      	itt	eq
 8003480:	1949      	addeq	r1, r1, r5
 8003482:	6021      	streq	r1, [r4, #0]
 8003484:	6054      	str	r4, [r2, #4]
 8003486:	e7ca      	b.n	800341e <_free_r+0x26>
 8003488:	b003      	add	sp, #12
 800348a:	bd30      	pop	{r4, r5, pc}
 800348c:	20000108 	.word	0x20000108

08003490 <sbrk_aligned>:
 8003490:	b570      	push	{r4, r5, r6, lr}
 8003492:	4e0e      	ldr	r6, [pc, #56]	; (80034cc <sbrk_aligned+0x3c>)
 8003494:	460c      	mov	r4, r1
 8003496:	6831      	ldr	r1, [r6, #0]
 8003498:	4605      	mov	r5, r0
 800349a:	b911      	cbnz	r1, 80034a2 <sbrk_aligned+0x12>
 800349c:	f000 fb7a 	bl	8003b94 <_sbrk_r>
 80034a0:	6030      	str	r0, [r6, #0]
 80034a2:	4621      	mov	r1, r4
 80034a4:	4628      	mov	r0, r5
 80034a6:	f000 fb75 	bl	8003b94 <_sbrk_r>
 80034aa:	1c43      	adds	r3, r0, #1
 80034ac:	d00a      	beq.n	80034c4 <sbrk_aligned+0x34>
 80034ae:	1cc4      	adds	r4, r0, #3
 80034b0:	f024 0403 	bic.w	r4, r4, #3
 80034b4:	42a0      	cmp	r0, r4
 80034b6:	d007      	beq.n	80034c8 <sbrk_aligned+0x38>
 80034b8:	1a21      	subs	r1, r4, r0
 80034ba:	4628      	mov	r0, r5
 80034bc:	f000 fb6a 	bl	8003b94 <_sbrk_r>
 80034c0:	3001      	adds	r0, #1
 80034c2:	d101      	bne.n	80034c8 <sbrk_aligned+0x38>
 80034c4:	f04f 34ff 	mov.w	r4, #4294967295
 80034c8:	4620      	mov	r0, r4
 80034ca:	bd70      	pop	{r4, r5, r6, pc}
 80034cc:	2000010c 	.word	0x2000010c

080034d0 <_malloc_r>:
 80034d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80034d4:	1ccd      	adds	r5, r1, #3
 80034d6:	f025 0503 	bic.w	r5, r5, #3
 80034da:	3508      	adds	r5, #8
 80034dc:	2d0c      	cmp	r5, #12
 80034de:	bf38      	it	cc
 80034e0:	250c      	movcc	r5, #12
 80034e2:	2d00      	cmp	r5, #0
 80034e4:	4607      	mov	r7, r0
 80034e6:	db01      	blt.n	80034ec <_malloc_r+0x1c>
 80034e8:	42a9      	cmp	r1, r5
 80034ea:	d905      	bls.n	80034f8 <_malloc_r+0x28>
 80034ec:	230c      	movs	r3, #12
 80034ee:	603b      	str	r3, [r7, #0]
 80034f0:	2600      	movs	r6, #0
 80034f2:	4630      	mov	r0, r6
 80034f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80034f8:	4e2e      	ldr	r6, [pc, #184]	; (80035b4 <_malloc_r+0xe4>)
 80034fa:	f000 fbf5 	bl	8003ce8 <__malloc_lock>
 80034fe:	6833      	ldr	r3, [r6, #0]
 8003500:	461c      	mov	r4, r3
 8003502:	bb34      	cbnz	r4, 8003552 <_malloc_r+0x82>
 8003504:	4629      	mov	r1, r5
 8003506:	4638      	mov	r0, r7
 8003508:	f7ff ffc2 	bl	8003490 <sbrk_aligned>
 800350c:	1c43      	adds	r3, r0, #1
 800350e:	4604      	mov	r4, r0
 8003510:	d14d      	bne.n	80035ae <_malloc_r+0xde>
 8003512:	6834      	ldr	r4, [r6, #0]
 8003514:	4626      	mov	r6, r4
 8003516:	2e00      	cmp	r6, #0
 8003518:	d140      	bne.n	800359c <_malloc_r+0xcc>
 800351a:	6823      	ldr	r3, [r4, #0]
 800351c:	4631      	mov	r1, r6
 800351e:	4638      	mov	r0, r7
 8003520:	eb04 0803 	add.w	r8, r4, r3
 8003524:	f000 fb36 	bl	8003b94 <_sbrk_r>
 8003528:	4580      	cmp	r8, r0
 800352a:	d13a      	bne.n	80035a2 <_malloc_r+0xd2>
 800352c:	6821      	ldr	r1, [r4, #0]
 800352e:	3503      	adds	r5, #3
 8003530:	1a6d      	subs	r5, r5, r1
 8003532:	f025 0503 	bic.w	r5, r5, #3
 8003536:	3508      	adds	r5, #8
 8003538:	2d0c      	cmp	r5, #12
 800353a:	bf38      	it	cc
 800353c:	250c      	movcc	r5, #12
 800353e:	4629      	mov	r1, r5
 8003540:	4638      	mov	r0, r7
 8003542:	f7ff ffa5 	bl	8003490 <sbrk_aligned>
 8003546:	3001      	adds	r0, #1
 8003548:	d02b      	beq.n	80035a2 <_malloc_r+0xd2>
 800354a:	6823      	ldr	r3, [r4, #0]
 800354c:	442b      	add	r3, r5
 800354e:	6023      	str	r3, [r4, #0]
 8003550:	e00e      	b.n	8003570 <_malloc_r+0xa0>
 8003552:	6822      	ldr	r2, [r4, #0]
 8003554:	1b52      	subs	r2, r2, r5
 8003556:	d41e      	bmi.n	8003596 <_malloc_r+0xc6>
 8003558:	2a0b      	cmp	r2, #11
 800355a:	d916      	bls.n	800358a <_malloc_r+0xba>
 800355c:	1961      	adds	r1, r4, r5
 800355e:	42a3      	cmp	r3, r4
 8003560:	6025      	str	r5, [r4, #0]
 8003562:	bf18      	it	ne
 8003564:	6059      	strne	r1, [r3, #4]
 8003566:	6863      	ldr	r3, [r4, #4]
 8003568:	bf08      	it	eq
 800356a:	6031      	streq	r1, [r6, #0]
 800356c:	5162      	str	r2, [r4, r5]
 800356e:	604b      	str	r3, [r1, #4]
 8003570:	4638      	mov	r0, r7
 8003572:	f104 060b 	add.w	r6, r4, #11
 8003576:	f000 fbbd 	bl	8003cf4 <__malloc_unlock>
 800357a:	f026 0607 	bic.w	r6, r6, #7
 800357e:	1d23      	adds	r3, r4, #4
 8003580:	1af2      	subs	r2, r6, r3
 8003582:	d0b6      	beq.n	80034f2 <_malloc_r+0x22>
 8003584:	1b9b      	subs	r3, r3, r6
 8003586:	50a3      	str	r3, [r4, r2]
 8003588:	e7b3      	b.n	80034f2 <_malloc_r+0x22>
 800358a:	6862      	ldr	r2, [r4, #4]
 800358c:	42a3      	cmp	r3, r4
 800358e:	bf0c      	ite	eq
 8003590:	6032      	streq	r2, [r6, #0]
 8003592:	605a      	strne	r2, [r3, #4]
 8003594:	e7ec      	b.n	8003570 <_malloc_r+0xa0>
 8003596:	4623      	mov	r3, r4
 8003598:	6864      	ldr	r4, [r4, #4]
 800359a:	e7b2      	b.n	8003502 <_malloc_r+0x32>
 800359c:	4634      	mov	r4, r6
 800359e:	6876      	ldr	r6, [r6, #4]
 80035a0:	e7b9      	b.n	8003516 <_malloc_r+0x46>
 80035a2:	230c      	movs	r3, #12
 80035a4:	603b      	str	r3, [r7, #0]
 80035a6:	4638      	mov	r0, r7
 80035a8:	f000 fba4 	bl	8003cf4 <__malloc_unlock>
 80035ac:	e7a1      	b.n	80034f2 <_malloc_r+0x22>
 80035ae:	6025      	str	r5, [r4, #0]
 80035b0:	e7de      	b.n	8003570 <_malloc_r+0xa0>
 80035b2:	bf00      	nop
 80035b4:	20000108 	.word	0x20000108

080035b8 <__sfputc_r>:
 80035b8:	6893      	ldr	r3, [r2, #8]
 80035ba:	3b01      	subs	r3, #1
 80035bc:	2b00      	cmp	r3, #0
 80035be:	b410      	push	{r4}
 80035c0:	6093      	str	r3, [r2, #8]
 80035c2:	da08      	bge.n	80035d6 <__sfputc_r+0x1e>
 80035c4:	6994      	ldr	r4, [r2, #24]
 80035c6:	42a3      	cmp	r3, r4
 80035c8:	db01      	blt.n	80035ce <__sfputc_r+0x16>
 80035ca:	290a      	cmp	r1, #10
 80035cc:	d103      	bne.n	80035d6 <__sfputc_r+0x1e>
 80035ce:	f85d 4b04 	ldr.w	r4, [sp], #4
 80035d2:	f7ff bc31 	b.w	8002e38 <__swbuf_r>
 80035d6:	6813      	ldr	r3, [r2, #0]
 80035d8:	1c58      	adds	r0, r3, #1
 80035da:	6010      	str	r0, [r2, #0]
 80035dc:	7019      	strb	r1, [r3, #0]
 80035de:	4608      	mov	r0, r1
 80035e0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80035e4:	4770      	bx	lr

080035e6 <__sfputs_r>:
 80035e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035e8:	4606      	mov	r6, r0
 80035ea:	460f      	mov	r7, r1
 80035ec:	4614      	mov	r4, r2
 80035ee:	18d5      	adds	r5, r2, r3
 80035f0:	42ac      	cmp	r4, r5
 80035f2:	d101      	bne.n	80035f8 <__sfputs_r+0x12>
 80035f4:	2000      	movs	r0, #0
 80035f6:	e007      	b.n	8003608 <__sfputs_r+0x22>
 80035f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80035fc:	463a      	mov	r2, r7
 80035fe:	4630      	mov	r0, r6
 8003600:	f7ff ffda 	bl	80035b8 <__sfputc_r>
 8003604:	1c43      	adds	r3, r0, #1
 8003606:	d1f3      	bne.n	80035f0 <__sfputs_r+0xa>
 8003608:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800360c <_vfiprintf_r>:
 800360c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003610:	460d      	mov	r5, r1
 8003612:	b09d      	sub	sp, #116	; 0x74
 8003614:	4614      	mov	r4, r2
 8003616:	4698      	mov	r8, r3
 8003618:	4606      	mov	r6, r0
 800361a:	b118      	cbz	r0, 8003624 <_vfiprintf_r+0x18>
 800361c:	6983      	ldr	r3, [r0, #24]
 800361e:	b90b      	cbnz	r3, 8003624 <_vfiprintf_r+0x18>
 8003620:	f7ff fde4 	bl	80031ec <__sinit>
 8003624:	4b89      	ldr	r3, [pc, #548]	; (800384c <_vfiprintf_r+0x240>)
 8003626:	429d      	cmp	r5, r3
 8003628:	d11b      	bne.n	8003662 <_vfiprintf_r+0x56>
 800362a:	6875      	ldr	r5, [r6, #4]
 800362c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800362e:	07d9      	lsls	r1, r3, #31
 8003630:	d405      	bmi.n	800363e <_vfiprintf_r+0x32>
 8003632:	89ab      	ldrh	r3, [r5, #12]
 8003634:	059a      	lsls	r2, r3, #22
 8003636:	d402      	bmi.n	800363e <_vfiprintf_r+0x32>
 8003638:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800363a:	f7ff fe75 	bl	8003328 <__retarget_lock_acquire_recursive>
 800363e:	89ab      	ldrh	r3, [r5, #12]
 8003640:	071b      	lsls	r3, r3, #28
 8003642:	d501      	bpl.n	8003648 <_vfiprintf_r+0x3c>
 8003644:	692b      	ldr	r3, [r5, #16]
 8003646:	b9eb      	cbnz	r3, 8003684 <_vfiprintf_r+0x78>
 8003648:	4629      	mov	r1, r5
 800364a:	4630      	mov	r0, r6
 800364c:	f7ff fc46 	bl	8002edc <__swsetup_r>
 8003650:	b1c0      	cbz	r0, 8003684 <_vfiprintf_r+0x78>
 8003652:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003654:	07dc      	lsls	r4, r3, #31
 8003656:	d50e      	bpl.n	8003676 <_vfiprintf_r+0x6a>
 8003658:	f04f 30ff 	mov.w	r0, #4294967295
 800365c:	b01d      	add	sp, #116	; 0x74
 800365e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003662:	4b7b      	ldr	r3, [pc, #492]	; (8003850 <_vfiprintf_r+0x244>)
 8003664:	429d      	cmp	r5, r3
 8003666:	d101      	bne.n	800366c <_vfiprintf_r+0x60>
 8003668:	68b5      	ldr	r5, [r6, #8]
 800366a:	e7df      	b.n	800362c <_vfiprintf_r+0x20>
 800366c:	4b79      	ldr	r3, [pc, #484]	; (8003854 <_vfiprintf_r+0x248>)
 800366e:	429d      	cmp	r5, r3
 8003670:	bf08      	it	eq
 8003672:	68f5      	ldreq	r5, [r6, #12]
 8003674:	e7da      	b.n	800362c <_vfiprintf_r+0x20>
 8003676:	89ab      	ldrh	r3, [r5, #12]
 8003678:	0598      	lsls	r0, r3, #22
 800367a:	d4ed      	bmi.n	8003658 <_vfiprintf_r+0x4c>
 800367c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800367e:	f7ff fe54 	bl	800332a <__retarget_lock_release_recursive>
 8003682:	e7e9      	b.n	8003658 <_vfiprintf_r+0x4c>
 8003684:	2300      	movs	r3, #0
 8003686:	9309      	str	r3, [sp, #36]	; 0x24
 8003688:	2320      	movs	r3, #32
 800368a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800368e:	f8cd 800c 	str.w	r8, [sp, #12]
 8003692:	2330      	movs	r3, #48	; 0x30
 8003694:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8003858 <_vfiprintf_r+0x24c>
 8003698:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800369c:	f04f 0901 	mov.w	r9, #1
 80036a0:	4623      	mov	r3, r4
 80036a2:	469a      	mov	sl, r3
 80036a4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80036a8:	b10a      	cbz	r2, 80036ae <_vfiprintf_r+0xa2>
 80036aa:	2a25      	cmp	r2, #37	; 0x25
 80036ac:	d1f9      	bne.n	80036a2 <_vfiprintf_r+0x96>
 80036ae:	ebba 0b04 	subs.w	fp, sl, r4
 80036b2:	d00b      	beq.n	80036cc <_vfiprintf_r+0xc0>
 80036b4:	465b      	mov	r3, fp
 80036b6:	4622      	mov	r2, r4
 80036b8:	4629      	mov	r1, r5
 80036ba:	4630      	mov	r0, r6
 80036bc:	f7ff ff93 	bl	80035e6 <__sfputs_r>
 80036c0:	3001      	adds	r0, #1
 80036c2:	f000 80aa 	beq.w	800381a <_vfiprintf_r+0x20e>
 80036c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80036c8:	445a      	add	r2, fp
 80036ca:	9209      	str	r2, [sp, #36]	; 0x24
 80036cc:	f89a 3000 	ldrb.w	r3, [sl]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	f000 80a2 	beq.w	800381a <_vfiprintf_r+0x20e>
 80036d6:	2300      	movs	r3, #0
 80036d8:	f04f 32ff 	mov.w	r2, #4294967295
 80036dc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80036e0:	f10a 0a01 	add.w	sl, sl, #1
 80036e4:	9304      	str	r3, [sp, #16]
 80036e6:	9307      	str	r3, [sp, #28]
 80036e8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80036ec:	931a      	str	r3, [sp, #104]	; 0x68
 80036ee:	4654      	mov	r4, sl
 80036f0:	2205      	movs	r2, #5
 80036f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80036f6:	4858      	ldr	r0, [pc, #352]	; (8003858 <_vfiprintf_r+0x24c>)
 80036f8:	f7fc fd8a 	bl	8000210 <memchr>
 80036fc:	9a04      	ldr	r2, [sp, #16]
 80036fe:	b9d8      	cbnz	r0, 8003738 <_vfiprintf_r+0x12c>
 8003700:	06d1      	lsls	r1, r2, #27
 8003702:	bf44      	itt	mi
 8003704:	2320      	movmi	r3, #32
 8003706:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800370a:	0713      	lsls	r3, r2, #28
 800370c:	bf44      	itt	mi
 800370e:	232b      	movmi	r3, #43	; 0x2b
 8003710:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003714:	f89a 3000 	ldrb.w	r3, [sl]
 8003718:	2b2a      	cmp	r3, #42	; 0x2a
 800371a:	d015      	beq.n	8003748 <_vfiprintf_r+0x13c>
 800371c:	9a07      	ldr	r2, [sp, #28]
 800371e:	4654      	mov	r4, sl
 8003720:	2000      	movs	r0, #0
 8003722:	f04f 0c0a 	mov.w	ip, #10
 8003726:	4621      	mov	r1, r4
 8003728:	f811 3b01 	ldrb.w	r3, [r1], #1
 800372c:	3b30      	subs	r3, #48	; 0x30
 800372e:	2b09      	cmp	r3, #9
 8003730:	d94e      	bls.n	80037d0 <_vfiprintf_r+0x1c4>
 8003732:	b1b0      	cbz	r0, 8003762 <_vfiprintf_r+0x156>
 8003734:	9207      	str	r2, [sp, #28]
 8003736:	e014      	b.n	8003762 <_vfiprintf_r+0x156>
 8003738:	eba0 0308 	sub.w	r3, r0, r8
 800373c:	fa09 f303 	lsl.w	r3, r9, r3
 8003740:	4313      	orrs	r3, r2
 8003742:	9304      	str	r3, [sp, #16]
 8003744:	46a2      	mov	sl, r4
 8003746:	e7d2      	b.n	80036ee <_vfiprintf_r+0xe2>
 8003748:	9b03      	ldr	r3, [sp, #12]
 800374a:	1d19      	adds	r1, r3, #4
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	9103      	str	r1, [sp, #12]
 8003750:	2b00      	cmp	r3, #0
 8003752:	bfbb      	ittet	lt
 8003754:	425b      	neglt	r3, r3
 8003756:	f042 0202 	orrlt.w	r2, r2, #2
 800375a:	9307      	strge	r3, [sp, #28]
 800375c:	9307      	strlt	r3, [sp, #28]
 800375e:	bfb8      	it	lt
 8003760:	9204      	strlt	r2, [sp, #16]
 8003762:	7823      	ldrb	r3, [r4, #0]
 8003764:	2b2e      	cmp	r3, #46	; 0x2e
 8003766:	d10c      	bne.n	8003782 <_vfiprintf_r+0x176>
 8003768:	7863      	ldrb	r3, [r4, #1]
 800376a:	2b2a      	cmp	r3, #42	; 0x2a
 800376c:	d135      	bne.n	80037da <_vfiprintf_r+0x1ce>
 800376e:	9b03      	ldr	r3, [sp, #12]
 8003770:	1d1a      	adds	r2, r3, #4
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	9203      	str	r2, [sp, #12]
 8003776:	2b00      	cmp	r3, #0
 8003778:	bfb8      	it	lt
 800377a:	f04f 33ff 	movlt.w	r3, #4294967295
 800377e:	3402      	adds	r4, #2
 8003780:	9305      	str	r3, [sp, #20]
 8003782:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8003868 <_vfiprintf_r+0x25c>
 8003786:	7821      	ldrb	r1, [r4, #0]
 8003788:	2203      	movs	r2, #3
 800378a:	4650      	mov	r0, sl
 800378c:	f7fc fd40 	bl	8000210 <memchr>
 8003790:	b140      	cbz	r0, 80037a4 <_vfiprintf_r+0x198>
 8003792:	2340      	movs	r3, #64	; 0x40
 8003794:	eba0 000a 	sub.w	r0, r0, sl
 8003798:	fa03 f000 	lsl.w	r0, r3, r0
 800379c:	9b04      	ldr	r3, [sp, #16]
 800379e:	4303      	orrs	r3, r0
 80037a0:	3401      	adds	r4, #1
 80037a2:	9304      	str	r3, [sp, #16]
 80037a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80037a8:	482c      	ldr	r0, [pc, #176]	; (800385c <_vfiprintf_r+0x250>)
 80037aa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80037ae:	2206      	movs	r2, #6
 80037b0:	f7fc fd2e 	bl	8000210 <memchr>
 80037b4:	2800      	cmp	r0, #0
 80037b6:	d03f      	beq.n	8003838 <_vfiprintf_r+0x22c>
 80037b8:	4b29      	ldr	r3, [pc, #164]	; (8003860 <_vfiprintf_r+0x254>)
 80037ba:	bb1b      	cbnz	r3, 8003804 <_vfiprintf_r+0x1f8>
 80037bc:	9b03      	ldr	r3, [sp, #12]
 80037be:	3307      	adds	r3, #7
 80037c0:	f023 0307 	bic.w	r3, r3, #7
 80037c4:	3308      	adds	r3, #8
 80037c6:	9303      	str	r3, [sp, #12]
 80037c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80037ca:	443b      	add	r3, r7
 80037cc:	9309      	str	r3, [sp, #36]	; 0x24
 80037ce:	e767      	b.n	80036a0 <_vfiprintf_r+0x94>
 80037d0:	fb0c 3202 	mla	r2, ip, r2, r3
 80037d4:	460c      	mov	r4, r1
 80037d6:	2001      	movs	r0, #1
 80037d8:	e7a5      	b.n	8003726 <_vfiprintf_r+0x11a>
 80037da:	2300      	movs	r3, #0
 80037dc:	3401      	adds	r4, #1
 80037de:	9305      	str	r3, [sp, #20]
 80037e0:	4619      	mov	r1, r3
 80037e2:	f04f 0c0a 	mov.w	ip, #10
 80037e6:	4620      	mov	r0, r4
 80037e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80037ec:	3a30      	subs	r2, #48	; 0x30
 80037ee:	2a09      	cmp	r2, #9
 80037f0:	d903      	bls.n	80037fa <_vfiprintf_r+0x1ee>
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d0c5      	beq.n	8003782 <_vfiprintf_r+0x176>
 80037f6:	9105      	str	r1, [sp, #20]
 80037f8:	e7c3      	b.n	8003782 <_vfiprintf_r+0x176>
 80037fa:	fb0c 2101 	mla	r1, ip, r1, r2
 80037fe:	4604      	mov	r4, r0
 8003800:	2301      	movs	r3, #1
 8003802:	e7f0      	b.n	80037e6 <_vfiprintf_r+0x1da>
 8003804:	ab03      	add	r3, sp, #12
 8003806:	9300      	str	r3, [sp, #0]
 8003808:	462a      	mov	r2, r5
 800380a:	4b16      	ldr	r3, [pc, #88]	; (8003864 <_vfiprintf_r+0x258>)
 800380c:	a904      	add	r1, sp, #16
 800380e:	4630      	mov	r0, r6
 8003810:	f3af 8000 	nop.w
 8003814:	4607      	mov	r7, r0
 8003816:	1c78      	adds	r0, r7, #1
 8003818:	d1d6      	bne.n	80037c8 <_vfiprintf_r+0x1bc>
 800381a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800381c:	07d9      	lsls	r1, r3, #31
 800381e:	d405      	bmi.n	800382c <_vfiprintf_r+0x220>
 8003820:	89ab      	ldrh	r3, [r5, #12]
 8003822:	059a      	lsls	r2, r3, #22
 8003824:	d402      	bmi.n	800382c <_vfiprintf_r+0x220>
 8003826:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003828:	f7ff fd7f 	bl	800332a <__retarget_lock_release_recursive>
 800382c:	89ab      	ldrh	r3, [r5, #12]
 800382e:	065b      	lsls	r3, r3, #25
 8003830:	f53f af12 	bmi.w	8003658 <_vfiprintf_r+0x4c>
 8003834:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003836:	e711      	b.n	800365c <_vfiprintf_r+0x50>
 8003838:	ab03      	add	r3, sp, #12
 800383a:	9300      	str	r3, [sp, #0]
 800383c:	462a      	mov	r2, r5
 800383e:	4b09      	ldr	r3, [pc, #36]	; (8003864 <_vfiprintf_r+0x258>)
 8003840:	a904      	add	r1, sp, #16
 8003842:	4630      	mov	r0, r6
 8003844:	f000 f880 	bl	8003948 <_printf_i>
 8003848:	e7e4      	b.n	8003814 <_vfiprintf_r+0x208>
 800384a:	bf00      	nop
 800384c:	08003dec 	.word	0x08003dec
 8003850:	08003e0c 	.word	0x08003e0c
 8003854:	08003dcc 	.word	0x08003dcc
 8003858:	08003e2c 	.word	0x08003e2c
 800385c:	08003e36 	.word	0x08003e36
 8003860:	00000000 	.word	0x00000000
 8003864:	080035e7 	.word	0x080035e7
 8003868:	08003e32 	.word	0x08003e32

0800386c <_printf_common>:
 800386c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003870:	4616      	mov	r6, r2
 8003872:	4699      	mov	r9, r3
 8003874:	688a      	ldr	r2, [r1, #8]
 8003876:	690b      	ldr	r3, [r1, #16]
 8003878:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800387c:	4293      	cmp	r3, r2
 800387e:	bfb8      	it	lt
 8003880:	4613      	movlt	r3, r2
 8003882:	6033      	str	r3, [r6, #0]
 8003884:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003888:	4607      	mov	r7, r0
 800388a:	460c      	mov	r4, r1
 800388c:	b10a      	cbz	r2, 8003892 <_printf_common+0x26>
 800388e:	3301      	adds	r3, #1
 8003890:	6033      	str	r3, [r6, #0]
 8003892:	6823      	ldr	r3, [r4, #0]
 8003894:	0699      	lsls	r1, r3, #26
 8003896:	bf42      	ittt	mi
 8003898:	6833      	ldrmi	r3, [r6, #0]
 800389a:	3302      	addmi	r3, #2
 800389c:	6033      	strmi	r3, [r6, #0]
 800389e:	6825      	ldr	r5, [r4, #0]
 80038a0:	f015 0506 	ands.w	r5, r5, #6
 80038a4:	d106      	bne.n	80038b4 <_printf_common+0x48>
 80038a6:	f104 0a19 	add.w	sl, r4, #25
 80038aa:	68e3      	ldr	r3, [r4, #12]
 80038ac:	6832      	ldr	r2, [r6, #0]
 80038ae:	1a9b      	subs	r3, r3, r2
 80038b0:	42ab      	cmp	r3, r5
 80038b2:	dc26      	bgt.n	8003902 <_printf_common+0x96>
 80038b4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80038b8:	1e13      	subs	r3, r2, #0
 80038ba:	6822      	ldr	r2, [r4, #0]
 80038bc:	bf18      	it	ne
 80038be:	2301      	movne	r3, #1
 80038c0:	0692      	lsls	r2, r2, #26
 80038c2:	d42b      	bmi.n	800391c <_printf_common+0xb0>
 80038c4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80038c8:	4649      	mov	r1, r9
 80038ca:	4638      	mov	r0, r7
 80038cc:	47c0      	blx	r8
 80038ce:	3001      	adds	r0, #1
 80038d0:	d01e      	beq.n	8003910 <_printf_common+0xa4>
 80038d2:	6823      	ldr	r3, [r4, #0]
 80038d4:	68e5      	ldr	r5, [r4, #12]
 80038d6:	6832      	ldr	r2, [r6, #0]
 80038d8:	f003 0306 	and.w	r3, r3, #6
 80038dc:	2b04      	cmp	r3, #4
 80038de:	bf08      	it	eq
 80038e0:	1aad      	subeq	r5, r5, r2
 80038e2:	68a3      	ldr	r3, [r4, #8]
 80038e4:	6922      	ldr	r2, [r4, #16]
 80038e6:	bf0c      	ite	eq
 80038e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80038ec:	2500      	movne	r5, #0
 80038ee:	4293      	cmp	r3, r2
 80038f0:	bfc4      	itt	gt
 80038f2:	1a9b      	subgt	r3, r3, r2
 80038f4:	18ed      	addgt	r5, r5, r3
 80038f6:	2600      	movs	r6, #0
 80038f8:	341a      	adds	r4, #26
 80038fa:	42b5      	cmp	r5, r6
 80038fc:	d11a      	bne.n	8003934 <_printf_common+0xc8>
 80038fe:	2000      	movs	r0, #0
 8003900:	e008      	b.n	8003914 <_printf_common+0xa8>
 8003902:	2301      	movs	r3, #1
 8003904:	4652      	mov	r2, sl
 8003906:	4649      	mov	r1, r9
 8003908:	4638      	mov	r0, r7
 800390a:	47c0      	blx	r8
 800390c:	3001      	adds	r0, #1
 800390e:	d103      	bne.n	8003918 <_printf_common+0xac>
 8003910:	f04f 30ff 	mov.w	r0, #4294967295
 8003914:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003918:	3501      	adds	r5, #1
 800391a:	e7c6      	b.n	80038aa <_printf_common+0x3e>
 800391c:	18e1      	adds	r1, r4, r3
 800391e:	1c5a      	adds	r2, r3, #1
 8003920:	2030      	movs	r0, #48	; 0x30
 8003922:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003926:	4422      	add	r2, r4
 8003928:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800392c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003930:	3302      	adds	r3, #2
 8003932:	e7c7      	b.n	80038c4 <_printf_common+0x58>
 8003934:	2301      	movs	r3, #1
 8003936:	4622      	mov	r2, r4
 8003938:	4649      	mov	r1, r9
 800393a:	4638      	mov	r0, r7
 800393c:	47c0      	blx	r8
 800393e:	3001      	adds	r0, #1
 8003940:	d0e6      	beq.n	8003910 <_printf_common+0xa4>
 8003942:	3601      	adds	r6, #1
 8003944:	e7d9      	b.n	80038fa <_printf_common+0x8e>
	...

08003948 <_printf_i>:
 8003948:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800394c:	7e0f      	ldrb	r7, [r1, #24]
 800394e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003950:	2f78      	cmp	r7, #120	; 0x78
 8003952:	4691      	mov	r9, r2
 8003954:	4680      	mov	r8, r0
 8003956:	460c      	mov	r4, r1
 8003958:	469a      	mov	sl, r3
 800395a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800395e:	d807      	bhi.n	8003970 <_printf_i+0x28>
 8003960:	2f62      	cmp	r7, #98	; 0x62
 8003962:	d80a      	bhi.n	800397a <_printf_i+0x32>
 8003964:	2f00      	cmp	r7, #0
 8003966:	f000 80d8 	beq.w	8003b1a <_printf_i+0x1d2>
 800396a:	2f58      	cmp	r7, #88	; 0x58
 800396c:	f000 80a3 	beq.w	8003ab6 <_printf_i+0x16e>
 8003970:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003974:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003978:	e03a      	b.n	80039f0 <_printf_i+0xa8>
 800397a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800397e:	2b15      	cmp	r3, #21
 8003980:	d8f6      	bhi.n	8003970 <_printf_i+0x28>
 8003982:	a101      	add	r1, pc, #4	; (adr r1, 8003988 <_printf_i+0x40>)
 8003984:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003988:	080039e1 	.word	0x080039e1
 800398c:	080039f5 	.word	0x080039f5
 8003990:	08003971 	.word	0x08003971
 8003994:	08003971 	.word	0x08003971
 8003998:	08003971 	.word	0x08003971
 800399c:	08003971 	.word	0x08003971
 80039a0:	080039f5 	.word	0x080039f5
 80039a4:	08003971 	.word	0x08003971
 80039a8:	08003971 	.word	0x08003971
 80039ac:	08003971 	.word	0x08003971
 80039b0:	08003971 	.word	0x08003971
 80039b4:	08003b01 	.word	0x08003b01
 80039b8:	08003a25 	.word	0x08003a25
 80039bc:	08003ae3 	.word	0x08003ae3
 80039c0:	08003971 	.word	0x08003971
 80039c4:	08003971 	.word	0x08003971
 80039c8:	08003b23 	.word	0x08003b23
 80039cc:	08003971 	.word	0x08003971
 80039d0:	08003a25 	.word	0x08003a25
 80039d4:	08003971 	.word	0x08003971
 80039d8:	08003971 	.word	0x08003971
 80039dc:	08003aeb 	.word	0x08003aeb
 80039e0:	682b      	ldr	r3, [r5, #0]
 80039e2:	1d1a      	adds	r2, r3, #4
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	602a      	str	r2, [r5, #0]
 80039e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80039ec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80039f0:	2301      	movs	r3, #1
 80039f2:	e0a3      	b.n	8003b3c <_printf_i+0x1f4>
 80039f4:	6820      	ldr	r0, [r4, #0]
 80039f6:	6829      	ldr	r1, [r5, #0]
 80039f8:	0606      	lsls	r6, r0, #24
 80039fa:	f101 0304 	add.w	r3, r1, #4
 80039fe:	d50a      	bpl.n	8003a16 <_printf_i+0xce>
 8003a00:	680e      	ldr	r6, [r1, #0]
 8003a02:	602b      	str	r3, [r5, #0]
 8003a04:	2e00      	cmp	r6, #0
 8003a06:	da03      	bge.n	8003a10 <_printf_i+0xc8>
 8003a08:	232d      	movs	r3, #45	; 0x2d
 8003a0a:	4276      	negs	r6, r6
 8003a0c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003a10:	485e      	ldr	r0, [pc, #376]	; (8003b8c <_printf_i+0x244>)
 8003a12:	230a      	movs	r3, #10
 8003a14:	e019      	b.n	8003a4a <_printf_i+0x102>
 8003a16:	680e      	ldr	r6, [r1, #0]
 8003a18:	602b      	str	r3, [r5, #0]
 8003a1a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003a1e:	bf18      	it	ne
 8003a20:	b236      	sxthne	r6, r6
 8003a22:	e7ef      	b.n	8003a04 <_printf_i+0xbc>
 8003a24:	682b      	ldr	r3, [r5, #0]
 8003a26:	6820      	ldr	r0, [r4, #0]
 8003a28:	1d19      	adds	r1, r3, #4
 8003a2a:	6029      	str	r1, [r5, #0]
 8003a2c:	0601      	lsls	r1, r0, #24
 8003a2e:	d501      	bpl.n	8003a34 <_printf_i+0xec>
 8003a30:	681e      	ldr	r6, [r3, #0]
 8003a32:	e002      	b.n	8003a3a <_printf_i+0xf2>
 8003a34:	0646      	lsls	r6, r0, #25
 8003a36:	d5fb      	bpl.n	8003a30 <_printf_i+0xe8>
 8003a38:	881e      	ldrh	r6, [r3, #0]
 8003a3a:	4854      	ldr	r0, [pc, #336]	; (8003b8c <_printf_i+0x244>)
 8003a3c:	2f6f      	cmp	r7, #111	; 0x6f
 8003a3e:	bf0c      	ite	eq
 8003a40:	2308      	moveq	r3, #8
 8003a42:	230a      	movne	r3, #10
 8003a44:	2100      	movs	r1, #0
 8003a46:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003a4a:	6865      	ldr	r5, [r4, #4]
 8003a4c:	60a5      	str	r5, [r4, #8]
 8003a4e:	2d00      	cmp	r5, #0
 8003a50:	bfa2      	ittt	ge
 8003a52:	6821      	ldrge	r1, [r4, #0]
 8003a54:	f021 0104 	bicge.w	r1, r1, #4
 8003a58:	6021      	strge	r1, [r4, #0]
 8003a5a:	b90e      	cbnz	r6, 8003a60 <_printf_i+0x118>
 8003a5c:	2d00      	cmp	r5, #0
 8003a5e:	d04d      	beq.n	8003afc <_printf_i+0x1b4>
 8003a60:	4615      	mov	r5, r2
 8003a62:	fbb6 f1f3 	udiv	r1, r6, r3
 8003a66:	fb03 6711 	mls	r7, r3, r1, r6
 8003a6a:	5dc7      	ldrb	r7, [r0, r7]
 8003a6c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003a70:	4637      	mov	r7, r6
 8003a72:	42bb      	cmp	r3, r7
 8003a74:	460e      	mov	r6, r1
 8003a76:	d9f4      	bls.n	8003a62 <_printf_i+0x11a>
 8003a78:	2b08      	cmp	r3, #8
 8003a7a:	d10b      	bne.n	8003a94 <_printf_i+0x14c>
 8003a7c:	6823      	ldr	r3, [r4, #0]
 8003a7e:	07de      	lsls	r6, r3, #31
 8003a80:	d508      	bpl.n	8003a94 <_printf_i+0x14c>
 8003a82:	6923      	ldr	r3, [r4, #16]
 8003a84:	6861      	ldr	r1, [r4, #4]
 8003a86:	4299      	cmp	r1, r3
 8003a88:	bfde      	ittt	le
 8003a8a:	2330      	movle	r3, #48	; 0x30
 8003a8c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003a90:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003a94:	1b52      	subs	r2, r2, r5
 8003a96:	6122      	str	r2, [r4, #16]
 8003a98:	f8cd a000 	str.w	sl, [sp]
 8003a9c:	464b      	mov	r3, r9
 8003a9e:	aa03      	add	r2, sp, #12
 8003aa0:	4621      	mov	r1, r4
 8003aa2:	4640      	mov	r0, r8
 8003aa4:	f7ff fee2 	bl	800386c <_printf_common>
 8003aa8:	3001      	adds	r0, #1
 8003aaa:	d14c      	bne.n	8003b46 <_printf_i+0x1fe>
 8003aac:	f04f 30ff 	mov.w	r0, #4294967295
 8003ab0:	b004      	add	sp, #16
 8003ab2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ab6:	4835      	ldr	r0, [pc, #212]	; (8003b8c <_printf_i+0x244>)
 8003ab8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003abc:	6829      	ldr	r1, [r5, #0]
 8003abe:	6823      	ldr	r3, [r4, #0]
 8003ac0:	f851 6b04 	ldr.w	r6, [r1], #4
 8003ac4:	6029      	str	r1, [r5, #0]
 8003ac6:	061d      	lsls	r5, r3, #24
 8003ac8:	d514      	bpl.n	8003af4 <_printf_i+0x1ac>
 8003aca:	07df      	lsls	r7, r3, #31
 8003acc:	bf44      	itt	mi
 8003ace:	f043 0320 	orrmi.w	r3, r3, #32
 8003ad2:	6023      	strmi	r3, [r4, #0]
 8003ad4:	b91e      	cbnz	r6, 8003ade <_printf_i+0x196>
 8003ad6:	6823      	ldr	r3, [r4, #0]
 8003ad8:	f023 0320 	bic.w	r3, r3, #32
 8003adc:	6023      	str	r3, [r4, #0]
 8003ade:	2310      	movs	r3, #16
 8003ae0:	e7b0      	b.n	8003a44 <_printf_i+0xfc>
 8003ae2:	6823      	ldr	r3, [r4, #0]
 8003ae4:	f043 0320 	orr.w	r3, r3, #32
 8003ae8:	6023      	str	r3, [r4, #0]
 8003aea:	2378      	movs	r3, #120	; 0x78
 8003aec:	4828      	ldr	r0, [pc, #160]	; (8003b90 <_printf_i+0x248>)
 8003aee:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003af2:	e7e3      	b.n	8003abc <_printf_i+0x174>
 8003af4:	0659      	lsls	r1, r3, #25
 8003af6:	bf48      	it	mi
 8003af8:	b2b6      	uxthmi	r6, r6
 8003afa:	e7e6      	b.n	8003aca <_printf_i+0x182>
 8003afc:	4615      	mov	r5, r2
 8003afe:	e7bb      	b.n	8003a78 <_printf_i+0x130>
 8003b00:	682b      	ldr	r3, [r5, #0]
 8003b02:	6826      	ldr	r6, [r4, #0]
 8003b04:	6961      	ldr	r1, [r4, #20]
 8003b06:	1d18      	adds	r0, r3, #4
 8003b08:	6028      	str	r0, [r5, #0]
 8003b0a:	0635      	lsls	r5, r6, #24
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	d501      	bpl.n	8003b14 <_printf_i+0x1cc>
 8003b10:	6019      	str	r1, [r3, #0]
 8003b12:	e002      	b.n	8003b1a <_printf_i+0x1d2>
 8003b14:	0670      	lsls	r0, r6, #25
 8003b16:	d5fb      	bpl.n	8003b10 <_printf_i+0x1c8>
 8003b18:	8019      	strh	r1, [r3, #0]
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	6123      	str	r3, [r4, #16]
 8003b1e:	4615      	mov	r5, r2
 8003b20:	e7ba      	b.n	8003a98 <_printf_i+0x150>
 8003b22:	682b      	ldr	r3, [r5, #0]
 8003b24:	1d1a      	adds	r2, r3, #4
 8003b26:	602a      	str	r2, [r5, #0]
 8003b28:	681d      	ldr	r5, [r3, #0]
 8003b2a:	6862      	ldr	r2, [r4, #4]
 8003b2c:	2100      	movs	r1, #0
 8003b2e:	4628      	mov	r0, r5
 8003b30:	f7fc fb6e 	bl	8000210 <memchr>
 8003b34:	b108      	cbz	r0, 8003b3a <_printf_i+0x1f2>
 8003b36:	1b40      	subs	r0, r0, r5
 8003b38:	6060      	str	r0, [r4, #4]
 8003b3a:	6863      	ldr	r3, [r4, #4]
 8003b3c:	6123      	str	r3, [r4, #16]
 8003b3e:	2300      	movs	r3, #0
 8003b40:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003b44:	e7a8      	b.n	8003a98 <_printf_i+0x150>
 8003b46:	6923      	ldr	r3, [r4, #16]
 8003b48:	462a      	mov	r2, r5
 8003b4a:	4649      	mov	r1, r9
 8003b4c:	4640      	mov	r0, r8
 8003b4e:	47d0      	blx	sl
 8003b50:	3001      	adds	r0, #1
 8003b52:	d0ab      	beq.n	8003aac <_printf_i+0x164>
 8003b54:	6823      	ldr	r3, [r4, #0]
 8003b56:	079b      	lsls	r3, r3, #30
 8003b58:	d413      	bmi.n	8003b82 <_printf_i+0x23a>
 8003b5a:	68e0      	ldr	r0, [r4, #12]
 8003b5c:	9b03      	ldr	r3, [sp, #12]
 8003b5e:	4298      	cmp	r0, r3
 8003b60:	bfb8      	it	lt
 8003b62:	4618      	movlt	r0, r3
 8003b64:	e7a4      	b.n	8003ab0 <_printf_i+0x168>
 8003b66:	2301      	movs	r3, #1
 8003b68:	4632      	mov	r2, r6
 8003b6a:	4649      	mov	r1, r9
 8003b6c:	4640      	mov	r0, r8
 8003b6e:	47d0      	blx	sl
 8003b70:	3001      	adds	r0, #1
 8003b72:	d09b      	beq.n	8003aac <_printf_i+0x164>
 8003b74:	3501      	adds	r5, #1
 8003b76:	68e3      	ldr	r3, [r4, #12]
 8003b78:	9903      	ldr	r1, [sp, #12]
 8003b7a:	1a5b      	subs	r3, r3, r1
 8003b7c:	42ab      	cmp	r3, r5
 8003b7e:	dcf2      	bgt.n	8003b66 <_printf_i+0x21e>
 8003b80:	e7eb      	b.n	8003b5a <_printf_i+0x212>
 8003b82:	2500      	movs	r5, #0
 8003b84:	f104 0619 	add.w	r6, r4, #25
 8003b88:	e7f5      	b.n	8003b76 <_printf_i+0x22e>
 8003b8a:	bf00      	nop
 8003b8c:	08003e3d 	.word	0x08003e3d
 8003b90:	08003e4e 	.word	0x08003e4e

08003b94 <_sbrk_r>:
 8003b94:	b538      	push	{r3, r4, r5, lr}
 8003b96:	4d06      	ldr	r5, [pc, #24]	; (8003bb0 <_sbrk_r+0x1c>)
 8003b98:	2300      	movs	r3, #0
 8003b9a:	4604      	mov	r4, r0
 8003b9c:	4608      	mov	r0, r1
 8003b9e:	602b      	str	r3, [r5, #0]
 8003ba0:	f000 f8c0 	bl	8003d24 <_sbrk>
 8003ba4:	1c43      	adds	r3, r0, #1
 8003ba6:	d102      	bne.n	8003bae <_sbrk_r+0x1a>
 8003ba8:	682b      	ldr	r3, [r5, #0]
 8003baa:	b103      	cbz	r3, 8003bae <_sbrk_r+0x1a>
 8003bac:	6023      	str	r3, [r4, #0]
 8003bae:	bd38      	pop	{r3, r4, r5, pc}
 8003bb0:	20000110 	.word	0x20000110

08003bb4 <__sread>:
 8003bb4:	b510      	push	{r4, lr}
 8003bb6:	460c      	mov	r4, r1
 8003bb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003bbc:	f000 f8a0 	bl	8003d00 <_read_r>
 8003bc0:	2800      	cmp	r0, #0
 8003bc2:	bfab      	itete	ge
 8003bc4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003bc6:	89a3      	ldrhlt	r3, [r4, #12]
 8003bc8:	181b      	addge	r3, r3, r0
 8003bca:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003bce:	bfac      	ite	ge
 8003bd0:	6563      	strge	r3, [r4, #84]	; 0x54
 8003bd2:	81a3      	strhlt	r3, [r4, #12]
 8003bd4:	bd10      	pop	{r4, pc}

08003bd6 <__swrite>:
 8003bd6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003bda:	461f      	mov	r7, r3
 8003bdc:	898b      	ldrh	r3, [r1, #12]
 8003bde:	05db      	lsls	r3, r3, #23
 8003be0:	4605      	mov	r5, r0
 8003be2:	460c      	mov	r4, r1
 8003be4:	4616      	mov	r6, r2
 8003be6:	d505      	bpl.n	8003bf4 <__swrite+0x1e>
 8003be8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003bec:	2302      	movs	r3, #2
 8003bee:	2200      	movs	r2, #0
 8003bf0:	f000 f868 	bl	8003cc4 <_lseek_r>
 8003bf4:	89a3      	ldrh	r3, [r4, #12]
 8003bf6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003bfa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003bfe:	81a3      	strh	r3, [r4, #12]
 8003c00:	4632      	mov	r2, r6
 8003c02:	463b      	mov	r3, r7
 8003c04:	4628      	mov	r0, r5
 8003c06:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003c0a:	f000 b817 	b.w	8003c3c <_write_r>

08003c0e <__sseek>:
 8003c0e:	b510      	push	{r4, lr}
 8003c10:	460c      	mov	r4, r1
 8003c12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003c16:	f000 f855 	bl	8003cc4 <_lseek_r>
 8003c1a:	1c43      	adds	r3, r0, #1
 8003c1c:	89a3      	ldrh	r3, [r4, #12]
 8003c1e:	bf15      	itete	ne
 8003c20:	6560      	strne	r0, [r4, #84]	; 0x54
 8003c22:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003c26:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003c2a:	81a3      	strheq	r3, [r4, #12]
 8003c2c:	bf18      	it	ne
 8003c2e:	81a3      	strhne	r3, [r4, #12]
 8003c30:	bd10      	pop	{r4, pc}

08003c32 <__sclose>:
 8003c32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003c36:	f000 b813 	b.w	8003c60 <_close_r>
	...

08003c3c <_write_r>:
 8003c3c:	b538      	push	{r3, r4, r5, lr}
 8003c3e:	4d07      	ldr	r5, [pc, #28]	; (8003c5c <_write_r+0x20>)
 8003c40:	4604      	mov	r4, r0
 8003c42:	4608      	mov	r0, r1
 8003c44:	4611      	mov	r1, r2
 8003c46:	2200      	movs	r2, #0
 8003c48:	602a      	str	r2, [r5, #0]
 8003c4a:	461a      	mov	r2, r3
 8003c4c:	f7fd f80f 	bl	8000c6e <_write>
 8003c50:	1c43      	adds	r3, r0, #1
 8003c52:	d102      	bne.n	8003c5a <_write_r+0x1e>
 8003c54:	682b      	ldr	r3, [r5, #0]
 8003c56:	b103      	cbz	r3, 8003c5a <_write_r+0x1e>
 8003c58:	6023      	str	r3, [r4, #0]
 8003c5a:	bd38      	pop	{r3, r4, r5, pc}
 8003c5c:	20000110 	.word	0x20000110

08003c60 <_close_r>:
 8003c60:	b538      	push	{r3, r4, r5, lr}
 8003c62:	4d06      	ldr	r5, [pc, #24]	; (8003c7c <_close_r+0x1c>)
 8003c64:	2300      	movs	r3, #0
 8003c66:	4604      	mov	r4, r0
 8003c68:	4608      	mov	r0, r1
 8003c6a:	602b      	str	r3, [r5, #0]
 8003c6c:	f7fd f81b 	bl	8000ca6 <_close>
 8003c70:	1c43      	adds	r3, r0, #1
 8003c72:	d102      	bne.n	8003c7a <_close_r+0x1a>
 8003c74:	682b      	ldr	r3, [r5, #0]
 8003c76:	b103      	cbz	r3, 8003c7a <_close_r+0x1a>
 8003c78:	6023      	str	r3, [r4, #0]
 8003c7a:	bd38      	pop	{r3, r4, r5, pc}
 8003c7c:	20000110 	.word	0x20000110

08003c80 <_fstat_r>:
 8003c80:	b538      	push	{r3, r4, r5, lr}
 8003c82:	4d07      	ldr	r5, [pc, #28]	; (8003ca0 <_fstat_r+0x20>)
 8003c84:	2300      	movs	r3, #0
 8003c86:	4604      	mov	r4, r0
 8003c88:	4608      	mov	r0, r1
 8003c8a:	4611      	mov	r1, r2
 8003c8c:	602b      	str	r3, [r5, #0]
 8003c8e:	f7fd f816 	bl	8000cbe <_fstat>
 8003c92:	1c43      	adds	r3, r0, #1
 8003c94:	d102      	bne.n	8003c9c <_fstat_r+0x1c>
 8003c96:	682b      	ldr	r3, [r5, #0]
 8003c98:	b103      	cbz	r3, 8003c9c <_fstat_r+0x1c>
 8003c9a:	6023      	str	r3, [r4, #0]
 8003c9c:	bd38      	pop	{r3, r4, r5, pc}
 8003c9e:	bf00      	nop
 8003ca0:	20000110 	.word	0x20000110

08003ca4 <_isatty_r>:
 8003ca4:	b538      	push	{r3, r4, r5, lr}
 8003ca6:	4d06      	ldr	r5, [pc, #24]	; (8003cc0 <_isatty_r+0x1c>)
 8003ca8:	2300      	movs	r3, #0
 8003caa:	4604      	mov	r4, r0
 8003cac:	4608      	mov	r0, r1
 8003cae:	602b      	str	r3, [r5, #0]
 8003cb0:	f7fd f815 	bl	8000cde <_isatty>
 8003cb4:	1c43      	adds	r3, r0, #1
 8003cb6:	d102      	bne.n	8003cbe <_isatty_r+0x1a>
 8003cb8:	682b      	ldr	r3, [r5, #0]
 8003cba:	b103      	cbz	r3, 8003cbe <_isatty_r+0x1a>
 8003cbc:	6023      	str	r3, [r4, #0]
 8003cbe:	bd38      	pop	{r3, r4, r5, pc}
 8003cc0:	20000110 	.word	0x20000110

08003cc4 <_lseek_r>:
 8003cc4:	b538      	push	{r3, r4, r5, lr}
 8003cc6:	4d07      	ldr	r5, [pc, #28]	; (8003ce4 <_lseek_r+0x20>)
 8003cc8:	4604      	mov	r4, r0
 8003cca:	4608      	mov	r0, r1
 8003ccc:	4611      	mov	r1, r2
 8003cce:	2200      	movs	r2, #0
 8003cd0:	602a      	str	r2, [r5, #0]
 8003cd2:	461a      	mov	r2, r3
 8003cd4:	f7fd f80e 	bl	8000cf4 <_lseek>
 8003cd8:	1c43      	adds	r3, r0, #1
 8003cda:	d102      	bne.n	8003ce2 <_lseek_r+0x1e>
 8003cdc:	682b      	ldr	r3, [r5, #0]
 8003cde:	b103      	cbz	r3, 8003ce2 <_lseek_r+0x1e>
 8003ce0:	6023      	str	r3, [r4, #0]
 8003ce2:	bd38      	pop	{r3, r4, r5, pc}
 8003ce4:	20000110 	.word	0x20000110

08003ce8 <__malloc_lock>:
 8003ce8:	4801      	ldr	r0, [pc, #4]	; (8003cf0 <__malloc_lock+0x8>)
 8003cea:	f7ff bb1d 	b.w	8003328 <__retarget_lock_acquire_recursive>
 8003cee:	bf00      	nop
 8003cf0:	20000104 	.word	0x20000104

08003cf4 <__malloc_unlock>:
 8003cf4:	4801      	ldr	r0, [pc, #4]	; (8003cfc <__malloc_unlock+0x8>)
 8003cf6:	f7ff bb18 	b.w	800332a <__retarget_lock_release_recursive>
 8003cfa:	bf00      	nop
 8003cfc:	20000104 	.word	0x20000104

08003d00 <_read_r>:
 8003d00:	b538      	push	{r3, r4, r5, lr}
 8003d02:	4d07      	ldr	r5, [pc, #28]	; (8003d20 <_read_r+0x20>)
 8003d04:	4604      	mov	r4, r0
 8003d06:	4608      	mov	r0, r1
 8003d08:	4611      	mov	r1, r2
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	602a      	str	r2, [r5, #0]
 8003d0e:	461a      	mov	r2, r3
 8003d10:	f7fc ff90 	bl	8000c34 <_read>
 8003d14:	1c43      	adds	r3, r0, #1
 8003d16:	d102      	bne.n	8003d1e <_read_r+0x1e>
 8003d18:	682b      	ldr	r3, [r5, #0]
 8003d1a:	b103      	cbz	r3, 8003d1e <_read_r+0x1e>
 8003d1c:	6023      	str	r3, [r4, #0]
 8003d1e:	bd38      	pop	{r3, r4, r5, pc}
 8003d20:	20000110 	.word	0x20000110

08003d24 <_sbrk>:
 8003d24:	4a04      	ldr	r2, [pc, #16]	; (8003d38 <_sbrk+0x14>)
 8003d26:	6811      	ldr	r1, [r2, #0]
 8003d28:	4603      	mov	r3, r0
 8003d2a:	b909      	cbnz	r1, 8003d30 <_sbrk+0xc>
 8003d2c:	4903      	ldr	r1, [pc, #12]	; (8003d3c <_sbrk+0x18>)
 8003d2e:	6011      	str	r1, [r2, #0]
 8003d30:	6810      	ldr	r0, [r2, #0]
 8003d32:	4403      	add	r3, r0
 8003d34:	6013      	str	r3, [r2, #0]
 8003d36:	4770      	bx	lr
 8003d38:	20000114 	.word	0x20000114
 8003d3c:	20000118 	.word	0x20000118

08003d40 <_init>:
 8003d40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d42:	bf00      	nop
 8003d44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d46:	bc08      	pop	{r3}
 8003d48:	469e      	mov	lr, r3
 8003d4a:	4770      	bx	lr

08003d4c <_fini>:
 8003d4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d4e:	bf00      	nop
 8003d50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d52:	bc08      	pop	{r3}
 8003d54:	469e      	mov	lr, r3
 8003d56:	4770      	bx	lr
