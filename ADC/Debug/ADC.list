
ADC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003894  080001c8  080001c8  000101c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08003a5c  08003a5c  00013a5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003a6c  08003a6c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003a6c  08003a6c  00013a6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003a74  08003a74  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003a74  08003a74  00013a74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003a78  08003a78  00013a78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003a7c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000e0  2000000c  08003a88  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000ec  08003a88  000200ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006287  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000137b  00000000  00000000  000262c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006c0  00000000  00000000  00027640  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000618  00000000  00000000  00027d00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000210b4  00000000  00000000  00028318  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00007ac9  00000000  00000000  000493cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ce7af  00000000  00000000  00050e95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011f644  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001ac0  00000000  00000000  0011f694  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000000c 	.word	0x2000000c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08003a44 	.word	0x08003a44

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000010 	.word	0x20000010
 8000204:	08003a44 	.word	0x08003a44

08000208 <__aeabi_dmul>:
 8000208:	b570      	push	{r4, r5, r6, lr}
 800020a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800020e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000212:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000216:	bf1d      	ittte	ne
 8000218:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800021c:	ea94 0f0c 	teqne	r4, ip
 8000220:	ea95 0f0c 	teqne	r5, ip
 8000224:	f000 f8de 	bleq	80003e4 <__aeabi_dmul+0x1dc>
 8000228:	442c      	add	r4, r5
 800022a:	ea81 0603 	eor.w	r6, r1, r3
 800022e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000232:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000236:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800023a:	bf18      	it	ne
 800023c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000240:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000244:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000248:	d038      	beq.n	80002bc <__aeabi_dmul+0xb4>
 800024a:	fba0 ce02 	umull	ip, lr, r0, r2
 800024e:	f04f 0500 	mov.w	r5, #0
 8000252:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000256:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800025a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800025e:	f04f 0600 	mov.w	r6, #0
 8000262:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000266:	f09c 0f00 	teq	ip, #0
 800026a:	bf18      	it	ne
 800026c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000270:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000274:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000278:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800027c:	d204      	bcs.n	8000288 <__aeabi_dmul+0x80>
 800027e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000282:	416d      	adcs	r5, r5
 8000284:	eb46 0606 	adc.w	r6, r6, r6
 8000288:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800028c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000290:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000294:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000298:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800029c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80002a0:	bf88      	it	hi
 80002a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80002a6:	d81e      	bhi.n	80002e6 <__aeabi_dmul+0xde>
 80002a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80002ac:	bf08      	it	eq
 80002ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80002b2:	f150 0000 	adcs.w	r0, r0, #0
 80002b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ba:	bd70      	pop	{r4, r5, r6, pc}
 80002bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80002c0:	ea46 0101 	orr.w	r1, r6, r1
 80002c4:	ea40 0002 	orr.w	r0, r0, r2
 80002c8:	ea81 0103 	eor.w	r1, r1, r3
 80002cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002d0:	bfc2      	ittt	gt
 80002d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002da:	bd70      	popgt	{r4, r5, r6, pc}
 80002dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002e0:	f04f 0e00 	mov.w	lr, #0
 80002e4:	3c01      	subs	r4, #1
 80002e6:	f300 80ab 	bgt.w	8000440 <__aeabi_dmul+0x238>
 80002ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002ee:	bfde      	ittt	le
 80002f0:	2000      	movle	r0, #0
 80002f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80002f6:	bd70      	pople	{r4, r5, r6, pc}
 80002f8:	f1c4 0400 	rsb	r4, r4, #0
 80002fc:	3c20      	subs	r4, #32
 80002fe:	da35      	bge.n	800036c <__aeabi_dmul+0x164>
 8000300:	340c      	adds	r4, #12
 8000302:	dc1b      	bgt.n	800033c <__aeabi_dmul+0x134>
 8000304:	f104 0414 	add.w	r4, r4, #20
 8000308:	f1c4 0520 	rsb	r5, r4, #32
 800030c:	fa00 f305 	lsl.w	r3, r0, r5
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f205 	lsl.w	r2, r1, r5
 8000318:	ea40 0002 	orr.w	r0, r0, r2
 800031c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000320:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000324:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000328:	fa21 f604 	lsr.w	r6, r1, r4
 800032c:	eb42 0106 	adc.w	r1, r2, r6
 8000330:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000334:	bf08      	it	eq
 8000336:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800033a:	bd70      	pop	{r4, r5, r6, pc}
 800033c:	f1c4 040c 	rsb	r4, r4, #12
 8000340:	f1c4 0520 	rsb	r5, r4, #32
 8000344:	fa00 f304 	lsl.w	r3, r0, r4
 8000348:	fa20 f005 	lsr.w	r0, r0, r5
 800034c:	fa01 f204 	lsl.w	r2, r1, r4
 8000350:	ea40 0002 	orr.w	r0, r0, r2
 8000354:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000358:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000364:	bf08      	it	eq
 8000366:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800036a:	bd70      	pop	{r4, r5, r6, pc}
 800036c:	f1c4 0520 	rsb	r5, r4, #32
 8000370:	fa00 f205 	lsl.w	r2, r0, r5
 8000374:	ea4e 0e02 	orr.w	lr, lr, r2
 8000378:	fa20 f304 	lsr.w	r3, r0, r4
 800037c:	fa01 f205 	lsl.w	r2, r1, r5
 8000380:	ea43 0302 	orr.w	r3, r3, r2
 8000384:	fa21 f004 	lsr.w	r0, r1, r4
 8000388:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800038c:	fa21 f204 	lsr.w	r2, r1, r4
 8000390:	ea20 0002 	bic.w	r0, r0, r2
 8000394:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000398:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800039c:	bf08      	it	eq
 800039e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003a2:	bd70      	pop	{r4, r5, r6, pc}
 80003a4:	f094 0f00 	teq	r4, #0
 80003a8:	d10f      	bne.n	80003ca <__aeabi_dmul+0x1c2>
 80003aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80003ae:	0040      	lsls	r0, r0, #1
 80003b0:	eb41 0101 	adc.w	r1, r1, r1
 80003b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003b8:	bf08      	it	eq
 80003ba:	3c01      	subeq	r4, #1
 80003bc:	d0f7      	beq.n	80003ae <__aeabi_dmul+0x1a6>
 80003be:	ea41 0106 	orr.w	r1, r1, r6
 80003c2:	f095 0f00 	teq	r5, #0
 80003c6:	bf18      	it	ne
 80003c8:	4770      	bxne	lr
 80003ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80003ce:	0052      	lsls	r2, r2, #1
 80003d0:	eb43 0303 	adc.w	r3, r3, r3
 80003d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80003d8:	bf08      	it	eq
 80003da:	3d01      	subeq	r5, #1
 80003dc:	d0f7      	beq.n	80003ce <__aeabi_dmul+0x1c6>
 80003de:	ea43 0306 	orr.w	r3, r3, r6
 80003e2:	4770      	bx	lr
 80003e4:	ea94 0f0c 	teq	r4, ip
 80003e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003ec:	bf18      	it	ne
 80003ee:	ea95 0f0c 	teqne	r5, ip
 80003f2:	d00c      	beq.n	800040e <__aeabi_dmul+0x206>
 80003f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003f8:	bf18      	it	ne
 80003fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003fe:	d1d1      	bne.n	80003a4 <__aeabi_dmul+0x19c>
 8000400:	ea81 0103 	eor.w	r1, r1, r3
 8000404:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000408:	f04f 0000 	mov.w	r0, #0
 800040c:	bd70      	pop	{r4, r5, r6, pc}
 800040e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000412:	bf06      	itte	eq
 8000414:	4610      	moveq	r0, r2
 8000416:	4619      	moveq	r1, r3
 8000418:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800041c:	d019      	beq.n	8000452 <__aeabi_dmul+0x24a>
 800041e:	ea94 0f0c 	teq	r4, ip
 8000422:	d102      	bne.n	800042a <__aeabi_dmul+0x222>
 8000424:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000428:	d113      	bne.n	8000452 <__aeabi_dmul+0x24a>
 800042a:	ea95 0f0c 	teq	r5, ip
 800042e:	d105      	bne.n	800043c <__aeabi_dmul+0x234>
 8000430:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000434:	bf1c      	itt	ne
 8000436:	4610      	movne	r0, r2
 8000438:	4619      	movne	r1, r3
 800043a:	d10a      	bne.n	8000452 <__aeabi_dmul+0x24a>
 800043c:	ea81 0103 	eor.w	r1, r1, r3
 8000440:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000444:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000448:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800044c:	f04f 0000 	mov.w	r0, #0
 8000450:	bd70      	pop	{r4, r5, r6, pc}
 8000452:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000456:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800045a:	bd70      	pop	{r4, r5, r6, pc}

0800045c <__aeabi_drsub>:
 800045c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000460:	e002      	b.n	8000468 <__adddf3>
 8000462:	bf00      	nop

08000464 <__aeabi_dsub>:
 8000464:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000468 <__adddf3>:
 8000468:	b530      	push	{r4, r5, lr}
 800046a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800046e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000472:	ea94 0f05 	teq	r4, r5
 8000476:	bf08      	it	eq
 8000478:	ea90 0f02 	teqeq	r0, r2
 800047c:	bf1f      	itttt	ne
 800047e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000482:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000486:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800048a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800048e:	f000 80e2 	beq.w	8000656 <__adddf3+0x1ee>
 8000492:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000496:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800049a:	bfb8      	it	lt
 800049c:	426d      	neglt	r5, r5
 800049e:	dd0c      	ble.n	80004ba <__adddf3+0x52>
 80004a0:	442c      	add	r4, r5
 80004a2:	ea80 0202 	eor.w	r2, r0, r2
 80004a6:	ea81 0303 	eor.w	r3, r1, r3
 80004aa:	ea82 0000 	eor.w	r0, r2, r0
 80004ae:	ea83 0101 	eor.w	r1, r3, r1
 80004b2:	ea80 0202 	eor.w	r2, r0, r2
 80004b6:	ea81 0303 	eor.w	r3, r1, r3
 80004ba:	2d36      	cmp	r5, #54	; 0x36
 80004bc:	bf88      	it	hi
 80004be:	bd30      	pophi	{r4, r5, pc}
 80004c0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80004c4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004c8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80004cc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004d0:	d002      	beq.n	80004d8 <__adddf3+0x70>
 80004d2:	4240      	negs	r0, r0
 80004d4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004d8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80004dc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004e0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004e4:	d002      	beq.n	80004ec <__adddf3+0x84>
 80004e6:	4252      	negs	r2, r2
 80004e8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004ec:	ea94 0f05 	teq	r4, r5
 80004f0:	f000 80a7 	beq.w	8000642 <__adddf3+0x1da>
 80004f4:	f1a4 0401 	sub.w	r4, r4, #1
 80004f8:	f1d5 0e20 	rsbs	lr, r5, #32
 80004fc:	db0d      	blt.n	800051a <__adddf3+0xb2>
 80004fe:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000502:	fa22 f205 	lsr.w	r2, r2, r5
 8000506:	1880      	adds	r0, r0, r2
 8000508:	f141 0100 	adc.w	r1, r1, #0
 800050c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000510:	1880      	adds	r0, r0, r2
 8000512:	fa43 f305 	asr.w	r3, r3, r5
 8000516:	4159      	adcs	r1, r3
 8000518:	e00e      	b.n	8000538 <__adddf3+0xd0>
 800051a:	f1a5 0520 	sub.w	r5, r5, #32
 800051e:	f10e 0e20 	add.w	lr, lr, #32
 8000522:	2a01      	cmp	r2, #1
 8000524:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000528:	bf28      	it	cs
 800052a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800052e:	fa43 f305 	asr.w	r3, r3, r5
 8000532:	18c0      	adds	r0, r0, r3
 8000534:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	d507      	bpl.n	800054e <__adddf3+0xe6>
 800053e:	f04f 0e00 	mov.w	lr, #0
 8000542:	f1dc 0c00 	rsbs	ip, ip, #0
 8000546:	eb7e 0000 	sbcs.w	r0, lr, r0
 800054a:	eb6e 0101 	sbc.w	r1, lr, r1
 800054e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000552:	d31b      	bcc.n	800058c <__adddf3+0x124>
 8000554:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000558:	d30c      	bcc.n	8000574 <__adddf3+0x10c>
 800055a:	0849      	lsrs	r1, r1, #1
 800055c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000560:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000564:	f104 0401 	add.w	r4, r4, #1
 8000568:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800056c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000570:	f080 809a 	bcs.w	80006a8 <__adddf3+0x240>
 8000574:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000578:	bf08      	it	eq
 800057a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800057e:	f150 0000 	adcs.w	r0, r0, #0
 8000582:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000586:	ea41 0105 	orr.w	r1, r1, r5
 800058a:	bd30      	pop	{r4, r5, pc}
 800058c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000590:	4140      	adcs	r0, r0
 8000592:	eb41 0101 	adc.w	r1, r1, r1
 8000596:	3c01      	subs	r4, #1
 8000598:	bf28      	it	cs
 800059a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800059e:	d2e9      	bcs.n	8000574 <__adddf3+0x10c>
 80005a0:	f091 0f00 	teq	r1, #0
 80005a4:	bf04      	itt	eq
 80005a6:	4601      	moveq	r1, r0
 80005a8:	2000      	moveq	r0, #0
 80005aa:	fab1 f381 	clz	r3, r1
 80005ae:	bf08      	it	eq
 80005b0:	3320      	addeq	r3, #32
 80005b2:	f1a3 030b 	sub.w	r3, r3, #11
 80005b6:	f1b3 0220 	subs.w	r2, r3, #32
 80005ba:	da0c      	bge.n	80005d6 <__adddf3+0x16e>
 80005bc:	320c      	adds	r2, #12
 80005be:	dd08      	ble.n	80005d2 <__adddf3+0x16a>
 80005c0:	f102 0c14 	add.w	ip, r2, #20
 80005c4:	f1c2 020c 	rsb	r2, r2, #12
 80005c8:	fa01 f00c 	lsl.w	r0, r1, ip
 80005cc:	fa21 f102 	lsr.w	r1, r1, r2
 80005d0:	e00c      	b.n	80005ec <__adddf3+0x184>
 80005d2:	f102 0214 	add.w	r2, r2, #20
 80005d6:	bfd8      	it	le
 80005d8:	f1c2 0c20 	rsble	ip, r2, #32
 80005dc:	fa01 f102 	lsl.w	r1, r1, r2
 80005e0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005e4:	bfdc      	itt	le
 80005e6:	ea41 010c 	orrle.w	r1, r1, ip
 80005ea:	4090      	lslle	r0, r2
 80005ec:	1ae4      	subs	r4, r4, r3
 80005ee:	bfa2      	ittt	ge
 80005f0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005f4:	4329      	orrge	r1, r5
 80005f6:	bd30      	popge	{r4, r5, pc}
 80005f8:	ea6f 0404 	mvn.w	r4, r4
 80005fc:	3c1f      	subs	r4, #31
 80005fe:	da1c      	bge.n	800063a <__adddf3+0x1d2>
 8000600:	340c      	adds	r4, #12
 8000602:	dc0e      	bgt.n	8000622 <__adddf3+0x1ba>
 8000604:	f104 0414 	add.w	r4, r4, #20
 8000608:	f1c4 0220 	rsb	r2, r4, #32
 800060c:	fa20 f004 	lsr.w	r0, r0, r4
 8000610:	fa01 f302 	lsl.w	r3, r1, r2
 8000614:	ea40 0003 	orr.w	r0, r0, r3
 8000618:	fa21 f304 	lsr.w	r3, r1, r4
 800061c:	ea45 0103 	orr.w	r1, r5, r3
 8000620:	bd30      	pop	{r4, r5, pc}
 8000622:	f1c4 040c 	rsb	r4, r4, #12
 8000626:	f1c4 0220 	rsb	r2, r4, #32
 800062a:	fa20 f002 	lsr.w	r0, r0, r2
 800062e:	fa01 f304 	lsl.w	r3, r1, r4
 8000632:	ea40 0003 	orr.w	r0, r0, r3
 8000636:	4629      	mov	r1, r5
 8000638:	bd30      	pop	{r4, r5, pc}
 800063a:	fa21 f004 	lsr.w	r0, r1, r4
 800063e:	4629      	mov	r1, r5
 8000640:	bd30      	pop	{r4, r5, pc}
 8000642:	f094 0f00 	teq	r4, #0
 8000646:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800064a:	bf06      	itte	eq
 800064c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000650:	3401      	addeq	r4, #1
 8000652:	3d01      	subne	r5, #1
 8000654:	e74e      	b.n	80004f4 <__adddf3+0x8c>
 8000656:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800065a:	bf18      	it	ne
 800065c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000660:	d029      	beq.n	80006b6 <__adddf3+0x24e>
 8000662:	ea94 0f05 	teq	r4, r5
 8000666:	bf08      	it	eq
 8000668:	ea90 0f02 	teqeq	r0, r2
 800066c:	d005      	beq.n	800067a <__adddf3+0x212>
 800066e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000672:	bf04      	itt	eq
 8000674:	4619      	moveq	r1, r3
 8000676:	4610      	moveq	r0, r2
 8000678:	bd30      	pop	{r4, r5, pc}
 800067a:	ea91 0f03 	teq	r1, r3
 800067e:	bf1e      	ittt	ne
 8000680:	2100      	movne	r1, #0
 8000682:	2000      	movne	r0, #0
 8000684:	bd30      	popne	{r4, r5, pc}
 8000686:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800068a:	d105      	bne.n	8000698 <__adddf3+0x230>
 800068c:	0040      	lsls	r0, r0, #1
 800068e:	4149      	adcs	r1, r1
 8000690:	bf28      	it	cs
 8000692:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000696:	bd30      	pop	{r4, r5, pc}
 8000698:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800069c:	bf3c      	itt	cc
 800069e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80006a2:	bd30      	popcc	{r4, r5, pc}
 80006a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006a8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80006ac:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80006b0:	f04f 0000 	mov.w	r0, #0
 80006b4:	bd30      	pop	{r4, r5, pc}
 80006b6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006ba:	bf1a      	itte	ne
 80006bc:	4619      	movne	r1, r3
 80006be:	4610      	movne	r0, r2
 80006c0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006c4:	bf1c      	itt	ne
 80006c6:	460b      	movne	r3, r1
 80006c8:	4602      	movne	r2, r0
 80006ca:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006ce:	bf06      	itte	eq
 80006d0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006d4:	ea91 0f03 	teqeq	r1, r3
 80006d8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80006dc:	bd30      	pop	{r4, r5, pc}
 80006de:	bf00      	nop

080006e0 <__aeabi_ui2d>:
 80006e0:	f090 0f00 	teq	r0, #0
 80006e4:	bf04      	itt	eq
 80006e6:	2100      	moveq	r1, #0
 80006e8:	4770      	bxeq	lr
 80006ea:	b530      	push	{r4, r5, lr}
 80006ec:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006f0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006f4:	f04f 0500 	mov.w	r5, #0
 80006f8:	f04f 0100 	mov.w	r1, #0
 80006fc:	e750      	b.n	80005a0 <__adddf3+0x138>
 80006fe:	bf00      	nop

08000700 <__aeabi_i2d>:
 8000700:	f090 0f00 	teq	r0, #0
 8000704:	bf04      	itt	eq
 8000706:	2100      	moveq	r1, #0
 8000708:	4770      	bxeq	lr
 800070a:	b530      	push	{r4, r5, lr}
 800070c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000710:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000714:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000718:	bf48      	it	mi
 800071a:	4240      	negmi	r0, r0
 800071c:	f04f 0100 	mov.w	r1, #0
 8000720:	e73e      	b.n	80005a0 <__adddf3+0x138>
 8000722:	bf00      	nop

08000724 <__aeabi_f2d>:
 8000724:	0042      	lsls	r2, r0, #1
 8000726:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800072a:	ea4f 0131 	mov.w	r1, r1, rrx
 800072e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000732:	bf1f      	itttt	ne
 8000734:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000738:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800073c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000740:	4770      	bxne	lr
 8000742:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000746:	bf08      	it	eq
 8000748:	4770      	bxeq	lr
 800074a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800074e:	bf04      	itt	eq
 8000750:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000754:	4770      	bxeq	lr
 8000756:	b530      	push	{r4, r5, lr}
 8000758:	f44f 7460 	mov.w	r4, #896	; 0x380
 800075c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	e71c      	b.n	80005a0 <__adddf3+0x138>
 8000766:	bf00      	nop

08000768 <__aeabi_ul2d>:
 8000768:	ea50 0201 	orrs.w	r2, r0, r1
 800076c:	bf08      	it	eq
 800076e:	4770      	bxeq	lr
 8000770:	b530      	push	{r4, r5, lr}
 8000772:	f04f 0500 	mov.w	r5, #0
 8000776:	e00a      	b.n	800078e <__aeabi_l2d+0x16>

08000778 <__aeabi_l2d>:
 8000778:	ea50 0201 	orrs.w	r2, r0, r1
 800077c:	bf08      	it	eq
 800077e:	4770      	bxeq	lr
 8000780:	b530      	push	{r4, r5, lr}
 8000782:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000786:	d502      	bpl.n	800078e <__aeabi_l2d+0x16>
 8000788:	4240      	negs	r0, r0
 800078a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800078e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000792:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000796:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800079a:	f43f aed8 	beq.w	800054e <__adddf3+0xe6>
 800079e:	f04f 0203 	mov.w	r2, #3
 80007a2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007a6:	bf18      	it	ne
 80007a8:	3203      	addne	r2, #3
 80007aa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007ae:	bf18      	it	ne
 80007b0:	3203      	addne	r2, #3
 80007b2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80007b6:	f1c2 0320 	rsb	r3, r2, #32
 80007ba:	fa00 fc03 	lsl.w	ip, r0, r3
 80007be:	fa20 f002 	lsr.w	r0, r0, r2
 80007c2:	fa01 fe03 	lsl.w	lr, r1, r3
 80007c6:	ea40 000e 	orr.w	r0, r0, lr
 80007ca:	fa21 f102 	lsr.w	r1, r1, r2
 80007ce:	4414      	add	r4, r2
 80007d0:	e6bd      	b.n	800054e <__adddf3+0xe6>
 80007d2:	bf00      	nop

080007d4 <__aeabi_d2f>:
 80007d4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80007d8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80007dc:	bf24      	itt	cs
 80007de:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80007e2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80007e6:	d90d      	bls.n	8000804 <__aeabi_d2f+0x30>
 80007e8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80007ec:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80007f0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80007f4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80007f8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80007fc:	bf08      	it	eq
 80007fe:	f020 0001 	biceq.w	r0, r0, #1
 8000802:	4770      	bx	lr
 8000804:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000808:	d121      	bne.n	800084e <__aeabi_d2f+0x7a>
 800080a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800080e:	bfbc      	itt	lt
 8000810:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000814:	4770      	bxlt	lr
 8000816:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800081a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 800081e:	f1c2 0218 	rsb	r2, r2, #24
 8000822:	f1c2 0c20 	rsb	ip, r2, #32
 8000826:	fa10 f30c 	lsls.w	r3, r0, ip
 800082a:	fa20 f002 	lsr.w	r0, r0, r2
 800082e:	bf18      	it	ne
 8000830:	f040 0001 	orrne.w	r0, r0, #1
 8000834:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000838:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 800083c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000840:	ea40 000c 	orr.w	r0, r0, ip
 8000844:	fa23 f302 	lsr.w	r3, r3, r2
 8000848:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800084c:	e7cc      	b.n	80007e8 <__aeabi_d2f+0x14>
 800084e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000852:	d107      	bne.n	8000864 <__aeabi_d2f+0x90>
 8000854:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000858:	bf1e      	ittt	ne
 800085a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 800085e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000862:	4770      	bxne	lr
 8000864:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000868:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800086c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000870:	4770      	bx	lr
 8000872:	bf00      	nop

08000874 <__aeabi_uldivmod>:
 8000874:	b953      	cbnz	r3, 800088c <__aeabi_uldivmod+0x18>
 8000876:	b94a      	cbnz	r2, 800088c <__aeabi_uldivmod+0x18>
 8000878:	2900      	cmp	r1, #0
 800087a:	bf08      	it	eq
 800087c:	2800      	cmpeq	r0, #0
 800087e:	bf1c      	itt	ne
 8000880:	f04f 31ff 	movne.w	r1, #4294967295
 8000884:	f04f 30ff 	movne.w	r0, #4294967295
 8000888:	f000 b974 	b.w	8000b74 <__aeabi_idiv0>
 800088c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000890:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000894:	f000 f806 	bl	80008a4 <__udivmoddi4>
 8000898:	f8dd e004 	ldr.w	lr, [sp, #4]
 800089c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008a0:	b004      	add	sp, #16
 80008a2:	4770      	bx	lr

080008a4 <__udivmoddi4>:
 80008a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008a8:	9d08      	ldr	r5, [sp, #32]
 80008aa:	4604      	mov	r4, r0
 80008ac:	468e      	mov	lr, r1
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d14d      	bne.n	800094e <__udivmoddi4+0xaa>
 80008b2:	428a      	cmp	r2, r1
 80008b4:	4694      	mov	ip, r2
 80008b6:	d969      	bls.n	800098c <__udivmoddi4+0xe8>
 80008b8:	fab2 f282 	clz	r2, r2
 80008bc:	b152      	cbz	r2, 80008d4 <__udivmoddi4+0x30>
 80008be:	fa01 f302 	lsl.w	r3, r1, r2
 80008c2:	f1c2 0120 	rsb	r1, r2, #32
 80008c6:	fa20 f101 	lsr.w	r1, r0, r1
 80008ca:	fa0c fc02 	lsl.w	ip, ip, r2
 80008ce:	ea41 0e03 	orr.w	lr, r1, r3
 80008d2:	4094      	lsls	r4, r2
 80008d4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80008d8:	0c21      	lsrs	r1, r4, #16
 80008da:	fbbe f6f8 	udiv	r6, lr, r8
 80008de:	fa1f f78c 	uxth.w	r7, ip
 80008e2:	fb08 e316 	mls	r3, r8, r6, lr
 80008e6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80008ea:	fb06 f107 	mul.w	r1, r6, r7
 80008ee:	4299      	cmp	r1, r3
 80008f0:	d90a      	bls.n	8000908 <__udivmoddi4+0x64>
 80008f2:	eb1c 0303 	adds.w	r3, ip, r3
 80008f6:	f106 30ff 	add.w	r0, r6, #4294967295
 80008fa:	f080 811f 	bcs.w	8000b3c <__udivmoddi4+0x298>
 80008fe:	4299      	cmp	r1, r3
 8000900:	f240 811c 	bls.w	8000b3c <__udivmoddi4+0x298>
 8000904:	3e02      	subs	r6, #2
 8000906:	4463      	add	r3, ip
 8000908:	1a5b      	subs	r3, r3, r1
 800090a:	b2a4      	uxth	r4, r4
 800090c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000910:	fb08 3310 	mls	r3, r8, r0, r3
 8000914:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000918:	fb00 f707 	mul.w	r7, r0, r7
 800091c:	42a7      	cmp	r7, r4
 800091e:	d90a      	bls.n	8000936 <__udivmoddi4+0x92>
 8000920:	eb1c 0404 	adds.w	r4, ip, r4
 8000924:	f100 33ff 	add.w	r3, r0, #4294967295
 8000928:	f080 810a 	bcs.w	8000b40 <__udivmoddi4+0x29c>
 800092c:	42a7      	cmp	r7, r4
 800092e:	f240 8107 	bls.w	8000b40 <__udivmoddi4+0x29c>
 8000932:	4464      	add	r4, ip
 8000934:	3802      	subs	r0, #2
 8000936:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800093a:	1be4      	subs	r4, r4, r7
 800093c:	2600      	movs	r6, #0
 800093e:	b11d      	cbz	r5, 8000948 <__udivmoddi4+0xa4>
 8000940:	40d4      	lsrs	r4, r2
 8000942:	2300      	movs	r3, #0
 8000944:	e9c5 4300 	strd	r4, r3, [r5]
 8000948:	4631      	mov	r1, r6
 800094a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800094e:	428b      	cmp	r3, r1
 8000950:	d909      	bls.n	8000966 <__udivmoddi4+0xc2>
 8000952:	2d00      	cmp	r5, #0
 8000954:	f000 80ef 	beq.w	8000b36 <__udivmoddi4+0x292>
 8000958:	2600      	movs	r6, #0
 800095a:	e9c5 0100 	strd	r0, r1, [r5]
 800095e:	4630      	mov	r0, r6
 8000960:	4631      	mov	r1, r6
 8000962:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000966:	fab3 f683 	clz	r6, r3
 800096a:	2e00      	cmp	r6, #0
 800096c:	d14a      	bne.n	8000a04 <__udivmoddi4+0x160>
 800096e:	428b      	cmp	r3, r1
 8000970:	d302      	bcc.n	8000978 <__udivmoddi4+0xd4>
 8000972:	4282      	cmp	r2, r0
 8000974:	f200 80f9 	bhi.w	8000b6a <__udivmoddi4+0x2c6>
 8000978:	1a84      	subs	r4, r0, r2
 800097a:	eb61 0303 	sbc.w	r3, r1, r3
 800097e:	2001      	movs	r0, #1
 8000980:	469e      	mov	lr, r3
 8000982:	2d00      	cmp	r5, #0
 8000984:	d0e0      	beq.n	8000948 <__udivmoddi4+0xa4>
 8000986:	e9c5 4e00 	strd	r4, lr, [r5]
 800098a:	e7dd      	b.n	8000948 <__udivmoddi4+0xa4>
 800098c:	b902      	cbnz	r2, 8000990 <__udivmoddi4+0xec>
 800098e:	deff      	udf	#255	; 0xff
 8000990:	fab2 f282 	clz	r2, r2
 8000994:	2a00      	cmp	r2, #0
 8000996:	f040 8092 	bne.w	8000abe <__udivmoddi4+0x21a>
 800099a:	eba1 010c 	sub.w	r1, r1, ip
 800099e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80009a2:	fa1f fe8c 	uxth.w	lr, ip
 80009a6:	2601      	movs	r6, #1
 80009a8:	0c20      	lsrs	r0, r4, #16
 80009aa:	fbb1 f3f7 	udiv	r3, r1, r7
 80009ae:	fb07 1113 	mls	r1, r7, r3, r1
 80009b2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80009b6:	fb0e f003 	mul.w	r0, lr, r3
 80009ba:	4288      	cmp	r0, r1
 80009bc:	d908      	bls.n	80009d0 <__udivmoddi4+0x12c>
 80009be:	eb1c 0101 	adds.w	r1, ip, r1
 80009c2:	f103 38ff 	add.w	r8, r3, #4294967295
 80009c6:	d202      	bcs.n	80009ce <__udivmoddi4+0x12a>
 80009c8:	4288      	cmp	r0, r1
 80009ca:	f200 80cb 	bhi.w	8000b64 <__udivmoddi4+0x2c0>
 80009ce:	4643      	mov	r3, r8
 80009d0:	1a09      	subs	r1, r1, r0
 80009d2:	b2a4      	uxth	r4, r4
 80009d4:	fbb1 f0f7 	udiv	r0, r1, r7
 80009d8:	fb07 1110 	mls	r1, r7, r0, r1
 80009dc:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80009e0:	fb0e fe00 	mul.w	lr, lr, r0
 80009e4:	45a6      	cmp	lr, r4
 80009e6:	d908      	bls.n	80009fa <__udivmoddi4+0x156>
 80009e8:	eb1c 0404 	adds.w	r4, ip, r4
 80009ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80009f0:	d202      	bcs.n	80009f8 <__udivmoddi4+0x154>
 80009f2:	45a6      	cmp	lr, r4
 80009f4:	f200 80bb 	bhi.w	8000b6e <__udivmoddi4+0x2ca>
 80009f8:	4608      	mov	r0, r1
 80009fa:	eba4 040e 	sub.w	r4, r4, lr
 80009fe:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000a02:	e79c      	b.n	800093e <__udivmoddi4+0x9a>
 8000a04:	f1c6 0720 	rsb	r7, r6, #32
 8000a08:	40b3      	lsls	r3, r6
 8000a0a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000a0e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000a12:	fa20 f407 	lsr.w	r4, r0, r7
 8000a16:	fa01 f306 	lsl.w	r3, r1, r6
 8000a1a:	431c      	orrs	r4, r3
 8000a1c:	40f9      	lsrs	r1, r7
 8000a1e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000a22:	fa00 f306 	lsl.w	r3, r0, r6
 8000a26:	fbb1 f8f9 	udiv	r8, r1, r9
 8000a2a:	0c20      	lsrs	r0, r4, #16
 8000a2c:	fa1f fe8c 	uxth.w	lr, ip
 8000a30:	fb09 1118 	mls	r1, r9, r8, r1
 8000a34:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000a38:	fb08 f00e 	mul.w	r0, r8, lr
 8000a3c:	4288      	cmp	r0, r1
 8000a3e:	fa02 f206 	lsl.w	r2, r2, r6
 8000a42:	d90b      	bls.n	8000a5c <__udivmoddi4+0x1b8>
 8000a44:	eb1c 0101 	adds.w	r1, ip, r1
 8000a48:	f108 3aff 	add.w	sl, r8, #4294967295
 8000a4c:	f080 8088 	bcs.w	8000b60 <__udivmoddi4+0x2bc>
 8000a50:	4288      	cmp	r0, r1
 8000a52:	f240 8085 	bls.w	8000b60 <__udivmoddi4+0x2bc>
 8000a56:	f1a8 0802 	sub.w	r8, r8, #2
 8000a5a:	4461      	add	r1, ip
 8000a5c:	1a09      	subs	r1, r1, r0
 8000a5e:	b2a4      	uxth	r4, r4
 8000a60:	fbb1 f0f9 	udiv	r0, r1, r9
 8000a64:	fb09 1110 	mls	r1, r9, r0, r1
 8000a68:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000a6c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000a70:	458e      	cmp	lr, r1
 8000a72:	d908      	bls.n	8000a86 <__udivmoddi4+0x1e2>
 8000a74:	eb1c 0101 	adds.w	r1, ip, r1
 8000a78:	f100 34ff 	add.w	r4, r0, #4294967295
 8000a7c:	d26c      	bcs.n	8000b58 <__udivmoddi4+0x2b4>
 8000a7e:	458e      	cmp	lr, r1
 8000a80:	d96a      	bls.n	8000b58 <__udivmoddi4+0x2b4>
 8000a82:	3802      	subs	r0, #2
 8000a84:	4461      	add	r1, ip
 8000a86:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000a8a:	fba0 9402 	umull	r9, r4, r0, r2
 8000a8e:	eba1 010e 	sub.w	r1, r1, lr
 8000a92:	42a1      	cmp	r1, r4
 8000a94:	46c8      	mov	r8, r9
 8000a96:	46a6      	mov	lr, r4
 8000a98:	d356      	bcc.n	8000b48 <__udivmoddi4+0x2a4>
 8000a9a:	d053      	beq.n	8000b44 <__udivmoddi4+0x2a0>
 8000a9c:	b15d      	cbz	r5, 8000ab6 <__udivmoddi4+0x212>
 8000a9e:	ebb3 0208 	subs.w	r2, r3, r8
 8000aa2:	eb61 010e 	sbc.w	r1, r1, lr
 8000aa6:	fa01 f707 	lsl.w	r7, r1, r7
 8000aaa:	fa22 f306 	lsr.w	r3, r2, r6
 8000aae:	40f1      	lsrs	r1, r6
 8000ab0:	431f      	orrs	r7, r3
 8000ab2:	e9c5 7100 	strd	r7, r1, [r5]
 8000ab6:	2600      	movs	r6, #0
 8000ab8:	4631      	mov	r1, r6
 8000aba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000abe:	f1c2 0320 	rsb	r3, r2, #32
 8000ac2:	40d8      	lsrs	r0, r3
 8000ac4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ac8:	fa21 f303 	lsr.w	r3, r1, r3
 8000acc:	4091      	lsls	r1, r2
 8000ace:	4301      	orrs	r1, r0
 8000ad0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ad4:	fa1f fe8c 	uxth.w	lr, ip
 8000ad8:	fbb3 f0f7 	udiv	r0, r3, r7
 8000adc:	fb07 3610 	mls	r6, r7, r0, r3
 8000ae0:	0c0b      	lsrs	r3, r1, #16
 8000ae2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000ae6:	fb00 f60e 	mul.w	r6, r0, lr
 8000aea:	429e      	cmp	r6, r3
 8000aec:	fa04 f402 	lsl.w	r4, r4, r2
 8000af0:	d908      	bls.n	8000b04 <__udivmoddi4+0x260>
 8000af2:	eb1c 0303 	adds.w	r3, ip, r3
 8000af6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000afa:	d22f      	bcs.n	8000b5c <__udivmoddi4+0x2b8>
 8000afc:	429e      	cmp	r6, r3
 8000afe:	d92d      	bls.n	8000b5c <__udivmoddi4+0x2b8>
 8000b00:	3802      	subs	r0, #2
 8000b02:	4463      	add	r3, ip
 8000b04:	1b9b      	subs	r3, r3, r6
 8000b06:	b289      	uxth	r1, r1
 8000b08:	fbb3 f6f7 	udiv	r6, r3, r7
 8000b0c:	fb07 3316 	mls	r3, r7, r6, r3
 8000b10:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b14:	fb06 f30e 	mul.w	r3, r6, lr
 8000b18:	428b      	cmp	r3, r1
 8000b1a:	d908      	bls.n	8000b2e <__udivmoddi4+0x28a>
 8000b1c:	eb1c 0101 	adds.w	r1, ip, r1
 8000b20:	f106 38ff 	add.w	r8, r6, #4294967295
 8000b24:	d216      	bcs.n	8000b54 <__udivmoddi4+0x2b0>
 8000b26:	428b      	cmp	r3, r1
 8000b28:	d914      	bls.n	8000b54 <__udivmoddi4+0x2b0>
 8000b2a:	3e02      	subs	r6, #2
 8000b2c:	4461      	add	r1, ip
 8000b2e:	1ac9      	subs	r1, r1, r3
 8000b30:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000b34:	e738      	b.n	80009a8 <__udivmoddi4+0x104>
 8000b36:	462e      	mov	r6, r5
 8000b38:	4628      	mov	r0, r5
 8000b3a:	e705      	b.n	8000948 <__udivmoddi4+0xa4>
 8000b3c:	4606      	mov	r6, r0
 8000b3e:	e6e3      	b.n	8000908 <__udivmoddi4+0x64>
 8000b40:	4618      	mov	r0, r3
 8000b42:	e6f8      	b.n	8000936 <__udivmoddi4+0x92>
 8000b44:	454b      	cmp	r3, r9
 8000b46:	d2a9      	bcs.n	8000a9c <__udivmoddi4+0x1f8>
 8000b48:	ebb9 0802 	subs.w	r8, r9, r2
 8000b4c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000b50:	3801      	subs	r0, #1
 8000b52:	e7a3      	b.n	8000a9c <__udivmoddi4+0x1f8>
 8000b54:	4646      	mov	r6, r8
 8000b56:	e7ea      	b.n	8000b2e <__udivmoddi4+0x28a>
 8000b58:	4620      	mov	r0, r4
 8000b5a:	e794      	b.n	8000a86 <__udivmoddi4+0x1e2>
 8000b5c:	4640      	mov	r0, r8
 8000b5e:	e7d1      	b.n	8000b04 <__udivmoddi4+0x260>
 8000b60:	46d0      	mov	r8, sl
 8000b62:	e77b      	b.n	8000a5c <__udivmoddi4+0x1b8>
 8000b64:	3b02      	subs	r3, #2
 8000b66:	4461      	add	r1, ip
 8000b68:	e732      	b.n	80009d0 <__udivmoddi4+0x12c>
 8000b6a:	4630      	mov	r0, r6
 8000b6c:	e709      	b.n	8000982 <__udivmoddi4+0xde>
 8000b6e:	4464      	add	r4, ip
 8000b70:	3802      	subs	r0, #2
 8000b72:	e742      	b.n	80009fa <__udivmoddi4+0x156>

08000b74 <__aeabi_idiv0>:
 8000b74:	4770      	bx	lr
 8000b76:	bf00      	nop

08000b78 <CH_Select1>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint16_t ADC_VAL[21];
float Voltage;
void CH_Select1(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b084      	sub	sp, #16
 8000b7c:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8000b7e:	463b      	mov	r3, r7
 8000b80:	2200      	movs	r2, #0
 8000b82:	601a      	str	r2, [r3, #0]
 8000b84:	605a      	str	r2, [r3, #4]
 8000b86:	609a      	str	r2, [r3, #8]
 8000b88:	60da      	str	r2, [r3, #12]
    sConfig.Channel = ADC_CHANNEL_10;
 8000b8a:	230a      	movs	r3, #10
 8000b8c:	603b      	str	r3, [r7, #0]
    sConfig.Rank = 2;
 8000b8e:	2302      	movs	r3, #2
 8000b90:	607b      	str	r3, [r7, #4]
    sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000b92:	2300      	movs	r3, #0
 8000b94:	60bb      	str	r3, [r7, #8]
    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b96:	463b      	mov	r3, r7
 8000b98:	4619      	mov	r1, r3
 8000b9a:	4806      	ldr	r0, [pc, #24]	; (8000bb4 <CH_Select1+0x3c>)
 8000b9c:	f001 fcca 	bl	8002534 <HAL_ADC_ConfigChannel>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d001      	beq.n	8000baa <CH_Select1+0x32>
    {
       Error_Handler();
 8000ba6:	f001 f927 	bl	8001df8 <Error_Handler>
    }
}
 8000baa:	bf00      	nop
 8000bac:	3710      	adds	r7, #16
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	20000028 	.word	0x20000028

08000bb8 <CH_Select2>:
void CH_Select2(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b084      	sub	sp, #16
 8000bbc:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8000bbe:	463b      	mov	r3, r7
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	601a      	str	r2, [r3, #0]
 8000bc4:	605a      	str	r2, [r3, #4]
 8000bc6:	609a      	str	r2, [r3, #8]
 8000bc8:	60da      	str	r2, [r3, #12]
    sConfig.Channel = ADC_CHANNEL_11;
 8000bca:	230b      	movs	r3, #11
 8000bcc:	603b      	str	r3, [r7, #0]
    sConfig.Rank = 2;
 8000bce:	2302      	movs	r3, #2
 8000bd0:	607b      	str	r3, [r7, #4]
    sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	60bb      	str	r3, [r7, #8]
    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000bd6:	463b      	mov	r3, r7
 8000bd8:	4619      	mov	r1, r3
 8000bda:	4806      	ldr	r0, [pc, #24]	; (8000bf4 <CH_Select2+0x3c>)
 8000bdc:	f001 fcaa 	bl	8002534 <HAL_ADC_ConfigChannel>
 8000be0:	4603      	mov	r3, r0
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d001      	beq.n	8000bea <CH_Select2+0x32>
    {
       Error_Handler();
 8000be6:	f001 f907 	bl	8001df8 <Error_Handler>
    }
}
 8000bea:	bf00      	nop
 8000bec:	3710      	adds	r7, #16
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	20000028 	.word	0x20000028

08000bf8 <CH_Select3>:
void CH_Select3(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b084      	sub	sp, #16
 8000bfc:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8000bfe:	463b      	mov	r3, r7
 8000c00:	2200      	movs	r2, #0
 8000c02:	601a      	str	r2, [r3, #0]
 8000c04:	605a      	str	r2, [r3, #4]
 8000c06:	609a      	str	r2, [r3, #8]
 8000c08:	60da      	str	r2, [r3, #12]
    sConfig.Channel = ADC_CHANNEL_12;
 8000c0a:	230c      	movs	r3, #12
 8000c0c:	603b      	str	r3, [r7, #0]
    sConfig.Rank = 2;
 8000c0e:	2302      	movs	r3, #2
 8000c10:	607b      	str	r3, [r7, #4]
    sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000c12:	2300      	movs	r3, #0
 8000c14:	60bb      	str	r3, [r7, #8]
    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c16:	463b      	mov	r3, r7
 8000c18:	4619      	mov	r1, r3
 8000c1a:	4806      	ldr	r0, [pc, #24]	; (8000c34 <CH_Select3+0x3c>)
 8000c1c:	f001 fc8a 	bl	8002534 <HAL_ADC_ConfigChannel>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d001      	beq.n	8000c2a <CH_Select3+0x32>
    {
       Error_Handler();
 8000c26:	f001 f8e7 	bl	8001df8 <Error_Handler>
    }
}
 8000c2a:	bf00      	nop
 8000c2c:	3710      	adds	r7, #16
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	20000028 	.word	0x20000028

08000c38 <CH_Select4>:
void CH_Select4(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b084      	sub	sp, #16
 8000c3c:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8000c3e:	463b      	mov	r3, r7
 8000c40:	2200      	movs	r2, #0
 8000c42:	601a      	str	r2, [r3, #0]
 8000c44:	605a      	str	r2, [r3, #4]
 8000c46:	609a      	str	r2, [r3, #8]
 8000c48:	60da      	str	r2, [r3, #12]
    sConfig.Channel = ADC_CHANNEL_13;
 8000c4a:	230d      	movs	r3, #13
 8000c4c:	603b      	str	r3, [r7, #0]
    sConfig.Rank = 2;
 8000c4e:	2302      	movs	r3, #2
 8000c50:	607b      	str	r3, [r7, #4]
    sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000c52:	2300      	movs	r3, #0
 8000c54:	60bb      	str	r3, [r7, #8]
    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c56:	463b      	mov	r3, r7
 8000c58:	4619      	mov	r1, r3
 8000c5a:	4806      	ldr	r0, [pc, #24]	; (8000c74 <CH_Select4+0x3c>)
 8000c5c:	f001 fc6a 	bl	8002534 <HAL_ADC_ConfigChannel>
 8000c60:	4603      	mov	r3, r0
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d001      	beq.n	8000c6a <CH_Select4+0x32>
    {
       Error_Handler();
 8000c66:	f001 f8c7 	bl	8001df8 <Error_Handler>
    }
}
 8000c6a:	bf00      	nop
 8000c6c:	3710      	adds	r7, #16
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	20000028 	.word	0x20000028

08000c78 <CH_Select5>:
void CH_Select5(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b084      	sub	sp, #16
 8000c7c:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8000c7e:	463b      	mov	r3, r7
 8000c80:	2200      	movs	r2, #0
 8000c82:	601a      	str	r2, [r3, #0]
 8000c84:	605a      	str	r2, [r3, #4]
 8000c86:	609a      	str	r2, [r3, #8]
 8000c88:	60da      	str	r2, [r3, #12]
    sConfig.Channel = ADC_CHANNEL_1;
 8000c8a:	2301      	movs	r3, #1
 8000c8c:	603b      	str	r3, [r7, #0]
    sConfig.Rank = 2;
 8000c8e:	2302      	movs	r3, #2
 8000c90:	607b      	str	r3, [r7, #4]
    sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000c92:	2300      	movs	r3, #0
 8000c94:	60bb      	str	r3, [r7, #8]
    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c96:	463b      	mov	r3, r7
 8000c98:	4619      	mov	r1, r3
 8000c9a:	4806      	ldr	r0, [pc, #24]	; (8000cb4 <CH_Select5+0x3c>)
 8000c9c:	f001 fc4a 	bl	8002534 <HAL_ADC_ConfigChannel>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d001      	beq.n	8000caa <CH_Select5+0x32>
    {
       Error_Handler();
 8000ca6:	f001 f8a7 	bl	8001df8 <Error_Handler>
    }
}
 8000caa:	bf00      	nop
 8000cac:	3710      	adds	r7, #16
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	20000028 	.word	0x20000028

08000cb8 <CH_Select6>:
void CH_Select6(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b084      	sub	sp, #16
 8000cbc:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8000cbe:	463b      	mov	r3, r7
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	601a      	str	r2, [r3, #0]
 8000cc4:	605a      	str	r2, [r3, #4]
 8000cc6:	609a      	str	r2, [r3, #8]
 8000cc8:	60da      	str	r2, [r3, #12]
    sConfig.Channel = ADC_CHANNEL_2;
 8000cca:	2302      	movs	r3, #2
 8000ccc:	603b      	str	r3, [r7, #0]
    sConfig.Rank = 2;
 8000cce:	2302      	movs	r3, #2
 8000cd0:	607b      	str	r3, [r7, #4]
    sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	60bb      	str	r3, [r7, #8]
    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000cd6:	463b      	mov	r3, r7
 8000cd8:	4619      	mov	r1, r3
 8000cda:	4806      	ldr	r0, [pc, #24]	; (8000cf4 <CH_Select6+0x3c>)
 8000cdc:	f001 fc2a 	bl	8002534 <HAL_ADC_ConfigChannel>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d001      	beq.n	8000cea <CH_Select6+0x32>
    {
       Error_Handler();
 8000ce6:	f001 f887 	bl	8001df8 <Error_Handler>
    }
}
 8000cea:	bf00      	nop
 8000cec:	3710      	adds	r7, #16
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	20000028 	.word	0x20000028

08000cf8 <CH_Select7>:
void CH_Select7(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b084      	sub	sp, #16
 8000cfc:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8000cfe:	463b      	mov	r3, r7
 8000d00:	2200      	movs	r2, #0
 8000d02:	601a      	str	r2, [r3, #0]
 8000d04:	605a      	str	r2, [r3, #4]
 8000d06:	609a      	str	r2, [r3, #8]
 8000d08:	60da      	str	r2, [r3, #12]
    sConfig.Channel = ADC_CHANNEL_3;
 8000d0a:	2303      	movs	r3, #3
 8000d0c:	603b      	str	r3, [r7, #0]
    sConfig.Rank = 2;
 8000d0e:	2302      	movs	r3, #2
 8000d10:	607b      	str	r3, [r7, #4]
    sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000d12:	2300      	movs	r3, #0
 8000d14:	60bb      	str	r3, [r7, #8]
    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d16:	463b      	mov	r3, r7
 8000d18:	4619      	mov	r1, r3
 8000d1a:	4806      	ldr	r0, [pc, #24]	; (8000d34 <CH_Select7+0x3c>)
 8000d1c:	f001 fc0a 	bl	8002534 <HAL_ADC_ConfigChannel>
 8000d20:	4603      	mov	r3, r0
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d001      	beq.n	8000d2a <CH_Select7+0x32>
    {
       Error_Handler();
 8000d26:	f001 f867 	bl	8001df8 <Error_Handler>
    }
}
 8000d2a:	bf00      	nop
 8000d2c:	3710      	adds	r7, #16
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	bf00      	nop
 8000d34:	20000028 	.word	0x20000028

08000d38 <CH_Select8>:
void CH_Select8(void)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b084      	sub	sp, #16
 8000d3c:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8000d3e:	463b      	mov	r3, r7
 8000d40:	2200      	movs	r2, #0
 8000d42:	601a      	str	r2, [r3, #0]
 8000d44:	605a      	str	r2, [r3, #4]
 8000d46:	609a      	str	r2, [r3, #8]
 8000d48:	60da      	str	r2, [r3, #12]
    sConfig.Channel = ADC_CHANNEL_4;
 8000d4a:	2304      	movs	r3, #4
 8000d4c:	603b      	str	r3, [r7, #0]
    sConfig.Rank = 2;
 8000d4e:	2302      	movs	r3, #2
 8000d50:	607b      	str	r3, [r7, #4]
    sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000d52:	2300      	movs	r3, #0
 8000d54:	60bb      	str	r3, [r7, #8]
    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d56:	463b      	mov	r3, r7
 8000d58:	4619      	mov	r1, r3
 8000d5a:	4806      	ldr	r0, [pc, #24]	; (8000d74 <CH_Select8+0x3c>)
 8000d5c:	f001 fbea 	bl	8002534 <HAL_ADC_ConfigChannel>
 8000d60:	4603      	mov	r3, r0
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d001      	beq.n	8000d6a <CH_Select8+0x32>
    {
       Error_Handler();
 8000d66:	f001 f847 	bl	8001df8 <Error_Handler>
    }
}
 8000d6a:	bf00      	nop
 8000d6c:	3710      	adds	r7, #16
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	bf00      	nop
 8000d74:	20000028 	.word	0x20000028

08000d78 <CH_Select9>:
void CH_Select9(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b084      	sub	sp, #16
 8000d7c:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8000d7e:	463b      	mov	r3, r7
 8000d80:	2200      	movs	r2, #0
 8000d82:	601a      	str	r2, [r3, #0]
 8000d84:	605a      	str	r2, [r3, #4]
 8000d86:	609a      	str	r2, [r3, #8]
 8000d88:	60da      	str	r2, [r3, #12]
    sConfig.Channel = ADC_CHANNEL_5;
 8000d8a:	2305      	movs	r3, #5
 8000d8c:	603b      	str	r3, [r7, #0]
    sConfig.Rank = 2;
 8000d8e:	2302      	movs	r3, #2
 8000d90:	607b      	str	r3, [r7, #4]
    sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000d92:	2300      	movs	r3, #0
 8000d94:	60bb      	str	r3, [r7, #8]
    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d96:	463b      	mov	r3, r7
 8000d98:	4619      	mov	r1, r3
 8000d9a:	4806      	ldr	r0, [pc, #24]	; (8000db4 <CH_Select9+0x3c>)
 8000d9c:	f001 fbca 	bl	8002534 <HAL_ADC_ConfigChannel>
 8000da0:	4603      	mov	r3, r0
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d001      	beq.n	8000daa <CH_Select9+0x32>
    {
       Error_Handler();
 8000da6:	f001 f827 	bl	8001df8 <Error_Handler>
    }
}
 8000daa:	bf00      	nop
 8000dac:	3710      	adds	r7, #16
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	20000028 	.word	0x20000028

08000db8 <CH_Select10>:
void CH_Select10(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b084      	sub	sp, #16
 8000dbc:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8000dbe:	463b      	mov	r3, r7
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	601a      	str	r2, [r3, #0]
 8000dc4:	605a      	str	r2, [r3, #4]
 8000dc6:	609a      	str	r2, [r3, #8]
 8000dc8:	60da      	str	r2, [r3, #12]
    sConfig.Channel = ADC_CHANNEL_6;
 8000dca:	2306      	movs	r3, #6
 8000dcc:	603b      	str	r3, [r7, #0]
    sConfig.Rank = 2;
 8000dce:	2302      	movs	r3, #2
 8000dd0:	607b      	str	r3, [r7, #4]
    sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	60bb      	str	r3, [r7, #8]
    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000dd6:	463b      	mov	r3, r7
 8000dd8:	4619      	mov	r1, r3
 8000dda:	4806      	ldr	r0, [pc, #24]	; (8000df4 <CH_Select10+0x3c>)
 8000ddc:	f001 fbaa 	bl	8002534 <HAL_ADC_ConfigChannel>
 8000de0:	4603      	mov	r3, r0
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d001      	beq.n	8000dea <CH_Select10+0x32>
    {
       Error_Handler();
 8000de6:	f001 f807 	bl	8001df8 <Error_Handler>
    }
}void CH_Select11(void)
 8000dea:	bf00      	nop
 8000dec:	3710      	adds	r7, #16
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	bf00      	nop
 8000df4:	20000028 	.word	0x20000028

08000df8 <CH_Select11>:
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b084      	sub	sp, #16
 8000dfc:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8000dfe:	463b      	mov	r3, r7
 8000e00:	2200      	movs	r2, #0
 8000e02:	601a      	str	r2, [r3, #0]
 8000e04:	605a      	str	r2, [r3, #4]
 8000e06:	609a      	str	r2, [r3, #8]
 8000e08:	60da      	str	r2, [r3, #12]
    sConfig.Channel = ADC_CHANNEL_7;
 8000e0a:	2307      	movs	r3, #7
 8000e0c:	603b      	str	r3, [r7, #0]
    sConfig.Rank = 2;
 8000e0e:	2302      	movs	r3, #2
 8000e10:	607b      	str	r3, [r7, #4]
    sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000e12:	2300      	movs	r3, #0
 8000e14:	60bb      	str	r3, [r7, #8]
    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e16:	463b      	mov	r3, r7
 8000e18:	4619      	mov	r1, r3
 8000e1a:	4806      	ldr	r0, [pc, #24]	; (8000e34 <CH_Select11+0x3c>)
 8000e1c:	f001 fb8a 	bl	8002534 <HAL_ADC_ConfigChannel>
 8000e20:	4603      	mov	r3, r0
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d001      	beq.n	8000e2a <CH_Select11+0x32>
    {
       Error_Handler();
 8000e26:	f000 ffe7 	bl	8001df8 <Error_Handler>
    }
}
 8000e2a:	bf00      	nop
 8000e2c:	3710      	adds	r7, #16
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	20000028 	.word	0x20000028

08000e38 <CH_Select12>:
void CH_Select12(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b084      	sub	sp, #16
 8000e3c:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8000e3e:	463b      	mov	r3, r7
 8000e40:	2200      	movs	r2, #0
 8000e42:	601a      	str	r2, [r3, #0]
 8000e44:	605a      	str	r2, [r3, #4]
 8000e46:	609a      	str	r2, [r3, #8]
 8000e48:	60da      	str	r2, [r3, #12]
    sConfig.Channel = ADC_CHANNEL_14;
 8000e4a:	230e      	movs	r3, #14
 8000e4c:	603b      	str	r3, [r7, #0]
    sConfig.Rank = 2;
 8000e4e:	2302      	movs	r3, #2
 8000e50:	607b      	str	r3, [r7, #4]
    sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000e52:	2300      	movs	r3, #0
 8000e54:	60bb      	str	r3, [r7, #8]
    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e56:	463b      	mov	r3, r7
 8000e58:	4619      	mov	r1, r3
 8000e5a:	4806      	ldr	r0, [pc, #24]	; (8000e74 <CH_Select12+0x3c>)
 8000e5c:	f001 fb6a 	bl	8002534 <HAL_ADC_ConfigChannel>
 8000e60:	4603      	mov	r3, r0
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d001      	beq.n	8000e6a <CH_Select12+0x32>
    {
       Error_Handler();
 8000e66:	f000 ffc7 	bl	8001df8 <Error_Handler>
    }
}
 8000e6a:	bf00      	nop
 8000e6c:	3710      	adds	r7, #16
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	20000028 	.word	0x20000028

08000e78 <CH_Select13>:
void CH_Select13(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b084      	sub	sp, #16
 8000e7c:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8000e7e:	463b      	mov	r3, r7
 8000e80:	2200      	movs	r2, #0
 8000e82:	601a      	str	r2, [r3, #0]
 8000e84:	605a      	str	r2, [r3, #4]
 8000e86:	609a      	str	r2, [r3, #8]
 8000e88:	60da      	str	r2, [r3, #12]
    sConfig.Channel = ADC_CHANNEL_15;
 8000e8a:	230f      	movs	r3, #15
 8000e8c:	603b      	str	r3, [r7, #0]
    sConfig.Rank = 2;
 8000e8e:	2302      	movs	r3, #2
 8000e90:	607b      	str	r3, [r7, #4]
    sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000e92:	2300      	movs	r3, #0
 8000e94:	60bb      	str	r3, [r7, #8]
    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e96:	463b      	mov	r3, r7
 8000e98:	4619      	mov	r1, r3
 8000e9a:	4806      	ldr	r0, [pc, #24]	; (8000eb4 <CH_Select13+0x3c>)
 8000e9c:	f001 fb4a 	bl	8002534 <HAL_ADC_ConfigChannel>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d001      	beq.n	8000eaa <CH_Select13+0x32>
    {
       Error_Handler();
 8000ea6:	f000 ffa7 	bl	8001df8 <Error_Handler>
    }
}
 8000eaa:	bf00      	nop
 8000eac:	3710      	adds	r7, #16
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	20000028 	.word	0x20000028

08000eb8 <CH_Select14>:
void CH_Select14(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b084      	sub	sp, #16
 8000ebc:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8000ebe:	463b      	mov	r3, r7
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	601a      	str	r2, [r3, #0]
 8000ec4:	605a      	str	r2, [r3, #4]
 8000ec6:	609a      	str	r2, [r3, #8]
 8000ec8:	60da      	str	r2, [r3, #12]
    sConfig.Channel = ADC_CHANNEL_9;
 8000eca:	2309      	movs	r3, #9
 8000ecc:	603b      	str	r3, [r7, #0]
    sConfig.Rank = 2;
 8000ece:	2302      	movs	r3, #2
 8000ed0:	607b      	str	r3, [r7, #4]
    sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	60bb      	str	r3, [r7, #8]
    if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000ed6:	463b      	mov	r3, r7
 8000ed8:	4619      	mov	r1, r3
 8000eda:	4806      	ldr	r0, [pc, #24]	; (8000ef4 <CH_Select14+0x3c>)
 8000edc:	f001 fb2a 	bl	8002534 <HAL_ADC_ConfigChannel>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d001      	beq.n	8000eea <CH_Select14+0x32>
    {
       Error_Handler();
 8000ee6:	f000 ff87 	bl	8001df8 <Error_Handler>
    }
}
 8000eea:	bf00      	nop
 8000eec:	3710      	adds	r7, #16
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	20000070 	.word	0x20000070

08000ef8 <CH_Select15>:
void CH_Select15(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b084      	sub	sp, #16
 8000efc:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8000efe:	463b      	mov	r3, r7
 8000f00:	2200      	movs	r2, #0
 8000f02:	601a      	str	r2, [r3, #0]
 8000f04:	605a      	str	r2, [r3, #4]
 8000f06:	609a      	str	r2, [r3, #8]
 8000f08:	60da      	str	r2, [r3, #12]
    sConfig.Channel = ADC_CHANNEL_14;
 8000f0a:	230e      	movs	r3, #14
 8000f0c:	603b      	str	r3, [r7, #0]
    sConfig.Rank = 2;
 8000f0e:	2302      	movs	r3, #2
 8000f10:	607b      	str	r3, [r7, #4]
    sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000f12:	2300      	movs	r3, #0
 8000f14:	60bb      	str	r3, [r7, #8]
    if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000f16:	463b      	mov	r3, r7
 8000f18:	4619      	mov	r1, r3
 8000f1a:	4806      	ldr	r0, [pc, #24]	; (8000f34 <CH_Select15+0x3c>)
 8000f1c:	f001 fb0a 	bl	8002534 <HAL_ADC_ConfigChannel>
 8000f20:	4603      	mov	r3, r0
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d001      	beq.n	8000f2a <CH_Select15+0x32>
    {
       Error_Handler();
 8000f26:	f000 ff67 	bl	8001df8 <Error_Handler>
    }
}
 8000f2a:	bf00      	nop
 8000f2c:	3710      	adds	r7, #16
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	20000070 	.word	0x20000070

08000f38 <CH_Select16>:
void CH_Select16(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b084      	sub	sp, #16
 8000f3c:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8000f3e:	463b      	mov	r3, r7
 8000f40:	2200      	movs	r2, #0
 8000f42:	601a      	str	r2, [r3, #0]
 8000f44:	605a      	str	r2, [r3, #4]
 8000f46:	609a      	str	r2, [r3, #8]
 8000f48:	60da      	str	r2, [r3, #12]
    sConfig.Channel = ADC_CHANNEL_15;
 8000f4a:	230f      	movs	r3, #15
 8000f4c:	603b      	str	r3, [r7, #0]
    sConfig.Rank = 2;
 8000f4e:	2302      	movs	r3, #2
 8000f50:	607b      	str	r3, [r7, #4]
    sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000f52:	2300      	movs	r3, #0
 8000f54:	60bb      	str	r3, [r7, #8]
    if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000f56:	463b      	mov	r3, r7
 8000f58:	4619      	mov	r1, r3
 8000f5a:	4806      	ldr	r0, [pc, #24]	; (8000f74 <CH_Select16+0x3c>)
 8000f5c:	f001 faea 	bl	8002534 <HAL_ADC_ConfigChannel>
 8000f60:	4603      	mov	r3, r0
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d001      	beq.n	8000f6a <CH_Select16+0x32>
    {
       Error_Handler();
 8000f66:	f000 ff47 	bl	8001df8 <Error_Handler>
    }
}
 8000f6a:	bf00      	nop
 8000f6c:	3710      	adds	r7, #16
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	20000070 	.word	0x20000070

08000f78 <CH_Select17>:
void CH_Select17(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b084      	sub	sp, #16
 8000f7c:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8000f7e:	463b      	mov	r3, r7
 8000f80:	2200      	movs	r2, #0
 8000f82:	601a      	str	r2, [r3, #0]
 8000f84:	605a      	str	r2, [r3, #4]
 8000f86:	609a      	str	r2, [r3, #8]
 8000f88:	60da      	str	r2, [r3, #12]
    sConfig.Channel = ADC_CHANNEL_4;
 8000f8a:	2304      	movs	r3, #4
 8000f8c:	603b      	str	r3, [r7, #0]
    sConfig.Rank = 2;
 8000f8e:	2302      	movs	r3, #2
 8000f90:	607b      	str	r3, [r7, #4]
    sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000f92:	2300      	movs	r3, #0
 8000f94:	60bb      	str	r3, [r7, #8]
    if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000f96:	463b      	mov	r3, r7
 8000f98:	4619      	mov	r1, r3
 8000f9a:	4806      	ldr	r0, [pc, #24]	; (8000fb4 <CH_Select17+0x3c>)
 8000f9c:	f001 faca 	bl	8002534 <HAL_ADC_ConfigChannel>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d001      	beq.n	8000faa <CH_Select17+0x32>
    {
       Error_Handler();
 8000fa6:	f000 ff27 	bl	8001df8 <Error_Handler>
    }
}
 8000faa:	bf00      	nop
 8000fac:	3710      	adds	r7, #16
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	20000070 	.word	0x20000070

08000fb8 <CH_Select18>:
void CH_Select18(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b084      	sub	sp, #16
 8000fbc:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8000fbe:	463b      	mov	r3, r7
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	601a      	str	r2, [r3, #0]
 8000fc4:	605a      	str	r2, [r3, #4]
 8000fc6:	609a      	str	r2, [r3, #8]
 8000fc8:	60da      	str	r2, [r3, #12]
    sConfig.Channel = ADC_CHANNEL_5;
 8000fca:	2305      	movs	r3, #5
 8000fcc:	603b      	str	r3, [r7, #0]
    sConfig.Rank = 2;
 8000fce:	2302      	movs	r3, #2
 8000fd0:	607b      	str	r3, [r7, #4]
    sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	60bb      	str	r3, [r7, #8]
    if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000fd6:	463b      	mov	r3, r7
 8000fd8:	4619      	mov	r1, r3
 8000fda:	4806      	ldr	r0, [pc, #24]	; (8000ff4 <CH_Select18+0x3c>)
 8000fdc:	f001 faaa 	bl	8002534 <HAL_ADC_ConfigChannel>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d001      	beq.n	8000fea <CH_Select18+0x32>
    {
       Error_Handler();
 8000fe6:	f000 ff07 	bl	8001df8 <Error_Handler>
    }
}
 8000fea:	bf00      	nop
 8000fec:	3710      	adds	r7, #16
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	20000070 	.word	0x20000070

08000ff8 <CH_Select19>:
void CH_Select19(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b084      	sub	sp, #16
 8000ffc:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8000ffe:	463b      	mov	r3, r7
 8001000:	2200      	movs	r2, #0
 8001002:	601a      	str	r2, [r3, #0]
 8001004:	605a      	str	r2, [r3, #4]
 8001006:	609a      	str	r2, [r3, #8]
 8001008:	60da      	str	r2, [r3, #12]
    sConfig.Channel = ADC_CHANNEL_6;
 800100a:	2306      	movs	r3, #6
 800100c:	603b      	str	r3, [r7, #0]
    sConfig.Rank = 2;
 800100e:	2302      	movs	r3, #2
 8001010:	607b      	str	r3, [r7, #4]
    sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001012:	2300      	movs	r3, #0
 8001014:	60bb      	str	r3, [r7, #8]
    if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001016:	463b      	mov	r3, r7
 8001018:	4619      	mov	r1, r3
 800101a:	4806      	ldr	r0, [pc, #24]	; (8001034 <CH_Select19+0x3c>)
 800101c:	f001 fa8a 	bl	8002534 <HAL_ADC_ConfigChannel>
 8001020:	4603      	mov	r3, r0
 8001022:	2b00      	cmp	r3, #0
 8001024:	d001      	beq.n	800102a <CH_Select19+0x32>
    {
       Error_Handler();
 8001026:	f000 fee7 	bl	8001df8 <Error_Handler>
    }
}
 800102a:	bf00      	nop
 800102c:	3710      	adds	r7, #16
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	20000070 	.word	0x20000070

08001038 <CH_Select20>:
void CH_Select20(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b084      	sub	sp, #16
 800103c:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 800103e:	463b      	mov	r3, r7
 8001040:	2200      	movs	r2, #0
 8001042:	601a      	str	r2, [r3, #0]
 8001044:	605a      	str	r2, [r3, #4]
 8001046:	609a      	str	r2, [r3, #8]
 8001048:	60da      	str	r2, [r3, #12]
    sConfig.Channel = ADC_CHANNEL_7;
 800104a:	2307      	movs	r3, #7
 800104c:	603b      	str	r3, [r7, #0]
    sConfig.Rank = 2;
 800104e:	2302      	movs	r3, #2
 8001050:	607b      	str	r3, [r7, #4]
    sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001052:	2300      	movs	r3, #0
 8001054:	60bb      	str	r3, [r7, #8]
    if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001056:	463b      	mov	r3, r7
 8001058:	4619      	mov	r1, r3
 800105a:	4806      	ldr	r0, [pc, #24]	; (8001074 <CH_Select20+0x3c>)
 800105c:	f001 fa6a 	bl	8002534 <HAL_ADC_ConfigChannel>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d001      	beq.n	800106a <CH_Select20+0x32>
    {
       Error_Handler();
 8001066:	f000 fec7 	bl	8001df8 <Error_Handler>
    }
}
 800106a:	bf00      	nop
 800106c:	3710      	adds	r7, #16
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	20000070 	.word	0x20000070

08001078 <CH_Select21>:
void CH_Select21(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b084      	sub	sp, #16
 800107c:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 800107e:	463b      	mov	r3, r7
 8001080:	2200      	movs	r2, #0
 8001082:	601a      	str	r2, [r3, #0]
 8001084:	605a      	str	r2, [r3, #4]
 8001086:	609a      	str	r2, [r3, #8]
 8001088:	60da      	str	r2, [r3, #12]
    sConfig.Channel = ADC_CHANNEL_8;
 800108a:	2308      	movs	r3, #8
 800108c:	603b      	str	r3, [r7, #0]
    sConfig.Rank = 2;
 800108e:	2302      	movs	r3, #2
 8001090:	607b      	str	r3, [r7, #4]
    sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001092:	2300      	movs	r3, #0
 8001094:	60bb      	str	r3, [r7, #8]
    if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001096:	463b      	mov	r3, r7
 8001098:	4619      	mov	r1, r3
 800109a:	4806      	ldr	r0, [pc, #24]	; (80010b4 <CH_Select21+0x3c>)
 800109c:	f001 fa4a 	bl	8002534 <HAL_ADC_ConfigChannel>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d001      	beq.n	80010aa <CH_Select21+0x32>
    {
       Error_Handler();
 80010a6:	f000 fea7 	bl	8001df8 <Error_Handler>
    }
}
 80010aa:	bf00      	nop
 80010ac:	3710      	adds	r7, #16
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	20000070 	.word	0x20000070

080010b8 <channel1>:


/* USER CODE END 0 */
void channel1(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	af00      	add	r7, sp, #0
	          CH_Select1();
 80010bc:	f7ff fd5c 	bl	8000b78 <CH_Select1>
	          HAL_ADC_Start(&hadc1);
 80010c0:	481b      	ldr	r0, [pc, #108]	; (8001130 <channel1+0x78>)
 80010c2:	f001 f899 	bl	80021f8 <HAL_ADC_Start>
		 	  HAL_ADC_PollForConversion(&hadc1,10);
 80010c6:	210a      	movs	r1, #10
 80010c8:	4819      	ldr	r0, [pc, #100]	; (8001130 <channel1+0x78>)
 80010ca:	f001 f99a 	bl	8002402 <HAL_ADC_PollForConversion>
		 	  ADC_VAL[0]=HAL_ADC_GetValue(&hadc1);
 80010ce:	4818      	ldr	r0, [pc, #96]	; (8001130 <channel1+0x78>)
 80010d0:	f001 fa22 	bl	8002518 <HAL_ADC_GetValue>
 80010d4:	4603      	mov	r3, r0
 80010d6:	b29a      	uxth	r2, r3
 80010d8:	4b16      	ldr	r3, [pc, #88]	; (8001134 <channel1+0x7c>)
 80010da:	801a      	strh	r2, [r3, #0]
		 	  HAL_ADC_Stop(&hadc1);
 80010dc:	4814      	ldr	r0, [pc, #80]	; (8001130 <channel1+0x78>)
 80010de:	f001 f95d 	bl	800239c <HAL_ADC_Stop>
		 	  Voltage=(float)(2000*ADC_VAL[0]*3.3)/4095;
 80010e2:	4b14      	ldr	r3, [pc, #80]	; (8001134 <channel1+0x7c>)
 80010e4:	881b      	ldrh	r3, [r3, #0]
 80010e6:	461a      	mov	r2, r3
 80010e8:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80010ec:	fb02 f303 	mul.w	r3, r2, r3
 80010f0:	4618      	mov	r0, r3
 80010f2:	f7ff fb05 	bl	8000700 <__aeabi_i2d>
 80010f6:	a30c      	add	r3, pc, #48	; (adr r3, 8001128 <channel1+0x70>)
 80010f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010fc:	f7ff f884 	bl	8000208 <__aeabi_dmul>
 8001100:	4602      	mov	r2, r0
 8001102:	460b      	mov	r3, r1
 8001104:	4610      	mov	r0, r2
 8001106:	4619      	mov	r1, r3
 8001108:	f7ff fb64 	bl	80007d4 <__aeabi_d2f>
 800110c:	ee06 0a90 	vmov	s13, r0
 8001110:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8001138 <channel1+0x80>
 8001114:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001118:	4b08      	ldr	r3, [pc, #32]	; (800113c <channel1+0x84>)
 800111a:	edc3 7a00 	vstr	s15, [r3]
		 	  HAL_Delay(50);
 800111e:	2032      	movs	r0, #50	; 0x32
 8001120:	f001 f802 	bl	8002128 <HAL_Delay>
}
 8001124:	bf00      	nop
 8001126:	bd80      	pop	{r7, pc}
 8001128:	66666666 	.word	0x66666666
 800112c:	400a6666 	.word	0x400a6666
 8001130:	20000028 	.word	0x20000028
 8001134:	200000b8 	.word	0x200000b8
 8001138:	457ff000 	.word	0x457ff000
 800113c:	200000e4 	.word	0x200000e4

08001140 <channel2>:
void channel2(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	af00      	add	r7, sp, #0
	          CH_Select2();
 8001144:	f7ff fd38 	bl	8000bb8 <CH_Select2>
	          HAL_ADC_Start(&hadc1);
 8001148:	4819      	ldr	r0, [pc, #100]	; (80011b0 <channel2+0x70>)
 800114a:	f001 f855 	bl	80021f8 <HAL_ADC_Start>
		 	  HAL_ADC_PollForConversion(&hadc1,10);
 800114e:	210a      	movs	r1, #10
 8001150:	4817      	ldr	r0, [pc, #92]	; (80011b0 <channel2+0x70>)
 8001152:	f001 f956 	bl	8002402 <HAL_ADC_PollForConversion>
		 	  ADC_VAL[1]=HAL_ADC_GetValue(&hadc1);
 8001156:	4816      	ldr	r0, [pc, #88]	; (80011b0 <channel2+0x70>)
 8001158:	f001 f9de 	bl	8002518 <HAL_ADC_GetValue>
 800115c:	4603      	mov	r3, r0
 800115e:	b29a      	uxth	r2, r3
 8001160:	4b14      	ldr	r3, [pc, #80]	; (80011b4 <channel2+0x74>)
 8001162:	805a      	strh	r2, [r3, #2]
		 	  HAL_ADC_Stop(&hadc1);
 8001164:	4812      	ldr	r0, [pc, #72]	; (80011b0 <channel2+0x70>)
 8001166:	f001 f919 	bl	800239c <HAL_ADC_Stop>
		 	  Voltage=(float)(ADC_VAL[1]*3.3)/4095;
 800116a:	4b12      	ldr	r3, [pc, #72]	; (80011b4 <channel2+0x74>)
 800116c:	885b      	ldrh	r3, [r3, #2]
 800116e:	4618      	mov	r0, r3
 8001170:	f7ff fac6 	bl	8000700 <__aeabi_i2d>
 8001174:	a30c      	add	r3, pc, #48	; (adr r3, 80011a8 <channel2+0x68>)
 8001176:	e9d3 2300 	ldrd	r2, r3, [r3]
 800117a:	f7ff f845 	bl	8000208 <__aeabi_dmul>
 800117e:	4602      	mov	r2, r0
 8001180:	460b      	mov	r3, r1
 8001182:	4610      	mov	r0, r2
 8001184:	4619      	mov	r1, r3
 8001186:	f7ff fb25 	bl	80007d4 <__aeabi_d2f>
 800118a:	ee06 0a90 	vmov	s13, r0
 800118e:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 80011b8 <channel2+0x78>
 8001192:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001196:	4b09      	ldr	r3, [pc, #36]	; (80011bc <channel2+0x7c>)
 8001198:	edc3 7a00 	vstr	s15, [r3]
		 	  HAL_Delay(50);
 800119c:	2032      	movs	r0, #50	; 0x32
 800119e:	f000 ffc3 	bl	8002128 <HAL_Delay>
}
 80011a2:	bf00      	nop
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	66666666 	.word	0x66666666
 80011ac:	400a6666 	.word	0x400a6666
 80011b0:	20000028 	.word	0x20000028
 80011b4:	200000b8 	.word	0x200000b8
 80011b8:	457ff000 	.word	0x457ff000
 80011bc:	200000e4 	.word	0x200000e4

080011c0 <channel3>:
void channel3(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	af00      	add	r7, sp, #0
	          CH_Select3();
 80011c4:	f7ff fd18 	bl	8000bf8 <CH_Select3>
	          HAL_ADC_Start(&hadc1);
 80011c8:	4819      	ldr	r0, [pc, #100]	; (8001230 <channel3+0x70>)
 80011ca:	f001 f815 	bl	80021f8 <HAL_ADC_Start>
		 	  HAL_ADC_PollForConversion(&hadc1,10);
 80011ce:	210a      	movs	r1, #10
 80011d0:	4817      	ldr	r0, [pc, #92]	; (8001230 <channel3+0x70>)
 80011d2:	f001 f916 	bl	8002402 <HAL_ADC_PollForConversion>
		 	  ADC_VAL[2]=HAL_ADC_GetValue(&hadc1);
 80011d6:	4816      	ldr	r0, [pc, #88]	; (8001230 <channel3+0x70>)
 80011d8:	f001 f99e 	bl	8002518 <HAL_ADC_GetValue>
 80011dc:	4603      	mov	r3, r0
 80011de:	b29a      	uxth	r2, r3
 80011e0:	4b14      	ldr	r3, [pc, #80]	; (8001234 <channel3+0x74>)
 80011e2:	809a      	strh	r2, [r3, #4]
		 	  HAL_ADC_Stop(&hadc1);
 80011e4:	4812      	ldr	r0, [pc, #72]	; (8001230 <channel3+0x70>)
 80011e6:	f001 f8d9 	bl	800239c <HAL_ADC_Stop>
		 	  Voltage=(float)(ADC_VAL[2]*3.3)/4095;
 80011ea:	4b12      	ldr	r3, [pc, #72]	; (8001234 <channel3+0x74>)
 80011ec:	889b      	ldrh	r3, [r3, #4]
 80011ee:	4618      	mov	r0, r3
 80011f0:	f7ff fa86 	bl	8000700 <__aeabi_i2d>
 80011f4:	a30c      	add	r3, pc, #48	; (adr r3, 8001228 <channel3+0x68>)
 80011f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011fa:	f7ff f805 	bl	8000208 <__aeabi_dmul>
 80011fe:	4602      	mov	r2, r0
 8001200:	460b      	mov	r3, r1
 8001202:	4610      	mov	r0, r2
 8001204:	4619      	mov	r1, r3
 8001206:	f7ff fae5 	bl	80007d4 <__aeabi_d2f>
 800120a:	ee06 0a90 	vmov	s13, r0
 800120e:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8001238 <channel3+0x78>
 8001212:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001216:	4b09      	ldr	r3, [pc, #36]	; (800123c <channel3+0x7c>)
 8001218:	edc3 7a00 	vstr	s15, [r3]
		 	  HAL_Delay(50);
 800121c:	2032      	movs	r0, #50	; 0x32
 800121e:	f000 ff83 	bl	8002128 <HAL_Delay>
}
 8001222:	bf00      	nop
 8001224:	bd80      	pop	{r7, pc}
 8001226:	bf00      	nop
 8001228:	66666666 	.word	0x66666666
 800122c:	400a6666 	.word	0x400a6666
 8001230:	20000028 	.word	0x20000028
 8001234:	200000b8 	.word	0x200000b8
 8001238:	457ff000 	.word	0x457ff000
 800123c:	200000e4 	.word	0x200000e4

08001240 <channel4>:
void channel4(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	af00      	add	r7, sp, #0
	          CH_Select4();
 8001244:	f7ff fcf8 	bl	8000c38 <CH_Select4>
	          HAL_ADC_Start(&hadc1);
 8001248:	4819      	ldr	r0, [pc, #100]	; (80012b0 <channel4+0x70>)
 800124a:	f000 ffd5 	bl	80021f8 <HAL_ADC_Start>
		 	  HAL_ADC_PollForConversion(&hadc1,10);
 800124e:	210a      	movs	r1, #10
 8001250:	4817      	ldr	r0, [pc, #92]	; (80012b0 <channel4+0x70>)
 8001252:	f001 f8d6 	bl	8002402 <HAL_ADC_PollForConversion>
		 	  ADC_VAL[3]=HAL_ADC_GetValue(&hadc1);
 8001256:	4816      	ldr	r0, [pc, #88]	; (80012b0 <channel4+0x70>)
 8001258:	f001 f95e 	bl	8002518 <HAL_ADC_GetValue>
 800125c:	4603      	mov	r3, r0
 800125e:	b29a      	uxth	r2, r3
 8001260:	4b14      	ldr	r3, [pc, #80]	; (80012b4 <channel4+0x74>)
 8001262:	80da      	strh	r2, [r3, #6]
		 	  HAL_ADC_Stop(&hadc1);
 8001264:	4812      	ldr	r0, [pc, #72]	; (80012b0 <channel4+0x70>)
 8001266:	f001 f899 	bl	800239c <HAL_ADC_Stop>
		 	  Voltage=(float)(ADC_VAL[3]*3.3)/4095;
 800126a:	4b12      	ldr	r3, [pc, #72]	; (80012b4 <channel4+0x74>)
 800126c:	88db      	ldrh	r3, [r3, #6]
 800126e:	4618      	mov	r0, r3
 8001270:	f7ff fa46 	bl	8000700 <__aeabi_i2d>
 8001274:	a30c      	add	r3, pc, #48	; (adr r3, 80012a8 <channel4+0x68>)
 8001276:	e9d3 2300 	ldrd	r2, r3, [r3]
 800127a:	f7fe ffc5 	bl	8000208 <__aeabi_dmul>
 800127e:	4602      	mov	r2, r0
 8001280:	460b      	mov	r3, r1
 8001282:	4610      	mov	r0, r2
 8001284:	4619      	mov	r1, r3
 8001286:	f7ff faa5 	bl	80007d4 <__aeabi_d2f>
 800128a:	ee06 0a90 	vmov	s13, r0
 800128e:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 80012b8 <channel4+0x78>
 8001292:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001296:	4b09      	ldr	r3, [pc, #36]	; (80012bc <channel4+0x7c>)
 8001298:	edc3 7a00 	vstr	s15, [r3]
		 	  HAL_Delay(50);
 800129c:	2032      	movs	r0, #50	; 0x32
 800129e:	f000 ff43 	bl	8002128 <HAL_Delay>
}
 80012a2:	bf00      	nop
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	66666666 	.word	0x66666666
 80012ac:	400a6666 	.word	0x400a6666
 80012b0:	20000028 	.word	0x20000028
 80012b4:	200000b8 	.word	0x200000b8
 80012b8:	457ff000 	.word	0x457ff000
 80012bc:	200000e4 	.word	0x200000e4

080012c0 <channel5>:
void channel5(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	af00      	add	r7, sp, #0
	          CH_Select5();
 80012c4:	f7ff fcd8 	bl	8000c78 <CH_Select5>
	          HAL_ADC_Start(&hadc1);
 80012c8:	4819      	ldr	r0, [pc, #100]	; (8001330 <channel5+0x70>)
 80012ca:	f000 ff95 	bl	80021f8 <HAL_ADC_Start>
		 	  HAL_ADC_PollForConversion(&hadc1,10);
 80012ce:	210a      	movs	r1, #10
 80012d0:	4817      	ldr	r0, [pc, #92]	; (8001330 <channel5+0x70>)
 80012d2:	f001 f896 	bl	8002402 <HAL_ADC_PollForConversion>
		 	  ADC_VAL[4]=HAL_ADC_GetValue(&hadc1);
 80012d6:	4816      	ldr	r0, [pc, #88]	; (8001330 <channel5+0x70>)
 80012d8:	f001 f91e 	bl	8002518 <HAL_ADC_GetValue>
 80012dc:	4603      	mov	r3, r0
 80012de:	b29a      	uxth	r2, r3
 80012e0:	4b14      	ldr	r3, [pc, #80]	; (8001334 <channel5+0x74>)
 80012e2:	811a      	strh	r2, [r3, #8]
		 	  HAL_ADC_Stop(&hadc1);
 80012e4:	4812      	ldr	r0, [pc, #72]	; (8001330 <channel5+0x70>)
 80012e6:	f001 f859 	bl	800239c <HAL_ADC_Stop>
		 	  Voltage=(float)(ADC_VAL[4]*3.3)/4095;
 80012ea:	4b12      	ldr	r3, [pc, #72]	; (8001334 <channel5+0x74>)
 80012ec:	891b      	ldrh	r3, [r3, #8]
 80012ee:	4618      	mov	r0, r3
 80012f0:	f7ff fa06 	bl	8000700 <__aeabi_i2d>
 80012f4:	a30c      	add	r3, pc, #48	; (adr r3, 8001328 <channel5+0x68>)
 80012f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012fa:	f7fe ff85 	bl	8000208 <__aeabi_dmul>
 80012fe:	4602      	mov	r2, r0
 8001300:	460b      	mov	r3, r1
 8001302:	4610      	mov	r0, r2
 8001304:	4619      	mov	r1, r3
 8001306:	f7ff fa65 	bl	80007d4 <__aeabi_d2f>
 800130a:	ee06 0a90 	vmov	s13, r0
 800130e:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8001338 <channel5+0x78>
 8001312:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001316:	4b09      	ldr	r3, [pc, #36]	; (800133c <channel5+0x7c>)
 8001318:	edc3 7a00 	vstr	s15, [r3]
		 	  HAL_Delay(50);
 800131c:	2032      	movs	r0, #50	; 0x32
 800131e:	f000 ff03 	bl	8002128 <HAL_Delay>
}
 8001322:	bf00      	nop
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop
 8001328:	66666666 	.word	0x66666666
 800132c:	400a6666 	.word	0x400a6666
 8001330:	20000028 	.word	0x20000028
 8001334:	200000b8 	.word	0x200000b8
 8001338:	457ff000 	.word	0x457ff000
 800133c:	200000e4 	.word	0x200000e4

08001340 <channel6>:
void channel6(void)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	af00      	add	r7, sp, #0
	          CH_Select6();
 8001344:	f7ff fcb8 	bl	8000cb8 <CH_Select6>
	          HAL_ADC_Start(&hadc1);
 8001348:	4819      	ldr	r0, [pc, #100]	; (80013b0 <channel6+0x70>)
 800134a:	f000 ff55 	bl	80021f8 <HAL_ADC_Start>
		 	  HAL_ADC_PollForConversion(&hadc1,10);
 800134e:	210a      	movs	r1, #10
 8001350:	4817      	ldr	r0, [pc, #92]	; (80013b0 <channel6+0x70>)
 8001352:	f001 f856 	bl	8002402 <HAL_ADC_PollForConversion>
		 	  ADC_VAL[5]=HAL_ADC_GetValue(&hadc1);
 8001356:	4816      	ldr	r0, [pc, #88]	; (80013b0 <channel6+0x70>)
 8001358:	f001 f8de 	bl	8002518 <HAL_ADC_GetValue>
 800135c:	4603      	mov	r3, r0
 800135e:	b29a      	uxth	r2, r3
 8001360:	4b14      	ldr	r3, [pc, #80]	; (80013b4 <channel6+0x74>)
 8001362:	815a      	strh	r2, [r3, #10]
		 	  HAL_ADC_Stop(&hadc1);
 8001364:	4812      	ldr	r0, [pc, #72]	; (80013b0 <channel6+0x70>)
 8001366:	f001 f819 	bl	800239c <HAL_ADC_Stop>
		 	  Voltage=(float)(ADC_VAL[5]*3.3)/4095;
 800136a:	4b12      	ldr	r3, [pc, #72]	; (80013b4 <channel6+0x74>)
 800136c:	895b      	ldrh	r3, [r3, #10]
 800136e:	4618      	mov	r0, r3
 8001370:	f7ff f9c6 	bl	8000700 <__aeabi_i2d>
 8001374:	a30c      	add	r3, pc, #48	; (adr r3, 80013a8 <channel6+0x68>)
 8001376:	e9d3 2300 	ldrd	r2, r3, [r3]
 800137a:	f7fe ff45 	bl	8000208 <__aeabi_dmul>
 800137e:	4602      	mov	r2, r0
 8001380:	460b      	mov	r3, r1
 8001382:	4610      	mov	r0, r2
 8001384:	4619      	mov	r1, r3
 8001386:	f7ff fa25 	bl	80007d4 <__aeabi_d2f>
 800138a:	ee06 0a90 	vmov	s13, r0
 800138e:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 80013b8 <channel6+0x78>
 8001392:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001396:	4b09      	ldr	r3, [pc, #36]	; (80013bc <channel6+0x7c>)
 8001398:	edc3 7a00 	vstr	s15, [r3]
		 	  HAL_Delay(50);
 800139c:	2032      	movs	r0, #50	; 0x32
 800139e:	f000 fec3 	bl	8002128 <HAL_Delay>
}
 80013a2:	bf00      	nop
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop
 80013a8:	66666666 	.word	0x66666666
 80013ac:	400a6666 	.word	0x400a6666
 80013b0:	20000028 	.word	0x20000028
 80013b4:	200000b8 	.word	0x200000b8
 80013b8:	457ff000 	.word	0x457ff000
 80013bc:	200000e4 	.word	0x200000e4

080013c0 <channel7>:
void channel7(void)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	af00      	add	r7, sp, #0
	          CH_Select7();
 80013c4:	f7ff fc98 	bl	8000cf8 <CH_Select7>
	          HAL_ADC_Start(&hadc1);
 80013c8:	4819      	ldr	r0, [pc, #100]	; (8001430 <channel7+0x70>)
 80013ca:	f000 ff15 	bl	80021f8 <HAL_ADC_Start>
		 	  HAL_ADC_PollForConversion(&hadc1,10);
 80013ce:	210a      	movs	r1, #10
 80013d0:	4817      	ldr	r0, [pc, #92]	; (8001430 <channel7+0x70>)
 80013d2:	f001 f816 	bl	8002402 <HAL_ADC_PollForConversion>
		 	  ADC_VAL[6]=HAL_ADC_GetValue(&hadc1);
 80013d6:	4816      	ldr	r0, [pc, #88]	; (8001430 <channel7+0x70>)
 80013d8:	f001 f89e 	bl	8002518 <HAL_ADC_GetValue>
 80013dc:	4603      	mov	r3, r0
 80013de:	b29a      	uxth	r2, r3
 80013e0:	4b14      	ldr	r3, [pc, #80]	; (8001434 <channel7+0x74>)
 80013e2:	819a      	strh	r2, [r3, #12]
		 	  HAL_ADC_Stop(&hadc1);
 80013e4:	4812      	ldr	r0, [pc, #72]	; (8001430 <channel7+0x70>)
 80013e6:	f000 ffd9 	bl	800239c <HAL_ADC_Stop>
		 	  Voltage=(float)(ADC_VAL[6]*3.3)/4095;
 80013ea:	4b12      	ldr	r3, [pc, #72]	; (8001434 <channel7+0x74>)
 80013ec:	899b      	ldrh	r3, [r3, #12]
 80013ee:	4618      	mov	r0, r3
 80013f0:	f7ff f986 	bl	8000700 <__aeabi_i2d>
 80013f4:	a30c      	add	r3, pc, #48	; (adr r3, 8001428 <channel7+0x68>)
 80013f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013fa:	f7fe ff05 	bl	8000208 <__aeabi_dmul>
 80013fe:	4602      	mov	r2, r0
 8001400:	460b      	mov	r3, r1
 8001402:	4610      	mov	r0, r2
 8001404:	4619      	mov	r1, r3
 8001406:	f7ff f9e5 	bl	80007d4 <__aeabi_d2f>
 800140a:	ee06 0a90 	vmov	s13, r0
 800140e:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8001438 <channel7+0x78>
 8001412:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001416:	4b09      	ldr	r3, [pc, #36]	; (800143c <channel7+0x7c>)
 8001418:	edc3 7a00 	vstr	s15, [r3]
		 	  HAL_Delay(50);
 800141c:	2032      	movs	r0, #50	; 0x32
 800141e:	f000 fe83 	bl	8002128 <HAL_Delay>
}
 8001422:	bf00      	nop
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	66666666 	.word	0x66666666
 800142c:	400a6666 	.word	0x400a6666
 8001430:	20000028 	.word	0x20000028
 8001434:	200000b8 	.word	0x200000b8
 8001438:	457ff000 	.word	0x457ff000
 800143c:	200000e4 	.word	0x200000e4

08001440 <channel8>:
void channel8(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	af00      	add	r7, sp, #0
	          CH_Select8();
 8001444:	f7ff fc78 	bl	8000d38 <CH_Select8>
	          HAL_ADC_Start(&hadc1);
 8001448:	4819      	ldr	r0, [pc, #100]	; (80014b0 <channel8+0x70>)
 800144a:	f000 fed5 	bl	80021f8 <HAL_ADC_Start>
		 	  HAL_ADC_PollForConversion(&hadc1,10);
 800144e:	210a      	movs	r1, #10
 8001450:	4817      	ldr	r0, [pc, #92]	; (80014b0 <channel8+0x70>)
 8001452:	f000 ffd6 	bl	8002402 <HAL_ADC_PollForConversion>
		 	  ADC_VAL[7]=HAL_ADC_GetValue(&hadc1);
 8001456:	4816      	ldr	r0, [pc, #88]	; (80014b0 <channel8+0x70>)
 8001458:	f001 f85e 	bl	8002518 <HAL_ADC_GetValue>
 800145c:	4603      	mov	r3, r0
 800145e:	b29a      	uxth	r2, r3
 8001460:	4b14      	ldr	r3, [pc, #80]	; (80014b4 <channel8+0x74>)
 8001462:	81da      	strh	r2, [r3, #14]
		 	  HAL_ADC_Stop(&hadc1);
 8001464:	4812      	ldr	r0, [pc, #72]	; (80014b0 <channel8+0x70>)
 8001466:	f000 ff99 	bl	800239c <HAL_ADC_Stop>
		 	  Voltage=(float)(ADC_VAL[7]*3.3)/4095;
 800146a:	4b12      	ldr	r3, [pc, #72]	; (80014b4 <channel8+0x74>)
 800146c:	89db      	ldrh	r3, [r3, #14]
 800146e:	4618      	mov	r0, r3
 8001470:	f7ff f946 	bl	8000700 <__aeabi_i2d>
 8001474:	a30c      	add	r3, pc, #48	; (adr r3, 80014a8 <channel8+0x68>)
 8001476:	e9d3 2300 	ldrd	r2, r3, [r3]
 800147a:	f7fe fec5 	bl	8000208 <__aeabi_dmul>
 800147e:	4602      	mov	r2, r0
 8001480:	460b      	mov	r3, r1
 8001482:	4610      	mov	r0, r2
 8001484:	4619      	mov	r1, r3
 8001486:	f7ff f9a5 	bl	80007d4 <__aeabi_d2f>
 800148a:	ee06 0a90 	vmov	s13, r0
 800148e:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 80014b8 <channel8+0x78>
 8001492:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001496:	4b09      	ldr	r3, [pc, #36]	; (80014bc <channel8+0x7c>)
 8001498:	edc3 7a00 	vstr	s15, [r3]
		 	  HAL_Delay(50);
 800149c:	2032      	movs	r0, #50	; 0x32
 800149e:	f000 fe43 	bl	8002128 <HAL_Delay>
}
 80014a2:	bf00      	nop
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	66666666 	.word	0x66666666
 80014ac:	400a6666 	.word	0x400a6666
 80014b0:	20000028 	.word	0x20000028
 80014b4:	200000b8 	.word	0x200000b8
 80014b8:	457ff000 	.word	0x457ff000
 80014bc:	200000e4 	.word	0x200000e4

080014c0 <channel9>:
void channel9(void)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	af00      	add	r7, sp, #0
	          CH_Select9();
 80014c4:	f7ff fc58 	bl	8000d78 <CH_Select9>
	          HAL_ADC_Start(&hadc1);
 80014c8:	4819      	ldr	r0, [pc, #100]	; (8001530 <channel9+0x70>)
 80014ca:	f000 fe95 	bl	80021f8 <HAL_ADC_Start>
		 	  HAL_ADC_PollForConversion(&hadc1,10);
 80014ce:	210a      	movs	r1, #10
 80014d0:	4817      	ldr	r0, [pc, #92]	; (8001530 <channel9+0x70>)
 80014d2:	f000 ff96 	bl	8002402 <HAL_ADC_PollForConversion>
		 	  ADC_VAL[8]=HAL_ADC_GetValue(&hadc1);
 80014d6:	4816      	ldr	r0, [pc, #88]	; (8001530 <channel9+0x70>)
 80014d8:	f001 f81e 	bl	8002518 <HAL_ADC_GetValue>
 80014dc:	4603      	mov	r3, r0
 80014de:	b29a      	uxth	r2, r3
 80014e0:	4b14      	ldr	r3, [pc, #80]	; (8001534 <channel9+0x74>)
 80014e2:	821a      	strh	r2, [r3, #16]
		 	  HAL_ADC_Stop(&hadc1);
 80014e4:	4812      	ldr	r0, [pc, #72]	; (8001530 <channel9+0x70>)
 80014e6:	f000 ff59 	bl	800239c <HAL_ADC_Stop>
		 	  Voltage=(float)(ADC_VAL[8]*3.3)/4095;
 80014ea:	4b12      	ldr	r3, [pc, #72]	; (8001534 <channel9+0x74>)
 80014ec:	8a1b      	ldrh	r3, [r3, #16]
 80014ee:	4618      	mov	r0, r3
 80014f0:	f7ff f906 	bl	8000700 <__aeabi_i2d>
 80014f4:	a30c      	add	r3, pc, #48	; (adr r3, 8001528 <channel9+0x68>)
 80014f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014fa:	f7fe fe85 	bl	8000208 <__aeabi_dmul>
 80014fe:	4602      	mov	r2, r0
 8001500:	460b      	mov	r3, r1
 8001502:	4610      	mov	r0, r2
 8001504:	4619      	mov	r1, r3
 8001506:	f7ff f965 	bl	80007d4 <__aeabi_d2f>
 800150a:	ee06 0a90 	vmov	s13, r0
 800150e:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8001538 <channel9+0x78>
 8001512:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001516:	4b09      	ldr	r3, [pc, #36]	; (800153c <channel9+0x7c>)
 8001518:	edc3 7a00 	vstr	s15, [r3]
		 	  HAL_Delay(50);
 800151c:	2032      	movs	r0, #50	; 0x32
 800151e:	f000 fe03 	bl	8002128 <HAL_Delay>
}
 8001522:	bf00      	nop
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	66666666 	.word	0x66666666
 800152c:	400a6666 	.word	0x400a6666
 8001530:	20000028 	.word	0x20000028
 8001534:	200000b8 	.word	0x200000b8
 8001538:	457ff000 	.word	0x457ff000
 800153c:	200000e4 	.word	0x200000e4

08001540 <channel10>:
void channel10(void)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	af00      	add	r7, sp, #0
	          CH_Select10();
 8001544:	f7ff fc38 	bl	8000db8 <CH_Select10>
	          HAL_ADC_Start(&hadc1);
 8001548:	4819      	ldr	r0, [pc, #100]	; (80015b0 <channel10+0x70>)
 800154a:	f000 fe55 	bl	80021f8 <HAL_ADC_Start>
		 	  HAL_ADC_PollForConversion(&hadc1,10);
 800154e:	210a      	movs	r1, #10
 8001550:	4817      	ldr	r0, [pc, #92]	; (80015b0 <channel10+0x70>)
 8001552:	f000 ff56 	bl	8002402 <HAL_ADC_PollForConversion>
		 	  ADC_VAL[9]=HAL_ADC_GetValue(&hadc1);
 8001556:	4816      	ldr	r0, [pc, #88]	; (80015b0 <channel10+0x70>)
 8001558:	f000 ffde 	bl	8002518 <HAL_ADC_GetValue>
 800155c:	4603      	mov	r3, r0
 800155e:	b29a      	uxth	r2, r3
 8001560:	4b14      	ldr	r3, [pc, #80]	; (80015b4 <channel10+0x74>)
 8001562:	825a      	strh	r2, [r3, #18]
		 	  HAL_ADC_Stop(&hadc1);
 8001564:	4812      	ldr	r0, [pc, #72]	; (80015b0 <channel10+0x70>)
 8001566:	f000 ff19 	bl	800239c <HAL_ADC_Stop>
		 	  Voltage=(float)(ADC_VAL[9]*3.3)/4095;
 800156a:	4b12      	ldr	r3, [pc, #72]	; (80015b4 <channel10+0x74>)
 800156c:	8a5b      	ldrh	r3, [r3, #18]
 800156e:	4618      	mov	r0, r3
 8001570:	f7ff f8c6 	bl	8000700 <__aeabi_i2d>
 8001574:	a30c      	add	r3, pc, #48	; (adr r3, 80015a8 <channel10+0x68>)
 8001576:	e9d3 2300 	ldrd	r2, r3, [r3]
 800157a:	f7fe fe45 	bl	8000208 <__aeabi_dmul>
 800157e:	4602      	mov	r2, r0
 8001580:	460b      	mov	r3, r1
 8001582:	4610      	mov	r0, r2
 8001584:	4619      	mov	r1, r3
 8001586:	f7ff f925 	bl	80007d4 <__aeabi_d2f>
 800158a:	ee06 0a90 	vmov	s13, r0
 800158e:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 80015b8 <channel10+0x78>
 8001592:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001596:	4b09      	ldr	r3, [pc, #36]	; (80015bc <channel10+0x7c>)
 8001598:	edc3 7a00 	vstr	s15, [r3]
		 	  HAL_Delay(50);
 800159c:	2032      	movs	r0, #50	; 0x32
 800159e:	f000 fdc3 	bl	8002128 <HAL_Delay>
}
 80015a2:	bf00      	nop
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	66666666 	.word	0x66666666
 80015ac:	400a6666 	.word	0x400a6666
 80015b0:	20000028 	.word	0x20000028
 80015b4:	200000b8 	.word	0x200000b8
 80015b8:	457ff000 	.word	0x457ff000
 80015bc:	200000e4 	.word	0x200000e4

080015c0 <channel11>:
void channel11(void)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	af00      	add	r7, sp, #0
	          CH_Select11();
 80015c4:	f7ff fc18 	bl	8000df8 <CH_Select11>
	          HAL_ADC_Start(&hadc1);
 80015c8:	4819      	ldr	r0, [pc, #100]	; (8001630 <channel11+0x70>)
 80015ca:	f000 fe15 	bl	80021f8 <HAL_ADC_Start>
		 	  HAL_ADC_PollForConversion(&hadc1,10);
 80015ce:	210a      	movs	r1, #10
 80015d0:	4817      	ldr	r0, [pc, #92]	; (8001630 <channel11+0x70>)
 80015d2:	f000 ff16 	bl	8002402 <HAL_ADC_PollForConversion>
		 	  ADC_VAL[10]=HAL_ADC_GetValue(&hadc1);
 80015d6:	4816      	ldr	r0, [pc, #88]	; (8001630 <channel11+0x70>)
 80015d8:	f000 ff9e 	bl	8002518 <HAL_ADC_GetValue>
 80015dc:	4603      	mov	r3, r0
 80015de:	b29a      	uxth	r2, r3
 80015e0:	4b14      	ldr	r3, [pc, #80]	; (8001634 <channel11+0x74>)
 80015e2:	829a      	strh	r2, [r3, #20]
		 	  HAL_ADC_Stop(&hadc1);
 80015e4:	4812      	ldr	r0, [pc, #72]	; (8001630 <channel11+0x70>)
 80015e6:	f000 fed9 	bl	800239c <HAL_ADC_Stop>
		 	  Voltage=(float)(ADC_VAL[10]*3.3)/4095;
 80015ea:	4b12      	ldr	r3, [pc, #72]	; (8001634 <channel11+0x74>)
 80015ec:	8a9b      	ldrh	r3, [r3, #20]
 80015ee:	4618      	mov	r0, r3
 80015f0:	f7ff f886 	bl	8000700 <__aeabi_i2d>
 80015f4:	a30c      	add	r3, pc, #48	; (adr r3, 8001628 <channel11+0x68>)
 80015f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015fa:	f7fe fe05 	bl	8000208 <__aeabi_dmul>
 80015fe:	4602      	mov	r2, r0
 8001600:	460b      	mov	r3, r1
 8001602:	4610      	mov	r0, r2
 8001604:	4619      	mov	r1, r3
 8001606:	f7ff f8e5 	bl	80007d4 <__aeabi_d2f>
 800160a:	ee06 0a90 	vmov	s13, r0
 800160e:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8001638 <channel11+0x78>
 8001612:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001616:	4b09      	ldr	r3, [pc, #36]	; (800163c <channel11+0x7c>)
 8001618:	edc3 7a00 	vstr	s15, [r3]
		 	  HAL_Delay(50);
 800161c:	2032      	movs	r0, #50	; 0x32
 800161e:	f000 fd83 	bl	8002128 <HAL_Delay>
}
 8001622:	bf00      	nop
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	66666666 	.word	0x66666666
 800162c:	400a6666 	.word	0x400a6666
 8001630:	20000028 	.word	0x20000028
 8001634:	200000b8 	.word	0x200000b8
 8001638:	457ff000 	.word	0x457ff000
 800163c:	200000e4 	.word	0x200000e4

08001640 <channel12>:
void channel12(void)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	af00      	add	r7, sp, #0
	          CH_Select12();
 8001644:	f7ff fbf8 	bl	8000e38 <CH_Select12>
	          HAL_ADC_Start(&hadc1);
 8001648:	4819      	ldr	r0, [pc, #100]	; (80016b0 <channel12+0x70>)
 800164a:	f000 fdd5 	bl	80021f8 <HAL_ADC_Start>
		 	  HAL_ADC_PollForConversion(&hadc1,10);
 800164e:	210a      	movs	r1, #10
 8001650:	4817      	ldr	r0, [pc, #92]	; (80016b0 <channel12+0x70>)
 8001652:	f000 fed6 	bl	8002402 <HAL_ADC_PollForConversion>
		 	  ADC_VAL[11]=HAL_ADC_GetValue(&hadc1);
 8001656:	4816      	ldr	r0, [pc, #88]	; (80016b0 <channel12+0x70>)
 8001658:	f000 ff5e 	bl	8002518 <HAL_ADC_GetValue>
 800165c:	4603      	mov	r3, r0
 800165e:	b29a      	uxth	r2, r3
 8001660:	4b14      	ldr	r3, [pc, #80]	; (80016b4 <channel12+0x74>)
 8001662:	82da      	strh	r2, [r3, #22]
		 	  HAL_ADC_Stop(&hadc1);
 8001664:	4812      	ldr	r0, [pc, #72]	; (80016b0 <channel12+0x70>)
 8001666:	f000 fe99 	bl	800239c <HAL_ADC_Stop>
		 	  Voltage=(float)(ADC_VAL[11]*3.3)/4095;
 800166a:	4b12      	ldr	r3, [pc, #72]	; (80016b4 <channel12+0x74>)
 800166c:	8adb      	ldrh	r3, [r3, #22]
 800166e:	4618      	mov	r0, r3
 8001670:	f7ff f846 	bl	8000700 <__aeabi_i2d>
 8001674:	a30c      	add	r3, pc, #48	; (adr r3, 80016a8 <channel12+0x68>)
 8001676:	e9d3 2300 	ldrd	r2, r3, [r3]
 800167a:	f7fe fdc5 	bl	8000208 <__aeabi_dmul>
 800167e:	4602      	mov	r2, r0
 8001680:	460b      	mov	r3, r1
 8001682:	4610      	mov	r0, r2
 8001684:	4619      	mov	r1, r3
 8001686:	f7ff f8a5 	bl	80007d4 <__aeabi_d2f>
 800168a:	ee06 0a90 	vmov	s13, r0
 800168e:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 80016b8 <channel12+0x78>
 8001692:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001696:	4b09      	ldr	r3, [pc, #36]	; (80016bc <channel12+0x7c>)
 8001698:	edc3 7a00 	vstr	s15, [r3]
		 	  HAL_Delay(50);
 800169c:	2032      	movs	r0, #50	; 0x32
 800169e:	f000 fd43 	bl	8002128 <HAL_Delay>
}
 80016a2:	bf00      	nop
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	66666666 	.word	0x66666666
 80016ac:	400a6666 	.word	0x400a6666
 80016b0:	20000028 	.word	0x20000028
 80016b4:	200000b8 	.word	0x200000b8
 80016b8:	457ff000 	.word	0x457ff000
 80016bc:	200000e4 	.word	0x200000e4

080016c0 <channel13>:
void channel13(void)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	af00      	add	r7, sp, #0
	          CH_Select13();
 80016c4:	f7ff fbd8 	bl	8000e78 <CH_Select13>
	          HAL_ADC_Start(&hadc1);
 80016c8:	4819      	ldr	r0, [pc, #100]	; (8001730 <channel13+0x70>)
 80016ca:	f000 fd95 	bl	80021f8 <HAL_ADC_Start>
		 	  HAL_ADC_PollForConversion(&hadc1,10);
 80016ce:	210a      	movs	r1, #10
 80016d0:	4817      	ldr	r0, [pc, #92]	; (8001730 <channel13+0x70>)
 80016d2:	f000 fe96 	bl	8002402 <HAL_ADC_PollForConversion>
		 	  ADC_VAL[12]=HAL_ADC_GetValue(&hadc1);
 80016d6:	4816      	ldr	r0, [pc, #88]	; (8001730 <channel13+0x70>)
 80016d8:	f000 ff1e 	bl	8002518 <HAL_ADC_GetValue>
 80016dc:	4603      	mov	r3, r0
 80016de:	b29a      	uxth	r2, r3
 80016e0:	4b14      	ldr	r3, [pc, #80]	; (8001734 <channel13+0x74>)
 80016e2:	831a      	strh	r2, [r3, #24]
		 	  HAL_ADC_Stop(&hadc1);
 80016e4:	4812      	ldr	r0, [pc, #72]	; (8001730 <channel13+0x70>)
 80016e6:	f000 fe59 	bl	800239c <HAL_ADC_Stop>
		 	  Voltage=(float)(ADC_VAL[12]*3.3)/4095;
 80016ea:	4b12      	ldr	r3, [pc, #72]	; (8001734 <channel13+0x74>)
 80016ec:	8b1b      	ldrh	r3, [r3, #24]
 80016ee:	4618      	mov	r0, r3
 80016f0:	f7ff f806 	bl	8000700 <__aeabi_i2d>
 80016f4:	a30c      	add	r3, pc, #48	; (adr r3, 8001728 <channel13+0x68>)
 80016f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016fa:	f7fe fd85 	bl	8000208 <__aeabi_dmul>
 80016fe:	4602      	mov	r2, r0
 8001700:	460b      	mov	r3, r1
 8001702:	4610      	mov	r0, r2
 8001704:	4619      	mov	r1, r3
 8001706:	f7ff f865 	bl	80007d4 <__aeabi_d2f>
 800170a:	ee06 0a90 	vmov	s13, r0
 800170e:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8001738 <channel13+0x78>
 8001712:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001716:	4b09      	ldr	r3, [pc, #36]	; (800173c <channel13+0x7c>)
 8001718:	edc3 7a00 	vstr	s15, [r3]
		 	  HAL_Delay(50);
 800171c:	2032      	movs	r0, #50	; 0x32
 800171e:	f000 fd03 	bl	8002128 <HAL_Delay>
}
 8001722:	bf00      	nop
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	66666666 	.word	0x66666666
 800172c:	400a6666 	.word	0x400a6666
 8001730:	20000028 	.word	0x20000028
 8001734:	200000b8 	.word	0x200000b8
 8001738:	457ff000 	.word	0x457ff000
 800173c:	200000e4 	.word	0x200000e4

08001740 <channel14>:
void channel14(void)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	af00      	add	r7, sp, #0
	          CH_Select14();
 8001744:	f7ff fbb8 	bl	8000eb8 <CH_Select14>
	          HAL_ADC_Start(&hadc3);
 8001748:	4819      	ldr	r0, [pc, #100]	; (80017b0 <channel14+0x70>)
 800174a:	f000 fd55 	bl	80021f8 <HAL_ADC_Start>
		 	  HAL_ADC_PollForConversion(&hadc3,10);
 800174e:	210a      	movs	r1, #10
 8001750:	4817      	ldr	r0, [pc, #92]	; (80017b0 <channel14+0x70>)
 8001752:	f000 fe56 	bl	8002402 <HAL_ADC_PollForConversion>
		 	  ADC_VAL[13]=HAL_ADC_GetValue(&hadc3);
 8001756:	4816      	ldr	r0, [pc, #88]	; (80017b0 <channel14+0x70>)
 8001758:	f000 fede 	bl	8002518 <HAL_ADC_GetValue>
 800175c:	4603      	mov	r3, r0
 800175e:	b29a      	uxth	r2, r3
 8001760:	4b14      	ldr	r3, [pc, #80]	; (80017b4 <channel14+0x74>)
 8001762:	835a      	strh	r2, [r3, #26]
		 	  HAL_ADC_Stop(&hadc3);
 8001764:	4812      	ldr	r0, [pc, #72]	; (80017b0 <channel14+0x70>)
 8001766:	f000 fe19 	bl	800239c <HAL_ADC_Stop>
		 	  Voltage=(float)(ADC_VAL[13]*3.3)/4095;
 800176a:	4b12      	ldr	r3, [pc, #72]	; (80017b4 <channel14+0x74>)
 800176c:	8b5b      	ldrh	r3, [r3, #26]
 800176e:	4618      	mov	r0, r3
 8001770:	f7fe ffc6 	bl	8000700 <__aeabi_i2d>
 8001774:	a30c      	add	r3, pc, #48	; (adr r3, 80017a8 <channel14+0x68>)
 8001776:	e9d3 2300 	ldrd	r2, r3, [r3]
 800177a:	f7fe fd45 	bl	8000208 <__aeabi_dmul>
 800177e:	4602      	mov	r2, r0
 8001780:	460b      	mov	r3, r1
 8001782:	4610      	mov	r0, r2
 8001784:	4619      	mov	r1, r3
 8001786:	f7ff f825 	bl	80007d4 <__aeabi_d2f>
 800178a:	ee06 0a90 	vmov	s13, r0
 800178e:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 80017b8 <channel14+0x78>
 8001792:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001796:	4b09      	ldr	r3, [pc, #36]	; (80017bc <channel14+0x7c>)
 8001798:	edc3 7a00 	vstr	s15, [r3]
		 	  HAL_Delay(50);
 800179c:	2032      	movs	r0, #50	; 0x32
 800179e:	f000 fcc3 	bl	8002128 <HAL_Delay>
}
 80017a2:	bf00      	nop
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	bf00      	nop
 80017a8:	66666666 	.word	0x66666666
 80017ac:	400a6666 	.word	0x400a6666
 80017b0:	20000070 	.word	0x20000070
 80017b4:	200000b8 	.word	0x200000b8
 80017b8:	457ff000 	.word	0x457ff000
 80017bc:	200000e4 	.word	0x200000e4

080017c0 <channel15>:
void channel15(void)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	af00      	add	r7, sp, #0
	          CH_Select15();
 80017c4:	f7ff fb98 	bl	8000ef8 <CH_Select15>
	          HAL_ADC_Start(&hadc3);
 80017c8:	4819      	ldr	r0, [pc, #100]	; (8001830 <channel15+0x70>)
 80017ca:	f000 fd15 	bl	80021f8 <HAL_ADC_Start>
		 	  HAL_ADC_PollForConversion(&hadc3,10);
 80017ce:	210a      	movs	r1, #10
 80017d0:	4817      	ldr	r0, [pc, #92]	; (8001830 <channel15+0x70>)
 80017d2:	f000 fe16 	bl	8002402 <HAL_ADC_PollForConversion>
		 	  ADC_VAL[14]=HAL_ADC_GetValue(&hadc3);
 80017d6:	4816      	ldr	r0, [pc, #88]	; (8001830 <channel15+0x70>)
 80017d8:	f000 fe9e 	bl	8002518 <HAL_ADC_GetValue>
 80017dc:	4603      	mov	r3, r0
 80017de:	b29a      	uxth	r2, r3
 80017e0:	4b14      	ldr	r3, [pc, #80]	; (8001834 <channel15+0x74>)
 80017e2:	839a      	strh	r2, [r3, #28]
		 	  HAL_ADC_Stop(&hadc3);
 80017e4:	4812      	ldr	r0, [pc, #72]	; (8001830 <channel15+0x70>)
 80017e6:	f000 fdd9 	bl	800239c <HAL_ADC_Stop>
		 	  Voltage=(float)(ADC_VAL[14]*3.3)/4095;
 80017ea:	4b12      	ldr	r3, [pc, #72]	; (8001834 <channel15+0x74>)
 80017ec:	8b9b      	ldrh	r3, [r3, #28]
 80017ee:	4618      	mov	r0, r3
 80017f0:	f7fe ff86 	bl	8000700 <__aeabi_i2d>
 80017f4:	a30c      	add	r3, pc, #48	; (adr r3, 8001828 <channel15+0x68>)
 80017f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017fa:	f7fe fd05 	bl	8000208 <__aeabi_dmul>
 80017fe:	4602      	mov	r2, r0
 8001800:	460b      	mov	r3, r1
 8001802:	4610      	mov	r0, r2
 8001804:	4619      	mov	r1, r3
 8001806:	f7fe ffe5 	bl	80007d4 <__aeabi_d2f>
 800180a:	ee06 0a90 	vmov	s13, r0
 800180e:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8001838 <channel15+0x78>
 8001812:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001816:	4b09      	ldr	r3, [pc, #36]	; (800183c <channel15+0x7c>)
 8001818:	edc3 7a00 	vstr	s15, [r3]
		 	  HAL_Delay(50);
 800181c:	2032      	movs	r0, #50	; 0x32
 800181e:	f000 fc83 	bl	8002128 <HAL_Delay>
}
 8001822:	bf00      	nop
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	66666666 	.word	0x66666666
 800182c:	400a6666 	.word	0x400a6666
 8001830:	20000070 	.word	0x20000070
 8001834:	200000b8 	.word	0x200000b8
 8001838:	457ff000 	.word	0x457ff000
 800183c:	200000e4 	.word	0x200000e4

08001840 <channel16>:
void channel16(void)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	af00      	add	r7, sp, #0
	          CH_Select16();
 8001844:	f7ff fb78 	bl	8000f38 <CH_Select16>
	          HAL_ADC_Start(&hadc3);
 8001848:	4819      	ldr	r0, [pc, #100]	; (80018b0 <channel16+0x70>)
 800184a:	f000 fcd5 	bl	80021f8 <HAL_ADC_Start>
		 	  HAL_ADC_PollForConversion(&hadc3,1000);
 800184e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001852:	4817      	ldr	r0, [pc, #92]	; (80018b0 <channel16+0x70>)
 8001854:	f000 fdd5 	bl	8002402 <HAL_ADC_PollForConversion>
		 	  ADC_VAL[15]=HAL_ADC_GetValue(&hadc3);
 8001858:	4815      	ldr	r0, [pc, #84]	; (80018b0 <channel16+0x70>)
 800185a:	f000 fe5d 	bl	8002518 <HAL_ADC_GetValue>
 800185e:	4603      	mov	r3, r0
 8001860:	b29a      	uxth	r2, r3
 8001862:	4b14      	ldr	r3, [pc, #80]	; (80018b4 <channel16+0x74>)
 8001864:	83da      	strh	r2, [r3, #30]
		 	  HAL_ADC_Stop(&hadc3);
 8001866:	4812      	ldr	r0, [pc, #72]	; (80018b0 <channel16+0x70>)
 8001868:	f000 fd98 	bl	800239c <HAL_ADC_Stop>
		 	  Voltage=(float)(ADC_VAL[15]*3.3)/4095;
 800186c:	4b11      	ldr	r3, [pc, #68]	; (80018b4 <channel16+0x74>)
 800186e:	8bdb      	ldrh	r3, [r3, #30]
 8001870:	4618      	mov	r0, r3
 8001872:	f7fe ff45 	bl	8000700 <__aeabi_i2d>
 8001876:	a30c      	add	r3, pc, #48	; (adr r3, 80018a8 <channel16+0x68>)
 8001878:	e9d3 2300 	ldrd	r2, r3, [r3]
 800187c:	f7fe fcc4 	bl	8000208 <__aeabi_dmul>
 8001880:	4602      	mov	r2, r0
 8001882:	460b      	mov	r3, r1
 8001884:	4610      	mov	r0, r2
 8001886:	4619      	mov	r1, r3
 8001888:	f7fe ffa4 	bl	80007d4 <__aeabi_d2f>
 800188c:	ee06 0a90 	vmov	s13, r0
 8001890:	ed9f 7a09 	vldr	s14, [pc, #36]	; 80018b8 <channel16+0x78>
 8001894:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001898:	4b08      	ldr	r3, [pc, #32]	; (80018bc <channel16+0x7c>)
 800189a:	edc3 7a00 	vstr	s15, [r3]
		 	  HAL_Delay(50);
 800189e:	2032      	movs	r0, #50	; 0x32
 80018a0:	f000 fc42 	bl	8002128 <HAL_Delay>
}
 80018a4:	bf00      	nop
 80018a6:	bd80      	pop	{r7, pc}
 80018a8:	66666666 	.word	0x66666666
 80018ac:	400a6666 	.word	0x400a6666
 80018b0:	20000070 	.word	0x20000070
 80018b4:	200000b8 	.word	0x200000b8
 80018b8:	457ff000 	.word	0x457ff000
 80018bc:	200000e4 	.word	0x200000e4

080018c0 <channel17>:
void channel17(void)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	af00      	add	r7, sp, #0
	          CH_Select17();
 80018c4:	f7ff fb58 	bl	8000f78 <CH_Select17>
	          HAL_ADC_Start(&hadc3);
 80018c8:	4819      	ldr	r0, [pc, #100]	; (8001930 <channel17+0x70>)
 80018ca:	f000 fc95 	bl	80021f8 <HAL_ADC_Start>
		 	  HAL_ADC_PollForConversion(&hadc3,10);
 80018ce:	210a      	movs	r1, #10
 80018d0:	4817      	ldr	r0, [pc, #92]	; (8001930 <channel17+0x70>)
 80018d2:	f000 fd96 	bl	8002402 <HAL_ADC_PollForConversion>
		 	  ADC_VAL[16]=HAL_ADC_GetValue(&hadc3);
 80018d6:	4816      	ldr	r0, [pc, #88]	; (8001930 <channel17+0x70>)
 80018d8:	f000 fe1e 	bl	8002518 <HAL_ADC_GetValue>
 80018dc:	4603      	mov	r3, r0
 80018de:	b29a      	uxth	r2, r3
 80018e0:	4b14      	ldr	r3, [pc, #80]	; (8001934 <channel17+0x74>)
 80018e2:	841a      	strh	r2, [r3, #32]
		 	  HAL_ADC_Stop(&hadc3);
 80018e4:	4812      	ldr	r0, [pc, #72]	; (8001930 <channel17+0x70>)
 80018e6:	f000 fd59 	bl	800239c <HAL_ADC_Stop>
		 	  Voltage=(float)(ADC_VAL[16]*3.3)/4095;
 80018ea:	4b12      	ldr	r3, [pc, #72]	; (8001934 <channel17+0x74>)
 80018ec:	8c1b      	ldrh	r3, [r3, #32]
 80018ee:	4618      	mov	r0, r3
 80018f0:	f7fe ff06 	bl	8000700 <__aeabi_i2d>
 80018f4:	a30c      	add	r3, pc, #48	; (adr r3, 8001928 <channel17+0x68>)
 80018f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018fa:	f7fe fc85 	bl	8000208 <__aeabi_dmul>
 80018fe:	4602      	mov	r2, r0
 8001900:	460b      	mov	r3, r1
 8001902:	4610      	mov	r0, r2
 8001904:	4619      	mov	r1, r3
 8001906:	f7fe ff65 	bl	80007d4 <__aeabi_d2f>
 800190a:	ee06 0a90 	vmov	s13, r0
 800190e:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8001938 <channel17+0x78>
 8001912:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001916:	4b09      	ldr	r3, [pc, #36]	; (800193c <channel17+0x7c>)
 8001918:	edc3 7a00 	vstr	s15, [r3]
		 	  HAL_Delay(50);
 800191c:	2032      	movs	r0, #50	; 0x32
 800191e:	f000 fc03 	bl	8002128 <HAL_Delay>
}
 8001922:	bf00      	nop
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	66666666 	.word	0x66666666
 800192c:	400a6666 	.word	0x400a6666
 8001930:	20000070 	.word	0x20000070
 8001934:	200000b8 	.word	0x200000b8
 8001938:	457ff000 	.word	0x457ff000
 800193c:	200000e4 	.word	0x200000e4

08001940 <channel18>:
void channel18(void)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	af00      	add	r7, sp, #0
	          CH_Select18();
 8001944:	f7ff fb38 	bl	8000fb8 <CH_Select18>
	          HAL_ADC_Start(&hadc3);
 8001948:	4819      	ldr	r0, [pc, #100]	; (80019b0 <channel18+0x70>)
 800194a:	f000 fc55 	bl	80021f8 <HAL_ADC_Start>
		 	  HAL_ADC_PollForConversion(&hadc3,10);
 800194e:	210a      	movs	r1, #10
 8001950:	4817      	ldr	r0, [pc, #92]	; (80019b0 <channel18+0x70>)
 8001952:	f000 fd56 	bl	8002402 <HAL_ADC_PollForConversion>
		 	  ADC_VAL[17]=HAL_ADC_GetValue(&hadc3);
 8001956:	4816      	ldr	r0, [pc, #88]	; (80019b0 <channel18+0x70>)
 8001958:	f000 fdde 	bl	8002518 <HAL_ADC_GetValue>
 800195c:	4603      	mov	r3, r0
 800195e:	b29a      	uxth	r2, r3
 8001960:	4b14      	ldr	r3, [pc, #80]	; (80019b4 <channel18+0x74>)
 8001962:	845a      	strh	r2, [r3, #34]	; 0x22
		 	  HAL_ADC_Stop(&hadc3);
 8001964:	4812      	ldr	r0, [pc, #72]	; (80019b0 <channel18+0x70>)
 8001966:	f000 fd19 	bl	800239c <HAL_ADC_Stop>
		 	  Voltage=(float)(ADC_VAL[17]*3.3)/4095;
 800196a:	4b12      	ldr	r3, [pc, #72]	; (80019b4 <channel18+0x74>)
 800196c:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800196e:	4618      	mov	r0, r3
 8001970:	f7fe fec6 	bl	8000700 <__aeabi_i2d>
 8001974:	a30c      	add	r3, pc, #48	; (adr r3, 80019a8 <channel18+0x68>)
 8001976:	e9d3 2300 	ldrd	r2, r3, [r3]
 800197a:	f7fe fc45 	bl	8000208 <__aeabi_dmul>
 800197e:	4602      	mov	r2, r0
 8001980:	460b      	mov	r3, r1
 8001982:	4610      	mov	r0, r2
 8001984:	4619      	mov	r1, r3
 8001986:	f7fe ff25 	bl	80007d4 <__aeabi_d2f>
 800198a:	ee06 0a90 	vmov	s13, r0
 800198e:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 80019b8 <channel18+0x78>
 8001992:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001996:	4b09      	ldr	r3, [pc, #36]	; (80019bc <channel18+0x7c>)
 8001998:	edc3 7a00 	vstr	s15, [r3]
		 	  HAL_Delay(50);
 800199c:	2032      	movs	r0, #50	; 0x32
 800199e:	f000 fbc3 	bl	8002128 <HAL_Delay>
}
 80019a2:	bf00      	nop
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	66666666 	.word	0x66666666
 80019ac:	400a6666 	.word	0x400a6666
 80019b0:	20000070 	.word	0x20000070
 80019b4:	200000b8 	.word	0x200000b8
 80019b8:	457ff000 	.word	0x457ff000
 80019bc:	200000e4 	.word	0x200000e4

080019c0 <channel19>:
void channel19(void)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	af00      	add	r7, sp, #0
	          CH_Select19();
 80019c4:	f7ff fb18 	bl	8000ff8 <CH_Select19>
	          HAL_ADC_Start(&hadc3);
 80019c8:	4819      	ldr	r0, [pc, #100]	; (8001a30 <channel19+0x70>)
 80019ca:	f000 fc15 	bl	80021f8 <HAL_ADC_Start>
		 	  HAL_ADC_PollForConversion(&hadc3,10);
 80019ce:	210a      	movs	r1, #10
 80019d0:	4817      	ldr	r0, [pc, #92]	; (8001a30 <channel19+0x70>)
 80019d2:	f000 fd16 	bl	8002402 <HAL_ADC_PollForConversion>
		 	  ADC_VAL[18]=HAL_ADC_GetValue(&hadc3);
 80019d6:	4816      	ldr	r0, [pc, #88]	; (8001a30 <channel19+0x70>)
 80019d8:	f000 fd9e 	bl	8002518 <HAL_ADC_GetValue>
 80019dc:	4603      	mov	r3, r0
 80019de:	b29a      	uxth	r2, r3
 80019e0:	4b14      	ldr	r3, [pc, #80]	; (8001a34 <channel19+0x74>)
 80019e2:	849a      	strh	r2, [r3, #36]	; 0x24
		 	  HAL_ADC_Stop(&hadc3);
 80019e4:	4812      	ldr	r0, [pc, #72]	; (8001a30 <channel19+0x70>)
 80019e6:	f000 fcd9 	bl	800239c <HAL_ADC_Stop>
		 	  Voltage=(float)(ADC_VAL[18]*3.3)/4095;
 80019ea:	4b12      	ldr	r3, [pc, #72]	; (8001a34 <channel19+0x74>)
 80019ec:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80019ee:	4618      	mov	r0, r3
 80019f0:	f7fe fe86 	bl	8000700 <__aeabi_i2d>
 80019f4:	a30c      	add	r3, pc, #48	; (adr r3, 8001a28 <channel19+0x68>)
 80019f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019fa:	f7fe fc05 	bl	8000208 <__aeabi_dmul>
 80019fe:	4602      	mov	r2, r0
 8001a00:	460b      	mov	r3, r1
 8001a02:	4610      	mov	r0, r2
 8001a04:	4619      	mov	r1, r3
 8001a06:	f7fe fee5 	bl	80007d4 <__aeabi_d2f>
 8001a0a:	ee06 0a90 	vmov	s13, r0
 8001a0e:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8001a38 <channel19+0x78>
 8001a12:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001a16:	4b09      	ldr	r3, [pc, #36]	; (8001a3c <channel19+0x7c>)
 8001a18:	edc3 7a00 	vstr	s15, [r3]
		 	  HAL_Delay(50);
 8001a1c:	2032      	movs	r0, #50	; 0x32
 8001a1e:	f000 fb83 	bl	8002128 <HAL_Delay>
}
 8001a22:	bf00      	nop
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	bf00      	nop
 8001a28:	66666666 	.word	0x66666666
 8001a2c:	400a6666 	.word	0x400a6666
 8001a30:	20000070 	.word	0x20000070
 8001a34:	200000b8 	.word	0x200000b8
 8001a38:	457ff000 	.word	0x457ff000
 8001a3c:	200000e4 	.word	0x200000e4

08001a40 <channel20>:
void channel20(void)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	af00      	add	r7, sp, #0
	          CH_Select20();
 8001a44:	f7ff faf8 	bl	8001038 <CH_Select20>
	          HAL_ADC_Start(&hadc3);
 8001a48:	4819      	ldr	r0, [pc, #100]	; (8001ab0 <channel20+0x70>)
 8001a4a:	f000 fbd5 	bl	80021f8 <HAL_ADC_Start>
		 	  HAL_ADC_PollForConversion(&hadc3,10);
 8001a4e:	210a      	movs	r1, #10
 8001a50:	4817      	ldr	r0, [pc, #92]	; (8001ab0 <channel20+0x70>)
 8001a52:	f000 fcd6 	bl	8002402 <HAL_ADC_PollForConversion>
		 	  ADC_VAL[19]=HAL_ADC_GetValue(&hadc3);
 8001a56:	4816      	ldr	r0, [pc, #88]	; (8001ab0 <channel20+0x70>)
 8001a58:	f000 fd5e 	bl	8002518 <HAL_ADC_GetValue>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	b29a      	uxth	r2, r3
 8001a60:	4b14      	ldr	r3, [pc, #80]	; (8001ab4 <channel20+0x74>)
 8001a62:	84da      	strh	r2, [r3, #38]	; 0x26
		 	  HAL_ADC_Stop(&hadc3);
 8001a64:	4812      	ldr	r0, [pc, #72]	; (8001ab0 <channel20+0x70>)
 8001a66:	f000 fc99 	bl	800239c <HAL_ADC_Stop>
		 	  Voltage=(float)(ADC_VAL[19]*3.3)/4095;
 8001a6a:	4b12      	ldr	r3, [pc, #72]	; (8001ab4 <channel20+0x74>)
 8001a6c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f7fe fe46 	bl	8000700 <__aeabi_i2d>
 8001a74:	a30c      	add	r3, pc, #48	; (adr r3, 8001aa8 <channel20+0x68>)
 8001a76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a7a:	f7fe fbc5 	bl	8000208 <__aeabi_dmul>
 8001a7e:	4602      	mov	r2, r0
 8001a80:	460b      	mov	r3, r1
 8001a82:	4610      	mov	r0, r2
 8001a84:	4619      	mov	r1, r3
 8001a86:	f7fe fea5 	bl	80007d4 <__aeabi_d2f>
 8001a8a:	ee06 0a90 	vmov	s13, r0
 8001a8e:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8001ab8 <channel20+0x78>
 8001a92:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001a96:	4b09      	ldr	r3, [pc, #36]	; (8001abc <channel20+0x7c>)
 8001a98:	edc3 7a00 	vstr	s15, [r3]
		 	  HAL_Delay(50);
 8001a9c:	2032      	movs	r0, #50	; 0x32
 8001a9e:	f000 fb43 	bl	8002128 <HAL_Delay>
}
 8001aa2:	bf00      	nop
 8001aa4:	bd80      	pop	{r7, pc}
 8001aa6:	bf00      	nop
 8001aa8:	66666666 	.word	0x66666666
 8001aac:	400a6666 	.word	0x400a6666
 8001ab0:	20000070 	.word	0x20000070
 8001ab4:	200000b8 	.word	0x200000b8
 8001ab8:	457ff000 	.word	0x457ff000
 8001abc:	200000e4 	.word	0x200000e4

08001ac0 <channel21>:
void channel21(void)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	af00      	add	r7, sp, #0
	          CH_Select21();
 8001ac4:	f7ff fad8 	bl	8001078 <CH_Select21>
	          HAL_ADC_Start(&hadc3);
 8001ac8:	4819      	ldr	r0, [pc, #100]	; (8001b30 <channel21+0x70>)
 8001aca:	f000 fb95 	bl	80021f8 <HAL_ADC_Start>
		 	  HAL_ADC_PollForConversion(&hadc3,10);
 8001ace:	210a      	movs	r1, #10
 8001ad0:	4817      	ldr	r0, [pc, #92]	; (8001b30 <channel21+0x70>)
 8001ad2:	f000 fc96 	bl	8002402 <HAL_ADC_PollForConversion>
		 	  ADC_VAL[20]=HAL_ADC_GetValue(&hadc3);
 8001ad6:	4816      	ldr	r0, [pc, #88]	; (8001b30 <channel21+0x70>)
 8001ad8:	f000 fd1e 	bl	8002518 <HAL_ADC_GetValue>
 8001adc:	4603      	mov	r3, r0
 8001ade:	b29a      	uxth	r2, r3
 8001ae0:	4b14      	ldr	r3, [pc, #80]	; (8001b34 <channel21+0x74>)
 8001ae2:	851a      	strh	r2, [r3, #40]	; 0x28
		 	  HAL_ADC_Stop(&hadc3);
 8001ae4:	4812      	ldr	r0, [pc, #72]	; (8001b30 <channel21+0x70>)
 8001ae6:	f000 fc59 	bl	800239c <HAL_ADC_Stop>
		 	  Voltage=(float)(ADC_VAL[20]*3.3)/4095;
 8001aea:	4b12      	ldr	r3, [pc, #72]	; (8001b34 <channel21+0x74>)
 8001aec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001aee:	4618      	mov	r0, r3
 8001af0:	f7fe fe06 	bl	8000700 <__aeabi_i2d>
 8001af4:	a30c      	add	r3, pc, #48	; (adr r3, 8001b28 <channel21+0x68>)
 8001af6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001afa:	f7fe fb85 	bl	8000208 <__aeabi_dmul>
 8001afe:	4602      	mov	r2, r0
 8001b00:	460b      	mov	r3, r1
 8001b02:	4610      	mov	r0, r2
 8001b04:	4619      	mov	r1, r3
 8001b06:	f7fe fe65 	bl	80007d4 <__aeabi_d2f>
 8001b0a:	ee06 0a90 	vmov	s13, r0
 8001b0e:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8001b38 <channel21+0x78>
 8001b12:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b16:	4b09      	ldr	r3, [pc, #36]	; (8001b3c <channel21+0x7c>)
 8001b18:	edc3 7a00 	vstr	s15, [r3]
		 	  HAL_Delay(50);
 8001b1c:	2032      	movs	r0, #50	; 0x32
 8001b1e:	f000 fb03 	bl	8002128 <HAL_Delay>
}
 8001b22:	bf00      	nop
 8001b24:	bd80      	pop	{r7, pc}
 8001b26:	bf00      	nop
 8001b28:	66666666 	.word	0x66666666
 8001b2c:	400a6666 	.word	0x400a6666
 8001b30:	20000070 	.word	0x20000070
 8001b34:	200000b8 	.word	0x200000b8
 8001b38:	457ff000 	.word	0x457ff000
 8001b3c:	200000e4 	.word	0x200000e4

08001b40 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b44:	f000 fa7e 	bl	8002044 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b48:	f000 f832 	bl	8001bb0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b4c:	f000 f910 	bl	8001d70 <MX_GPIO_Init>
  MX_ADC1_Init();
 8001b50:	f000 f89a 	bl	8001c88 <MX_ADC1_Init>
  MX_ADC3_Init();
 8001b54:	f000 f8d2 	bl	8001cfc <MX_ADC3_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	    channel1();
 8001b58:	f7ff faae 	bl	80010b8 <channel1>
	  	channel2();
 8001b5c:	f7ff faf0 	bl	8001140 <channel2>
	  	channel3();
 8001b60:	f7ff fb2e 	bl	80011c0 <channel3>
	  	channel4();
 8001b64:	f7ff fb6c 	bl	8001240 <channel4>
	  	channel5();
 8001b68:	f7ff fbaa 	bl	80012c0 <channel5>
	  	channel6();
 8001b6c:	f7ff fbe8 	bl	8001340 <channel6>
	  	channel7();
 8001b70:	f7ff fc26 	bl	80013c0 <channel7>
	  	channel8();
 8001b74:	f7ff fc64 	bl	8001440 <channel8>
	  	channel9();
 8001b78:	f7ff fca2 	bl	80014c0 <channel9>
	  	channel10();
 8001b7c:	f7ff fce0 	bl	8001540 <channel10>
	  	channel11();
 8001b80:	f7ff fd1e 	bl	80015c0 <channel11>
	  	channel12();
 8001b84:	f7ff fd5c 	bl	8001640 <channel12>
	  	channel13();
 8001b88:	f7ff fd9a 	bl	80016c0 <channel13>
	  	channel14();
 8001b8c:	f7ff fdd8 	bl	8001740 <channel14>
	  	channel15();
 8001b90:	f7ff fe16 	bl	80017c0 <channel15>
	  	channel16();
 8001b94:	f7ff fe54 	bl	8001840 <channel16>
	  	channel17();
 8001b98:	f7ff fe92 	bl	80018c0 <channel17>
	  	channel18();
 8001b9c:	f7ff fed0 	bl	8001940 <channel18>
	  	channel19();
 8001ba0:	f7ff ff0e 	bl	80019c0 <channel19>
	  	channel20();
 8001ba4:	f7ff ff4c 	bl	8001a40 <channel20>
	  	channel21();
 8001ba8:	f7ff ff8a 	bl	8001ac0 <channel21>
	    channel1();
 8001bac:	e7d4      	b.n	8001b58 <main+0x18>
	...

08001bb0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b094      	sub	sp, #80	; 0x50
 8001bb4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001bb6:	f107 031c 	add.w	r3, r7, #28
 8001bba:	2234      	movs	r2, #52	; 0x34
 8001bbc:	2100      	movs	r1, #0
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	f001 ff38 	bl	8003a34 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001bc4:	f107 0308 	add.w	r3, r7, #8
 8001bc8:	2200      	movs	r2, #0
 8001bca:	601a      	str	r2, [r3, #0]
 8001bcc:	605a      	str	r2, [r3, #4]
 8001bce:	609a      	str	r2, [r3, #8]
 8001bd0:	60da      	str	r2, [r3, #12]
 8001bd2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	607b      	str	r3, [r7, #4]
 8001bd8:	4b29      	ldr	r3, [pc, #164]	; (8001c80 <SystemClock_Config+0xd0>)
 8001bda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bdc:	4a28      	ldr	r2, [pc, #160]	; (8001c80 <SystemClock_Config+0xd0>)
 8001bde:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001be2:	6413      	str	r3, [r2, #64]	; 0x40
 8001be4:	4b26      	ldr	r3, [pc, #152]	; (8001c80 <SystemClock_Config+0xd0>)
 8001be6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001be8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bec:	607b      	str	r3, [r7, #4]
 8001bee:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	603b      	str	r3, [r7, #0]
 8001bf4:	4b23      	ldr	r3, [pc, #140]	; (8001c84 <SystemClock_Config+0xd4>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4a22      	ldr	r2, [pc, #136]	; (8001c84 <SystemClock_Config+0xd4>)
 8001bfa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001bfe:	6013      	str	r3, [r2, #0]
 8001c00:	4b20      	ldr	r3, [pc, #128]	; (8001c84 <SystemClock_Config+0xd4>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001c08:	603b      	str	r3, [r7, #0]
 8001c0a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001c10:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001c14:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c16:	2302      	movs	r3, #2
 8001c18:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001c1a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001c1e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001c20:	2304      	movs	r3, #4
 8001c22:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 167;
 8001c24:	23a7      	movs	r3, #167	; 0xa7
 8001c26:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001c28:	2302      	movs	r3, #2
 8001c2a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001c2c:	2302      	movs	r3, #2
 8001c2e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001c30:	2302      	movs	r3, #2
 8001c32:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c34:	f107 031c 	add.w	r3, r7, #28
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f001 fc39 	bl	80034b0 <HAL_RCC_OscConfig>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d001      	beq.n	8001c48 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001c44:	f000 f8d8 	bl	8001df8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c48:	230f      	movs	r3, #15
 8001c4a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c4c:	2302      	movs	r3, #2
 8001c4e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c50:	2300      	movs	r3, #0
 8001c52:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001c54:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001c58:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001c5a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c5e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001c60:	f107 0308 	add.w	r3, r7, #8
 8001c64:	2105      	movs	r1, #5
 8001c66:	4618      	mov	r0, r3
 8001c68:	f001 f90c 	bl	8002e84 <HAL_RCC_ClockConfig>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d001      	beq.n	8001c76 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001c72:	f000 f8c1 	bl	8001df8 <Error_Handler>
  }
}
 8001c76:	bf00      	nop
 8001c78:	3750      	adds	r7, #80	; 0x50
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	40023800 	.word	0x40023800
 8001c84:	40007000 	.word	0x40007000

08001c88 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	af00      	add	r7, sp, #0

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001c8c:	4b18      	ldr	r3, [pc, #96]	; (8001cf0 <MX_ADC1_Init+0x68>)
 8001c8e:	4a19      	ldr	r2, [pc, #100]	; (8001cf4 <MX_ADC1_Init+0x6c>)
 8001c90:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001c92:	4b17      	ldr	r3, [pc, #92]	; (8001cf0 <MX_ADC1_Init+0x68>)
 8001c94:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001c98:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001c9a:	4b15      	ldr	r3, [pc, #84]	; (8001cf0 <MX_ADC1_Init+0x68>)
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001ca0:	4b13      	ldr	r3, [pc, #76]	; (8001cf0 <MX_ADC1_Init+0x68>)
 8001ca2:	2201      	movs	r2, #1
 8001ca4:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001ca6:	4b12      	ldr	r3, [pc, #72]	; (8001cf0 <MX_ADC1_Init+0x68>)
 8001ca8:	2201      	movs	r2, #1
 8001caa:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001cac:	4b10      	ldr	r3, [pc, #64]	; (8001cf0 <MX_ADC1_Init+0x68>)
 8001cae:	2200      	movs	r2, #0
 8001cb0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001cb4:	4b0e      	ldr	r3, [pc, #56]	; (8001cf0 <MX_ADC1_Init+0x68>)
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001cba:	4b0d      	ldr	r3, [pc, #52]	; (8001cf0 <MX_ADC1_Init+0x68>)
 8001cbc:	4a0e      	ldr	r2, [pc, #56]	; (8001cf8 <MX_ADC1_Init+0x70>)
 8001cbe:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001cc0:	4b0b      	ldr	r3, [pc, #44]	; (8001cf0 <MX_ADC1_Init+0x68>)
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 13;
 8001cc6:	4b0a      	ldr	r3, [pc, #40]	; (8001cf0 <MX_ADC1_Init+0x68>)
 8001cc8:	220d      	movs	r2, #13
 8001cca:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001ccc:	4b08      	ldr	r3, [pc, #32]	; (8001cf0 <MX_ADC1_Init+0x68>)
 8001cce:	2200      	movs	r2, #0
 8001cd0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001cd4:	4b06      	ldr	r3, [pc, #24]	; (8001cf0 <MX_ADC1_Init+0x68>)
 8001cd6:	2201      	movs	r2, #1
 8001cd8:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001cda:	4805      	ldr	r0, [pc, #20]	; (8001cf0 <MX_ADC1_Init+0x68>)
 8001cdc:	f000 fa48 	bl	8002170 <HAL_ADC_Init>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d001      	beq.n	8001cea <MX_ADC1_Init+0x62>
  {
    Error_Handler();
 8001ce6:	f000 f887 	bl	8001df8 <Error_Handler>
  }
}
 8001cea:	bf00      	nop
 8001cec:	bd80      	pop	{r7, pc}
 8001cee:	bf00      	nop
 8001cf0:	20000028 	.word	0x20000028
 8001cf4:	40012000 	.word	0x40012000
 8001cf8:	0f000001 	.word	0x0f000001

08001cfc <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
 void MX_ADC3_Init(void)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	af00      	add	r7, sp, #0

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8001d00:	4b18      	ldr	r3, [pc, #96]	; (8001d64 <MX_ADC3_Init+0x68>)
 8001d02:	4a19      	ldr	r2, [pc, #100]	; (8001d68 <MX_ADC3_Init+0x6c>)
 8001d04:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001d06:	4b17      	ldr	r3, [pc, #92]	; (8001d64 <MX_ADC3_Init+0x68>)
 8001d08:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001d0c:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001d0e:	4b15      	ldr	r3, [pc, #84]	; (8001d64 <MX_ADC3_Init+0x68>)
 8001d10:	2200      	movs	r2, #0
 8001d12:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ENABLE;
 8001d14:	4b13      	ldr	r3, [pc, #76]	; (8001d64 <MX_ADC3_Init+0x68>)
 8001d16:	2201      	movs	r2, #1
 8001d18:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8001d1a:	4b12      	ldr	r3, [pc, #72]	; (8001d64 <MX_ADC3_Init+0x68>)
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001d20:	4b10      	ldr	r3, [pc, #64]	; (8001d64 <MX_ADC3_Init+0x68>)
 8001d22:	2200      	movs	r2, #0
 8001d24:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001d28:	4b0e      	ldr	r3, [pc, #56]	; (8001d64 <MX_ADC3_Init+0x68>)
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001d2e:	4b0d      	ldr	r3, [pc, #52]	; (8001d64 <MX_ADC3_Init+0x68>)
 8001d30:	4a0e      	ldr	r2, [pc, #56]	; (8001d6c <MX_ADC3_Init+0x70>)
 8001d32:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001d34:	4b0b      	ldr	r3, [pc, #44]	; (8001d64 <MX_ADC3_Init+0x68>)
 8001d36:	2200      	movs	r2, #0
 8001d38:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 8;
 8001d3a:	4b0a      	ldr	r3, [pc, #40]	; (8001d64 <MX_ADC3_Init+0x68>)
 8001d3c:	2208      	movs	r2, #8
 8001d3e:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8001d40:	4b08      	ldr	r3, [pc, #32]	; (8001d64 <MX_ADC3_Init+0x68>)
 8001d42:	2200      	movs	r2, #0
 8001d44:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001d48:	4b06      	ldr	r3, [pc, #24]	; (8001d64 <MX_ADC3_Init+0x68>)
 8001d4a:	2201      	movs	r2, #1
 8001d4c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001d4e:	4805      	ldr	r0, [pc, #20]	; (8001d64 <MX_ADC3_Init+0x68>)
 8001d50:	f000 fa0e 	bl	8002170 <HAL_ADC_Init>
 8001d54:	4603      	mov	r3, r0
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d001      	beq.n	8001d5e <MX_ADC3_Init+0x62>
  {
    Error_Handler();
 8001d5a:	f000 f84d 	bl	8001df8 <Error_Handler>
  }
}
 8001d5e:	bf00      	nop
 8001d60:	bd80      	pop	{r7, pc}
 8001d62:	bf00      	nop
 8001d64:	20000070 	.word	0x20000070
 8001d68:	40012200 	.word	0x40012200
 8001d6c:	0f000001 	.word	0x0f000001

08001d70 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
 void MX_GPIO_Init(void)
{
 8001d70:	b480      	push	{r7}
 8001d72:	b085      	sub	sp, #20
 8001d74:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001d76:	2300      	movs	r3, #0
 8001d78:	60fb      	str	r3, [r7, #12]
 8001d7a:	4b1e      	ldr	r3, [pc, #120]	; (8001df4 <MX_GPIO_Init+0x84>)
 8001d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d7e:	4a1d      	ldr	r2, [pc, #116]	; (8001df4 <MX_GPIO_Init+0x84>)
 8001d80:	f043 0320 	orr.w	r3, r3, #32
 8001d84:	6313      	str	r3, [r2, #48]	; 0x30
 8001d86:	4b1b      	ldr	r3, [pc, #108]	; (8001df4 <MX_GPIO_Init+0x84>)
 8001d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d8a:	f003 0320 	and.w	r3, r3, #32
 8001d8e:	60fb      	str	r3, [r7, #12]
 8001d90:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001d92:	2300      	movs	r3, #0
 8001d94:	60bb      	str	r3, [r7, #8]
 8001d96:	4b17      	ldr	r3, [pc, #92]	; (8001df4 <MX_GPIO_Init+0x84>)
 8001d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d9a:	4a16      	ldr	r2, [pc, #88]	; (8001df4 <MX_GPIO_Init+0x84>)
 8001d9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001da0:	6313      	str	r3, [r2, #48]	; 0x30
 8001da2:	4b14      	ldr	r3, [pc, #80]	; (8001df4 <MX_GPIO_Init+0x84>)
 8001da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001da6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001daa:	60bb      	str	r3, [r7, #8]
 8001dac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001dae:	2300      	movs	r3, #0
 8001db0:	607b      	str	r3, [r7, #4]
 8001db2:	4b10      	ldr	r3, [pc, #64]	; (8001df4 <MX_GPIO_Init+0x84>)
 8001db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001db6:	4a0f      	ldr	r2, [pc, #60]	; (8001df4 <MX_GPIO_Init+0x84>)
 8001db8:	f043 0304 	orr.w	r3, r3, #4
 8001dbc:	6313      	str	r3, [r2, #48]	; 0x30
 8001dbe:	4b0d      	ldr	r3, [pc, #52]	; (8001df4 <MX_GPIO_Init+0x84>)
 8001dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dc2:	f003 0304 	and.w	r3, r3, #4
 8001dc6:	607b      	str	r3, [r7, #4]
 8001dc8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dca:	2300      	movs	r3, #0
 8001dcc:	603b      	str	r3, [r7, #0]
 8001dce:	4b09      	ldr	r3, [pc, #36]	; (8001df4 <MX_GPIO_Init+0x84>)
 8001dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dd2:	4a08      	ldr	r2, [pc, #32]	; (8001df4 <MX_GPIO_Init+0x84>)
 8001dd4:	f043 0301 	orr.w	r3, r3, #1
 8001dd8:	6313      	str	r3, [r2, #48]	; 0x30
 8001dda:	4b06      	ldr	r3, [pc, #24]	; (8001df4 <MX_GPIO_Init+0x84>)
 8001ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dde:	f003 0301 	and.w	r3, r3, #1
 8001de2:	603b      	str	r3, [r7, #0]
 8001de4:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001de6:	bf00      	nop
 8001de8:	3714      	adds	r7, #20
 8001dea:	46bd      	mov	sp, r7
 8001dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df0:	4770      	bx	lr
 8001df2:	bf00      	nop
 8001df4:	40023800 	.word	0x40023800

08001df8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001dfc:	b672      	cpsid	i
}
 8001dfe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e00:	e7fe      	b.n	8001e00 <Error_Handler+0x8>
	...

08001e04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e04:	b480      	push	{r7}
 8001e06:	b083      	sub	sp, #12
 8001e08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	607b      	str	r3, [r7, #4]
 8001e0e:	4b10      	ldr	r3, [pc, #64]	; (8001e50 <HAL_MspInit+0x4c>)
 8001e10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e12:	4a0f      	ldr	r2, [pc, #60]	; (8001e50 <HAL_MspInit+0x4c>)
 8001e14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e18:	6453      	str	r3, [r2, #68]	; 0x44
 8001e1a:	4b0d      	ldr	r3, [pc, #52]	; (8001e50 <HAL_MspInit+0x4c>)
 8001e1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e22:	607b      	str	r3, [r7, #4]
 8001e24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e26:	2300      	movs	r3, #0
 8001e28:	603b      	str	r3, [r7, #0]
 8001e2a:	4b09      	ldr	r3, [pc, #36]	; (8001e50 <HAL_MspInit+0x4c>)
 8001e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e2e:	4a08      	ldr	r2, [pc, #32]	; (8001e50 <HAL_MspInit+0x4c>)
 8001e30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e34:	6413      	str	r3, [r2, #64]	; 0x40
 8001e36:	4b06      	ldr	r3, [pc, #24]	; (8001e50 <HAL_MspInit+0x4c>)
 8001e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e3e:	603b      	str	r3, [r7, #0]
 8001e40:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e42:	bf00      	nop
 8001e44:	370c      	adds	r7, #12
 8001e46:	46bd      	mov	sp, r7
 8001e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4c:	4770      	bx	lr
 8001e4e:	bf00      	nop
 8001e50:	40023800 	.word	0x40023800

08001e54 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b08c      	sub	sp, #48	; 0x30
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e5c:	f107 031c 	add.w	r3, r7, #28
 8001e60:	2200      	movs	r2, #0
 8001e62:	601a      	str	r2, [r3, #0]
 8001e64:	605a      	str	r2, [r3, #4]
 8001e66:	609a      	str	r2, [r3, #8]
 8001e68:	60da      	str	r2, [r3, #12]
 8001e6a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4a3b      	ldr	r2, [pc, #236]	; (8001f60 <HAL_ADC_MspInit+0x10c>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d142      	bne.n	8001efc <HAL_ADC_MspInit+0xa8>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001e76:	2300      	movs	r3, #0
 8001e78:	61bb      	str	r3, [r7, #24]
 8001e7a:	4b3a      	ldr	r3, [pc, #232]	; (8001f64 <HAL_ADC_MspInit+0x110>)
 8001e7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e7e:	4a39      	ldr	r2, [pc, #228]	; (8001f64 <HAL_ADC_MspInit+0x110>)
 8001e80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e84:	6453      	str	r3, [r2, #68]	; 0x44
 8001e86:	4b37      	ldr	r3, [pc, #220]	; (8001f64 <HAL_ADC_MspInit+0x110>)
 8001e88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e8e:	61bb      	str	r3, [r7, #24]
 8001e90:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e92:	2300      	movs	r3, #0
 8001e94:	617b      	str	r3, [r7, #20]
 8001e96:	4b33      	ldr	r3, [pc, #204]	; (8001f64 <HAL_ADC_MspInit+0x110>)
 8001e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e9a:	4a32      	ldr	r2, [pc, #200]	; (8001f64 <HAL_ADC_MspInit+0x110>)
 8001e9c:	f043 0304 	orr.w	r3, r3, #4
 8001ea0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ea2:	4b30      	ldr	r3, [pc, #192]	; (8001f64 <HAL_ADC_MspInit+0x110>)
 8001ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ea6:	f003 0304 	and.w	r3, r3, #4
 8001eaa:	617b      	str	r3, [r7, #20]
 8001eac:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001eae:	2300      	movs	r3, #0
 8001eb0:	613b      	str	r3, [r7, #16]
 8001eb2:	4b2c      	ldr	r3, [pc, #176]	; (8001f64 <HAL_ADC_MspInit+0x110>)
 8001eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eb6:	4a2b      	ldr	r2, [pc, #172]	; (8001f64 <HAL_ADC_MspInit+0x110>)
 8001eb8:	f043 0301 	orr.w	r3, r3, #1
 8001ebc:	6313      	str	r3, [r2, #48]	; 0x30
 8001ebe:	4b29      	ldr	r3, [pc, #164]	; (8001f64 <HAL_ADC_MspInit+0x110>)
 8001ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ec2:	f003 0301 	and.w	r3, r3, #1
 8001ec6:	613b      	str	r3, [r7, #16]
 8001ec8:	693b      	ldr	r3, [r7, #16]
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001eca:	233f      	movs	r3, #63	; 0x3f
 8001ecc:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ece:	2303      	movs	r3, #3
 8001ed0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ed6:	f107 031c 	add.w	r3, r7, #28
 8001eda:	4619      	mov	r1, r3
 8001edc:	4822      	ldr	r0, [pc, #136]	; (8001f68 <HAL_ADC_MspInit+0x114>)
 8001ede:	f000 fe3d 	bl	8002b5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 8001ee2:	23fe      	movs	r3, #254	; 0xfe
 8001ee4:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ee6:	2303      	movs	r3, #3
 8001ee8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eea:	2300      	movs	r3, #0
 8001eec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001eee:	f107 031c 	add.w	r3, r7, #28
 8001ef2:	4619      	mov	r1, r3
 8001ef4:	481d      	ldr	r0, [pc, #116]	; (8001f6c <HAL_ADC_MspInit+0x118>)
 8001ef6:	f000 fe31 	bl	8002b5c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001efa:	e02d      	b.n	8001f58 <HAL_ADC_MspInit+0x104>
  else if(hadc->Instance==ADC3)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4a1b      	ldr	r2, [pc, #108]	; (8001f70 <HAL_ADC_MspInit+0x11c>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d128      	bne.n	8001f58 <HAL_ADC_MspInit+0x104>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001f06:	2300      	movs	r3, #0
 8001f08:	60fb      	str	r3, [r7, #12]
 8001f0a:	4b16      	ldr	r3, [pc, #88]	; (8001f64 <HAL_ADC_MspInit+0x110>)
 8001f0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f0e:	4a15      	ldr	r2, [pc, #84]	; (8001f64 <HAL_ADC_MspInit+0x110>)
 8001f10:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f14:	6453      	str	r3, [r2, #68]	; 0x44
 8001f16:	4b13      	ldr	r3, [pc, #76]	; (8001f64 <HAL_ADC_MspInit+0x110>)
 8001f18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f1a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f1e:	60fb      	str	r3, [r7, #12]
 8001f20:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001f22:	2300      	movs	r3, #0
 8001f24:	60bb      	str	r3, [r7, #8]
 8001f26:	4b0f      	ldr	r3, [pc, #60]	; (8001f64 <HAL_ADC_MspInit+0x110>)
 8001f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f2a:	4a0e      	ldr	r2, [pc, #56]	; (8001f64 <HAL_ADC_MspInit+0x110>)
 8001f2c:	f043 0320 	orr.w	r3, r3, #32
 8001f30:	6313      	str	r3, [r2, #48]	; 0x30
 8001f32:	4b0c      	ldr	r3, [pc, #48]	; (8001f64 <HAL_ADC_MspInit+0x110>)
 8001f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f36:	f003 0320 	and.w	r3, r3, #32
 8001f3a:	60bb      	str	r3, [r7, #8]
 8001f3c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 8001f3e:	f44f 63ff 	mov.w	r3, #2040	; 0x7f8
 8001f42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f44:	2303      	movs	r3, #3
 8001f46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001f4c:	f107 031c 	add.w	r3, r7, #28
 8001f50:	4619      	mov	r1, r3
 8001f52:	4808      	ldr	r0, [pc, #32]	; (8001f74 <HAL_ADC_MspInit+0x120>)
 8001f54:	f000 fe02 	bl	8002b5c <HAL_GPIO_Init>
}
 8001f58:	bf00      	nop
 8001f5a:	3730      	adds	r7, #48	; 0x30
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bd80      	pop	{r7, pc}
 8001f60:	40012000 	.word	0x40012000
 8001f64:	40023800 	.word	0x40023800
 8001f68:	40020800 	.word	0x40020800
 8001f6c:	40020000 	.word	0x40020000
 8001f70:	40012200 	.word	0x40012200
 8001f74:	40021400 	.word	0x40021400

08001f78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f7c:	e7fe      	b.n	8001f7c <NMI_Handler+0x4>

08001f7e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f7e:	b480      	push	{r7}
 8001f80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f82:	e7fe      	b.n	8001f82 <HardFault_Handler+0x4>

08001f84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f84:	b480      	push	{r7}
 8001f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f88:	e7fe      	b.n	8001f88 <MemManage_Handler+0x4>

08001f8a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f8a:	b480      	push	{r7}
 8001f8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f8e:	e7fe      	b.n	8001f8e <BusFault_Handler+0x4>

08001f90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f90:	b480      	push	{r7}
 8001f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f94:	e7fe      	b.n	8001f94 <UsageFault_Handler+0x4>

08001f96 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f96:	b480      	push	{r7}
 8001f98:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f9a:	bf00      	nop
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa2:	4770      	bx	lr

08001fa4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001fa8:	bf00      	nop
 8001faa:	46bd      	mov	sp, r7
 8001fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb0:	4770      	bx	lr

08001fb2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001fb2:	b480      	push	{r7}
 8001fb4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001fb6:	bf00      	nop
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbe:	4770      	bx	lr

08001fc0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001fc4:	f000 f890 	bl	80020e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001fc8:	bf00      	nop
 8001fca:	bd80      	pop	{r7, pc}

08001fcc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001fd0:	4b06      	ldr	r3, [pc, #24]	; (8001fec <SystemInit+0x20>)
 8001fd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fd6:	4a05      	ldr	r2, [pc, #20]	; (8001fec <SystemInit+0x20>)
 8001fd8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001fdc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001fe0:	bf00      	nop
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe8:	4770      	bx	lr
 8001fea:	bf00      	nop
 8001fec:	e000ed00 	.word	0xe000ed00

08001ff0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001ff0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002028 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001ff4:	480d      	ldr	r0, [pc, #52]	; (800202c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001ff6:	490e      	ldr	r1, [pc, #56]	; (8002030 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001ff8:	4a0e      	ldr	r2, [pc, #56]	; (8002034 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001ffa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ffc:	e002      	b.n	8002004 <LoopCopyDataInit>

08001ffe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ffe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002000:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002002:	3304      	adds	r3, #4

08002004 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002004:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002006:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002008:	d3f9      	bcc.n	8001ffe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800200a:	4a0b      	ldr	r2, [pc, #44]	; (8002038 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800200c:	4c0b      	ldr	r4, [pc, #44]	; (800203c <LoopFillZerobss+0x26>)
  movs r3, #0
 800200e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002010:	e001      	b.n	8002016 <LoopFillZerobss>

08002012 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002012:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002014:	3204      	adds	r2, #4

08002016 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002016:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002018:	d3fb      	bcc.n	8002012 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800201a:	f7ff ffd7 	bl	8001fcc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800201e:	f001 fce5 	bl	80039ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002022:	f7ff fd8d 	bl	8001b40 <main>
  bx  lr    
 8002026:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002028:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800202c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002030:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8002034:	08003a7c 	.word	0x08003a7c
  ldr r2, =_sbss
 8002038:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800203c:	200000ec 	.word	0x200000ec

08002040 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002040:	e7fe      	b.n	8002040 <ADC_IRQHandler>
	...

08002044 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002048:	4b0e      	ldr	r3, [pc, #56]	; (8002084 <HAL_Init+0x40>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4a0d      	ldr	r2, [pc, #52]	; (8002084 <HAL_Init+0x40>)
 800204e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002052:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002054:	4b0b      	ldr	r3, [pc, #44]	; (8002084 <HAL_Init+0x40>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4a0a      	ldr	r2, [pc, #40]	; (8002084 <HAL_Init+0x40>)
 800205a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800205e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002060:	4b08      	ldr	r3, [pc, #32]	; (8002084 <HAL_Init+0x40>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4a07      	ldr	r2, [pc, #28]	; (8002084 <HAL_Init+0x40>)
 8002066:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800206a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800206c:	2003      	movs	r0, #3
 800206e:	f000 fd41 	bl	8002af4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002072:	2000      	movs	r0, #0
 8002074:	f000 f808 	bl	8002088 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002078:	f7ff fec4 	bl	8001e04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800207c:	2300      	movs	r3, #0
}
 800207e:	4618      	mov	r0, r3
 8002080:	bd80      	pop	{r7, pc}
 8002082:	bf00      	nop
 8002084:	40023c00 	.word	0x40023c00

08002088 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b082      	sub	sp, #8
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002090:	4b12      	ldr	r3, [pc, #72]	; (80020dc <HAL_InitTick+0x54>)
 8002092:	681a      	ldr	r2, [r3, #0]
 8002094:	4b12      	ldr	r3, [pc, #72]	; (80020e0 <HAL_InitTick+0x58>)
 8002096:	781b      	ldrb	r3, [r3, #0]
 8002098:	4619      	mov	r1, r3
 800209a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800209e:	fbb3 f3f1 	udiv	r3, r3, r1
 80020a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80020a6:	4618      	mov	r0, r3
 80020a8:	f000 fd4b 	bl	8002b42 <HAL_SYSTICK_Config>
 80020ac:	4603      	mov	r3, r0
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d001      	beq.n	80020b6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80020b2:	2301      	movs	r3, #1
 80020b4:	e00e      	b.n	80020d4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2b0f      	cmp	r3, #15
 80020ba:	d80a      	bhi.n	80020d2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80020bc:	2200      	movs	r2, #0
 80020be:	6879      	ldr	r1, [r7, #4]
 80020c0:	f04f 30ff 	mov.w	r0, #4294967295
 80020c4:	f000 fd21 	bl	8002b0a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80020c8:	4a06      	ldr	r2, [pc, #24]	; (80020e4 <HAL_InitTick+0x5c>)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80020ce:	2300      	movs	r3, #0
 80020d0:	e000      	b.n	80020d4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80020d2:	2301      	movs	r3, #1
}
 80020d4:	4618      	mov	r0, r3
 80020d6:	3708      	adds	r7, #8
 80020d8:	46bd      	mov	sp, r7
 80020da:	bd80      	pop	{r7, pc}
 80020dc:	20000000 	.word	0x20000000
 80020e0:	20000008 	.word	0x20000008
 80020e4:	20000004 	.word	0x20000004

080020e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020e8:	b480      	push	{r7}
 80020ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80020ec:	4b06      	ldr	r3, [pc, #24]	; (8002108 <HAL_IncTick+0x20>)
 80020ee:	781b      	ldrb	r3, [r3, #0]
 80020f0:	461a      	mov	r2, r3
 80020f2:	4b06      	ldr	r3, [pc, #24]	; (800210c <HAL_IncTick+0x24>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4413      	add	r3, r2
 80020f8:	4a04      	ldr	r2, [pc, #16]	; (800210c <HAL_IncTick+0x24>)
 80020fa:	6013      	str	r3, [r2, #0]
}
 80020fc:	bf00      	nop
 80020fe:	46bd      	mov	sp, r7
 8002100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002104:	4770      	bx	lr
 8002106:	bf00      	nop
 8002108:	20000008 	.word	0x20000008
 800210c:	200000e8 	.word	0x200000e8

08002110 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002110:	b480      	push	{r7}
 8002112:	af00      	add	r7, sp, #0
  return uwTick;
 8002114:	4b03      	ldr	r3, [pc, #12]	; (8002124 <HAL_GetTick+0x14>)
 8002116:	681b      	ldr	r3, [r3, #0]
}
 8002118:	4618      	mov	r0, r3
 800211a:	46bd      	mov	sp, r7
 800211c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002120:	4770      	bx	lr
 8002122:	bf00      	nop
 8002124:	200000e8 	.word	0x200000e8

08002128 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b084      	sub	sp, #16
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002130:	f7ff ffee 	bl	8002110 <HAL_GetTick>
 8002134:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002140:	d005      	beq.n	800214e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002142:	4b0a      	ldr	r3, [pc, #40]	; (800216c <HAL_Delay+0x44>)
 8002144:	781b      	ldrb	r3, [r3, #0]
 8002146:	461a      	mov	r2, r3
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	4413      	add	r3, r2
 800214c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800214e:	bf00      	nop
 8002150:	f7ff ffde 	bl	8002110 <HAL_GetTick>
 8002154:	4602      	mov	r2, r0
 8002156:	68bb      	ldr	r3, [r7, #8]
 8002158:	1ad3      	subs	r3, r2, r3
 800215a:	68fa      	ldr	r2, [r7, #12]
 800215c:	429a      	cmp	r2, r3
 800215e:	d8f7      	bhi.n	8002150 <HAL_Delay+0x28>
  {
  }
}
 8002160:	bf00      	nop
 8002162:	bf00      	nop
 8002164:	3710      	adds	r7, #16
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}
 800216a:	bf00      	nop
 800216c:	20000008 	.word	0x20000008

08002170 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b084      	sub	sp, #16
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002178:	2300      	movs	r3, #0
 800217a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2b00      	cmp	r3, #0
 8002180:	d101      	bne.n	8002186 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002182:	2301      	movs	r3, #1
 8002184:	e033      	b.n	80021ee <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800218a:	2b00      	cmp	r3, #0
 800218c:	d109      	bne.n	80021a2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800218e:	6878      	ldr	r0, [r7, #4]
 8002190:	f7ff fe60 	bl	8001e54 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2200      	movs	r2, #0
 8002198:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2200      	movs	r2, #0
 800219e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a6:	f003 0310 	and.w	r3, r3, #16
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d118      	bne.n	80021e0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021b2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80021b6:	f023 0302 	bic.w	r3, r3, #2
 80021ba:	f043 0202 	orr.w	r2, r3, #2
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80021c2:	6878      	ldr	r0, [r7, #4]
 80021c4:	f000 fae8 	bl	8002798 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2200      	movs	r2, #0
 80021cc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021d2:	f023 0303 	bic.w	r3, r3, #3
 80021d6:	f043 0201 	orr.w	r2, r3, #1
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	641a      	str	r2, [r3, #64]	; 0x40
 80021de:	e001      	b.n	80021e4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80021e0:	2301      	movs	r3, #1
 80021e2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2200      	movs	r2, #0
 80021e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80021ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80021ee:	4618      	mov	r0, r3
 80021f0:	3710      	adds	r7, #16
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}
	...

080021f8 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80021f8:	b480      	push	{r7}
 80021fa:	b085      	sub	sp, #20
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002200:	2300      	movs	r3, #0
 8002202:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800220a:	2b01      	cmp	r3, #1
 800220c:	d101      	bne.n	8002212 <HAL_ADC_Start+0x1a>
 800220e:	2302      	movs	r3, #2
 8002210:	e0b2      	b.n	8002378 <HAL_ADC_Start+0x180>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2201      	movs	r2, #1
 8002216:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	689b      	ldr	r3, [r3, #8]
 8002220:	f003 0301 	and.w	r3, r3, #1
 8002224:	2b01      	cmp	r3, #1
 8002226:	d018      	beq.n	800225a <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	689a      	ldr	r2, [r3, #8]
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f042 0201 	orr.w	r2, r2, #1
 8002236:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002238:	4b52      	ldr	r3, [pc, #328]	; (8002384 <HAL_ADC_Start+0x18c>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4a52      	ldr	r2, [pc, #328]	; (8002388 <HAL_ADC_Start+0x190>)
 800223e:	fba2 2303 	umull	r2, r3, r2, r3
 8002242:	0c9a      	lsrs	r2, r3, #18
 8002244:	4613      	mov	r3, r2
 8002246:	005b      	lsls	r3, r3, #1
 8002248:	4413      	add	r3, r2
 800224a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800224c:	e002      	b.n	8002254 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800224e:	68bb      	ldr	r3, [r7, #8]
 8002250:	3b01      	subs	r3, #1
 8002252:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002254:	68bb      	ldr	r3, [r7, #8]
 8002256:	2b00      	cmp	r3, #0
 8002258:	d1f9      	bne.n	800224e <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	689b      	ldr	r3, [r3, #8]
 8002260:	f003 0301 	and.w	r3, r3, #1
 8002264:	2b01      	cmp	r3, #1
 8002266:	d17a      	bne.n	800235e <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800226c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002270:	f023 0301 	bic.w	r3, r3, #1
 8002274:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	685b      	ldr	r3, [r3, #4]
 8002282:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002286:	2b00      	cmp	r3, #0
 8002288:	d007      	beq.n	800229a <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800228e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002292:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800229e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80022a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80022a6:	d106      	bne.n	80022b6 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022ac:	f023 0206 	bic.w	r2, r3, #6
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	645a      	str	r2, [r3, #68]	; 0x44
 80022b4:	e002      	b.n	80022bc <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2200      	movs	r2, #0
 80022ba:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2200      	movs	r2, #0
 80022c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80022c4:	4b31      	ldr	r3, [pc, #196]	; (800238c <HAL_ADC_Start+0x194>)
 80022c6:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80022d0:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	f003 031f 	and.w	r3, r3, #31
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d12a      	bne.n	8002334 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4a2b      	ldr	r2, [pc, #172]	; (8002390 <HAL_ADC_Start+0x198>)
 80022e4:	4293      	cmp	r3, r2
 80022e6:	d015      	beq.n	8002314 <HAL_ADC_Start+0x11c>
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4a29      	ldr	r2, [pc, #164]	; (8002394 <HAL_ADC_Start+0x19c>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d105      	bne.n	80022fe <HAL_ADC_Start+0x106>
 80022f2:	4b26      	ldr	r3, [pc, #152]	; (800238c <HAL_ADC_Start+0x194>)
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	f003 031f 	and.w	r3, r3, #31
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d00a      	beq.n	8002314 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4a25      	ldr	r2, [pc, #148]	; (8002398 <HAL_ADC_Start+0x1a0>)
 8002304:	4293      	cmp	r3, r2
 8002306:	d136      	bne.n	8002376 <HAL_ADC_Start+0x17e>
 8002308:	4b20      	ldr	r3, [pc, #128]	; (800238c <HAL_ADC_Start+0x194>)
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	f003 0310 	and.w	r3, r3, #16
 8002310:	2b00      	cmp	r3, #0
 8002312:	d130      	bne.n	8002376 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	689b      	ldr	r3, [r3, #8]
 800231a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800231e:	2b00      	cmp	r3, #0
 8002320:	d129      	bne.n	8002376 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	689a      	ldr	r2, [r3, #8]
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002330:	609a      	str	r2, [r3, #8]
 8002332:	e020      	b.n	8002376 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4a15      	ldr	r2, [pc, #84]	; (8002390 <HAL_ADC_Start+0x198>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d11b      	bne.n	8002376 <HAL_ADC_Start+0x17e>
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	689b      	ldr	r3, [r3, #8]
 8002344:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002348:	2b00      	cmp	r3, #0
 800234a:	d114      	bne.n	8002376 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	689a      	ldr	r2, [r3, #8]
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800235a:	609a      	str	r2, [r3, #8]
 800235c:	e00b      	b.n	8002376 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002362:	f043 0210 	orr.w	r2, r3, #16
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800236e:	f043 0201 	orr.w	r2, r3, #1
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002376:	2300      	movs	r3, #0
}
 8002378:	4618      	mov	r0, r3
 800237a:	3714      	adds	r7, #20
 800237c:	46bd      	mov	sp, r7
 800237e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002382:	4770      	bx	lr
 8002384:	20000000 	.word	0x20000000
 8002388:	431bde83 	.word	0x431bde83
 800238c:	40012300 	.word	0x40012300
 8002390:	40012000 	.word	0x40012000
 8002394:	40012100 	.word	0x40012100
 8002398:	40012200 	.word	0x40012200

0800239c <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 800239c:	b480      	push	{r7}
 800239e:	b083      	sub	sp, #12
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80023aa:	2b01      	cmp	r3, #1
 80023ac:	d101      	bne.n	80023b2 <HAL_ADC_Stop+0x16>
 80023ae:	2302      	movs	r3, #2
 80023b0:	e021      	b.n	80023f6 <HAL_ADC_Stop+0x5a>
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2201      	movs	r2, #1
 80023b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	689a      	ldr	r2, [r3, #8]
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f022 0201 	bic.w	r2, r2, #1
 80023c8:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	689b      	ldr	r3, [r3, #8]
 80023d0:	f003 0301 	and.w	r3, r3, #1
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d109      	bne.n	80023ec <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023dc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80023e0:	f023 0301 	bic.w	r3, r3, #1
 80023e4:	f043 0201 	orr.w	r2, r3, #1
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2200      	movs	r2, #0
 80023f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80023f4:	2300      	movs	r3, #0
}
 80023f6:	4618      	mov	r0, r3
 80023f8:	370c      	adds	r7, #12
 80023fa:	46bd      	mov	sp, r7
 80023fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002400:	4770      	bx	lr

08002402 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002402:	b580      	push	{r7, lr}
 8002404:	b084      	sub	sp, #16
 8002406:	af00      	add	r7, sp, #0
 8002408:	6078      	str	r0, [r7, #4]
 800240a:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800240c:	2300      	movs	r3, #0
 800240e:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	689b      	ldr	r3, [r3, #8]
 8002416:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800241a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800241e:	d113      	bne.n	8002448 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	689b      	ldr	r3, [r3, #8]
 8002426:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800242a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800242e:	d10b      	bne.n	8002448 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002434:	f043 0220 	orr.w	r2, r3, #32
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2200      	movs	r2, #0
 8002440:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8002444:	2301      	movs	r3, #1
 8002446:	e063      	b.n	8002510 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8002448:	f7ff fe62 	bl	8002110 <HAL_GetTick>
 800244c:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800244e:	e021      	b.n	8002494 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002456:	d01d      	beq.n	8002494 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d007      	beq.n	800246e <HAL_ADC_PollForConversion+0x6c>
 800245e:	f7ff fe57 	bl	8002110 <HAL_GetTick>
 8002462:	4602      	mov	r2, r0
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	1ad3      	subs	r3, r2, r3
 8002468:	683a      	ldr	r2, [r7, #0]
 800246a:	429a      	cmp	r2, r3
 800246c:	d212      	bcs.n	8002494 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f003 0302 	and.w	r3, r3, #2
 8002478:	2b02      	cmp	r3, #2
 800247a:	d00b      	beq.n	8002494 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002480:	f043 0204 	orr.w	r2, r3, #4
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2200      	movs	r2, #0
 800248c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8002490:	2303      	movs	r3, #3
 8002492:	e03d      	b.n	8002510 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f003 0302 	and.w	r3, r3, #2
 800249e:	2b02      	cmp	r3, #2
 80024a0:	d1d6      	bne.n	8002450 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f06f 0212 	mvn.w	r2, #18
 80024aa:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024b0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	689b      	ldr	r3, [r3, #8]
 80024be:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d123      	bne.n	800250e <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d11f      	bne.n	800250e <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024d4:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d006      	beq.n	80024ea <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	689b      	ldr	r3, [r3, #8]
 80024e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d111      	bne.n	800250e <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ee:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024fa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d105      	bne.n	800250e <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002506:	f043 0201 	orr.w	r2, r3, #1
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800250e:	2300      	movs	r3, #0
}
 8002510:	4618      	mov	r0, r3
 8002512:	3710      	adds	r7, #16
 8002514:	46bd      	mov	sp, r7
 8002516:	bd80      	pop	{r7, pc}

08002518 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002518:	b480      	push	{r7}
 800251a:	b083      	sub	sp, #12
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002526:	4618      	mov	r0, r3
 8002528:	370c      	adds	r7, #12
 800252a:	46bd      	mov	sp, r7
 800252c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002530:	4770      	bx	lr
	...

08002534 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002534:	b480      	push	{r7}
 8002536:	b085      	sub	sp, #20
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
 800253c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800253e:	2300      	movs	r3, #0
 8002540:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002548:	2b01      	cmp	r3, #1
 800254a:	d101      	bne.n	8002550 <HAL_ADC_ConfigChannel+0x1c>
 800254c:	2302      	movs	r3, #2
 800254e:	e113      	b.n	8002778 <HAL_ADC_ConfigChannel+0x244>
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2201      	movs	r2, #1
 8002554:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	2b09      	cmp	r3, #9
 800255e:	d925      	bls.n	80025ac <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	68d9      	ldr	r1, [r3, #12]
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	b29b      	uxth	r3, r3
 800256c:	461a      	mov	r2, r3
 800256e:	4613      	mov	r3, r2
 8002570:	005b      	lsls	r3, r3, #1
 8002572:	4413      	add	r3, r2
 8002574:	3b1e      	subs	r3, #30
 8002576:	2207      	movs	r2, #7
 8002578:	fa02 f303 	lsl.w	r3, r2, r3
 800257c:	43da      	mvns	r2, r3
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	400a      	ands	r2, r1
 8002584:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	68d9      	ldr	r1, [r3, #12]
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	689a      	ldr	r2, [r3, #8]
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	b29b      	uxth	r3, r3
 8002596:	4618      	mov	r0, r3
 8002598:	4603      	mov	r3, r0
 800259a:	005b      	lsls	r3, r3, #1
 800259c:	4403      	add	r3, r0
 800259e:	3b1e      	subs	r3, #30
 80025a0:	409a      	lsls	r2, r3
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	430a      	orrs	r2, r1
 80025a8:	60da      	str	r2, [r3, #12]
 80025aa:	e022      	b.n	80025f2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	6919      	ldr	r1, [r3, #16]
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	b29b      	uxth	r3, r3
 80025b8:	461a      	mov	r2, r3
 80025ba:	4613      	mov	r3, r2
 80025bc:	005b      	lsls	r3, r3, #1
 80025be:	4413      	add	r3, r2
 80025c0:	2207      	movs	r2, #7
 80025c2:	fa02 f303 	lsl.w	r3, r2, r3
 80025c6:	43da      	mvns	r2, r3
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	400a      	ands	r2, r1
 80025ce:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	6919      	ldr	r1, [r3, #16]
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	689a      	ldr	r2, [r3, #8]
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	b29b      	uxth	r3, r3
 80025e0:	4618      	mov	r0, r3
 80025e2:	4603      	mov	r3, r0
 80025e4:	005b      	lsls	r3, r3, #1
 80025e6:	4403      	add	r3, r0
 80025e8:	409a      	lsls	r2, r3
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	430a      	orrs	r2, r1
 80025f0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	2b06      	cmp	r3, #6
 80025f8:	d824      	bhi.n	8002644 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	685a      	ldr	r2, [r3, #4]
 8002604:	4613      	mov	r3, r2
 8002606:	009b      	lsls	r3, r3, #2
 8002608:	4413      	add	r3, r2
 800260a:	3b05      	subs	r3, #5
 800260c:	221f      	movs	r2, #31
 800260e:	fa02 f303 	lsl.w	r3, r2, r3
 8002612:	43da      	mvns	r2, r3
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	400a      	ands	r2, r1
 800261a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	b29b      	uxth	r3, r3
 8002628:	4618      	mov	r0, r3
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	685a      	ldr	r2, [r3, #4]
 800262e:	4613      	mov	r3, r2
 8002630:	009b      	lsls	r3, r3, #2
 8002632:	4413      	add	r3, r2
 8002634:	3b05      	subs	r3, #5
 8002636:	fa00 f203 	lsl.w	r2, r0, r3
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	430a      	orrs	r2, r1
 8002640:	635a      	str	r2, [r3, #52]	; 0x34
 8002642:	e04c      	b.n	80026de <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	2b0c      	cmp	r3, #12
 800264a:	d824      	bhi.n	8002696 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	685a      	ldr	r2, [r3, #4]
 8002656:	4613      	mov	r3, r2
 8002658:	009b      	lsls	r3, r3, #2
 800265a:	4413      	add	r3, r2
 800265c:	3b23      	subs	r3, #35	; 0x23
 800265e:	221f      	movs	r2, #31
 8002660:	fa02 f303 	lsl.w	r3, r2, r3
 8002664:	43da      	mvns	r2, r3
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	400a      	ands	r2, r1
 800266c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	b29b      	uxth	r3, r3
 800267a:	4618      	mov	r0, r3
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	685a      	ldr	r2, [r3, #4]
 8002680:	4613      	mov	r3, r2
 8002682:	009b      	lsls	r3, r3, #2
 8002684:	4413      	add	r3, r2
 8002686:	3b23      	subs	r3, #35	; 0x23
 8002688:	fa00 f203 	lsl.w	r2, r0, r3
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	430a      	orrs	r2, r1
 8002692:	631a      	str	r2, [r3, #48]	; 0x30
 8002694:	e023      	b.n	80026de <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	685a      	ldr	r2, [r3, #4]
 80026a0:	4613      	mov	r3, r2
 80026a2:	009b      	lsls	r3, r3, #2
 80026a4:	4413      	add	r3, r2
 80026a6:	3b41      	subs	r3, #65	; 0x41
 80026a8:	221f      	movs	r2, #31
 80026aa:	fa02 f303 	lsl.w	r3, r2, r3
 80026ae:	43da      	mvns	r2, r3
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	400a      	ands	r2, r1
 80026b6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	b29b      	uxth	r3, r3
 80026c4:	4618      	mov	r0, r3
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	685a      	ldr	r2, [r3, #4]
 80026ca:	4613      	mov	r3, r2
 80026cc:	009b      	lsls	r3, r3, #2
 80026ce:	4413      	add	r3, r2
 80026d0:	3b41      	subs	r3, #65	; 0x41
 80026d2:	fa00 f203 	lsl.w	r2, r0, r3
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	430a      	orrs	r2, r1
 80026dc:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80026de:	4b29      	ldr	r3, [pc, #164]	; (8002784 <HAL_ADC_ConfigChannel+0x250>)
 80026e0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	4a28      	ldr	r2, [pc, #160]	; (8002788 <HAL_ADC_ConfigChannel+0x254>)
 80026e8:	4293      	cmp	r3, r2
 80026ea:	d10f      	bne.n	800270c <HAL_ADC_ConfigChannel+0x1d8>
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	2b12      	cmp	r3, #18
 80026f2:	d10b      	bne.n	800270c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	685b      	ldr	r3, [r3, #4]
 80026f8:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4a1d      	ldr	r2, [pc, #116]	; (8002788 <HAL_ADC_ConfigChannel+0x254>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d12b      	bne.n	800276e <HAL_ADC_ConfigChannel+0x23a>
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4a1c      	ldr	r2, [pc, #112]	; (800278c <HAL_ADC_ConfigChannel+0x258>)
 800271c:	4293      	cmp	r3, r2
 800271e:	d003      	beq.n	8002728 <HAL_ADC_ConfigChannel+0x1f4>
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	2b11      	cmp	r3, #17
 8002726:	d122      	bne.n	800276e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4a11      	ldr	r2, [pc, #68]	; (800278c <HAL_ADC_ConfigChannel+0x258>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d111      	bne.n	800276e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800274a:	4b11      	ldr	r3, [pc, #68]	; (8002790 <HAL_ADC_ConfigChannel+0x25c>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4a11      	ldr	r2, [pc, #68]	; (8002794 <HAL_ADC_ConfigChannel+0x260>)
 8002750:	fba2 2303 	umull	r2, r3, r2, r3
 8002754:	0c9a      	lsrs	r2, r3, #18
 8002756:	4613      	mov	r3, r2
 8002758:	009b      	lsls	r3, r3, #2
 800275a:	4413      	add	r3, r2
 800275c:	005b      	lsls	r3, r3, #1
 800275e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002760:	e002      	b.n	8002768 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002762:	68bb      	ldr	r3, [r7, #8]
 8002764:	3b01      	subs	r3, #1
 8002766:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002768:	68bb      	ldr	r3, [r7, #8]
 800276a:	2b00      	cmp	r3, #0
 800276c:	d1f9      	bne.n	8002762 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2200      	movs	r2, #0
 8002772:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002776:	2300      	movs	r3, #0
}
 8002778:	4618      	mov	r0, r3
 800277a:	3714      	adds	r7, #20
 800277c:	46bd      	mov	sp, r7
 800277e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002782:	4770      	bx	lr
 8002784:	40012300 	.word	0x40012300
 8002788:	40012000 	.word	0x40012000
 800278c:	10000012 	.word	0x10000012
 8002790:	20000000 	.word	0x20000000
 8002794:	431bde83 	.word	0x431bde83

08002798 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002798:	b480      	push	{r7}
 800279a:	b085      	sub	sp, #20
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80027a0:	4b79      	ldr	r3, [pc, #484]	; (8002988 <ADC_Init+0x1f0>)
 80027a2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	685a      	ldr	r2, [r3, #4]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	431a      	orrs	r2, r3
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	685a      	ldr	r2, [r3, #4]
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80027cc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	6859      	ldr	r1, [r3, #4]
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	691b      	ldr	r3, [r3, #16]
 80027d8:	021a      	lsls	r2, r3, #8
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	430a      	orrs	r2, r1
 80027e0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	685a      	ldr	r2, [r3, #4]
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80027f0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	6859      	ldr	r1, [r3, #4]
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	689a      	ldr	r2, [r3, #8]
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	430a      	orrs	r2, r1
 8002802:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	689a      	ldr	r2, [r3, #8]
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002812:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	6899      	ldr	r1, [r3, #8]
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	68da      	ldr	r2, [r3, #12]
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	430a      	orrs	r2, r1
 8002824:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800282a:	4a58      	ldr	r2, [pc, #352]	; (800298c <ADC_Init+0x1f4>)
 800282c:	4293      	cmp	r3, r2
 800282e:	d022      	beq.n	8002876 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	689a      	ldr	r2, [r3, #8]
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800283e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	6899      	ldr	r1, [r3, #8]
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	430a      	orrs	r2, r1
 8002850:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	689a      	ldr	r2, [r3, #8]
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002860:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	6899      	ldr	r1, [r3, #8]
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	430a      	orrs	r2, r1
 8002872:	609a      	str	r2, [r3, #8]
 8002874:	e00f      	b.n	8002896 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	689a      	ldr	r2, [r3, #8]
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002884:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	689a      	ldr	r2, [r3, #8]
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002894:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	689a      	ldr	r2, [r3, #8]
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f022 0202 	bic.w	r2, r2, #2
 80028a4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	6899      	ldr	r1, [r3, #8]
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	7e1b      	ldrb	r3, [r3, #24]
 80028b0:	005a      	lsls	r2, r3, #1
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	430a      	orrs	r2, r1
 80028b8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d01b      	beq.n	80028fc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	685a      	ldr	r2, [r3, #4]
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80028d2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	685a      	ldr	r2, [r3, #4]
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80028e2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	6859      	ldr	r1, [r3, #4]
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ee:	3b01      	subs	r3, #1
 80028f0:	035a      	lsls	r2, r3, #13
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	430a      	orrs	r2, r1
 80028f8:	605a      	str	r2, [r3, #4]
 80028fa:	e007      	b.n	800290c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	685a      	ldr	r2, [r3, #4]
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800290a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800291a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	69db      	ldr	r3, [r3, #28]
 8002926:	3b01      	subs	r3, #1
 8002928:	051a      	lsls	r2, r3, #20
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	430a      	orrs	r2, r1
 8002930:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	689a      	ldr	r2, [r3, #8]
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002940:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	6899      	ldr	r1, [r3, #8]
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800294e:	025a      	lsls	r2, r3, #9
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	430a      	orrs	r2, r1
 8002956:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	689a      	ldr	r2, [r3, #8]
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002966:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	6899      	ldr	r1, [r3, #8]
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	695b      	ldr	r3, [r3, #20]
 8002972:	029a      	lsls	r2, r3, #10
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	430a      	orrs	r2, r1
 800297a:	609a      	str	r2, [r3, #8]
}
 800297c:	bf00      	nop
 800297e:	3714      	adds	r7, #20
 8002980:	46bd      	mov	sp, r7
 8002982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002986:	4770      	bx	lr
 8002988:	40012300 	.word	0x40012300
 800298c:	0f000001 	.word	0x0f000001

08002990 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002990:	b480      	push	{r7}
 8002992:	b085      	sub	sp, #20
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	f003 0307 	and.w	r3, r3, #7
 800299e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80029a0:	4b0c      	ldr	r3, [pc, #48]	; (80029d4 <__NVIC_SetPriorityGrouping+0x44>)
 80029a2:	68db      	ldr	r3, [r3, #12]
 80029a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80029a6:	68ba      	ldr	r2, [r7, #8]
 80029a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80029ac:	4013      	ands	r3, r2
 80029ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80029b4:	68bb      	ldr	r3, [r7, #8]
 80029b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80029b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80029bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80029c2:	4a04      	ldr	r2, [pc, #16]	; (80029d4 <__NVIC_SetPriorityGrouping+0x44>)
 80029c4:	68bb      	ldr	r3, [r7, #8]
 80029c6:	60d3      	str	r3, [r2, #12]
}
 80029c8:	bf00      	nop
 80029ca:	3714      	adds	r7, #20
 80029cc:	46bd      	mov	sp, r7
 80029ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d2:	4770      	bx	lr
 80029d4:	e000ed00 	.word	0xe000ed00

080029d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80029d8:	b480      	push	{r7}
 80029da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80029dc:	4b04      	ldr	r3, [pc, #16]	; (80029f0 <__NVIC_GetPriorityGrouping+0x18>)
 80029de:	68db      	ldr	r3, [r3, #12]
 80029e0:	0a1b      	lsrs	r3, r3, #8
 80029e2:	f003 0307 	and.w	r3, r3, #7
}
 80029e6:	4618      	mov	r0, r3
 80029e8:	46bd      	mov	sp, r7
 80029ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ee:	4770      	bx	lr
 80029f0:	e000ed00 	.word	0xe000ed00

080029f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80029f4:	b480      	push	{r7}
 80029f6:	b083      	sub	sp, #12
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	4603      	mov	r3, r0
 80029fc:	6039      	str	r1, [r7, #0]
 80029fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	db0a      	blt.n	8002a1e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	b2da      	uxtb	r2, r3
 8002a0c:	490c      	ldr	r1, [pc, #48]	; (8002a40 <__NVIC_SetPriority+0x4c>)
 8002a0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a12:	0112      	lsls	r2, r2, #4
 8002a14:	b2d2      	uxtb	r2, r2
 8002a16:	440b      	add	r3, r1
 8002a18:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a1c:	e00a      	b.n	8002a34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	b2da      	uxtb	r2, r3
 8002a22:	4908      	ldr	r1, [pc, #32]	; (8002a44 <__NVIC_SetPriority+0x50>)
 8002a24:	79fb      	ldrb	r3, [r7, #7]
 8002a26:	f003 030f 	and.w	r3, r3, #15
 8002a2a:	3b04      	subs	r3, #4
 8002a2c:	0112      	lsls	r2, r2, #4
 8002a2e:	b2d2      	uxtb	r2, r2
 8002a30:	440b      	add	r3, r1
 8002a32:	761a      	strb	r2, [r3, #24]
}
 8002a34:	bf00      	nop
 8002a36:	370c      	adds	r7, #12
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3e:	4770      	bx	lr
 8002a40:	e000e100 	.word	0xe000e100
 8002a44:	e000ed00 	.word	0xe000ed00

08002a48 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a48:	b480      	push	{r7}
 8002a4a:	b089      	sub	sp, #36	; 0x24
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	60f8      	str	r0, [r7, #12]
 8002a50:	60b9      	str	r1, [r7, #8]
 8002a52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	f003 0307 	and.w	r3, r3, #7
 8002a5a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a5c:	69fb      	ldr	r3, [r7, #28]
 8002a5e:	f1c3 0307 	rsb	r3, r3, #7
 8002a62:	2b04      	cmp	r3, #4
 8002a64:	bf28      	it	cs
 8002a66:	2304      	movcs	r3, #4
 8002a68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a6a:	69fb      	ldr	r3, [r7, #28]
 8002a6c:	3304      	adds	r3, #4
 8002a6e:	2b06      	cmp	r3, #6
 8002a70:	d902      	bls.n	8002a78 <NVIC_EncodePriority+0x30>
 8002a72:	69fb      	ldr	r3, [r7, #28]
 8002a74:	3b03      	subs	r3, #3
 8002a76:	e000      	b.n	8002a7a <NVIC_EncodePriority+0x32>
 8002a78:	2300      	movs	r3, #0
 8002a7a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a7c:	f04f 32ff 	mov.w	r2, #4294967295
 8002a80:	69bb      	ldr	r3, [r7, #24]
 8002a82:	fa02 f303 	lsl.w	r3, r2, r3
 8002a86:	43da      	mvns	r2, r3
 8002a88:	68bb      	ldr	r3, [r7, #8]
 8002a8a:	401a      	ands	r2, r3
 8002a8c:	697b      	ldr	r3, [r7, #20]
 8002a8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a90:	f04f 31ff 	mov.w	r1, #4294967295
 8002a94:	697b      	ldr	r3, [r7, #20]
 8002a96:	fa01 f303 	lsl.w	r3, r1, r3
 8002a9a:	43d9      	mvns	r1, r3
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002aa0:	4313      	orrs	r3, r2
         );
}
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	3724      	adds	r7, #36	; 0x24
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aac:	4770      	bx	lr
	...

08002ab0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b082      	sub	sp, #8
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	3b01      	subs	r3, #1
 8002abc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ac0:	d301      	bcc.n	8002ac6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	e00f      	b.n	8002ae6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002ac6:	4a0a      	ldr	r2, [pc, #40]	; (8002af0 <SysTick_Config+0x40>)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	3b01      	subs	r3, #1
 8002acc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002ace:	210f      	movs	r1, #15
 8002ad0:	f04f 30ff 	mov.w	r0, #4294967295
 8002ad4:	f7ff ff8e 	bl	80029f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ad8:	4b05      	ldr	r3, [pc, #20]	; (8002af0 <SysTick_Config+0x40>)
 8002ada:	2200      	movs	r2, #0
 8002adc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002ade:	4b04      	ldr	r3, [pc, #16]	; (8002af0 <SysTick_Config+0x40>)
 8002ae0:	2207      	movs	r2, #7
 8002ae2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ae4:	2300      	movs	r3, #0
}
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	3708      	adds	r7, #8
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bd80      	pop	{r7, pc}
 8002aee:	bf00      	nop
 8002af0:	e000e010 	.word	0xe000e010

08002af4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b082      	sub	sp, #8
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002afc:	6878      	ldr	r0, [r7, #4]
 8002afe:	f7ff ff47 	bl	8002990 <__NVIC_SetPriorityGrouping>
}
 8002b02:	bf00      	nop
 8002b04:	3708      	adds	r7, #8
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bd80      	pop	{r7, pc}

08002b0a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002b0a:	b580      	push	{r7, lr}
 8002b0c:	b086      	sub	sp, #24
 8002b0e:	af00      	add	r7, sp, #0
 8002b10:	4603      	mov	r3, r0
 8002b12:	60b9      	str	r1, [r7, #8]
 8002b14:	607a      	str	r2, [r7, #4]
 8002b16:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002b18:	2300      	movs	r3, #0
 8002b1a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002b1c:	f7ff ff5c 	bl	80029d8 <__NVIC_GetPriorityGrouping>
 8002b20:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b22:	687a      	ldr	r2, [r7, #4]
 8002b24:	68b9      	ldr	r1, [r7, #8]
 8002b26:	6978      	ldr	r0, [r7, #20]
 8002b28:	f7ff ff8e 	bl	8002a48 <NVIC_EncodePriority>
 8002b2c:	4602      	mov	r2, r0
 8002b2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b32:	4611      	mov	r1, r2
 8002b34:	4618      	mov	r0, r3
 8002b36:	f7ff ff5d 	bl	80029f4 <__NVIC_SetPriority>
}
 8002b3a:	bf00      	nop
 8002b3c:	3718      	adds	r7, #24
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bd80      	pop	{r7, pc}

08002b42 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b42:	b580      	push	{r7, lr}
 8002b44:	b082      	sub	sp, #8
 8002b46:	af00      	add	r7, sp, #0
 8002b48:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b4a:	6878      	ldr	r0, [r7, #4]
 8002b4c:	f7ff ffb0 	bl	8002ab0 <SysTick_Config>
 8002b50:	4603      	mov	r3, r0
}
 8002b52:	4618      	mov	r0, r3
 8002b54:	3708      	adds	r7, #8
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bd80      	pop	{r7, pc}
	...

08002b5c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	b089      	sub	sp, #36	; 0x24
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
 8002b64:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002b66:	2300      	movs	r3, #0
 8002b68:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002b6e:	2300      	movs	r3, #0
 8002b70:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b72:	2300      	movs	r3, #0
 8002b74:	61fb      	str	r3, [r7, #28]
 8002b76:	e165      	b.n	8002e44 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002b78:	2201      	movs	r2, #1
 8002b7a:	69fb      	ldr	r3, [r7, #28]
 8002b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b80:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	697a      	ldr	r2, [r7, #20]
 8002b88:	4013      	ands	r3, r2
 8002b8a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002b8c:	693a      	ldr	r2, [r7, #16]
 8002b8e:	697b      	ldr	r3, [r7, #20]
 8002b90:	429a      	cmp	r2, r3
 8002b92:	f040 8154 	bne.w	8002e3e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	f003 0303 	and.w	r3, r3, #3
 8002b9e:	2b01      	cmp	r3, #1
 8002ba0:	d005      	beq.n	8002bae <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002baa:	2b02      	cmp	r3, #2
 8002bac:	d130      	bne.n	8002c10 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	689b      	ldr	r3, [r3, #8]
 8002bb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002bb4:	69fb      	ldr	r3, [r7, #28]
 8002bb6:	005b      	lsls	r3, r3, #1
 8002bb8:	2203      	movs	r2, #3
 8002bba:	fa02 f303 	lsl.w	r3, r2, r3
 8002bbe:	43db      	mvns	r3, r3
 8002bc0:	69ba      	ldr	r2, [r7, #24]
 8002bc2:	4013      	ands	r3, r2
 8002bc4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	68da      	ldr	r2, [r3, #12]
 8002bca:	69fb      	ldr	r3, [r7, #28]
 8002bcc:	005b      	lsls	r3, r3, #1
 8002bce:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd2:	69ba      	ldr	r2, [r7, #24]
 8002bd4:	4313      	orrs	r3, r2
 8002bd6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	69ba      	ldr	r2, [r7, #24]
 8002bdc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002be4:	2201      	movs	r2, #1
 8002be6:	69fb      	ldr	r3, [r7, #28]
 8002be8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bec:	43db      	mvns	r3, r3
 8002bee:	69ba      	ldr	r2, [r7, #24]
 8002bf0:	4013      	ands	r3, r2
 8002bf2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	091b      	lsrs	r3, r3, #4
 8002bfa:	f003 0201 	and.w	r2, r3, #1
 8002bfe:	69fb      	ldr	r3, [r7, #28]
 8002c00:	fa02 f303 	lsl.w	r3, r2, r3
 8002c04:	69ba      	ldr	r2, [r7, #24]
 8002c06:	4313      	orrs	r3, r2
 8002c08:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	69ba      	ldr	r2, [r7, #24]
 8002c0e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	f003 0303 	and.w	r3, r3, #3
 8002c18:	2b03      	cmp	r3, #3
 8002c1a:	d017      	beq.n	8002c4c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	68db      	ldr	r3, [r3, #12]
 8002c20:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002c22:	69fb      	ldr	r3, [r7, #28]
 8002c24:	005b      	lsls	r3, r3, #1
 8002c26:	2203      	movs	r2, #3
 8002c28:	fa02 f303 	lsl.w	r3, r2, r3
 8002c2c:	43db      	mvns	r3, r3
 8002c2e:	69ba      	ldr	r2, [r7, #24]
 8002c30:	4013      	ands	r3, r2
 8002c32:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	689a      	ldr	r2, [r3, #8]
 8002c38:	69fb      	ldr	r3, [r7, #28]
 8002c3a:	005b      	lsls	r3, r3, #1
 8002c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c40:	69ba      	ldr	r2, [r7, #24]
 8002c42:	4313      	orrs	r3, r2
 8002c44:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	69ba      	ldr	r2, [r7, #24]
 8002c4a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	f003 0303 	and.w	r3, r3, #3
 8002c54:	2b02      	cmp	r3, #2
 8002c56:	d123      	bne.n	8002ca0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002c58:	69fb      	ldr	r3, [r7, #28]
 8002c5a:	08da      	lsrs	r2, r3, #3
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	3208      	adds	r2, #8
 8002c60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c64:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002c66:	69fb      	ldr	r3, [r7, #28]
 8002c68:	f003 0307 	and.w	r3, r3, #7
 8002c6c:	009b      	lsls	r3, r3, #2
 8002c6e:	220f      	movs	r2, #15
 8002c70:	fa02 f303 	lsl.w	r3, r2, r3
 8002c74:	43db      	mvns	r3, r3
 8002c76:	69ba      	ldr	r2, [r7, #24]
 8002c78:	4013      	ands	r3, r2
 8002c7a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	691a      	ldr	r2, [r3, #16]
 8002c80:	69fb      	ldr	r3, [r7, #28]
 8002c82:	f003 0307 	and.w	r3, r3, #7
 8002c86:	009b      	lsls	r3, r3, #2
 8002c88:	fa02 f303 	lsl.w	r3, r2, r3
 8002c8c:	69ba      	ldr	r2, [r7, #24]
 8002c8e:	4313      	orrs	r3, r2
 8002c90:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002c92:	69fb      	ldr	r3, [r7, #28]
 8002c94:	08da      	lsrs	r2, r3, #3
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	3208      	adds	r2, #8
 8002c9a:	69b9      	ldr	r1, [r7, #24]
 8002c9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002ca6:	69fb      	ldr	r3, [r7, #28]
 8002ca8:	005b      	lsls	r3, r3, #1
 8002caa:	2203      	movs	r2, #3
 8002cac:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb0:	43db      	mvns	r3, r3
 8002cb2:	69ba      	ldr	r2, [r7, #24]
 8002cb4:	4013      	ands	r3, r2
 8002cb6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	685b      	ldr	r3, [r3, #4]
 8002cbc:	f003 0203 	and.w	r2, r3, #3
 8002cc0:	69fb      	ldr	r3, [r7, #28]
 8002cc2:	005b      	lsls	r3, r3, #1
 8002cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc8:	69ba      	ldr	r2, [r7, #24]
 8002cca:	4313      	orrs	r3, r2
 8002ccc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	69ba      	ldr	r2, [r7, #24]
 8002cd2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	f000 80ae 	beq.w	8002e3e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	60fb      	str	r3, [r7, #12]
 8002ce6:	4b5d      	ldr	r3, [pc, #372]	; (8002e5c <HAL_GPIO_Init+0x300>)
 8002ce8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cea:	4a5c      	ldr	r2, [pc, #368]	; (8002e5c <HAL_GPIO_Init+0x300>)
 8002cec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002cf0:	6453      	str	r3, [r2, #68]	; 0x44
 8002cf2:	4b5a      	ldr	r3, [pc, #360]	; (8002e5c <HAL_GPIO_Init+0x300>)
 8002cf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cf6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002cfa:	60fb      	str	r3, [r7, #12]
 8002cfc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002cfe:	4a58      	ldr	r2, [pc, #352]	; (8002e60 <HAL_GPIO_Init+0x304>)
 8002d00:	69fb      	ldr	r3, [r7, #28]
 8002d02:	089b      	lsrs	r3, r3, #2
 8002d04:	3302      	adds	r3, #2
 8002d06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002d0c:	69fb      	ldr	r3, [r7, #28]
 8002d0e:	f003 0303 	and.w	r3, r3, #3
 8002d12:	009b      	lsls	r3, r3, #2
 8002d14:	220f      	movs	r2, #15
 8002d16:	fa02 f303 	lsl.w	r3, r2, r3
 8002d1a:	43db      	mvns	r3, r3
 8002d1c:	69ba      	ldr	r2, [r7, #24]
 8002d1e:	4013      	ands	r3, r2
 8002d20:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	4a4f      	ldr	r2, [pc, #316]	; (8002e64 <HAL_GPIO_Init+0x308>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d025      	beq.n	8002d76 <HAL_GPIO_Init+0x21a>
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	4a4e      	ldr	r2, [pc, #312]	; (8002e68 <HAL_GPIO_Init+0x30c>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d01f      	beq.n	8002d72 <HAL_GPIO_Init+0x216>
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	4a4d      	ldr	r2, [pc, #308]	; (8002e6c <HAL_GPIO_Init+0x310>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d019      	beq.n	8002d6e <HAL_GPIO_Init+0x212>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	4a4c      	ldr	r2, [pc, #304]	; (8002e70 <HAL_GPIO_Init+0x314>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d013      	beq.n	8002d6a <HAL_GPIO_Init+0x20e>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	4a4b      	ldr	r2, [pc, #300]	; (8002e74 <HAL_GPIO_Init+0x318>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d00d      	beq.n	8002d66 <HAL_GPIO_Init+0x20a>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	4a4a      	ldr	r2, [pc, #296]	; (8002e78 <HAL_GPIO_Init+0x31c>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d007      	beq.n	8002d62 <HAL_GPIO_Init+0x206>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	4a49      	ldr	r2, [pc, #292]	; (8002e7c <HAL_GPIO_Init+0x320>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d101      	bne.n	8002d5e <HAL_GPIO_Init+0x202>
 8002d5a:	2306      	movs	r3, #6
 8002d5c:	e00c      	b.n	8002d78 <HAL_GPIO_Init+0x21c>
 8002d5e:	2307      	movs	r3, #7
 8002d60:	e00a      	b.n	8002d78 <HAL_GPIO_Init+0x21c>
 8002d62:	2305      	movs	r3, #5
 8002d64:	e008      	b.n	8002d78 <HAL_GPIO_Init+0x21c>
 8002d66:	2304      	movs	r3, #4
 8002d68:	e006      	b.n	8002d78 <HAL_GPIO_Init+0x21c>
 8002d6a:	2303      	movs	r3, #3
 8002d6c:	e004      	b.n	8002d78 <HAL_GPIO_Init+0x21c>
 8002d6e:	2302      	movs	r3, #2
 8002d70:	e002      	b.n	8002d78 <HAL_GPIO_Init+0x21c>
 8002d72:	2301      	movs	r3, #1
 8002d74:	e000      	b.n	8002d78 <HAL_GPIO_Init+0x21c>
 8002d76:	2300      	movs	r3, #0
 8002d78:	69fa      	ldr	r2, [r7, #28]
 8002d7a:	f002 0203 	and.w	r2, r2, #3
 8002d7e:	0092      	lsls	r2, r2, #2
 8002d80:	4093      	lsls	r3, r2
 8002d82:	69ba      	ldr	r2, [r7, #24]
 8002d84:	4313      	orrs	r3, r2
 8002d86:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002d88:	4935      	ldr	r1, [pc, #212]	; (8002e60 <HAL_GPIO_Init+0x304>)
 8002d8a:	69fb      	ldr	r3, [r7, #28]
 8002d8c:	089b      	lsrs	r3, r3, #2
 8002d8e:	3302      	adds	r3, #2
 8002d90:	69ba      	ldr	r2, [r7, #24]
 8002d92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002d96:	4b3a      	ldr	r3, [pc, #232]	; (8002e80 <HAL_GPIO_Init+0x324>)
 8002d98:	689b      	ldr	r3, [r3, #8]
 8002d9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d9c:	693b      	ldr	r3, [r7, #16]
 8002d9e:	43db      	mvns	r3, r3
 8002da0:	69ba      	ldr	r2, [r7, #24]
 8002da2:	4013      	ands	r3, r2
 8002da4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	685b      	ldr	r3, [r3, #4]
 8002daa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d003      	beq.n	8002dba <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002db2:	69ba      	ldr	r2, [r7, #24]
 8002db4:	693b      	ldr	r3, [r7, #16]
 8002db6:	4313      	orrs	r3, r2
 8002db8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002dba:	4a31      	ldr	r2, [pc, #196]	; (8002e80 <HAL_GPIO_Init+0x324>)
 8002dbc:	69bb      	ldr	r3, [r7, #24]
 8002dbe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002dc0:	4b2f      	ldr	r3, [pc, #188]	; (8002e80 <HAL_GPIO_Init+0x324>)
 8002dc2:	68db      	ldr	r3, [r3, #12]
 8002dc4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002dc6:	693b      	ldr	r3, [r7, #16]
 8002dc8:	43db      	mvns	r3, r3
 8002dca:	69ba      	ldr	r2, [r7, #24]
 8002dcc:	4013      	ands	r3, r2
 8002dce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	685b      	ldr	r3, [r3, #4]
 8002dd4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d003      	beq.n	8002de4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002ddc:	69ba      	ldr	r2, [r7, #24]
 8002dde:	693b      	ldr	r3, [r7, #16]
 8002de0:	4313      	orrs	r3, r2
 8002de2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002de4:	4a26      	ldr	r2, [pc, #152]	; (8002e80 <HAL_GPIO_Init+0x324>)
 8002de6:	69bb      	ldr	r3, [r7, #24]
 8002de8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002dea:	4b25      	ldr	r3, [pc, #148]	; (8002e80 <HAL_GPIO_Init+0x324>)
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002df0:	693b      	ldr	r3, [r7, #16]
 8002df2:	43db      	mvns	r3, r3
 8002df4:	69ba      	ldr	r2, [r7, #24]
 8002df6:	4013      	ands	r3, r2
 8002df8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	685b      	ldr	r3, [r3, #4]
 8002dfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d003      	beq.n	8002e0e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002e06:	69ba      	ldr	r2, [r7, #24]
 8002e08:	693b      	ldr	r3, [r7, #16]
 8002e0a:	4313      	orrs	r3, r2
 8002e0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002e0e:	4a1c      	ldr	r2, [pc, #112]	; (8002e80 <HAL_GPIO_Init+0x324>)
 8002e10:	69bb      	ldr	r3, [r7, #24]
 8002e12:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002e14:	4b1a      	ldr	r3, [pc, #104]	; (8002e80 <HAL_GPIO_Init+0x324>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e1a:	693b      	ldr	r3, [r7, #16]
 8002e1c:	43db      	mvns	r3, r3
 8002e1e:	69ba      	ldr	r2, [r7, #24]
 8002e20:	4013      	ands	r3, r2
 8002e22:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d003      	beq.n	8002e38 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002e30:	69ba      	ldr	r2, [r7, #24]
 8002e32:	693b      	ldr	r3, [r7, #16]
 8002e34:	4313      	orrs	r3, r2
 8002e36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002e38:	4a11      	ldr	r2, [pc, #68]	; (8002e80 <HAL_GPIO_Init+0x324>)
 8002e3a:	69bb      	ldr	r3, [r7, #24]
 8002e3c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e3e:	69fb      	ldr	r3, [r7, #28]
 8002e40:	3301      	adds	r3, #1
 8002e42:	61fb      	str	r3, [r7, #28]
 8002e44:	69fb      	ldr	r3, [r7, #28]
 8002e46:	2b0f      	cmp	r3, #15
 8002e48:	f67f ae96 	bls.w	8002b78 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002e4c:	bf00      	nop
 8002e4e:	bf00      	nop
 8002e50:	3724      	adds	r7, #36	; 0x24
 8002e52:	46bd      	mov	sp, r7
 8002e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e58:	4770      	bx	lr
 8002e5a:	bf00      	nop
 8002e5c:	40023800 	.word	0x40023800
 8002e60:	40013800 	.word	0x40013800
 8002e64:	40020000 	.word	0x40020000
 8002e68:	40020400 	.word	0x40020400
 8002e6c:	40020800 	.word	0x40020800
 8002e70:	40020c00 	.word	0x40020c00
 8002e74:	40021000 	.word	0x40021000
 8002e78:	40021400 	.word	0x40021400
 8002e7c:	40021800 	.word	0x40021800
 8002e80:	40013c00 	.word	0x40013c00

08002e84 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b084      	sub	sp, #16
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
 8002e8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d101      	bne.n	8002e98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e94:	2301      	movs	r3, #1
 8002e96:	e0cc      	b.n	8003032 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002e98:	4b68      	ldr	r3, [pc, #416]	; (800303c <HAL_RCC_ClockConfig+0x1b8>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f003 030f 	and.w	r3, r3, #15
 8002ea0:	683a      	ldr	r2, [r7, #0]
 8002ea2:	429a      	cmp	r2, r3
 8002ea4:	d90c      	bls.n	8002ec0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ea6:	4b65      	ldr	r3, [pc, #404]	; (800303c <HAL_RCC_ClockConfig+0x1b8>)
 8002ea8:	683a      	ldr	r2, [r7, #0]
 8002eaa:	b2d2      	uxtb	r2, r2
 8002eac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002eae:	4b63      	ldr	r3, [pc, #396]	; (800303c <HAL_RCC_ClockConfig+0x1b8>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f003 030f 	and.w	r3, r3, #15
 8002eb6:	683a      	ldr	r2, [r7, #0]
 8002eb8:	429a      	cmp	r2, r3
 8002eba:	d001      	beq.n	8002ec0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002ebc:	2301      	movs	r3, #1
 8002ebe:	e0b8      	b.n	8003032 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f003 0302 	and.w	r3, r3, #2
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d020      	beq.n	8002f0e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f003 0304 	and.w	r3, r3, #4
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d005      	beq.n	8002ee4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ed8:	4b59      	ldr	r3, [pc, #356]	; (8003040 <HAL_RCC_ClockConfig+0x1bc>)
 8002eda:	689b      	ldr	r3, [r3, #8]
 8002edc:	4a58      	ldr	r2, [pc, #352]	; (8003040 <HAL_RCC_ClockConfig+0x1bc>)
 8002ede:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002ee2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f003 0308 	and.w	r3, r3, #8
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d005      	beq.n	8002efc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ef0:	4b53      	ldr	r3, [pc, #332]	; (8003040 <HAL_RCC_ClockConfig+0x1bc>)
 8002ef2:	689b      	ldr	r3, [r3, #8]
 8002ef4:	4a52      	ldr	r2, [pc, #328]	; (8003040 <HAL_RCC_ClockConfig+0x1bc>)
 8002ef6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002efa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002efc:	4b50      	ldr	r3, [pc, #320]	; (8003040 <HAL_RCC_ClockConfig+0x1bc>)
 8002efe:	689b      	ldr	r3, [r3, #8]
 8002f00:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	689b      	ldr	r3, [r3, #8]
 8002f08:	494d      	ldr	r1, [pc, #308]	; (8003040 <HAL_RCC_ClockConfig+0x1bc>)
 8002f0a:	4313      	orrs	r3, r2
 8002f0c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f003 0301 	and.w	r3, r3, #1
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d044      	beq.n	8002fa4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	2b01      	cmp	r3, #1
 8002f20:	d107      	bne.n	8002f32 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f22:	4b47      	ldr	r3, [pc, #284]	; (8003040 <HAL_RCC_ClockConfig+0x1bc>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d119      	bne.n	8002f62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	e07f      	b.n	8003032 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	685b      	ldr	r3, [r3, #4]
 8002f36:	2b02      	cmp	r3, #2
 8002f38:	d003      	beq.n	8002f42 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f3e:	2b03      	cmp	r3, #3
 8002f40:	d107      	bne.n	8002f52 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f42:	4b3f      	ldr	r3, [pc, #252]	; (8003040 <HAL_RCC_ClockConfig+0x1bc>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d109      	bne.n	8002f62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f4e:	2301      	movs	r3, #1
 8002f50:	e06f      	b.n	8003032 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f52:	4b3b      	ldr	r3, [pc, #236]	; (8003040 <HAL_RCC_ClockConfig+0x1bc>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f003 0302 	and.w	r3, r3, #2
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d101      	bne.n	8002f62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	e067      	b.n	8003032 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f62:	4b37      	ldr	r3, [pc, #220]	; (8003040 <HAL_RCC_ClockConfig+0x1bc>)
 8002f64:	689b      	ldr	r3, [r3, #8]
 8002f66:	f023 0203 	bic.w	r2, r3, #3
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	4934      	ldr	r1, [pc, #208]	; (8003040 <HAL_RCC_ClockConfig+0x1bc>)
 8002f70:	4313      	orrs	r3, r2
 8002f72:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f74:	f7ff f8cc 	bl	8002110 <HAL_GetTick>
 8002f78:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f7a:	e00a      	b.n	8002f92 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f7c:	f7ff f8c8 	bl	8002110 <HAL_GetTick>
 8002f80:	4602      	mov	r2, r0
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	1ad3      	subs	r3, r2, r3
 8002f86:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d901      	bls.n	8002f92 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002f8e:	2303      	movs	r3, #3
 8002f90:	e04f      	b.n	8003032 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f92:	4b2b      	ldr	r3, [pc, #172]	; (8003040 <HAL_RCC_ClockConfig+0x1bc>)
 8002f94:	689b      	ldr	r3, [r3, #8]
 8002f96:	f003 020c 	and.w	r2, r3, #12
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	009b      	lsls	r3, r3, #2
 8002fa0:	429a      	cmp	r2, r3
 8002fa2:	d1eb      	bne.n	8002f7c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002fa4:	4b25      	ldr	r3, [pc, #148]	; (800303c <HAL_RCC_ClockConfig+0x1b8>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f003 030f 	and.w	r3, r3, #15
 8002fac:	683a      	ldr	r2, [r7, #0]
 8002fae:	429a      	cmp	r2, r3
 8002fb0:	d20c      	bcs.n	8002fcc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fb2:	4b22      	ldr	r3, [pc, #136]	; (800303c <HAL_RCC_ClockConfig+0x1b8>)
 8002fb4:	683a      	ldr	r2, [r7, #0]
 8002fb6:	b2d2      	uxtb	r2, r2
 8002fb8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fba:	4b20      	ldr	r3, [pc, #128]	; (800303c <HAL_RCC_ClockConfig+0x1b8>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f003 030f 	and.w	r3, r3, #15
 8002fc2:	683a      	ldr	r2, [r7, #0]
 8002fc4:	429a      	cmp	r2, r3
 8002fc6:	d001      	beq.n	8002fcc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002fc8:	2301      	movs	r3, #1
 8002fca:	e032      	b.n	8003032 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f003 0304 	and.w	r3, r3, #4
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d008      	beq.n	8002fea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002fd8:	4b19      	ldr	r3, [pc, #100]	; (8003040 <HAL_RCC_ClockConfig+0x1bc>)
 8002fda:	689b      	ldr	r3, [r3, #8]
 8002fdc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	68db      	ldr	r3, [r3, #12]
 8002fe4:	4916      	ldr	r1, [pc, #88]	; (8003040 <HAL_RCC_ClockConfig+0x1bc>)
 8002fe6:	4313      	orrs	r3, r2
 8002fe8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f003 0308 	and.w	r3, r3, #8
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d009      	beq.n	800300a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002ff6:	4b12      	ldr	r3, [pc, #72]	; (8003040 <HAL_RCC_ClockConfig+0x1bc>)
 8002ff8:	689b      	ldr	r3, [r3, #8]
 8002ffa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	691b      	ldr	r3, [r3, #16]
 8003002:	00db      	lsls	r3, r3, #3
 8003004:	490e      	ldr	r1, [pc, #56]	; (8003040 <HAL_RCC_ClockConfig+0x1bc>)
 8003006:	4313      	orrs	r3, r2
 8003008:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800300a:	f000 f821 	bl	8003050 <HAL_RCC_GetSysClockFreq>
 800300e:	4602      	mov	r2, r0
 8003010:	4b0b      	ldr	r3, [pc, #44]	; (8003040 <HAL_RCC_ClockConfig+0x1bc>)
 8003012:	689b      	ldr	r3, [r3, #8]
 8003014:	091b      	lsrs	r3, r3, #4
 8003016:	f003 030f 	and.w	r3, r3, #15
 800301a:	490a      	ldr	r1, [pc, #40]	; (8003044 <HAL_RCC_ClockConfig+0x1c0>)
 800301c:	5ccb      	ldrb	r3, [r1, r3]
 800301e:	fa22 f303 	lsr.w	r3, r2, r3
 8003022:	4a09      	ldr	r2, [pc, #36]	; (8003048 <HAL_RCC_ClockConfig+0x1c4>)
 8003024:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003026:	4b09      	ldr	r3, [pc, #36]	; (800304c <HAL_RCC_ClockConfig+0x1c8>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	4618      	mov	r0, r3
 800302c:	f7ff f82c 	bl	8002088 <HAL_InitTick>

  return HAL_OK;
 8003030:	2300      	movs	r3, #0
}
 8003032:	4618      	mov	r0, r3
 8003034:	3710      	adds	r7, #16
 8003036:	46bd      	mov	sp, r7
 8003038:	bd80      	pop	{r7, pc}
 800303a:	bf00      	nop
 800303c:	40023c00 	.word	0x40023c00
 8003040:	40023800 	.word	0x40023800
 8003044:	08003a5c 	.word	0x08003a5c
 8003048:	20000000 	.word	0x20000000
 800304c:	20000004 	.word	0x20000004

08003050 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003050:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003054:	b0ae      	sub	sp, #184	; 0xb8
 8003056:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003058:	2300      	movs	r3, #0
 800305a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 800305e:	2300      	movs	r3, #0
 8003060:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8003064:	2300      	movs	r3, #0
 8003066:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 800306a:	2300      	movs	r3, #0
 800306c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8003070:	2300      	movs	r3, #0
 8003072:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003076:	4bcb      	ldr	r3, [pc, #812]	; (80033a4 <HAL_RCC_GetSysClockFreq+0x354>)
 8003078:	689b      	ldr	r3, [r3, #8]
 800307a:	f003 030c 	and.w	r3, r3, #12
 800307e:	2b0c      	cmp	r3, #12
 8003080:	f200 8206 	bhi.w	8003490 <HAL_RCC_GetSysClockFreq+0x440>
 8003084:	a201      	add	r2, pc, #4	; (adr r2, 800308c <HAL_RCC_GetSysClockFreq+0x3c>)
 8003086:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800308a:	bf00      	nop
 800308c:	080030c1 	.word	0x080030c1
 8003090:	08003491 	.word	0x08003491
 8003094:	08003491 	.word	0x08003491
 8003098:	08003491 	.word	0x08003491
 800309c:	080030c9 	.word	0x080030c9
 80030a0:	08003491 	.word	0x08003491
 80030a4:	08003491 	.word	0x08003491
 80030a8:	08003491 	.word	0x08003491
 80030ac:	080030d1 	.word	0x080030d1
 80030b0:	08003491 	.word	0x08003491
 80030b4:	08003491 	.word	0x08003491
 80030b8:	08003491 	.word	0x08003491
 80030bc:	080032c1 	.word	0x080032c1
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80030c0:	4bb9      	ldr	r3, [pc, #740]	; (80033a8 <HAL_RCC_GetSysClockFreq+0x358>)
 80030c2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 80030c6:	e1e7      	b.n	8003498 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80030c8:	4bb8      	ldr	r3, [pc, #736]	; (80033ac <HAL_RCC_GetSysClockFreq+0x35c>)
 80030ca:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80030ce:	e1e3      	b.n	8003498 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80030d0:	4bb4      	ldr	r3, [pc, #720]	; (80033a4 <HAL_RCC_GetSysClockFreq+0x354>)
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80030d8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80030dc:	4bb1      	ldr	r3, [pc, #708]	; (80033a4 <HAL_RCC_GetSysClockFreq+0x354>)
 80030de:	685b      	ldr	r3, [r3, #4]
 80030e0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d071      	beq.n	80031cc <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80030e8:	4bae      	ldr	r3, [pc, #696]	; (80033a4 <HAL_RCC_GetSysClockFreq+0x354>)
 80030ea:	685b      	ldr	r3, [r3, #4]
 80030ec:	099b      	lsrs	r3, r3, #6
 80030ee:	2200      	movs	r2, #0
 80030f0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80030f4:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80030f8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80030fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003100:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003104:	2300      	movs	r3, #0
 8003106:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800310a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800310e:	4622      	mov	r2, r4
 8003110:	462b      	mov	r3, r5
 8003112:	f04f 0000 	mov.w	r0, #0
 8003116:	f04f 0100 	mov.w	r1, #0
 800311a:	0159      	lsls	r1, r3, #5
 800311c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003120:	0150      	lsls	r0, r2, #5
 8003122:	4602      	mov	r2, r0
 8003124:	460b      	mov	r3, r1
 8003126:	4621      	mov	r1, r4
 8003128:	1a51      	subs	r1, r2, r1
 800312a:	6439      	str	r1, [r7, #64]	; 0x40
 800312c:	4629      	mov	r1, r5
 800312e:	eb63 0301 	sbc.w	r3, r3, r1
 8003132:	647b      	str	r3, [r7, #68]	; 0x44
 8003134:	f04f 0200 	mov.w	r2, #0
 8003138:	f04f 0300 	mov.w	r3, #0
 800313c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8003140:	4649      	mov	r1, r9
 8003142:	018b      	lsls	r3, r1, #6
 8003144:	4641      	mov	r1, r8
 8003146:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800314a:	4641      	mov	r1, r8
 800314c:	018a      	lsls	r2, r1, #6
 800314e:	4641      	mov	r1, r8
 8003150:	1a51      	subs	r1, r2, r1
 8003152:	63b9      	str	r1, [r7, #56]	; 0x38
 8003154:	4649      	mov	r1, r9
 8003156:	eb63 0301 	sbc.w	r3, r3, r1
 800315a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800315c:	f04f 0200 	mov.w	r2, #0
 8003160:	f04f 0300 	mov.w	r3, #0
 8003164:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8003168:	4649      	mov	r1, r9
 800316a:	00cb      	lsls	r3, r1, #3
 800316c:	4641      	mov	r1, r8
 800316e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003172:	4641      	mov	r1, r8
 8003174:	00ca      	lsls	r2, r1, #3
 8003176:	4610      	mov	r0, r2
 8003178:	4619      	mov	r1, r3
 800317a:	4603      	mov	r3, r0
 800317c:	4622      	mov	r2, r4
 800317e:	189b      	adds	r3, r3, r2
 8003180:	633b      	str	r3, [r7, #48]	; 0x30
 8003182:	462b      	mov	r3, r5
 8003184:	460a      	mov	r2, r1
 8003186:	eb42 0303 	adc.w	r3, r2, r3
 800318a:	637b      	str	r3, [r7, #52]	; 0x34
 800318c:	f04f 0200 	mov.w	r2, #0
 8003190:	f04f 0300 	mov.w	r3, #0
 8003194:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003198:	4629      	mov	r1, r5
 800319a:	024b      	lsls	r3, r1, #9
 800319c:	4621      	mov	r1, r4
 800319e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80031a2:	4621      	mov	r1, r4
 80031a4:	024a      	lsls	r2, r1, #9
 80031a6:	4610      	mov	r0, r2
 80031a8:	4619      	mov	r1, r3
 80031aa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80031ae:	2200      	movs	r2, #0
 80031b0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80031b4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80031b8:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80031bc:	f7fd fb5a 	bl	8000874 <__aeabi_uldivmod>
 80031c0:	4602      	mov	r2, r0
 80031c2:	460b      	mov	r3, r1
 80031c4:	4613      	mov	r3, r2
 80031c6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80031ca:	e067      	b.n	800329c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80031cc:	4b75      	ldr	r3, [pc, #468]	; (80033a4 <HAL_RCC_GetSysClockFreq+0x354>)
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	099b      	lsrs	r3, r3, #6
 80031d2:	2200      	movs	r2, #0
 80031d4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80031d8:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80031dc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80031e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031e4:	67bb      	str	r3, [r7, #120]	; 0x78
 80031e6:	2300      	movs	r3, #0
 80031e8:	67fb      	str	r3, [r7, #124]	; 0x7c
 80031ea:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 80031ee:	4622      	mov	r2, r4
 80031f0:	462b      	mov	r3, r5
 80031f2:	f04f 0000 	mov.w	r0, #0
 80031f6:	f04f 0100 	mov.w	r1, #0
 80031fa:	0159      	lsls	r1, r3, #5
 80031fc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003200:	0150      	lsls	r0, r2, #5
 8003202:	4602      	mov	r2, r0
 8003204:	460b      	mov	r3, r1
 8003206:	4621      	mov	r1, r4
 8003208:	1a51      	subs	r1, r2, r1
 800320a:	62b9      	str	r1, [r7, #40]	; 0x28
 800320c:	4629      	mov	r1, r5
 800320e:	eb63 0301 	sbc.w	r3, r3, r1
 8003212:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003214:	f04f 0200 	mov.w	r2, #0
 8003218:	f04f 0300 	mov.w	r3, #0
 800321c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8003220:	4649      	mov	r1, r9
 8003222:	018b      	lsls	r3, r1, #6
 8003224:	4641      	mov	r1, r8
 8003226:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800322a:	4641      	mov	r1, r8
 800322c:	018a      	lsls	r2, r1, #6
 800322e:	4641      	mov	r1, r8
 8003230:	ebb2 0a01 	subs.w	sl, r2, r1
 8003234:	4649      	mov	r1, r9
 8003236:	eb63 0b01 	sbc.w	fp, r3, r1
 800323a:	f04f 0200 	mov.w	r2, #0
 800323e:	f04f 0300 	mov.w	r3, #0
 8003242:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003246:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800324a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800324e:	4692      	mov	sl, r2
 8003250:	469b      	mov	fp, r3
 8003252:	4623      	mov	r3, r4
 8003254:	eb1a 0303 	adds.w	r3, sl, r3
 8003258:	623b      	str	r3, [r7, #32]
 800325a:	462b      	mov	r3, r5
 800325c:	eb4b 0303 	adc.w	r3, fp, r3
 8003260:	627b      	str	r3, [r7, #36]	; 0x24
 8003262:	f04f 0200 	mov.w	r2, #0
 8003266:	f04f 0300 	mov.w	r3, #0
 800326a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800326e:	4629      	mov	r1, r5
 8003270:	028b      	lsls	r3, r1, #10
 8003272:	4621      	mov	r1, r4
 8003274:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003278:	4621      	mov	r1, r4
 800327a:	028a      	lsls	r2, r1, #10
 800327c:	4610      	mov	r0, r2
 800327e:	4619      	mov	r1, r3
 8003280:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003284:	2200      	movs	r2, #0
 8003286:	673b      	str	r3, [r7, #112]	; 0x70
 8003288:	677a      	str	r2, [r7, #116]	; 0x74
 800328a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800328e:	f7fd faf1 	bl	8000874 <__aeabi_uldivmod>
 8003292:	4602      	mov	r2, r0
 8003294:	460b      	mov	r3, r1
 8003296:	4613      	mov	r3, r2
 8003298:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800329c:	4b41      	ldr	r3, [pc, #260]	; (80033a4 <HAL_RCC_GetSysClockFreq+0x354>)
 800329e:	685b      	ldr	r3, [r3, #4]
 80032a0:	0c1b      	lsrs	r3, r3, #16
 80032a2:	f003 0303 	and.w	r3, r3, #3
 80032a6:	3301      	adds	r3, #1
 80032a8:	005b      	lsls	r3, r3, #1
 80032aa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 80032ae:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80032b2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80032b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80032ba:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80032be:	e0eb      	b.n	8003498 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80032c0:	4b38      	ldr	r3, [pc, #224]	; (80033a4 <HAL_RCC_GetSysClockFreq+0x354>)
 80032c2:	685b      	ldr	r3, [r3, #4]
 80032c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80032c8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80032cc:	4b35      	ldr	r3, [pc, #212]	; (80033a4 <HAL_RCC_GetSysClockFreq+0x354>)
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d06b      	beq.n	80033b0 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032d8:	4b32      	ldr	r3, [pc, #200]	; (80033a4 <HAL_RCC_GetSysClockFreq+0x354>)
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	099b      	lsrs	r3, r3, #6
 80032de:	2200      	movs	r2, #0
 80032e0:	66bb      	str	r3, [r7, #104]	; 0x68
 80032e2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80032e4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80032e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032ea:	663b      	str	r3, [r7, #96]	; 0x60
 80032ec:	2300      	movs	r3, #0
 80032ee:	667b      	str	r3, [r7, #100]	; 0x64
 80032f0:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80032f4:	4622      	mov	r2, r4
 80032f6:	462b      	mov	r3, r5
 80032f8:	f04f 0000 	mov.w	r0, #0
 80032fc:	f04f 0100 	mov.w	r1, #0
 8003300:	0159      	lsls	r1, r3, #5
 8003302:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003306:	0150      	lsls	r0, r2, #5
 8003308:	4602      	mov	r2, r0
 800330a:	460b      	mov	r3, r1
 800330c:	4621      	mov	r1, r4
 800330e:	1a51      	subs	r1, r2, r1
 8003310:	61b9      	str	r1, [r7, #24]
 8003312:	4629      	mov	r1, r5
 8003314:	eb63 0301 	sbc.w	r3, r3, r1
 8003318:	61fb      	str	r3, [r7, #28]
 800331a:	f04f 0200 	mov.w	r2, #0
 800331e:	f04f 0300 	mov.w	r3, #0
 8003322:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8003326:	4659      	mov	r1, fp
 8003328:	018b      	lsls	r3, r1, #6
 800332a:	4651      	mov	r1, sl
 800332c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003330:	4651      	mov	r1, sl
 8003332:	018a      	lsls	r2, r1, #6
 8003334:	4651      	mov	r1, sl
 8003336:	ebb2 0801 	subs.w	r8, r2, r1
 800333a:	4659      	mov	r1, fp
 800333c:	eb63 0901 	sbc.w	r9, r3, r1
 8003340:	f04f 0200 	mov.w	r2, #0
 8003344:	f04f 0300 	mov.w	r3, #0
 8003348:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800334c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003350:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003354:	4690      	mov	r8, r2
 8003356:	4699      	mov	r9, r3
 8003358:	4623      	mov	r3, r4
 800335a:	eb18 0303 	adds.w	r3, r8, r3
 800335e:	613b      	str	r3, [r7, #16]
 8003360:	462b      	mov	r3, r5
 8003362:	eb49 0303 	adc.w	r3, r9, r3
 8003366:	617b      	str	r3, [r7, #20]
 8003368:	f04f 0200 	mov.w	r2, #0
 800336c:	f04f 0300 	mov.w	r3, #0
 8003370:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003374:	4629      	mov	r1, r5
 8003376:	024b      	lsls	r3, r1, #9
 8003378:	4621      	mov	r1, r4
 800337a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800337e:	4621      	mov	r1, r4
 8003380:	024a      	lsls	r2, r1, #9
 8003382:	4610      	mov	r0, r2
 8003384:	4619      	mov	r1, r3
 8003386:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800338a:	2200      	movs	r2, #0
 800338c:	65bb      	str	r3, [r7, #88]	; 0x58
 800338e:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003390:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003394:	f7fd fa6e 	bl	8000874 <__aeabi_uldivmod>
 8003398:	4602      	mov	r2, r0
 800339a:	460b      	mov	r3, r1
 800339c:	4613      	mov	r3, r2
 800339e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80033a2:	e065      	b.n	8003470 <HAL_RCC_GetSysClockFreq+0x420>
 80033a4:	40023800 	.word	0x40023800
 80033a8:	00f42400 	.word	0x00f42400
 80033ac:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033b0:	4b3d      	ldr	r3, [pc, #244]	; (80034a8 <HAL_RCC_GetSysClockFreq+0x458>)
 80033b2:	685b      	ldr	r3, [r3, #4]
 80033b4:	099b      	lsrs	r3, r3, #6
 80033b6:	2200      	movs	r2, #0
 80033b8:	4618      	mov	r0, r3
 80033ba:	4611      	mov	r1, r2
 80033bc:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80033c0:	653b      	str	r3, [r7, #80]	; 0x50
 80033c2:	2300      	movs	r3, #0
 80033c4:	657b      	str	r3, [r7, #84]	; 0x54
 80033c6:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 80033ca:	4642      	mov	r2, r8
 80033cc:	464b      	mov	r3, r9
 80033ce:	f04f 0000 	mov.w	r0, #0
 80033d2:	f04f 0100 	mov.w	r1, #0
 80033d6:	0159      	lsls	r1, r3, #5
 80033d8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80033dc:	0150      	lsls	r0, r2, #5
 80033de:	4602      	mov	r2, r0
 80033e0:	460b      	mov	r3, r1
 80033e2:	4641      	mov	r1, r8
 80033e4:	1a51      	subs	r1, r2, r1
 80033e6:	60b9      	str	r1, [r7, #8]
 80033e8:	4649      	mov	r1, r9
 80033ea:	eb63 0301 	sbc.w	r3, r3, r1
 80033ee:	60fb      	str	r3, [r7, #12]
 80033f0:	f04f 0200 	mov.w	r2, #0
 80033f4:	f04f 0300 	mov.w	r3, #0
 80033f8:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80033fc:	4659      	mov	r1, fp
 80033fe:	018b      	lsls	r3, r1, #6
 8003400:	4651      	mov	r1, sl
 8003402:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003406:	4651      	mov	r1, sl
 8003408:	018a      	lsls	r2, r1, #6
 800340a:	4651      	mov	r1, sl
 800340c:	1a54      	subs	r4, r2, r1
 800340e:	4659      	mov	r1, fp
 8003410:	eb63 0501 	sbc.w	r5, r3, r1
 8003414:	f04f 0200 	mov.w	r2, #0
 8003418:	f04f 0300 	mov.w	r3, #0
 800341c:	00eb      	lsls	r3, r5, #3
 800341e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003422:	00e2      	lsls	r2, r4, #3
 8003424:	4614      	mov	r4, r2
 8003426:	461d      	mov	r5, r3
 8003428:	4643      	mov	r3, r8
 800342a:	18e3      	adds	r3, r4, r3
 800342c:	603b      	str	r3, [r7, #0]
 800342e:	464b      	mov	r3, r9
 8003430:	eb45 0303 	adc.w	r3, r5, r3
 8003434:	607b      	str	r3, [r7, #4]
 8003436:	f04f 0200 	mov.w	r2, #0
 800343a:	f04f 0300 	mov.w	r3, #0
 800343e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003442:	4629      	mov	r1, r5
 8003444:	028b      	lsls	r3, r1, #10
 8003446:	4621      	mov	r1, r4
 8003448:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800344c:	4621      	mov	r1, r4
 800344e:	028a      	lsls	r2, r1, #10
 8003450:	4610      	mov	r0, r2
 8003452:	4619      	mov	r1, r3
 8003454:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003458:	2200      	movs	r2, #0
 800345a:	64bb      	str	r3, [r7, #72]	; 0x48
 800345c:	64fa      	str	r2, [r7, #76]	; 0x4c
 800345e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003462:	f7fd fa07 	bl	8000874 <__aeabi_uldivmod>
 8003466:	4602      	mov	r2, r0
 8003468:	460b      	mov	r3, r1
 800346a:	4613      	mov	r3, r2
 800346c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003470:	4b0d      	ldr	r3, [pc, #52]	; (80034a8 <HAL_RCC_GetSysClockFreq+0x458>)
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	0f1b      	lsrs	r3, r3, #28
 8003476:	f003 0307 	and.w	r3, r3, #7
 800347a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 800347e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003482:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003486:	fbb2 f3f3 	udiv	r3, r2, r3
 800348a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800348e:	e003      	b.n	8003498 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003490:	4b06      	ldr	r3, [pc, #24]	; (80034ac <HAL_RCC_GetSysClockFreq+0x45c>)
 8003492:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003496:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003498:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 800349c:	4618      	mov	r0, r3
 800349e:	37b8      	adds	r7, #184	; 0xb8
 80034a0:	46bd      	mov	sp, r7
 80034a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80034a6:	bf00      	nop
 80034a8:	40023800 	.word	0x40023800
 80034ac:	00f42400 	.word	0x00f42400

080034b0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b086      	sub	sp, #24
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d101      	bne.n	80034c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80034be:	2301      	movs	r3, #1
 80034c0:	e28d      	b.n	80039de <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f003 0301 	and.w	r3, r3, #1
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	f000 8083 	beq.w	80035d6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80034d0:	4b94      	ldr	r3, [pc, #592]	; (8003724 <HAL_RCC_OscConfig+0x274>)
 80034d2:	689b      	ldr	r3, [r3, #8]
 80034d4:	f003 030c 	and.w	r3, r3, #12
 80034d8:	2b04      	cmp	r3, #4
 80034da:	d019      	beq.n	8003510 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80034dc:	4b91      	ldr	r3, [pc, #580]	; (8003724 <HAL_RCC_OscConfig+0x274>)
 80034de:	689b      	ldr	r3, [r3, #8]
 80034e0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80034e4:	2b08      	cmp	r3, #8
 80034e6:	d106      	bne.n	80034f6 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80034e8:	4b8e      	ldr	r3, [pc, #568]	; (8003724 <HAL_RCC_OscConfig+0x274>)
 80034ea:	685b      	ldr	r3, [r3, #4]
 80034ec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034f0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80034f4:	d00c      	beq.n	8003510 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80034f6:	4b8b      	ldr	r3, [pc, #556]	; (8003724 <HAL_RCC_OscConfig+0x274>)
 80034f8:	689b      	ldr	r3, [r3, #8]
 80034fa:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80034fe:	2b0c      	cmp	r3, #12
 8003500:	d112      	bne.n	8003528 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003502:	4b88      	ldr	r3, [pc, #544]	; (8003724 <HAL_RCC_OscConfig+0x274>)
 8003504:	685b      	ldr	r3, [r3, #4]
 8003506:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800350a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800350e:	d10b      	bne.n	8003528 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003510:	4b84      	ldr	r3, [pc, #528]	; (8003724 <HAL_RCC_OscConfig+0x274>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003518:	2b00      	cmp	r3, #0
 800351a:	d05b      	beq.n	80035d4 <HAL_RCC_OscConfig+0x124>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d157      	bne.n	80035d4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003524:	2301      	movs	r3, #1
 8003526:	e25a      	b.n	80039de <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003530:	d106      	bne.n	8003540 <HAL_RCC_OscConfig+0x90>
 8003532:	4b7c      	ldr	r3, [pc, #496]	; (8003724 <HAL_RCC_OscConfig+0x274>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	4a7b      	ldr	r2, [pc, #492]	; (8003724 <HAL_RCC_OscConfig+0x274>)
 8003538:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800353c:	6013      	str	r3, [r2, #0]
 800353e:	e01d      	b.n	800357c <HAL_RCC_OscConfig+0xcc>
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003548:	d10c      	bne.n	8003564 <HAL_RCC_OscConfig+0xb4>
 800354a:	4b76      	ldr	r3, [pc, #472]	; (8003724 <HAL_RCC_OscConfig+0x274>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4a75      	ldr	r2, [pc, #468]	; (8003724 <HAL_RCC_OscConfig+0x274>)
 8003550:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003554:	6013      	str	r3, [r2, #0]
 8003556:	4b73      	ldr	r3, [pc, #460]	; (8003724 <HAL_RCC_OscConfig+0x274>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4a72      	ldr	r2, [pc, #456]	; (8003724 <HAL_RCC_OscConfig+0x274>)
 800355c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003560:	6013      	str	r3, [r2, #0]
 8003562:	e00b      	b.n	800357c <HAL_RCC_OscConfig+0xcc>
 8003564:	4b6f      	ldr	r3, [pc, #444]	; (8003724 <HAL_RCC_OscConfig+0x274>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4a6e      	ldr	r2, [pc, #440]	; (8003724 <HAL_RCC_OscConfig+0x274>)
 800356a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800356e:	6013      	str	r3, [r2, #0]
 8003570:	4b6c      	ldr	r3, [pc, #432]	; (8003724 <HAL_RCC_OscConfig+0x274>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4a6b      	ldr	r2, [pc, #428]	; (8003724 <HAL_RCC_OscConfig+0x274>)
 8003576:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800357a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	2b00      	cmp	r3, #0
 8003582:	d013      	beq.n	80035ac <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003584:	f7fe fdc4 	bl	8002110 <HAL_GetTick>
 8003588:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800358a:	e008      	b.n	800359e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800358c:	f7fe fdc0 	bl	8002110 <HAL_GetTick>
 8003590:	4602      	mov	r2, r0
 8003592:	693b      	ldr	r3, [r7, #16]
 8003594:	1ad3      	subs	r3, r2, r3
 8003596:	2b64      	cmp	r3, #100	; 0x64
 8003598:	d901      	bls.n	800359e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800359a:	2303      	movs	r3, #3
 800359c:	e21f      	b.n	80039de <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800359e:	4b61      	ldr	r3, [pc, #388]	; (8003724 <HAL_RCC_OscConfig+0x274>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d0f0      	beq.n	800358c <HAL_RCC_OscConfig+0xdc>
 80035aa:	e014      	b.n	80035d6 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035ac:	f7fe fdb0 	bl	8002110 <HAL_GetTick>
 80035b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035b2:	e008      	b.n	80035c6 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80035b4:	f7fe fdac 	bl	8002110 <HAL_GetTick>
 80035b8:	4602      	mov	r2, r0
 80035ba:	693b      	ldr	r3, [r7, #16]
 80035bc:	1ad3      	subs	r3, r2, r3
 80035be:	2b64      	cmp	r3, #100	; 0x64
 80035c0:	d901      	bls.n	80035c6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80035c2:	2303      	movs	r3, #3
 80035c4:	e20b      	b.n	80039de <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035c6:	4b57      	ldr	r3, [pc, #348]	; (8003724 <HAL_RCC_OscConfig+0x274>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d1f0      	bne.n	80035b4 <HAL_RCC_OscConfig+0x104>
 80035d2:	e000      	b.n	80035d6 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f003 0302 	and.w	r3, r3, #2
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d06f      	beq.n	80036c2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80035e2:	4b50      	ldr	r3, [pc, #320]	; (8003724 <HAL_RCC_OscConfig+0x274>)
 80035e4:	689b      	ldr	r3, [r3, #8]
 80035e6:	f003 030c 	and.w	r3, r3, #12
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d017      	beq.n	800361e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80035ee:	4b4d      	ldr	r3, [pc, #308]	; (8003724 <HAL_RCC_OscConfig+0x274>)
 80035f0:	689b      	ldr	r3, [r3, #8]
 80035f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80035f6:	2b08      	cmp	r3, #8
 80035f8:	d105      	bne.n	8003606 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80035fa:	4b4a      	ldr	r3, [pc, #296]	; (8003724 <HAL_RCC_OscConfig+0x274>)
 80035fc:	685b      	ldr	r3, [r3, #4]
 80035fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003602:	2b00      	cmp	r3, #0
 8003604:	d00b      	beq.n	800361e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003606:	4b47      	ldr	r3, [pc, #284]	; (8003724 <HAL_RCC_OscConfig+0x274>)
 8003608:	689b      	ldr	r3, [r3, #8]
 800360a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800360e:	2b0c      	cmp	r3, #12
 8003610:	d11c      	bne.n	800364c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003612:	4b44      	ldr	r3, [pc, #272]	; (8003724 <HAL_RCC_OscConfig+0x274>)
 8003614:	685b      	ldr	r3, [r3, #4]
 8003616:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800361a:	2b00      	cmp	r3, #0
 800361c:	d116      	bne.n	800364c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800361e:	4b41      	ldr	r3, [pc, #260]	; (8003724 <HAL_RCC_OscConfig+0x274>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f003 0302 	and.w	r3, r3, #2
 8003626:	2b00      	cmp	r3, #0
 8003628:	d005      	beq.n	8003636 <HAL_RCC_OscConfig+0x186>
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	68db      	ldr	r3, [r3, #12]
 800362e:	2b01      	cmp	r3, #1
 8003630:	d001      	beq.n	8003636 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003632:	2301      	movs	r3, #1
 8003634:	e1d3      	b.n	80039de <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003636:	4b3b      	ldr	r3, [pc, #236]	; (8003724 <HAL_RCC_OscConfig+0x274>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	691b      	ldr	r3, [r3, #16]
 8003642:	00db      	lsls	r3, r3, #3
 8003644:	4937      	ldr	r1, [pc, #220]	; (8003724 <HAL_RCC_OscConfig+0x274>)
 8003646:	4313      	orrs	r3, r2
 8003648:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800364a:	e03a      	b.n	80036c2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	68db      	ldr	r3, [r3, #12]
 8003650:	2b00      	cmp	r3, #0
 8003652:	d020      	beq.n	8003696 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003654:	4b34      	ldr	r3, [pc, #208]	; (8003728 <HAL_RCC_OscConfig+0x278>)
 8003656:	2201      	movs	r2, #1
 8003658:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800365a:	f7fe fd59 	bl	8002110 <HAL_GetTick>
 800365e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003660:	e008      	b.n	8003674 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003662:	f7fe fd55 	bl	8002110 <HAL_GetTick>
 8003666:	4602      	mov	r2, r0
 8003668:	693b      	ldr	r3, [r7, #16]
 800366a:	1ad3      	subs	r3, r2, r3
 800366c:	2b02      	cmp	r3, #2
 800366e:	d901      	bls.n	8003674 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003670:	2303      	movs	r3, #3
 8003672:	e1b4      	b.n	80039de <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003674:	4b2b      	ldr	r3, [pc, #172]	; (8003724 <HAL_RCC_OscConfig+0x274>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f003 0302 	and.w	r3, r3, #2
 800367c:	2b00      	cmp	r3, #0
 800367e:	d0f0      	beq.n	8003662 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003680:	4b28      	ldr	r3, [pc, #160]	; (8003724 <HAL_RCC_OscConfig+0x274>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	691b      	ldr	r3, [r3, #16]
 800368c:	00db      	lsls	r3, r3, #3
 800368e:	4925      	ldr	r1, [pc, #148]	; (8003724 <HAL_RCC_OscConfig+0x274>)
 8003690:	4313      	orrs	r3, r2
 8003692:	600b      	str	r3, [r1, #0]
 8003694:	e015      	b.n	80036c2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003696:	4b24      	ldr	r3, [pc, #144]	; (8003728 <HAL_RCC_OscConfig+0x278>)
 8003698:	2200      	movs	r2, #0
 800369a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800369c:	f7fe fd38 	bl	8002110 <HAL_GetTick>
 80036a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036a2:	e008      	b.n	80036b6 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80036a4:	f7fe fd34 	bl	8002110 <HAL_GetTick>
 80036a8:	4602      	mov	r2, r0
 80036aa:	693b      	ldr	r3, [r7, #16]
 80036ac:	1ad3      	subs	r3, r2, r3
 80036ae:	2b02      	cmp	r3, #2
 80036b0:	d901      	bls.n	80036b6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80036b2:	2303      	movs	r3, #3
 80036b4:	e193      	b.n	80039de <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036b6:	4b1b      	ldr	r3, [pc, #108]	; (8003724 <HAL_RCC_OscConfig+0x274>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f003 0302 	and.w	r3, r3, #2
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d1f0      	bne.n	80036a4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f003 0308 	and.w	r3, r3, #8
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d036      	beq.n	800373c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	695b      	ldr	r3, [r3, #20]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d016      	beq.n	8003704 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80036d6:	4b15      	ldr	r3, [pc, #84]	; (800372c <HAL_RCC_OscConfig+0x27c>)
 80036d8:	2201      	movs	r2, #1
 80036da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036dc:	f7fe fd18 	bl	8002110 <HAL_GetTick>
 80036e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036e2:	e008      	b.n	80036f6 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80036e4:	f7fe fd14 	bl	8002110 <HAL_GetTick>
 80036e8:	4602      	mov	r2, r0
 80036ea:	693b      	ldr	r3, [r7, #16]
 80036ec:	1ad3      	subs	r3, r2, r3
 80036ee:	2b02      	cmp	r3, #2
 80036f0:	d901      	bls.n	80036f6 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80036f2:	2303      	movs	r3, #3
 80036f4:	e173      	b.n	80039de <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036f6:	4b0b      	ldr	r3, [pc, #44]	; (8003724 <HAL_RCC_OscConfig+0x274>)
 80036f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036fa:	f003 0302 	and.w	r3, r3, #2
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d0f0      	beq.n	80036e4 <HAL_RCC_OscConfig+0x234>
 8003702:	e01b      	b.n	800373c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003704:	4b09      	ldr	r3, [pc, #36]	; (800372c <HAL_RCC_OscConfig+0x27c>)
 8003706:	2200      	movs	r2, #0
 8003708:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800370a:	f7fe fd01 	bl	8002110 <HAL_GetTick>
 800370e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003710:	e00e      	b.n	8003730 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003712:	f7fe fcfd 	bl	8002110 <HAL_GetTick>
 8003716:	4602      	mov	r2, r0
 8003718:	693b      	ldr	r3, [r7, #16]
 800371a:	1ad3      	subs	r3, r2, r3
 800371c:	2b02      	cmp	r3, #2
 800371e:	d907      	bls.n	8003730 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003720:	2303      	movs	r3, #3
 8003722:	e15c      	b.n	80039de <HAL_RCC_OscConfig+0x52e>
 8003724:	40023800 	.word	0x40023800
 8003728:	42470000 	.word	0x42470000
 800372c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003730:	4b8a      	ldr	r3, [pc, #552]	; (800395c <HAL_RCC_OscConfig+0x4ac>)
 8003732:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003734:	f003 0302 	and.w	r3, r3, #2
 8003738:	2b00      	cmp	r3, #0
 800373a:	d1ea      	bne.n	8003712 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f003 0304 	and.w	r3, r3, #4
 8003744:	2b00      	cmp	r3, #0
 8003746:	f000 8097 	beq.w	8003878 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800374a:	2300      	movs	r3, #0
 800374c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800374e:	4b83      	ldr	r3, [pc, #524]	; (800395c <HAL_RCC_OscConfig+0x4ac>)
 8003750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003752:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003756:	2b00      	cmp	r3, #0
 8003758:	d10f      	bne.n	800377a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800375a:	2300      	movs	r3, #0
 800375c:	60bb      	str	r3, [r7, #8]
 800375e:	4b7f      	ldr	r3, [pc, #508]	; (800395c <HAL_RCC_OscConfig+0x4ac>)
 8003760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003762:	4a7e      	ldr	r2, [pc, #504]	; (800395c <HAL_RCC_OscConfig+0x4ac>)
 8003764:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003768:	6413      	str	r3, [r2, #64]	; 0x40
 800376a:	4b7c      	ldr	r3, [pc, #496]	; (800395c <HAL_RCC_OscConfig+0x4ac>)
 800376c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800376e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003772:	60bb      	str	r3, [r7, #8]
 8003774:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003776:	2301      	movs	r3, #1
 8003778:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800377a:	4b79      	ldr	r3, [pc, #484]	; (8003960 <HAL_RCC_OscConfig+0x4b0>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003782:	2b00      	cmp	r3, #0
 8003784:	d118      	bne.n	80037b8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003786:	4b76      	ldr	r3, [pc, #472]	; (8003960 <HAL_RCC_OscConfig+0x4b0>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4a75      	ldr	r2, [pc, #468]	; (8003960 <HAL_RCC_OscConfig+0x4b0>)
 800378c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003790:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003792:	f7fe fcbd 	bl	8002110 <HAL_GetTick>
 8003796:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003798:	e008      	b.n	80037ac <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800379a:	f7fe fcb9 	bl	8002110 <HAL_GetTick>
 800379e:	4602      	mov	r2, r0
 80037a0:	693b      	ldr	r3, [r7, #16]
 80037a2:	1ad3      	subs	r3, r2, r3
 80037a4:	2b02      	cmp	r3, #2
 80037a6:	d901      	bls.n	80037ac <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80037a8:	2303      	movs	r3, #3
 80037aa:	e118      	b.n	80039de <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037ac:	4b6c      	ldr	r3, [pc, #432]	; (8003960 <HAL_RCC_OscConfig+0x4b0>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d0f0      	beq.n	800379a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	689b      	ldr	r3, [r3, #8]
 80037bc:	2b01      	cmp	r3, #1
 80037be:	d106      	bne.n	80037ce <HAL_RCC_OscConfig+0x31e>
 80037c0:	4b66      	ldr	r3, [pc, #408]	; (800395c <HAL_RCC_OscConfig+0x4ac>)
 80037c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037c4:	4a65      	ldr	r2, [pc, #404]	; (800395c <HAL_RCC_OscConfig+0x4ac>)
 80037c6:	f043 0301 	orr.w	r3, r3, #1
 80037ca:	6713      	str	r3, [r2, #112]	; 0x70
 80037cc:	e01c      	b.n	8003808 <HAL_RCC_OscConfig+0x358>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	689b      	ldr	r3, [r3, #8]
 80037d2:	2b05      	cmp	r3, #5
 80037d4:	d10c      	bne.n	80037f0 <HAL_RCC_OscConfig+0x340>
 80037d6:	4b61      	ldr	r3, [pc, #388]	; (800395c <HAL_RCC_OscConfig+0x4ac>)
 80037d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037da:	4a60      	ldr	r2, [pc, #384]	; (800395c <HAL_RCC_OscConfig+0x4ac>)
 80037dc:	f043 0304 	orr.w	r3, r3, #4
 80037e0:	6713      	str	r3, [r2, #112]	; 0x70
 80037e2:	4b5e      	ldr	r3, [pc, #376]	; (800395c <HAL_RCC_OscConfig+0x4ac>)
 80037e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037e6:	4a5d      	ldr	r2, [pc, #372]	; (800395c <HAL_RCC_OscConfig+0x4ac>)
 80037e8:	f043 0301 	orr.w	r3, r3, #1
 80037ec:	6713      	str	r3, [r2, #112]	; 0x70
 80037ee:	e00b      	b.n	8003808 <HAL_RCC_OscConfig+0x358>
 80037f0:	4b5a      	ldr	r3, [pc, #360]	; (800395c <HAL_RCC_OscConfig+0x4ac>)
 80037f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037f4:	4a59      	ldr	r2, [pc, #356]	; (800395c <HAL_RCC_OscConfig+0x4ac>)
 80037f6:	f023 0301 	bic.w	r3, r3, #1
 80037fa:	6713      	str	r3, [r2, #112]	; 0x70
 80037fc:	4b57      	ldr	r3, [pc, #348]	; (800395c <HAL_RCC_OscConfig+0x4ac>)
 80037fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003800:	4a56      	ldr	r2, [pc, #344]	; (800395c <HAL_RCC_OscConfig+0x4ac>)
 8003802:	f023 0304 	bic.w	r3, r3, #4
 8003806:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	689b      	ldr	r3, [r3, #8]
 800380c:	2b00      	cmp	r3, #0
 800380e:	d015      	beq.n	800383c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003810:	f7fe fc7e 	bl	8002110 <HAL_GetTick>
 8003814:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003816:	e00a      	b.n	800382e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003818:	f7fe fc7a 	bl	8002110 <HAL_GetTick>
 800381c:	4602      	mov	r2, r0
 800381e:	693b      	ldr	r3, [r7, #16]
 8003820:	1ad3      	subs	r3, r2, r3
 8003822:	f241 3288 	movw	r2, #5000	; 0x1388
 8003826:	4293      	cmp	r3, r2
 8003828:	d901      	bls.n	800382e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800382a:	2303      	movs	r3, #3
 800382c:	e0d7      	b.n	80039de <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800382e:	4b4b      	ldr	r3, [pc, #300]	; (800395c <HAL_RCC_OscConfig+0x4ac>)
 8003830:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003832:	f003 0302 	and.w	r3, r3, #2
 8003836:	2b00      	cmp	r3, #0
 8003838:	d0ee      	beq.n	8003818 <HAL_RCC_OscConfig+0x368>
 800383a:	e014      	b.n	8003866 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800383c:	f7fe fc68 	bl	8002110 <HAL_GetTick>
 8003840:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003842:	e00a      	b.n	800385a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003844:	f7fe fc64 	bl	8002110 <HAL_GetTick>
 8003848:	4602      	mov	r2, r0
 800384a:	693b      	ldr	r3, [r7, #16]
 800384c:	1ad3      	subs	r3, r2, r3
 800384e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003852:	4293      	cmp	r3, r2
 8003854:	d901      	bls.n	800385a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003856:	2303      	movs	r3, #3
 8003858:	e0c1      	b.n	80039de <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800385a:	4b40      	ldr	r3, [pc, #256]	; (800395c <HAL_RCC_OscConfig+0x4ac>)
 800385c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800385e:	f003 0302 	and.w	r3, r3, #2
 8003862:	2b00      	cmp	r3, #0
 8003864:	d1ee      	bne.n	8003844 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003866:	7dfb      	ldrb	r3, [r7, #23]
 8003868:	2b01      	cmp	r3, #1
 800386a:	d105      	bne.n	8003878 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800386c:	4b3b      	ldr	r3, [pc, #236]	; (800395c <HAL_RCC_OscConfig+0x4ac>)
 800386e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003870:	4a3a      	ldr	r2, [pc, #232]	; (800395c <HAL_RCC_OscConfig+0x4ac>)
 8003872:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003876:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	699b      	ldr	r3, [r3, #24]
 800387c:	2b00      	cmp	r3, #0
 800387e:	f000 80ad 	beq.w	80039dc <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003882:	4b36      	ldr	r3, [pc, #216]	; (800395c <HAL_RCC_OscConfig+0x4ac>)
 8003884:	689b      	ldr	r3, [r3, #8]
 8003886:	f003 030c 	and.w	r3, r3, #12
 800388a:	2b08      	cmp	r3, #8
 800388c:	d060      	beq.n	8003950 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	699b      	ldr	r3, [r3, #24]
 8003892:	2b02      	cmp	r3, #2
 8003894:	d145      	bne.n	8003922 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003896:	4b33      	ldr	r3, [pc, #204]	; (8003964 <HAL_RCC_OscConfig+0x4b4>)
 8003898:	2200      	movs	r2, #0
 800389a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800389c:	f7fe fc38 	bl	8002110 <HAL_GetTick>
 80038a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038a2:	e008      	b.n	80038b6 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038a4:	f7fe fc34 	bl	8002110 <HAL_GetTick>
 80038a8:	4602      	mov	r2, r0
 80038aa:	693b      	ldr	r3, [r7, #16]
 80038ac:	1ad3      	subs	r3, r2, r3
 80038ae:	2b02      	cmp	r3, #2
 80038b0:	d901      	bls.n	80038b6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80038b2:	2303      	movs	r3, #3
 80038b4:	e093      	b.n	80039de <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038b6:	4b29      	ldr	r3, [pc, #164]	; (800395c <HAL_RCC_OscConfig+0x4ac>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d1f0      	bne.n	80038a4 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	69da      	ldr	r2, [r3, #28]
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6a1b      	ldr	r3, [r3, #32]
 80038ca:	431a      	orrs	r2, r3
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038d0:	019b      	lsls	r3, r3, #6
 80038d2:	431a      	orrs	r2, r3
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038d8:	085b      	lsrs	r3, r3, #1
 80038da:	3b01      	subs	r3, #1
 80038dc:	041b      	lsls	r3, r3, #16
 80038de:	431a      	orrs	r2, r3
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038e4:	061b      	lsls	r3, r3, #24
 80038e6:	431a      	orrs	r2, r3
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ec:	071b      	lsls	r3, r3, #28
 80038ee:	491b      	ldr	r1, [pc, #108]	; (800395c <HAL_RCC_OscConfig+0x4ac>)
 80038f0:	4313      	orrs	r3, r2
 80038f2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80038f4:	4b1b      	ldr	r3, [pc, #108]	; (8003964 <HAL_RCC_OscConfig+0x4b4>)
 80038f6:	2201      	movs	r2, #1
 80038f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038fa:	f7fe fc09 	bl	8002110 <HAL_GetTick>
 80038fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003900:	e008      	b.n	8003914 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003902:	f7fe fc05 	bl	8002110 <HAL_GetTick>
 8003906:	4602      	mov	r2, r0
 8003908:	693b      	ldr	r3, [r7, #16]
 800390a:	1ad3      	subs	r3, r2, r3
 800390c:	2b02      	cmp	r3, #2
 800390e:	d901      	bls.n	8003914 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003910:	2303      	movs	r3, #3
 8003912:	e064      	b.n	80039de <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003914:	4b11      	ldr	r3, [pc, #68]	; (800395c <HAL_RCC_OscConfig+0x4ac>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800391c:	2b00      	cmp	r3, #0
 800391e:	d0f0      	beq.n	8003902 <HAL_RCC_OscConfig+0x452>
 8003920:	e05c      	b.n	80039dc <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003922:	4b10      	ldr	r3, [pc, #64]	; (8003964 <HAL_RCC_OscConfig+0x4b4>)
 8003924:	2200      	movs	r2, #0
 8003926:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003928:	f7fe fbf2 	bl	8002110 <HAL_GetTick>
 800392c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800392e:	e008      	b.n	8003942 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003930:	f7fe fbee 	bl	8002110 <HAL_GetTick>
 8003934:	4602      	mov	r2, r0
 8003936:	693b      	ldr	r3, [r7, #16]
 8003938:	1ad3      	subs	r3, r2, r3
 800393a:	2b02      	cmp	r3, #2
 800393c:	d901      	bls.n	8003942 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800393e:	2303      	movs	r3, #3
 8003940:	e04d      	b.n	80039de <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003942:	4b06      	ldr	r3, [pc, #24]	; (800395c <HAL_RCC_OscConfig+0x4ac>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800394a:	2b00      	cmp	r3, #0
 800394c:	d1f0      	bne.n	8003930 <HAL_RCC_OscConfig+0x480>
 800394e:	e045      	b.n	80039dc <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	699b      	ldr	r3, [r3, #24]
 8003954:	2b01      	cmp	r3, #1
 8003956:	d107      	bne.n	8003968 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003958:	2301      	movs	r3, #1
 800395a:	e040      	b.n	80039de <HAL_RCC_OscConfig+0x52e>
 800395c:	40023800 	.word	0x40023800
 8003960:	40007000 	.word	0x40007000
 8003964:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003968:	4b1f      	ldr	r3, [pc, #124]	; (80039e8 <HAL_RCC_OscConfig+0x538>)
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	699b      	ldr	r3, [r3, #24]
 8003972:	2b01      	cmp	r3, #1
 8003974:	d030      	beq.n	80039d8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003980:	429a      	cmp	r2, r3
 8003982:	d129      	bne.n	80039d8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800398e:	429a      	cmp	r2, r3
 8003990:	d122      	bne.n	80039d8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003992:	68fa      	ldr	r2, [r7, #12]
 8003994:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003998:	4013      	ands	r3, r2
 800399a:	687a      	ldr	r2, [r7, #4]
 800399c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800399e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80039a0:	4293      	cmp	r3, r2
 80039a2:	d119      	bne.n	80039d8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039ae:	085b      	lsrs	r3, r3, #1
 80039b0:	3b01      	subs	r3, #1
 80039b2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80039b4:	429a      	cmp	r2, r3
 80039b6:	d10f      	bne.n	80039d8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039c2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80039c4:	429a      	cmp	r2, r3
 80039c6:	d107      	bne.n	80039d8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039d2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80039d4:	429a      	cmp	r2, r3
 80039d6:	d001      	beq.n	80039dc <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80039d8:	2301      	movs	r3, #1
 80039da:	e000      	b.n	80039de <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80039dc:	2300      	movs	r3, #0
}
 80039de:	4618      	mov	r0, r3
 80039e0:	3718      	adds	r7, #24
 80039e2:	46bd      	mov	sp, r7
 80039e4:	bd80      	pop	{r7, pc}
 80039e6:	bf00      	nop
 80039e8:	40023800 	.word	0x40023800

080039ec <__libc_init_array>:
 80039ec:	b570      	push	{r4, r5, r6, lr}
 80039ee:	4d0d      	ldr	r5, [pc, #52]	; (8003a24 <__libc_init_array+0x38>)
 80039f0:	4c0d      	ldr	r4, [pc, #52]	; (8003a28 <__libc_init_array+0x3c>)
 80039f2:	1b64      	subs	r4, r4, r5
 80039f4:	10a4      	asrs	r4, r4, #2
 80039f6:	2600      	movs	r6, #0
 80039f8:	42a6      	cmp	r6, r4
 80039fa:	d109      	bne.n	8003a10 <__libc_init_array+0x24>
 80039fc:	4d0b      	ldr	r5, [pc, #44]	; (8003a2c <__libc_init_array+0x40>)
 80039fe:	4c0c      	ldr	r4, [pc, #48]	; (8003a30 <__libc_init_array+0x44>)
 8003a00:	f000 f820 	bl	8003a44 <_init>
 8003a04:	1b64      	subs	r4, r4, r5
 8003a06:	10a4      	asrs	r4, r4, #2
 8003a08:	2600      	movs	r6, #0
 8003a0a:	42a6      	cmp	r6, r4
 8003a0c:	d105      	bne.n	8003a1a <__libc_init_array+0x2e>
 8003a0e:	bd70      	pop	{r4, r5, r6, pc}
 8003a10:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a14:	4798      	blx	r3
 8003a16:	3601      	adds	r6, #1
 8003a18:	e7ee      	b.n	80039f8 <__libc_init_array+0xc>
 8003a1a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a1e:	4798      	blx	r3
 8003a20:	3601      	adds	r6, #1
 8003a22:	e7f2      	b.n	8003a0a <__libc_init_array+0x1e>
 8003a24:	08003a74 	.word	0x08003a74
 8003a28:	08003a74 	.word	0x08003a74
 8003a2c:	08003a74 	.word	0x08003a74
 8003a30:	08003a78 	.word	0x08003a78

08003a34 <memset>:
 8003a34:	4402      	add	r2, r0
 8003a36:	4603      	mov	r3, r0
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d100      	bne.n	8003a3e <memset+0xa>
 8003a3c:	4770      	bx	lr
 8003a3e:	f803 1b01 	strb.w	r1, [r3], #1
 8003a42:	e7f9      	b.n	8003a38 <memset+0x4>

08003a44 <_init>:
 8003a44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a46:	bf00      	nop
 8003a48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a4a:	bc08      	pop	{r3}
 8003a4c:	469e      	mov	lr, r3
 8003a4e:	4770      	bx	lr

08003a50 <_fini>:
 8003a50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a52:	bf00      	nop
 8003a54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a56:	bc08      	pop	{r3}
 8003a58:	469e      	mov	lr, r3
 8003a5a:	4770      	bx	lr
